
GraviTE_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000205c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000432c  08020778  08020778  00021778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024aa4  08024aa4  000261f8  2**0
                  CONTENTS
  4 .ARM          00000008  08024aa4  08024aa4  00025aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024aac  08024aac  000261f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024aac  08024aac  00025aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024ab0  08024ab0  00025ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08024ab4  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000261f8  2**0
                  CONTENTS
 10 .bss          0000fd70  200001f8  200001f8  000261f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ff68  2000ff68  000261f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000261f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042ed7  00000000  00000000  00026228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009f5f  00000000  00000000  000690ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003098  00000000  00000000  00073060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026d0  00000000  00000000  000760f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003bca6  00000000  00000000  000787c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004abdb  00000000  00000000  000b446e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001158c6  00000000  00000000  000ff049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0021490f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000da74  00000000  00000000  00214954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  002223c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802075c 	.word	0x0802075c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0802075c 	.word	0x0802075c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <MX_ADC1_Init+0x9c>)
 8000f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000f9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ff8 <MX_ADC1_Init+0xa0>)
 8000f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000fba:	f002 f87f 	bl	80030bc <HAL_ADC_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f001 f8ce 	bl	8002164 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_ADC1_Init+0xa4>)
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_ADC1_Init+0x98>)
 8000fda:	f002 f9e1 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f001 f8be 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000214 	.word	0x20000214
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	0f000001 	.word	0x0f000001
 8000ffc:	10000012 	.word	0x10000012

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <HAL_ADC_MspInit+0x8c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12f      	bne.n	8001082 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <HAL_ADC_MspInit+0x90>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	4a19      	ldr	r2, [pc, #100]	@ (8001090 <HAL_ADC_MspInit+0x90>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001030:	6453      	str	r3, [r2, #68]	@ 0x44
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_ADC_MspInit+0x90>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_ADC_MspInit+0x90>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <HAL_ADC_MspInit+0x90>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <HAL_ADC_MspInit+0x90>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC_12V_Pin|ADC_5V_Pin;
 800105a:	230c      	movs	r3, #12
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <HAL_ADC_MspInit+0x94>)
 800106e:	f004 fb37 	bl	80056e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	2012      	movs	r0, #18
 8001078:	f002 fc82 	bl	8003980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800107c:	2012      	movs	r0, #18
 800107e:	f002 fc9b 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	@ 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020800 	.word	0x40020800

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_DMA_Init+0x5c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <MX_DMA_Init+0x5c>)
 80010a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_DMA_Init+0x5c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	200b      	movs	r0, #11
 80010c0:	f002 fc5e 	bl	8003980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010c4:	200b      	movs	r0, #11
 80010c6:	f002 fc77 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	200c      	movs	r0, #12
 80010d0:	f002 fc56 	bl	8003980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010d4:	200c      	movs	r0, #12
 80010d6:	f002 fc6f 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	2011      	movs	r0, #17
 80010e0:	f002 fc4e 	bl	8003980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010e4:	2011      	movs	r0, #17
 80010e6:	f002 fc67 	bl	80039b8 <HAL_NVIC_EnableIRQ>

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of I2C1_Semaphore */
  I2C1_SemaphoreHandle = osSemaphoreNew(1, 1, &I2C1_Semaphore_attributes);
 80010fc:	4a2c      	ldr	r2, [pc, #176]	@ (80011b0 <MX_FREERTOS_Init+0xb8>)
 80010fe:	2101      	movs	r1, #1
 8001100:	2001      	movs	r0, #1
 8001102:	f00a ff75 	bl	800bff0 <osSemaphoreNew>
 8001106:	4603      	mov	r3, r0
 8001108:	4a2a      	ldr	r2, [pc, #168]	@ (80011b4 <MX_FREERTOS_Init+0xbc>)
 800110a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of TempQueue */
  TempQueueHandle = osMessageQueueNew (16, sizeof(bool), &TempQueue_attributes);
 800110c:	4a2a      	ldr	r2, [pc, #168]	@ (80011b8 <MX_FREERTOS_Init+0xc0>)
 800110e:	2101      	movs	r1, #1
 8001110:	2010      	movs	r0, #16
 8001112:	f00b f8b1 	bl	800c278 <osMessageQueueNew>
 8001116:	4603      	mov	r3, r0
 8001118:	4a28      	ldr	r2, [pc, #160]	@ (80011bc <MX_FREERTOS_Init+0xc4>)
 800111a:	6013      	str	r3, [r2, #0]

  /* creation of CommToActQueue */
  CommToActQueueHandle = osMessageQueueNew (4, sizeof(uint8_t), &CommToActQueue_attributes);
 800111c:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <MX_FREERTOS_Init+0xc8>)
 800111e:	2101      	movs	r1, #1
 8001120:	2004      	movs	r0, #4
 8001122:	f00b f8a9 	bl	800c278 <osMessageQueueNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a26      	ldr	r2, [pc, #152]	@ (80011c4 <MX_FREERTOS_Init+0xcc>)
 800112a:	6013      	str	r3, [r2, #0]

  /* creation of TelemetryToCommQueue */
  TelemetryToCommQueueHandle = osMessageQueueNew (2, sizeof(TELEMETRY_DATA), &TelemetryToCommQueue_attributes);
 800112c:	4a26      	ldr	r2, [pc, #152]	@ (80011c8 <MX_FREERTOS_Init+0xd0>)
 800112e:	2122      	movs	r1, #34	@ 0x22
 8001130:	2002      	movs	r0, #2
 8001132:	f00b f8a1 	bl	800c278 <osMessageQueueNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a24      	ldr	r2, [pc, #144]	@ (80011cc <MX_FREERTOS_Init+0xd4>)
 800113a:	6013      	str	r3, [r2, #0]

  /* creation of RxUartBuff */
  RxUartBuffHandle = osMessageQueueNew (3, 5, &RxUartBuff_attributes);
 800113c:	4a24      	ldr	r2, [pc, #144]	@ (80011d0 <MX_FREERTOS_Init+0xd8>)
 800113e:	2105      	movs	r1, #5
 8001140:	2003      	movs	r0, #3
 8001142:	f00b f899 	bl	800c278 <osMessageQueueNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a22      	ldr	r2, [pc, #136]	@ (80011d4 <MX_FREERTOS_Init+0xdc>)
 800114a:	6013      	str	r3, [r2, #0]

  /* creation of CommToTempQueue */
  CommToTempQueueHandle = osMessageQueueNew (2, sizeof(float), &CommToTempQueue_attributes);
 800114c:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <MX_FREERTOS_Init+0xe0>)
 800114e:	2104      	movs	r1, #4
 8001150:	2002      	movs	r0, #2
 8001152:	f00b f891 	bl	800c278 <osMessageQueueNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a20      	ldr	r2, [pc, #128]	@ (80011dc <MX_FREERTOS_Init+0xe4>)
 800115a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendYAMCS */
  sendYAMCSHandle = osThreadNew(SendYAMCS, NULL, &sendYAMCS_attributes);
 800115c:	4a20      	ldr	r2, [pc, #128]	@ (80011e0 <MX_FREERTOS_Init+0xe8>)
 800115e:	2100      	movs	r1, #0
 8001160:	4820      	ldr	r0, [pc, #128]	@ (80011e4 <MX_FREERTOS_Init+0xec>)
 8001162:	f00a fd8a 	bl	800bc7a <osThreadNew>
 8001166:	4603      	mov	r3, r0
 8001168:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <MX_FREERTOS_Init+0xf0>)
 800116a:	6013      	str	r3, [r2, #0]

  /* creation of receiveYAMCS */
  receiveYAMCSHandle = osThreadNew(ReceiveYAMCS, NULL, &receiveYAMCS_attributes);
 800116c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ec <MX_FREERTOS_Init+0xf4>)
 800116e:	2100      	movs	r1, #0
 8001170:	481f      	ldr	r0, [pc, #124]	@ (80011f0 <MX_FREERTOS_Init+0xf8>)
 8001172:	f00a fd82 	bl	800bc7a <osThreadNew>
 8001176:	4603      	mov	r3, r0
 8001178:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <MX_FREERTOS_Init+0xfc>)
 800117a:	6013      	str	r3, [r2, #0]

  /* creation of tempControl */
  tempControlHandle = osThreadNew(TempControl, NULL, &tempControl_attributes);
 800117c:	4a1e      	ldr	r2, [pc, #120]	@ (80011f8 <MX_FREERTOS_Init+0x100>)
 800117e:	2100      	movs	r1, #0
 8001180:	481e      	ldr	r0, [pc, #120]	@ (80011fc <MX_FREERTOS_Init+0x104>)
 8001182:	f00a fd7a 	bl	800bc7a <osThreadNew>
 8001186:	4603      	mov	r3, r0
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <MX_FREERTOS_Init+0x108>)
 800118a:	6013      	str	r3, [r2, #0]

  /* creation of telemetrySafety */
  telemetrySafetyHandle = osThreadNew(TelemetrySafetyControl, NULL, &telemetrySafety_attributes);
 800118c:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <MX_FREERTOS_Init+0x10c>)
 800118e:	2100      	movs	r1, #0
 8001190:	481d      	ldr	r0, [pc, #116]	@ (8001208 <MX_FREERTOS_Init+0x110>)
 8001192:	f00a fd72 	bl	800bc7a <osThreadNew>
 8001196:	4603      	mov	r3, r0
 8001198:	4a1c      	ldr	r2, [pc, #112]	@ (800120c <MX_FREERTOS_Init+0x114>)
 800119a:	6013      	str	r3, [r2, #0]

  /* creation of comm_control */
  comm_controlHandle = osThreadNew(CommControl, NULL, &comm_control_attributes);
 800119c:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <MX_FREERTOS_Init+0x118>)
 800119e:	2100      	movs	r1, #0
 80011a0:	481c      	ldr	r0, [pc, #112]	@ (8001214 <MX_FREERTOS_Init+0x11c>)
 80011a2:	f00a fd6a 	bl	800bc7a <osThreadNew>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001218 <MX_FREERTOS_Init+0x120>)
 80011aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	08024518 	.word	0x08024518
 80011b4:	200002cc 	.word	0x200002cc
 80011b8:	080244a0 	.word	0x080244a0
 80011bc:	200002b8 	.word	0x200002b8
 80011c0:	080244b8 	.word	0x080244b8
 80011c4:	200002bc 	.word	0x200002bc
 80011c8:	080244d0 	.word	0x080244d0
 80011cc:	200002c0 	.word	0x200002c0
 80011d0:	080244e8 	.word	0x080244e8
 80011d4:	200002c4 	.word	0x200002c4
 80011d8:	08024500 	.word	0x08024500
 80011dc:	200002c8 	.word	0x200002c8
 80011e0:	080243ec 	.word	0x080243ec
 80011e4:	0800121d 	.word	0x0800121d
 80011e8:	200002a4 	.word	0x200002a4
 80011ec:	08024410 	.word	0x08024410
 80011f0:	08001319 	.word	0x08001319
 80011f4:	200002a8 	.word	0x200002a8
 80011f8:	08024434 	.word	0x08024434
 80011fc:	08001325 	.word	0x08001325
 8001200:	200002ac 	.word	0x200002ac
 8001204:	08024458 	.word	0x08024458
 8001208:	08001389 	.word	0x08001389
 800120c:	200002b0 	.word	0x200002b0
 8001210:	0802447c 	.word	0x0802447c
 8001214:	08001415 	.word	0x08001415
 8001218:	200002b4 	.word	0x200002b4

0800121c <SendYAMCS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SendYAMCS */
void SendYAMCS(void *argument)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b097      	sub	sp, #92	@ 0x5c
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001224:	f009 fe68 	bl	800aef8 <MX_LWIP_Init>

	int sock;
	struct sockaddr_in dest_addr;

	//tworzenie socketu
	sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
 8001228:	2211      	movs	r2, #17
 800122a:	2102      	movs	r1, #2
 800122c:	2002      	movs	r0, #2
 800122e:	f010 f9e5 	bl	80115fc <lwip_socket>
 8001232:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (sock < 0) {
 8001234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001236:	2b00      	cmp	r3, #0
 8001238:	da03      	bge.n	8001242 <SendYAMCS+0x26>
		printf("Failed to create socket\n");
 800123a:	4831      	ldr	r0, [pc, #196]	@ (8001300 <SendYAMCS+0xe4>)
 800123c:	f01d f8fa 	bl	801e434 <puts>
		return;
 8001240:	e05b      	b.n	80012fa <SendYAMCS+0xde>
	}

	//konfiguracja adresu do ktorego wysylamy
	memset(&dest_addr, 0, sizeof(dest_addr));
 8001242:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001246:	2210      	movs	r2, #16
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f01d fa1c 	bl	801e688 <memset>
	dest_addr.sin_family = AF_INET;
 8001250:	2302      	movs	r3, #2
 8001252:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	dest_addr.sin_port = htons(TM_PORT);
 8001256:	f242 701f 	movw	r0, #10015	@ 0x271f
 800125a:	f010 fd73 	bl	8011d44 <lwip_htons>
 800125e:	4603      	mov	r3, r0
 8001260:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	dest_addr.sin_addr.s_addr = inet_addr("192.168.8.101");
 8001262:	4828      	ldr	r0, [pc, #160]	@ (8001304 <SendYAMCS+0xe8>)
 8001264:	f01b f91d 	bl	801c4a2 <ipaddr_addr>
 8001268:	4603      	mov	r3, r0
 800126a:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Infinite loop */
  for(;;)
  {
	  	if (udp_yamcs_enabled == true){  //
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <SendYAMCS+0xec>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d03d      	beq.n	80012f0 <SendYAMCS+0xd4>

	  		uint8_t packet[TM_PACKET_SIZE];

	  		//example CCSDS header (only for tests)
	  		uint8_t header[6] = {0x39, 0xA5, 0xC0, 0x00, 0x00, 0x0A};
 8001274:	4a25      	ldr	r2, [pc, #148]	@ (800130c <SendYAMCS+0xf0>)
 8001276:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800127a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	8019      	strh	r1, [r3, #0]

	  		memcpy(packet, header, 6);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800128c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001290:	6018      	str	r0, [r3, #0]
 8001292:	3304      	adds	r3, #4
 8001294:	8019      	strh	r1, [r3, #0]
	  		memcpy(packet + 6, &rx_tele, sizeof(TELEMETRY_DATA));
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	3306      	adds	r3, #6
 800129c:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <SendYAMCS+0xf4>)
 800129e:	4614      	mov	r4, r2
 80012a0:	469c      	mov	ip, r3
 80012a2:	f104 0e20 	add.w	lr, r4, #32
 80012a6:	4665      	mov	r5, ip
 80012a8:	4626      	mov	r6, r4
 80012aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012ac:	6028      	str	r0, [r5, #0]
 80012ae:	6069      	str	r1, [r5, #4]
 80012b0:	60aa      	str	r2, [r5, #8]
 80012b2:	60eb      	str	r3, [r5, #12]
 80012b4:	3410      	adds	r4, #16
 80012b6:	f10c 0c10 	add.w	ip, ip, #16
 80012ba:	4574      	cmp	r4, lr
 80012bc:	d1f3      	bne.n	80012a6 <SendYAMCS+0x8a>
 80012be:	4662      	mov	r2, ip
 80012c0:	4623      	mov	r3, r4
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	8013      	strh	r3, [r2, #0]

	  		if (sendto(sock, packet, sizeof(packet), 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr)) < 0) {
 80012c6:	f107 010c 	add.w	r1, r7, #12
 80012ca:	2310      	movs	r3, #16
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2228      	movs	r2, #40	@ 0x28
 80012d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80012da:	f010 f8dd 	bl	8011498 <lwip_sendto>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da02      	bge.n	80012ea <SendYAMCS+0xce>
	  			printf("Failed to send packet\n");
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <SendYAMCS+0xf8>)
 80012e6:	f01d f8a5 	bl	801e434 <puts>
	  		}
	  		udp_yamcs_enabled = false;
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <SendYAMCS+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
	  	}
	    osDelay(500);
 80012f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012f4:	f00a fd53 	bl	800bd9e <osDelay>
	  	if (udp_yamcs_enabled == true){  //
 80012f8:	e7b8      	b.n	800126c <SendYAMCS+0x50>
  }
  /* USER CODE END SendYAMCS */
}
 80012fa:	3754      	adds	r7, #84	@ 0x54
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	08020820 	.word	0x08020820
 8001304:	08020838 	.word	0x08020838
 8001308:	2000027e 	.word	0x2000027e
 800130c:	08020860 	.word	0x08020860
 8001310:	2000025c 	.word	0x2000025c
 8001314:	08020848 	.word	0x08020848

08001318 <ReceiveYAMCS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReceiveYAMCS */
void ReceiveYAMCS(void *argument)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReceiveYAMCS */
  /* Infinite loop */
  for(;;)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <ReceiveYAMCS+0x8>

08001324 <TempControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TempControl */
void TempControl(void *argument)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af02      	add	r7, sp, #8
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TempControl */
  MCP9808_Init(&tempSensor, 0x00, &hi2c1, I2C1_SemaphoreHandle);
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <TempControl+0x54>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a12      	ldr	r2, [pc, #72]	@ (800137c <TempControl+0x58>)
 8001332:	2100      	movs	r1, #0
 8001334:	4812      	ldr	r0, [pc, #72]	@ (8001380 <TempControl+0x5c>)
 8001336:	f000 ff1b 	bl	8002170 <MCP9808_Init>
  MCP9808_Configure(&tempSensor, MCP9808_HYST_1_5, MCP9808_RESOLUTION_0_0625, 40, MCP9808_tSIGN_POSITIVE);
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2328      	movs	r3, #40	@ 0x28
 8001340:	2203      	movs	r2, #3
 8001342:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001346:	480e      	ldr	r0, [pc, #56]	@ (8001380 <TempControl+0x5c>)
 8001348:	f000 ff58 	bl	80021fc <MCP9808_Configure>
  MCP9808_Enable(&tempSensor);
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <TempControl+0x5c>)
 800134e:	f000 ff42 	bl	80021d6 <MCP9808_Enable>
  /* Infinite loop */
  for(;;)
  {
    MCP9808_GetTemperature(&tempSensor);
 8001352:	480b      	ldr	r0, [pc, #44]	@ (8001380 <TempControl+0x5c>)
 8001354:	f000 ff80 	bl	8002258 <MCP9808_GetTemperature>
    printf("Test temperature: %.2f\n", tempSensor.tAmbient);
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <TempControl+0x5c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f903 	bl	8000568 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <TempControl+0x60>)
 8001368:	f01c fffc 	bl	801e364 <iprintf>
    osDelay(1000);
 800136c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001370:	f00a fd15 	bl	800bd9e <osDelay>
    MCP9808_GetTemperature(&tempSensor);
 8001374:	bf00      	nop
 8001376:	e7ec      	b.n	8001352 <TempControl+0x2e>
 8001378:	200002cc 	.word	0x200002cc
 800137c:	20000320 	.word	0x20000320
 8001380:	20000290 	.word	0x20000290
 8001384:	08020868 	.word	0x08020868

08001388 <TelemetrySafetyControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TelemetrySafetyControl */
void TelemetrySafetyControl(void *argument)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  TELEMETRY_DATA dataToSend;
  for(;;)
  {
    //zbieranie danych telemetrycznych (na razie wpisane na sztywno)
	  dataToSend.heater1Temp = 12.12;
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <TelemetrySafetyControl+0x6c>)
 8001392:	f8c7 300d 	str.w	r3, [r7, #13]
	  dataToSend.heater2Temp = 30.8;
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <TelemetrySafetyControl+0x70>)
 8001398:	f8c7 3011 	str.w	r3, [r7, #17]
	  dataToSend.incubationStage = 2;
 800139c:	2302      	movs	r3, #2
 800139e:	733b      	strb	r3, [r7, #12]
	  dataToSend.pump1 = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	77fb      	strb	r3, [r7, #31]
	  dataToSend.pump2 = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3020 	strb.w	r3, [r7, #32]
	  dataToSend.resetCounter = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  dataToSend.supplyVoltage12 = 11.98;
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <TelemetrySafetyControl+0x74>)
 80013b2:	f8c7 3026 	str.w	r3, [r7, #38]	@ 0x26
	  dataToSend.supplyVoltage5 = 4.95;
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <TelemetrySafetyControl+0x78>)
 80013b8:	f8c7 302a 	str.w	r3, [r7, #42]	@ 0x2a
	  dataToSend.valve1_8 = 0b01110110;
 80013bc:	2376      	movs	r3, #118	@ 0x76
 80013be:	777b      	strb	r3, [r7, #29]
	  dataToSend.valve9_16 = 0b10100110;
 80013c0:	23a6      	movs	r3, #166	@ 0xa6
 80013c2:	77bb      	strb	r3, [r7, #30]
	  dataToSend.valveDriver1Current = 2.345;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <TelemetrySafetyControl+0x7c>)
 80013c6:	f8c7 3015 	str.w	r3, [r7, #21]
	  dataToSend.valveDriver2Current = 3.234;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <TelemetrySafetyControl+0x80>)
 80013cc:	f8c7 3019 	str.w	r3, [r7, #25]
	  dataToSend.uptime = 40.88;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <TelemetrySafetyControl+0x84>)
 80013d2:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21

	  //wysylanie danych bufora
	  osMessageQueuePut(TelemetryToCommQueueHandle, &dataToSend, 0, 0);
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <TelemetrySafetyControl+0x88>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	f107 010c 	add.w	r1, r7, #12
 80013de:	2300      	movs	r3, #0
 80013e0:	2200      	movs	r2, #0
 80013e2:	f00a ffbd 	bl	800c360 <osMessageQueuePut>

    osDelay(4000);
 80013e6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80013ea:	f00a fcd8 	bl	800bd9e <osDelay>
	  dataToSend.heater1Temp = 12.12;
 80013ee:	bf00      	nop
 80013f0:	e7ce      	b.n	8001390 <TelemetrySafetyControl+0x8>
 80013f2:	bf00      	nop
 80013f4:	4141eb85 	.word	0x4141eb85
 80013f8:	41f66666 	.word	0x41f66666
 80013fc:	413fae14 	.word	0x413fae14
 8001400:	409e6666 	.word	0x409e6666
 8001404:	4016147b 	.word	0x4016147b
 8001408:	404ef9db 	.word	0x404ef9db
 800140c:	4223851f 	.word	0x4223851f
 8001410:	200002c0 	.word	0x200002c0

08001414 <CommControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommControl */
void CommControl(void *argument)
{
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001418:	b0aa      	sub	sp, #168	@ 0xa8
 800141a:	af06      	add	r7, sp, #24
 800141c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommControl */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*)rx_uart_buffer, sizeof(rx_uart_buffer));
 800141e:	220f      	movs	r2, #15
 8001420:	494c      	ldr	r1, [pc, #304]	@ (8001554 <CommControl+0x140>)
 8001422:	484d      	ldr	r0, [pc, #308]	@ (8001558 <CommControl+0x144>)
 8001424:	f008 fc25 	bl	8009c72 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001428:	4b4c      	ldr	r3, [pc, #304]	@ (800155c <CommControl+0x148>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <CommControl+0x148>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
     //odbiór danych UART - sprawdzamy kolejke czy przyszly jakies dane
	  osStatus_t queue_status_1 = osMessageQueueGet(RxUartBuffHandle, &rx_buff, NULL, 0);
 8001438:	4b49      	ldr	r3, [pc, #292]	@ (8001560 <CommControl+0x14c>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001440:	2300      	movs	r3, #0
 8001442:	2200      	movs	r2, #0
 8001444:	f00a ffec 	bl	800c420 <osMessageQueueGet>
 8001448:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	  if (queue_status_1 == osOK){
 800144c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d135      	bne.n	80014c0 <CommControl+0xac>
		  char rx_command_type = rx_buff[0];
 8001454:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001458:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		  char actual_data[4];
		  memcpy(actual_data, rx_buff + 1, 4);
 800145c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001460:	3301      	adds	r3, #1
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60bb      	str	r3, [r7, #8]

		  switch (rx_command_type){
 8001466:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800146a:	2b31      	cmp	r3, #49	@ 0x31
 800146c:	d002      	beq.n	8001474 <CommControl+0x60>
 800146e:	2b32      	cmp	r3, #50	@ 0x32
 8001470:	d014      	beq.n	800149c <CommControl+0x88>
 8001472:	e025      	b.n	80014c0 <CommControl+0xac>

		  	  //wysyłamy dane do act_control
		  	  case '1':
		  		  if (actCommandConversion(rx_buff, &act_data) == 1){
 8001474:	f107 0277 	add.w	r2, r7, #119	@ 0x77
 8001478:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f8e8 	bl	8001654 <actCommandConversion>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	d119      	bne.n	80014be <CommControl+0xaa>
		  			  osMessageQueuePut(CommToActQueueHandle, &act_data, 0, 0);
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <CommControl+0x150>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	f107 0177 	add.w	r1, r7, #119	@ 0x77
 8001492:	2300      	movs	r3, #0
 8001494:	2200      	movs	r2, #0
 8001496:	f00a ff63 	bl	800c360 <osMessageQueuePut>
		  		  }
		  		  break;
 800149a:	e010      	b.n	80014be <CommControl+0xaa>

		  	  //wysyłamy dane do temp_control
		  	  case '2':
		  		  tempCommandConversion(rx_buff, &temp_data);
 800149c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80014a0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f962 	bl	8001770 <tempCommandConversion>
		  		  osMessageQueuePut(CommToTempQueueHandle, &temp_data, 0, 0);
 80014ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <CommControl+0x154>)
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80014b4:	2300      	movs	r3, #0
 80014b6:	2200      	movs	r2, #0
 80014b8:	f00a ff52 	bl	800c360 <osMessageQueuePut>
		  		  break;
 80014bc:	e000      	b.n	80014c0 <CommControl+0xac>
		  		  break;
 80014be:	bf00      	nop
	  }



	//odbieramy dane telemetryczne
	osStatus_t queue_status_2 = osMessageQueueGet(TelemetryToCommQueueHandle, &rx_tele, NULL, 0);
 80014c0:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <CommControl+0x158>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	2200      	movs	r2, #0
 80014c8:	4929      	ldr	r1, [pc, #164]	@ (8001570 <CommControl+0x15c>)
 80014ca:	f00a ffa9 	bl	800c420 <osMessageQueueGet>
 80014ce:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	if (queue_status_2 == osOK){
 80014d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d138      	bne.n	800154c <CommControl+0x138>
		udp_yamcs_enabled = true;
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <CommControl+0x160>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
		//obsługa danych z kolekji oraz zamiana na odpowiedni format
		int len = sprintf(tx_buff, "incub: %d\nheat1: %.2f\nheat2: %.2f\npump1: %d\npump2: %d\n", rx_tele.incubationStage, // @suppress("Float formatting support")
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <CommControl+0x15c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4698      	mov	r8, r3
				rx_tele.heater1Temp, rx_tele.heater2Temp, (uint8_t)rx_tele.pump1, (uint8_t)rx_tele.pump2);
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <CommControl+0x15c>)
 80014e8:	f8d3 3001 	ldr.w	r3, [r3, #1]
		int len = sprintf(tx_buff, "incub: %d\nheat1: %.2f\nheat2: %.2f\npump1: %d\npump2: %d\n", rx_tele.incubationStage, // @suppress("Float formatting support")
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f83b 	bl	8000568 <__aeabi_f2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
				rx_tele.heater1Temp, rx_tele.heater2Temp, (uint8_t)rx_tele.pump1, (uint8_t)rx_tele.pump2);
 80014f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <CommControl+0x15c>)
 80014f8:	f8d3 3005 	ldr.w	r3, [r3, #5]
		int len = sprintf(tx_buff, "incub: %d\nheat1: %.2f\nheat2: %.2f\npump1: %d\npump2: %d\n", rx_tele.incubationStage, // @suppress("Float formatting support")
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f833 	bl	8000568 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
				rx_tele.heater1Temp, rx_tele.heater2Temp, (uint8_t)rx_tele.pump1, (uint8_t)rx_tele.pump2);
 8001506:	491a      	ldr	r1, [pc, #104]	@ (8001570 <CommControl+0x15c>)
 8001508:	7cc9      	ldrb	r1, [r1, #19]
		int len = sprintf(tx_buff, "incub: %d\nheat1: %.2f\nheat2: %.2f\npump1: %d\npump2: %d\n", rx_tele.incubationStage, // @suppress("Float formatting support")
 800150a:	460e      	mov	r6, r1
				rx_tele.heater1Temp, rx_tele.heater2Temp, (uint8_t)rx_tele.pump1, (uint8_t)rx_tele.pump2);
 800150c:	4918      	ldr	r1, [pc, #96]	@ (8001570 <CommControl+0x15c>)
 800150e:	7d09      	ldrb	r1, [r1, #20]
		int len = sprintf(tx_buff, "incub: %d\nheat1: %.2f\nheat2: %.2f\npump1: %d\npump2: %d\n", rx_tele.incubationStage, // @suppress("Float formatting support")
 8001510:	f107 000c 	add.w	r0, r7, #12
 8001514:	9105      	str	r1, [sp, #20]
 8001516:	9604      	str	r6, [sp, #16]
 8001518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800151c:	e9cd 4500 	strd	r4, r5, [sp]
 8001520:	4642      	mov	r2, r8
 8001522:	4915      	ldr	r1, [pc, #84]	@ (8001578 <CommControl+0x164>)
 8001524:	f01c ff8e 	bl	801e444 <siprintf>
 8001528:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

		//WYSYŁAMY DANE PRZEZ UART
		if (HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, len, HAL_MAX_DELAY) != HAL_OK)
 800152c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001530:	b29a      	uxth	r2, r3
 8001532:	f107 010c 	add.w	r1, r7, #12
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153a:	4807      	ldr	r0, [pc, #28]	@ (8001558 <CommControl+0x144>)
 800153c:	f008 fb0e 	bl	8009b5c <HAL_UART_Transmit>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <CommControl+0x138>
		    {
		        printf("Uart transmit error");
 8001546:	480d      	ldr	r0, [pc, #52]	@ (800157c <CommControl+0x168>)
 8001548:	f01c ff0c 	bl	801e364 <iprintf>
		    }

	}
	osDelay(100);
 800154c:	2064      	movs	r0, #100	@ 0x64
 800154e:	f00a fc26 	bl	800bd9e <osDelay>
  {
 8001552:	e771      	b.n	8001438 <CommControl+0x24>
 8001554:	20000280 	.word	0x20000280
 8001558:	200006a0 	.word	0x200006a0
 800155c:	200006e8 	.word	0x200006e8
 8001560:	200002c4 	.word	0x200002c4
 8001564:	200002bc 	.word	0x200002bc
 8001568:	200002c8 	.word	0x200002c8
 800156c:	200002c0 	.word	0x200002c0
 8001570:	2000025c 	.word	0x2000025c
 8001574:	2000027e 	.word	0x2000027e
 8001578:	08020880 	.word	0x08020880
 800157c:	080208b8 	.word	0x080208b8

08001580 <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART3){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a29      	ldr	r2, [pc, #164]	@ (8001638 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d14c      	bne.n	8001630 <HAL_UARTEx_RxEventCallback+0xb0>

		if (Size % 5 == 0){
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <HAL_UARTEx_RxEventCallback+0xbc>)
 800159a:	fba3 1302 	umull	r1, r3, r3, r2
 800159e:	0899      	lsrs	r1, r3, #2
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d133      	bne.n	8001616 <HAL_UARTEx_RxEventCallback+0x96>
			uint8_t command[5];
			for (int i = 0; i < Size; i++){
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e02c      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x8e>
				command[i%5] = rx_uart_buffer[i];
 80015b4:	6979      	ldr	r1, [r7, #20]
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_UARTEx_RxEventCallback+0xc0>)
 80015b8:	fb83 2301 	smull	r2, r3, r3, r1
 80015bc:	105a      	asrs	r2, r3, #1
 80015be:	17cb      	asrs	r3, r1, #31
 80015c0:	1ad2      	subs	r2, r2, r3
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	1aca      	subs	r2, r1, r3
 80015ca:	491e      	ldr	r1, [pc, #120]	@ (8001644 <HAL_UARTEx_RxEventCallback+0xc4>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	440b      	add	r3, r1
 80015d0:	7819      	ldrb	r1, [r3, #0]
 80015d2:	f102 0318 	add.w	r3, r2, #24
 80015d6:	443b      	add	r3, r7
 80015d8:	460a      	mov	r2, r1
 80015da:	f803 2c0c 	strb.w	r2, [r3, #-12]
				if (i%5 == 4){
 80015de:	6979      	ldr	r1, [r7, #20]
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <HAL_UARTEx_RxEventCallback+0xc0>)
 80015e2:	fb83 2301 	smull	r2, r3, r3, r1
 80015e6:	105a      	asrs	r2, r3, #1
 80015e8:	17cb      	asrs	r3, r1, #31
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	1aca      	subs	r2, r1, r3
 80015f4:	2a04      	cmp	r2, #4
 80015f6:	d107      	bne.n	8001608 <HAL_UARTEx_RxEventCallback+0x88>
					osMessageQueuePut(RxUartBuffHandle, command ,0,0);
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <HAL_UARTEx_RxEventCallback+0xc8>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	f107 010c 	add.w	r1, r7, #12
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	f00a feac 	bl	800c360 <osMessageQueuePut>
			for (int i = 0; i < Size; i++){
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbce      	blt.n	80015b4 <HAL_UARTEx_RxEventCallback+0x34>
				}
			}
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*)rx_uart_buffer, sizeof(rx_uart_buffer));
 8001616:	220f      	movs	r2, #15
 8001618:	490a      	ldr	r1, [pc, #40]	@ (8001644 <HAL_UARTEx_RxEventCallback+0xc4>)
 800161a:	480c      	ldr	r0, [pc, #48]	@ (800164c <HAL_UARTEx_RxEventCallback+0xcc>)
 800161c:	f008 fb29 	bl	8009c72 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0208 	bic.w	r2, r2, #8
 800162e:	601a      	str	r2, [r3, #0]
	}
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004800 	.word	0x40004800
 800163c:	cccccccd 	.word	0xcccccccd
 8001640:	66666667 	.word	0x66666667
 8001644:	20000280 	.word	0x20000280
 8001648:	200002c4 	.word	0x200002c4
 800164c:	200006a0 	.word	0x200006a0
 8001650:	200006e8 	.word	0x200006e8

08001654 <actCommandConversion>:

int actCommandConversion(char command[4], uint8_t *result){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	*result = 0b00000000;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
	switch (command[0])
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3b66      	subs	r3, #102	@ 0x66
 800166a:	2b10      	cmp	r3, #16
 800166c:	d83c      	bhi.n	80016e8 <actCommandConversion+0x94>
 800166e:	a201      	add	r2, pc, #4	@ (adr r2, 8001674 <actCommandConversion+0x20>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016d9 	.word	0x080016d9
 8001678:	080016e9 	.word	0x080016e9
 800167c:	080016e9 	.word	0x080016e9
 8001680:	080016e9 	.word	0x080016e9
 8001684:	080016e9 	.word	0x080016e9
 8001688:	080016e9 	.word	0x080016e9
 800168c:	080016e9 	.word	0x080016e9
 8001690:	080016e9 	.word	0x080016e9
 8001694:	080016e9 	.word	0x080016e9
 8001698:	080016e9 	.word	0x080016e9
 800169c:	080016b9 	.word	0x080016b9
 80016a0:	080016e9 	.word	0x080016e9
 80016a4:	080016e9 	.word	0x080016e9
 80016a8:	080016c9 	.word	0x080016c9
 80016ac:	080016e9 	.word	0x080016e9
 80016b0:	080016e9 	.word	0x080016e9
 80016b4:	080016f3 	.word	0x080016f3
	{
		case 'v':
			break;
		case 'p':
			*result |= (0b00000001 << 6);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	701a      	strb	r2, [r3, #0]
			break;
 80016c6:	e015      	b.n	80016f4 <actCommandConversion+0xa0>
		case 's':
			*result |= (0b00000001 << 7);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	701a      	strb	r2, [r3, #0]
			break;
 80016d6:	e00d      	b.n	80016f4 <actCommandConversion+0xa0>
		case 'f':
			*result |= (0b00000011 << 6);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	701a      	strb	r2, [r3, #0]
			break;
 80016e6:	e005      	b.n	80016f4 <actCommandConversion+0xa0>
		default:
			printf("command conversion error");
 80016e8:	481f      	ldr	r0, [pc, #124]	@ (8001768 <actCommandConversion+0x114>)
 80016ea:	f01c fe3b 	bl	801e364 <iprintf>
			return 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e036      	b.n	8001760 <actCommandConversion+0x10c>
			break;
 80016f2:	bf00      	nop
	}

	switch (command[1])
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b30      	cmp	r3, #48	@ 0x30
 80016fc:	d00e      	beq.n	800171c <actCommandConversion+0xc8>
 80016fe:	2b31      	cmp	r3, #49	@ 0x31
 8001700:	d107      	bne.n	8001712 <actCommandConversion+0xbe>
	{
		case '0':
			break;
		case '1':
			*result |= (0b00000001 << 5);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	f043 0320 	orr.w	r3, r3, #32
 800170a:	b2da      	uxtb	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	701a      	strb	r2, [r3, #0]
			break;
 8001710:	e005      	b.n	800171e <actCommandConversion+0xca>
		default:
			printf("command conversion error");
 8001712:	4815      	ldr	r0, [pc, #84]	@ (8001768 <actCommandConversion+0x114>)
 8001714:	f01c fe26 	bl	801e364 <iprintf>
			return 0;
 8001718:	2300      	movs	r3, #0
 800171a:	e021      	b.n	8001760 <actCommandConversion+0x10c>
			break;
 800171c:	bf00      	nop
	}

	uint8_t addres = (command[2]-'0')*10 + command[3]-'0';
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3302      	adds	r3, #2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	3b30      	subs	r3, #48	@ 0x30
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3303      	adds	r3, #3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4413      	add	r3, r2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	3b30      	subs	r3, #48	@ 0x30
 800173e:	73fb      	strb	r3, [r7, #15]
	if (addres > 31){
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b1f      	cmp	r3, #31
 8001744:	d904      	bls.n	8001750 <actCommandConversion+0xfc>
		printf("command conversion error");
 8001746:	4808      	ldr	r0, [pc, #32]	@ (8001768 <actCommandConversion+0x114>)
 8001748:	f01c fe0c 	bl	801e364 <iprintf>
		return 0;
 800174c:	2300      	movs	r3, #0
 800174e:	e007      	b.n	8001760 <actCommandConversion+0x10c>

	}
	else{
		*result |= addres;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4313      	orrs	r3, r2
 8001758:	b2da      	uxtb	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	701a      	strb	r2, [r3, #0]
		return 1;
 800175e:	2301      	movs	r3, #1
	}
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	080208cc 	.word	0x080208cc
 800176c:	00000000 	.word	0x00000000

08001770 <tempCommandConversion>:

int tempCommandConversion(char temp[4],float *result) {
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]

    *result = 10*(temp[0]-'0');
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	edc3 7a00 	vstr	s15, [r3]
    *result += temp[1]-'0';
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3301      	adds	r3, #1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	3b30      	subs	r3, #48	@ 0x30
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	edc3 7a00 	vstr	s15, [r3]
    *result += 0.1*(temp[2]-'0');
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fed3 	bl	8000568 <__aeabi_f2d>
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3302      	adds	r3, #2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3b30      	subs	r3, #48	@ 0x30
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb8 	bl	8000544 <__aeabi_i2d>
 80017d4:	a31e      	add	r3, pc, #120	@ (adr r3, 8001850 <tempCommandConversion+0xe0>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff1d 	bl	8000618 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fd61 	bl	80002ac <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f9e9 	bl	8000bc8 <__aeabi_d2f>
 80017f6:	4602      	mov	r2, r0
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	601a      	str	r2, [r3, #0]
    *result += 0.01*(temp[3]-'0');
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe feb1 	bl	8000568 <__aeabi_f2d>
 8001806:	4604      	mov	r4, r0
 8001808:	460d      	mov	r5, r1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3303      	adds	r3, #3
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	3b30      	subs	r3, #48	@ 0x30
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe96 	bl	8000544 <__aeabi_i2d>
 8001818:	a30f      	add	r3, pc, #60	@ (adr r3, 8001858 <tempCommandConversion+0xe8>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe fefb 	bl	8000618 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fd3f 	bl	80002ac <__adddf3>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f9c7 	bl	8000bc8 <__aeabi_d2f>
 800183a:	4602      	mov	r2, r0
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	601a      	str	r2, [r3, #0]
    return 1;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bdb0      	pop	{r4, r5, r7, pc}
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	9999999a 	.word	0x9999999a
 8001854:	3fb99999 	.word	0x3fb99999
 8001858:	47ae147b 	.word	0x47ae147b
 800185c:	3f847ae1 	.word	0x3f847ae1

08001860 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <HAL_I2C_MemRxCpltCallback+0x24>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d104      	bne.n	800187c <HAL_I2C_MemRxCpltCallback+0x1c>
    osSemaphoreRelease(I2C1_SemaphoreHandle);
 8001872:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f00a fc96 	bl	800c1a8 <osSemaphoreRelease>
  }
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40005400 	.word	0x40005400
 8001888:	200002cc 	.word	0x200002cc

0800188c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <HAL_I2C_MemTxCpltCallback+0x24>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d104      	bne.n	80018a8 <HAL_I2C_MemTxCpltCallback+0x1c>
    osSemaphoreRelease(I2C1_SemaphoreHandle);
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_I2C_MemTxCpltCallback+0x28>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00a fc80 	bl	800c1a8 <osSemaphoreRelease>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40005400 	.word	0x40005400
 80018b4:	200002cc 	.word	0x200002cc

080018b8 <MX_GPIO_Init>:
        * the Code Generation settings)
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	4bb4      	ldr	r3, [pc, #720]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4ab3      	ldr	r2, [pc, #716]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4bb1      	ldr	r3, [pc, #708]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	623b      	str	r3, [r7, #32]
 80018e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	4bad      	ldr	r3, [pc, #692]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4aac      	ldr	r2, [pc, #688]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4baa      	ldr	r3, [pc, #680]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	4ba6      	ldr	r3, [pc, #664]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4aa5      	ldr	r2, [pc, #660]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4ba3      	ldr	r3, [pc, #652]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	4b9f      	ldr	r3, [pc, #636]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a9e      	ldr	r2, [pc, #632]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b9c      	ldr	r3, [pc, #624]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b98      	ldr	r3, [pc, #608]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a97      	ldr	r2, [pc, #604]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b95      	ldr	r3, [pc, #596]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b91      	ldr	r3, [pc, #580]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a90      	ldr	r2, [pc, #576]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b8a      	ldr	r3, [pc, #552]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a89      	ldr	r2, [pc, #548]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b87      	ldr	r3, [pc, #540]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b83      	ldr	r3, [pc, #524]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a82      	ldr	r2, [pc, #520]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b80      	ldr	r3, [pc, #512]	@ (8001ba4 <MX_GPIO_Init+0x2ec>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ValveGate13_Pin|ValveGate14_Pin|ValveGate16_Pin|ValveGate16E5_Pin
 80019ae:	2200      	movs	r2, #0
 80019b0:	f24f 01bf 	movw	r1, #61631	@ 0xf0bf
 80019b4:	487c      	ldr	r0, [pc, #496]	@ (8001ba8 <MX_GPIO_Init+0x2f0>)
 80019b6:	f004 f83f 	bl	8005a38 <HAL_GPIO_WritePin>
                          |PHY_EN_CLK_Pin|ValveGate1_Pin|ValveGate2_Pin|ValveGate3_Pin
                          |ValveGate4_Pin|ValveGate11_Pin|ValveGate12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ValveGate5_Pin|ValveGate6_Pin|ValveGate9_Pin|ValveGate10_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f24c 0130 	movw	r1, #49200	@ 0xc030
 80019c0:	487a      	ldr	r0, [pc, #488]	@ (8001bac <MX_GPIO_Init+0x2f4>)
 80019c2:	f004 f839 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ValveGate7_Pin|ValveGate8_Pin|VALVE_PWR_EN1_Pin|mem__wp_Pin
 80019c6:	2200      	movs	r2, #0
 80019c8:	f641 4103 	movw	r1, #7171	@ 0x1c03
 80019cc:	4878      	ldr	r0, [pc, #480]	@ (8001bb0 <MX_GPIO_Init+0x2f8>)
 80019ce:	f004 f833 	bl	8005a38 <HAL_GPIO_WritePin>
                          |mem__ce_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PHY_RESET_CHECK_THIS___GPIO_Port, PHY_RESET_CHECK_THIS___Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2140      	movs	r1, #64	@ 0x40
 80019d6:	4877      	ldr	r0, [pc, #476]	@ (8001bb4 <MX_GPIO_Init+0x2fc>)
 80019d8:	f004 f82e 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_PUMP1_Pin|EN_PUMP2_Pin|EN_PUMP_PWR_Pin|mem__reset_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 410e 	mov.w	r1, #36352	@ 0x8e00
 80019e2:	4875      	ldr	r0, [pc, #468]	@ (8001bb8 <MX_GPIO_Init+0x300>)
 80019e4:	f004 f828 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VALVE_PWR_EN2_GPIO_Port, VALVE_PWR_EN2_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ee:	4873      	ldr	r0, [pc, #460]	@ (8001bbc <MX_GPIO_Init+0x304>)
 80019f0:	f004 f822 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ValveGate13_Pin|ValveGate14_Pin|ValveGate16_Pin|ValveGate16E5_Pin
 80019f4:	f24f 03bf 	movw	r3, #61631	@ 0xf0bf
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |PHY_EN_CLK_Pin|ValveGate1_Pin|ValveGate2_Pin|ValveGate3_Pin
                          |ValveGate4_Pin|ValveGate11_Pin|ValveGate12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4866      	ldr	r0, [pc, #408]	@ (8001ba8 <MX_GPIO_Init+0x2f0>)
 8001a0e:	f003 fe67 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a12:	2340      	movs	r3, #64	@ 0x40
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a16:	2303      	movs	r3, #3
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	4860      	ldr	r0, [pc, #384]	@ (8001ba8 <MX_GPIO_Init+0x2f0>)
 8001a26:	f003 fe5b 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001a2a:	f24e 0381 	movw	r3, #57473	@ 0xe081
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a30:	2303      	movs	r3, #3
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	485d      	ldr	r0, [pc, #372]	@ (8001bb4 <MX_GPIO_Init+0x2fc>)
 8001a40:	f003 fe4e 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF4 PF5
                           PF6 PF7 PF8 PF9
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001a44:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	4859      	ldr	r0, [pc, #356]	@ (8001bc0 <MX_GPIO_Init+0x308>)
 8001a5a:	f003 fe41 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA5
                           PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001a5e:	f241 0379 	movw	r3, #4217	@ 0x1079
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4851      	ldr	r0, [pc, #324]	@ (8001bb8 <MX_GPIO_Init+0x300>)
 8001a74:	f003 fe34 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001a78:	f641 0303 	movw	r3, #6147	@ 0x1803
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4847      	ldr	r0, [pc, #284]	@ (8001bac <MX_GPIO_Init+0x2f4>)
 8001a8e:	f003 fe27 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1__CHECK_THIS__Pin;
 8001a92:	2304      	movs	r3, #4
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1__CHECK_THIS__GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4841      	ldr	r0, [pc, #260]	@ (8001bac <MX_GPIO_Init+0x2f4>)
 8001aa6:	f003 fe1b 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG12
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001aaa:	f245 73ff 	movw	r3, #22527	@ 0x57ff
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	483f      	ldr	r0, [pc, #252]	@ (8001bbc <MX_GPIO_Init+0x304>)
 8001ac0:	f003 fe0e 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PHY_SIGDET_Pin|PHY_INT_Pin|PHY_REF_CLK_Pin|PHY_RESET_Pin;
 8001ac4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4833      	ldr	r0, [pc, #204]	@ (8001ba8 <MX_GPIO_Init+0x2f0>)
 8001ada:	f003 fe01 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ValveGate5_Pin|ValveGate6_Pin|ValveGate9_Pin|ValveGate10_Pin;
 8001ade:	f24c 0330 	movw	r3, #49200	@ 0xc030
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	482d      	ldr	r0, [pc, #180]	@ (8001bac <MX_GPIO_Init+0x2f4>)
 8001af8:	f003 fdf2 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = ValveGate7_Pin|ValveGate8_Pin|VALVE_PWR_EN1_Pin|mem__wp_Pin
 8001afc:	f641 4303 	movw	r3, #7171	@ 0x1c03
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |mem__ce_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	4826      	ldr	r0, [pc, #152]	@ (8001bb0 <MX_GPIO_Init+0x2f8>)
 8001b16:	f003 fde3 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2|GPIO_PIN_3
 8001b1a:	f246 03fc 	movw	r3, #24828	@ 0x60fc
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b20:	2303      	movs	r3, #3
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4820      	ldr	r0, [pc, #128]	@ (8001bb0 <MX_GPIO_Init+0x2f8>)
 8001b30:	f003 fdd6 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PHY_RESET_CHECK_THIS___Pin;
 8001b34:	2340      	movs	r3, #64	@ 0x40
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(PHY_RESET_CHECK_THIS___GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481a      	ldr	r0, [pc, #104]	@ (8001bb4 <MX_GPIO_Init+0x2fc>)
 8001b4c:	f003 fdc8 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EN_PUMP1_Pin|EN_PUMP2_Pin|EN_PUMP_PWR_Pin|mem__reset_Pin;
 8001b50:	f44f 430e 	mov.w	r3, #36352	@ 0x8e00
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <MX_GPIO_Init+0x300>)
 8001b6a:	f003 fdb9 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VALVE_PWR_EN2_Pin;
 8001b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(VALVE_PWR_EN2_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <MX_GPIO_Init+0x304>)
 8001b88:	f003 fdaa 	bl	80056e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ST_LINK_TX_Pin|ST_LINK_RX_Pin;
 8001b8c:	23c0      	movs	r3, #192	@ 0xc0
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ba0:	e010      	b.n	8001bc4 <MX_GPIO_Init+0x30c>
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40021800 	.word	0x40021800
 8001bc0:	40021400 	.word	0x40021400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4803      	ldr	r0, [pc, #12]	@ (8001bd8 <MX_GPIO_Init+0x320>)
 8001bcc:	f003 fd88 	bl	80056e0 <HAL_GPIO_Init>

}
 8001bd0:	bf00      	nop
 8001bd2:	3738      	adds	r7, #56	@ 0x38
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020400 	.word	0x40020400

08001bdc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001be2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c54 <MX_I2C1_Init+0x78>)
 8001be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <MX_I2C1_Init+0x7c>)
 8001bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001bfa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c18:	480d      	ldr	r0, [pc, #52]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001c1a:	f003 ff27 	bl	8005a6c <HAL_I2C_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c24:	f000 fa9e 	bl	8002164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001c2c:	f006 fb98 	bl	8008360 <HAL_I2CEx_ConfigAnalogFilter>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c36:	f000 fa95 	bl	8002164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4804      	ldr	r0, [pc, #16]	@ (8001c50 <MX_I2C1_Init+0x74>)
 8001c3e:	f006 fbcb 	bl	80083d8 <HAL_I2CEx_ConfigDigitalFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c48:	f000 fa8c 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000320 	.word	0x20000320
 8001c54:	40005400 	.word	0x40005400
 8001c58:	000186a0 	.word	0x000186a0

08001c5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c62:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <MX_I2C2_Init+0x78>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c68:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <MX_I2C2_Init+0x7c>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c98:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001c9a:	f003 fee7 	bl	8005a6c <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 fa5e 	bl	8002164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4809      	ldr	r0, [pc, #36]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001cac:	f006 fb58 	bl	8008360 <HAL_I2CEx_ConfigAnalogFilter>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001cb6:	f000 fa55 	bl	8002164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <MX_I2C2_Init+0x74>)
 8001cbe:	f006 fb8b 	bl	80083d8 <HAL_I2CEx_ConfigDigitalFilter>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001cc8:	f000 fa4c 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200003a4 	.word	0x200003a4
 8001cd4:	40005800 	.word	0x40005800
 8001cd8:	000186a0 	.word	0x000186a0

08001cdc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <MX_I2C3_Init+0x78>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <MX_I2C3_Init+0x7c>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001cfa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cfe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d18:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d1a:	f003 fea7 	bl	8005a6c <HAL_I2C_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d24:	f000 fa1e 	bl	8002164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d2c:	f006 fb18 	bl	8008360 <HAL_I2CEx_ConfigAnalogFilter>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001d36:	f000 fa15 	bl	8002164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4804      	ldr	r0, [pc, #16]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d3e:	f006 fb4b 	bl	80083d8 <HAL_I2CEx_ConfigDigitalFilter>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001d48:	f000 fa0c 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000428 	.word	0x20000428
 8001d54:	40005c00 	.word	0x40005c00
 8001d58:	000186a0 	.word	0x000186a0

08001d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08e      	sub	sp, #56	@ 0x38
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a96      	ldr	r2, [pc, #600]	@ (8001fd4 <HAL_I2C_MspInit+0x278>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	f040 8092 	bne.w	8001ea4 <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	4b94      	ldr	r3, [pc, #592]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	4a93      	ldr	r2, [pc, #588]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d90:	4b91      	ldr	r3, [pc, #580]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	623b      	str	r3, [r7, #32]
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HEAT_I2C_SDA2_Pin|HEAT_I2C_SDA2B9_Pin;
 8001d9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da2:	2312      	movs	r3, #18
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dae:	2304      	movs	r3, #4
 8001db0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db6:	4619      	mov	r1, r3
 8001db8:	4888      	ldr	r0, [pc, #544]	@ (8001fdc <HAL_I2C_MspInit+0x280>)
 8001dba:	f003 fc91 	bl	80056e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	4b85      	ldr	r3, [pc, #532]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a84      	ldr	r2, [pc, #528]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001dc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b82      	ldr	r3, [pc, #520]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001dda:	4b81      	ldr	r3, [pc, #516]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001ddc:	4a81      	ldr	r2, [pc, #516]	@ (8001fe4 <HAL_I2C_MspInit+0x288>)
 8001dde:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001de0:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de8:	4b7d      	ldr	r3, [pc, #500]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001dea:	2240      	movs	r2, #64	@ 0x40
 8001dec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dee:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001df4:	4b7a      	ldr	r3, [pc, #488]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001df6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfc:	4b78      	ldr	r3, [pc, #480]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e02:	4b77      	ldr	r3, [pc, #476]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e08:	4b75      	ldr	r3, [pc, #468]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e0e:	4b74      	ldr	r3, [pc, #464]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e14:	4b72      	ldr	r3, [pc, #456]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e1a:	4871      	ldr	r0, [pc, #452]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001e1c:	f001 fdda 	bl	80039d4 <HAL_DMA_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001e26:	f000 f99d 	bl	8002164 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a6c      	ldr	r2, [pc, #432]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001e2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e30:	4a6b      	ldr	r2, [pc, #428]	@ (8001fe0 <HAL_I2C_MspInit+0x284>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001e36:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e38:	4a6c      	ldr	r2, [pc, #432]	@ (8001fec <HAL_I2C_MspInit+0x290>)
 8001e3a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e44:	4b68      	ldr	r3, [pc, #416]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	4b67      	ldr	r3, [pc, #412]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e50:	4b65      	ldr	r3, [pc, #404]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e56:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e58:	4b63      	ldr	r3, [pc, #396]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5e:	4b62      	ldr	r3, [pc, #392]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e64:	4b60      	ldr	r3, [pc, #384]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e70:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e76:	485c      	ldr	r0, [pc, #368]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e78:	f001 fdac 	bl	80039d4 <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001e82:	f000 f96f 	bl	8002164 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a57      	ldr	r2, [pc, #348]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e8c:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <HAL_I2C_MspInit+0x28c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2105      	movs	r1, #5
 8001e96:	201f      	movs	r0, #31
 8001e98:	f001 fd72 	bl	8003980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e9c:	201f      	movs	r0, #31
 8001e9e:	f001 fd8b 	bl	80039b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001ea2:	e092      	b.n	8001fca <HAL_I2C_MspInit+0x26e>
  else if(i2cHandle->Instance==I2C2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	@ (8001ff0 <HAL_I2C_MspInit+0x294>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d134      	bne.n	8001f18 <HAL_I2C_MspInit+0x1bc>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	4b49      	ldr	r3, [pc, #292]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a48      	ldr	r2, [pc, #288]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b46      	ldr	r3, [pc, #280]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DRV_I2C_SDA_Pin|DRV_I2C_SCL_Pin;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ece:	2312      	movs	r3, #18
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eda:	2304      	movs	r3, #4
 8001edc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4843      	ldr	r0, [pc, #268]	@ (8001ff4 <HAL_I2C_MspInit+0x298>)
 8001ee6:	f003 fbfb 	bl	80056e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a39      	ldr	r2, [pc, #228]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001ef4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b37      	ldr	r3, [pc, #220]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2105      	movs	r1, #5
 8001f0a:	2021      	movs	r0, #33	@ 0x21
 8001f0c:	f001 fd38 	bl	8003980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001f10:	2021      	movs	r0, #33	@ 0x21
 8001f12:	f001 fd51 	bl	80039b8 <HAL_NVIC_EnableIRQ>
}
 8001f16:	e058      	b.n	8001fca <HAL_I2C_MspInit+0x26e>
  else if(i2cHandle->Instance==I2C3)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a36      	ldr	r2, [pc, #216]	@ (8001ff8 <HAL_I2C_MspInit+0x29c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d153      	bne.n	8001fca <HAL_I2C_MspInit+0x26e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a24      	ldr	r2, [pc, #144]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEAT_I2C_SDA_1_Pin;
 8001f5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f60:	2312      	movs	r3, #18
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HEAT_I2C_SDA_1_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f74:	4619      	mov	r1, r3
 8001f76:	4821      	ldr	r0, [pc, #132]	@ (8001ffc <HAL_I2C_MspInit+0x2a0>)
 8001f78:	f003 fbb2 	bl	80056e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HEAT_I2C_SCL_1_Pin;
 8001f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f82:	2312      	movs	r3, #18
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HEAT_I2C_SCL_1_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f96:	4619      	mov	r1, r3
 8001f98:	4819      	ldr	r0, [pc, #100]	@ (8002000 <HAL_I2C_MspInit+0x2a4>)
 8001f9a:	f003 fba1 	bl	80056e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001fa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_I2C_MspInit+0x27c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	2048      	movs	r0, #72	@ 0x48
 8001fc0:	f001 fcde 	bl	8003980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001fc4:	2048      	movs	r0, #72	@ 0x48
 8001fc6:	f001 fcf7 	bl	80039b8 <HAL_NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3738      	adds	r7, #56	@ 0x38
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40005400 	.word	0x40005400
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	200004ac 	.word	0x200004ac
 8001fe4:	400260a0 	.word	0x400260a0
 8001fe8:	2000050c 	.word	0x2000050c
 8001fec:	40026010 	.word	0x40026010
 8001ff0:	40005800 	.word	0x40005800
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40005c00 	.word	0x40005c00
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020000 	.word	0x40020000

08002004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002008:	f000 fff2 	bl	8002ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200c:	f000 f81c 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002010:	f7ff fc52 	bl	80018b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002014:	f7ff f840 	bl	8001098 <MX_DMA_Init>
  MX_ADC1_Init();
 8002018:	f7fe ff9e 	bl	8000f58 <MX_ADC1_Init>
  MX_TIM4_Init();
 800201c:	f000 fd16 	bl	8002a4c <MX_TIM4_Init>
  MX_SPI3_Init();
 8002020:	f000 fa40 	bl	80024a4 <MX_SPI3_Init>
  MX_I2C1_Init();
 8002024:	f7ff fdda 	bl	8001bdc <MX_I2C1_Init>
  MX_I2C2_Init();
 8002028:	f7ff fe18 	bl	8001c5c <MX_I2C2_Init>
  MX_I2C3_Init();
 800202c:	f7ff fe56 	bl	8001cdc <MX_I2C3_Init>
  MX_TIM3_Init();
 8002030:	f000 fcb2 	bl	8002998 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002034:	f000 fe00 	bl	8002c38 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002038:	f009 fdc0 	bl	800bbbc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800203c:	f7ff f85c 	bl	80010f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002040:	f009 fde0 	bl	800bc04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <main+0x40>

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b094      	sub	sp, #80	@ 0x50
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 0320 	add.w	r3, r7, #32
 8002052:	2230      	movs	r2, #48	@ 0x30
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f01c fb16 	bl	801e688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <SystemClock_Config+0xcc>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a27      	ldr	r2, [pc, #156]	@ (8002114 <SystemClock_Config+0xcc>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	@ 0x40
 800207c:	4b25      	ldr	r3, [pc, #148]	@ (8002114 <SystemClock_Config+0xcc>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <SystemClock_Config+0xd0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a21      	ldr	r2, [pc, #132]	@ (8002118 <SystemClock_Config+0xd0>)
 8002092:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <SystemClock_Config+0xd0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a8:	2301      	movs	r3, #1
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ac:	2310      	movs	r3, #16
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b0:	2302      	movs	r3, #2
 80020b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020b4:	2300      	movs	r3, #0
 80020b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020b8:	2308      	movs	r3, #8
 80020ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80020bc:	23a8      	movs	r3, #168	@ 0xa8
 80020be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020c4:	2307      	movs	r3, #7
 80020c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c8:	f107 0320 	add.w	r3, r7, #32
 80020cc:	4618      	mov	r0, r3
 80020ce:	f006 f9c3 	bl	8008458 <HAL_RCC_OscConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020d8:	f000 f844 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020dc:	230f      	movs	r3, #15
 80020de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e0:	2302      	movs	r3, #2
 80020e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	2105      	movs	r1, #5
 80020fa:	4618      	mov	r0, r3
 80020fc:	f006 fc24 	bl	8008948 <HAL_RCC_ClockConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002106:	f000 f82d 	bl	8002164 <Error_Handler>
  }
}
 800210a:	bf00      	nop
 800210c:	3750      	adds	r7, #80	@ 0x50
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000

0800211c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002124:	1d39      	adds	r1, r7, #4
 8002126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800212a:	2201      	movs	r2, #1
 800212c:	4803      	ldr	r0, [pc, #12]	@ (800213c <__io_putchar+0x20>)
 800212e:	f007 fd15 	bl	8009b5c <HAL_UART_Transmit>
  return ch;
 8002132:	687b      	ldr	r3, [r7, #4]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200006a0 	.word	0x200006a0

08002140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002152:	f000 ff6f 	bl	8003034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <Error_Handler+0x8>

08002170 <MCP9808_Init>:
* @param LS_ADDR_BITS: Least significant address bits
* @param hi2c: I2C handler
* @param I2C_SemaphoreHandle: I2C semaphore handler
* @retval None
*/
void MCP9808_Init(MCP9808 *sensor, uint8_t LS_ADDR_BITS, I2C_HandleTypeDef *hi2c, osSemaphoreId_t I2C_SemaphoreHandle) {
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	460b      	mov	r3, r1
 800217e:	72fb      	strb	r3, [r7, #11]
    sensor->config |= (1 << 2) + (1 << 8);                              //tCritical alert only
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	801a      	strh	r2, [r3, #0]
    sensor->tCritical = 0x0000;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	805a      	strh	r2, [r3, #2]
    sensor->tAmbient = 0.0;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	605a      	str	r2, [r3, #4]
    sensor->alertCritical = false;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	721a      	strb	r2, [r3, #8]
    sensor->resolution = 0x03;                                          //0.0625 Celsius degrees
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2203      	movs	r2, #3
 80021a6:	725a      	strb	r2, [r3, #9]
    sensor->m_devAddr = MCP9808_BASE_ADDR | (LS_ADDR_BITS & 0x07);      
 80021a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	f043 0318 	orr.w	r3, r3, #24
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	729a      	strb	r2, [r3, #10]
    sensor->hi2c = hi2c;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]
    sensor->i2cSemaphore = I2C_SemaphoreHandle;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	611a      	str	r2, [r3, #16]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <MCP9808_Enable>:
/**
 * @brief Function enabling MCP9808 sensor
 * @param sensor: MCP9808 sensor pointer
 * @retval None
 */
void MCP9808_Enable(MCP9808 *sensor) {
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
    sensor->config = (sensor->config & 0x06FF); //clearing SHDN bit
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80021e6:	4013      	ands	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	801a      	strh	r2, [r3, #0]
    MCP9808_Write(sensor);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8c8 	bl	8002384 <MCP9808_Write>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <MCP9808_Configure>:
 * @param resolution: Resolution value
 * @param tCritical: Critical temperature value in range of -256 to 256 Celsius degrees
 * @param sign: Sign of the critical temperature value
 * @retval None
 */
void MCP9808_Configure(MCP9808 *sensor, uint16_t hyst, uint8_t resolution, uint8_t tCritical, uint16_t sign) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4603      	mov	r3, r0
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	460b      	mov	r3, r1
 8002210:	707b      	strb	r3, [r7, #1]
 8002212:	4613      	mov	r3, r2
 8002214:	703b      	strb	r3, [r7, #0]
    sensor->config = (sensor->config & 0x06FF) | hyst; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b21a      	sxth	r2, r3
 800221c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8002220:	4013      	ands	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002228:	4313      	orrs	r3, r2
 800222a:	b21b      	sxth	r3, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	801a      	strh	r2, [r3, #0]
    sensor->resolution = resolution;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	787a      	ldrb	r2, [r7, #1]
 8002236:	725a      	strb	r2, [r3, #9]
    sensor->tCritical = (((uint16_t)tCritical << 4) | sign);  //losing precision here for the sake of using Celsius degrees in the API
 8002238:	783b      	ldrb	r3, [r7, #0]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	b21a      	sxth	r2, r3
 800223e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	b21a      	sxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	805a      	strh	r2, [r3, #2]
    MCP9808_Write(sensor);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f89a 	bl	8002384 <MCP9808_Write>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <MCP9808_GetTemperature>:
/**
 * @brief Function for getting temperature value from MCP9808 sensor
 * @param sensor: MCP9808 sensor pointer
 * @retval Temperature value
 */
float MCP9808_GetTemperature(MCP9808 *sensor) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    MCP9808_Read(sensor);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f809 	bl	8002278 <MCP9808_Read>
    return sensor->tAmbient;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	ee07 3a90 	vmov	s15, r3
}
 800226e:	eeb0 0a67 	vmov.f32	s0, s15
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <MCP9808_Read>:
/**
 * @brief Private function for reading from MCP9808 sensor
 * @param sensor: MCP9808 sensor pointer
 * @retval None
 */
void MCP9808_Read(MCP9808 *sensor) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af02      	add	r7, sp, #8
 800227e:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    HAL_StatusTypeDef status;

    osSemaphoreAcquire(sensor->i2cSemaphore, portMAX_DELAY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002288:	4618      	mov	r0, r3
 800228a:	f009 ff3b 	bl	800c104 <osSemaphoreAcquire>
    status = HAL_I2C_Mem_Read_DMA(sensor->hi2c, (sensor->m_devAddr << 1), tAMBIENT_REG, I2C_MEMADD_SIZE_8BIT, data, 2);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68d8      	ldr	r0, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a9b      	ldrb	r3, [r3, #10]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	b299      	uxth	r1, r3
 800229a:	2302      	movs	r3, #2
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2301      	movs	r3, #1
 80022a6:	2205      	movs	r2, #5
 80022a8:	f003 fed4 	bl	8006054 <HAL_I2C_Mem_Read_DMA>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <MCP9808_Read+0x4a>
        printf("Error reading from MCP9808 at address: 0x%x\n", sensor->m_devAddr);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7a9b      	ldrb	r3, [r3, #10]
 80022ba:	4619      	mov	r1, r3
 80022bc:	482f      	ldr	r0, [pc, #188]	@ (800237c <MCP9808_Read+0x104>)
 80022be:	f01c f851 	bl	801e364 <iprintf>
    }
    osSemaphoreAcquire(sensor->i2cSemaphore, portMAX_DELAY); //A bit ugly, but prevents race condition in saving data to sensor fields
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022ca:	4618      	mov	r0, r3
 80022cc:	f009 ff1a 	bl	800c104 <osSemaphoreAcquire>
    osSemaphoreRelease(sensor->i2cSemaphore);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f009 ff67 	bl	800c1a8 <osSemaphoreRelease>

    if (data[0] & (1 << 7)) {
 80022da:	7b3b      	ldrb	r3, [r7, #12]
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da03      	bge.n	80022ea <MCP9808_Read+0x72>
        sensor->alertCritical = true;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	721a      	strb	r2, [r3, #8]
 80022e8:	e002      	b.n	80022f0 <MCP9808_Read+0x78>
    } else {
        sensor->alertCritical = false;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	721a      	strb	r2, [r3, #8]
    }
    
    data[0] = data[0] & 0x1F;
 80022f0:	7b3b      	ldrb	r3, [r7, #12]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	733b      	strb	r3, [r7, #12]
    if(data[0] & (1 << 4)) {
 80022fa:	7b3b      	ldrb	r3, [r7, #12]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <MCP9808_Read+0xce>
        data[0] = data[0] & 0x0F;
 8002304:	7b3b      	ldrb	r3, [r7, #12]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	b2db      	uxtb	r3, r3
 800230c:	733b      	strb	r3, [r7, #12]
        sensor->tAmbient = 256 - ((float)data[0] * 16) - ((float)data[1] / 16);
 800230e:	7b3b      	ldrb	r3, [r7, #12]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002318:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800231c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002320:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002380 <MCP9808_Read+0x108>
 8002324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002328:	7b7b      	ldrb	r3, [r7, #13]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002332:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8002336:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800233a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	edc3 7a01 	vstr	s15, [r3, #4]
    } else {
        sensor->tAmbient = ((float)data[0] * 16) + ((float)data[1] / 16);
    }
}
 8002344:	e016      	b.n	8002374 <MCP9808_Read+0xfc>
        sensor->tAmbient = ((float)data[0] * 16) + ((float)data[1] / 16);
 8002346:	7b3b      	ldrb	r3, [r7, #12]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002350:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002358:	7b7b      	ldrb	r3, [r7, #13]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002362:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8002366:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	080208e8 	.word	0x080208e8
 8002380:	43800000 	.word	0x43800000

08002384 <MCP9808_Write>:
/**
 * @brief Private function for writing to MCP9808 sensor
 * @param sensor: MCP9808 sensor pointer
 * @retval None
 */
void MCP9808_Write(MCP9808 *sensor) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    HAL_StatusTypeDef status;

    osSemaphoreAcquire(sensor->i2cSemaphore, portMAX_DELAY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002394:	4618      	mov	r0, r3
 8002396:	f009 feb5 	bl	800c104 <osSemaphoreAcquire>
    data[0] = sensor->config >> 8;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	733b      	strb	r3, [r7, #12]
    data[1] = sensor->config & 0xFF;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write_DMA(sensor->hi2c, sensor->m_devAddr << 1, CONFIG_REG, I2C_MEMADD_SIZE_8BIT, data, 2);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68d8      	ldr	r0, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7a9b      	ldrb	r3, [r3, #10]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	b299      	uxth	r1, r3
 80023ba:	2302      	movs	r3, #2
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2301      	movs	r3, #1
 80023c6:	2201      	movs	r2, #1
 80023c8:	f003 fce6 	bl	8005d98 <HAL_I2C_Mem_Write_DMA>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <MCP9808_Write+0x5e>
        printf("Error writing to MCP9808 at address: 0x%x\n", sensor->m_devAddr);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7a9b      	ldrb	r3, [r3, #10]
 80023da:	4619      	mov	r1, r3
 80023dc:	4830      	ldr	r0, [pc, #192]	@ (80024a0 <MCP9808_Write+0x11c>)
 80023de:	f01b ffc1 	bl	801e364 <iprintf>
    };

    osSemaphoreAcquire(sensor->i2cSemaphore, portMAX_DELAY);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023ea:	4618      	mov	r0, r3
 80023ec:	f009 fe8a 	bl	800c104 <osSemaphoreAcquire>
    data[0] = (sensor->tCritical >> 8) & 0x1F;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023f6:	121b      	asrs	r3, r3, #8
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	b2db      	uxtb	r3, r3
 8002402:	733b      	strb	r3, [r7, #12]
    data[1] = sensor->tCritical & 0xFC;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f023 0303 	bic.w	r3, r3, #3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write_DMA(sensor->hi2c, sensor->m_devAddr << 1, tCRITICAL_REG, I2C_MEMADD_SIZE_8BIT, data, 2);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68d8      	ldr	r0, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7a9b      	ldrb	r3, [r3, #10]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	b299      	uxth	r1, r3
 8002420:	2302      	movs	r3, #2
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2301      	movs	r3, #1
 800242c:	2204      	movs	r2, #4
 800242e:	f003 fcb3 	bl	8005d98 <HAL_I2C_Mem_Write_DMA>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <MCP9808_Write+0xc4>
        printf("Error writing to MCP9808 at address: 0x%x\n", sensor->m_devAddr);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7a9b      	ldrb	r3, [r3, #10]
 8002440:	4619      	mov	r1, r3
 8002442:	4817      	ldr	r0, [pc, #92]	@ (80024a0 <MCP9808_Write+0x11c>)
 8002444:	f01b ff8e 	bl	801e364 <iprintf>
    }

    osSemaphoreAcquire(sensor->i2cSemaphore, portMAX_DELAY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002450:	4618      	mov	r0, r3
 8002452:	f009 fe57 	bl	800c104 <osSemaphoreAcquire>
    data[0] = sensor->resolution & 0x03;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7a5b      	ldrb	r3, [r3, #9]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	733b      	strb	r3, [r7, #12]
    status = HAL_I2C_Mem_Write_DMA(sensor->hi2c, sensor->m_devAddr << 1, RESOLUTION_REG, I2C_MEMADD_SIZE_8BIT, data, 1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68d8      	ldr	r0, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7a9b      	ldrb	r3, [r3, #10]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	b299      	uxth	r1, r3
 800246e:	2301      	movs	r3, #1
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	2208      	movs	r2, #8
 800247c:	f003 fc8c 	bl	8005d98 <HAL_I2C_Mem_Write_DMA>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <MCP9808_Write+0x112>
        printf("Error writing to MCP9808 at address: 0x%x\n", sensor->m_devAddr);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7a9b      	ldrb	r3, [r3, #10]
 800248e:	4619      	mov	r1, r3
 8002490:	4803      	ldr	r0, [pc, #12]	@ (80024a0 <MCP9808_Write+0x11c>)
 8002492:	f01b ff67 	bl	801e364 <iprintf>
    }
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	08020918 	.word	0x08020918

080024a4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024aa:	4a18      	ldr	r2, [pc, #96]	@ (800250c <MX_SPI3_Init+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024bc:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024de:	2200      	movs	r2, #0
 80024e0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e8:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024f0:	220a      	movs	r2, #10
 80024f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	@ (8002508 <MX_SPI3_Init+0x64>)
 80024f6:	f006 fc79 	bl	8008dec <HAL_SPI_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002500:	f7ff fe30 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000056c 	.word	0x2000056c
 800250c:	40003c00 	.word	0x40003c00

08002510 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	@ (8002594 <HAL_SPI_MspInit+0x84>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d12c      	bne.n	800258c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <HAL_SPI_MspInit+0x88>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_SPI_MspInit+0x88>)
 800253c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <HAL_SPI_MspInit+0x88>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_SPI_MspInit+0x88>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_SPI_MspInit+0x88>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_SPI_MspInit+0x88>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = mem_sck_Pin|mem_miso_Pin|mem_mosi_Pin;
 800256a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800257c:	2306      	movs	r3, #6
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	4619      	mov	r1, r3
 8002586:	4805      	ldr	r0, [pc, #20]	@ (800259c <HAL_SPI_MspInit+0x8c>)
 8002588:	f003 f8aa 	bl	80056e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800258c:	bf00      	nop
 800258e:	3728      	adds	r7, #40	@ 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40003c00 	.word	0x40003c00
 8002598:	40023800 	.word	0x40023800
 800259c:	40020800 	.word	0x40020800

080025a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_MspInit+0x54>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	4a11      	ldr	r2, [pc, #68]	@ (80025f4 <HAL_MspInit+0x54>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b6:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <HAL_MspInit+0x54>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_MspInit+0x54>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_MspInit+0x54>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <HAL_MspInit+0x54>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	210f      	movs	r1, #15
 80025e2:	f06f 0001 	mvn.w	r0, #1
 80025e6:	f001 f9cb 	bl	8003980 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	@ 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <HAL_InitTick+0xd4>)
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	4a2e      	ldr	r2, [pc, #184]	@ (80026cc <HAL_InitTick+0xd4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6453      	str	r3, [r2, #68]	@ 0x44
 8002618:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <HAL_InitTick+0xd4>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002624:	f107 020c 	add.w	r2, r7, #12
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fbaa 	bl	8008d88 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002634:	f006 fb94 	bl	8008d60 <HAL_RCC_GetPCLK2Freq>
 8002638:	4603      	mov	r3, r0
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	4a23      	ldr	r2, [pc, #140]	@ (80026d0 <HAL_InitTick+0xd8>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	3b01      	subs	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800264c:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <HAL_InitTick+0xdc>)
 800264e:	4a22      	ldr	r2, [pc, #136]	@ (80026d8 <HAL_InitTick+0xe0>)
 8002650:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <HAL_InitTick+0xdc>)
 8002654:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002658:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800265a:	4a1e      	ldr	r2, [pc, #120]	@ (80026d4 <HAL_InitTick+0xdc>)
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <HAL_InitTick+0xdc>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <HAL_InitTick+0xdc>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_InitTick+0xdc>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002672:	4818      	ldr	r0, [pc, #96]	@ (80026d4 <HAL_InitTick+0xdc>)
 8002674:	f006 fc43 	bl	8008efe <HAL_TIM_Base_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800267e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002682:	2b00      	cmp	r3, #0
 8002684:	d11b      	bne.n	80026be <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002686:	4813      	ldr	r0, [pc, #76]	@ (80026d4 <HAL_InitTick+0xdc>)
 8002688:	f006 fc92 	bl	8008fb0 <HAL_TIM_Base_Start_IT>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002696:	2b00      	cmp	r3, #0
 8002698:	d111      	bne.n	80026be <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800269a:	2019      	movs	r0, #25
 800269c:	f001 f98c 	bl	80039b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	d808      	bhi.n	80026b8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80026a6:	2200      	movs	r2, #0
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	2019      	movs	r0, #25
 80026ac:	f001 f968 	bl	8003980 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b0:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_InitTick+0xe4>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e002      	b.n	80026be <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3730      	adds	r7, #48	@ 0x30
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	431bde83 	.word	0x431bde83
 80026d4:	200005c4 	.word	0x200005c4
 80026d8:	40010000 	.word	0x40010000
 80026dc:	20000004 	.word	0x20000004

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <NMI_Handler+0x4>

080026e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <MemManage_Handler+0x4>

080026f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <BusFault_Handler+0x4>

08002700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <UsageFault_Handler+0x4>

08002708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <DMA1_Stream0_IRQHandler+0x10>)
 800271e:	f001 faf1 	bl	8003d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000050c 	.word	0x2000050c

0800272c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <DMA1_Stream1_IRQHandler+0x10>)
 8002732:	f001 fae7 	bl	8003d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200006e8 	.word	0x200006e8

08002740 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <DMA1_Stream6_IRQHandler+0x10>)
 8002746:	f001 fadd 	bl	8003d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200004ac 	.word	0x200004ac

08002754 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <ADC_IRQHandler+0x10>)
 800275a:	f000 fcf2 	bl	8003142 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000214 	.word	0x20000214

08002768 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800276e:	f006 fcde 	bl	800912e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200005c4 	.word	0x200005c4

0800277c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <I2C1_EV_IRQHandler+0x10>)
 8002782:	f003 fdf7 	bl	8006374 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000320 	.word	0x20000320

08002790 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <I2C2_EV_IRQHandler+0x10>)
 8002796:	f003 fded 	bl	8006374 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200003a4 	.word	0x200003a4

080027a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <USART3_IRQHandler+0x10>)
 80027aa:	f007 fabf 	bl	8009d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200006a0 	.word	0x200006a0

080027b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <ETH_IRQHandler+0x10>)
 80027be:	f002 f8b3 	bl	8004928 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20005290 	.word	0x20005290

080027cc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <I2C3_EV_IRQHandler+0x10>)
 80027d2:	f003 fdcf 	bl	8006374 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000428 	.word	0x20000428

080027e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_kill>:

int _kill(int pid, int sig)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <_kill+0x20>)
 80027fc:	2216      	movs	r2, #22
 80027fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	2000ff58 	.word	0x2000ff58

08002814 <_exit>:

void _exit (int status)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800281c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ffe5 	bl	80027f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002826:	bf00      	nop
 8002828:	e7fd      	b.n	8002826 <_exit+0x12>

0800282a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e00a      	b.n	8002852 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800283c:	f3af 8000 	nop.w
 8002840:	4601      	mov	r1, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	b2ca      	uxtb	r2, r1
 800284a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	dbf0      	blt.n	800283c <_read+0x12>
  }

  return len;
 800285a:	687b      	ldr	r3, [r7, #4]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e009      	b.n	800288a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	60ba      	str	r2, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fc4c 	bl	800211c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	dbf1      	blt.n	8002876 <_write+0x12>
  }
  return len;
 8002892:	687b      	ldr	r3, [r7, #4]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_close>:

int _close(int file)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028c4:	605a      	str	r2, [r3, #4]
  return 0;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_isatty>:

int _isatty(int file)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800290c:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <_sbrk+0x5c>)
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <_sbrk+0x60>)
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <_sbrk+0x64>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <_sbrk+0x64>)
 8002922:	4a12      	ldr	r2, [pc, #72]	@ (800296c <_sbrk+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	429a      	cmp	r2, r3
 8002932:	d205      	bcs.n	8002940 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002934:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <_sbrk+0x6c>)
 8002936:	220c      	movs	r2, #12
 8002938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800293e:	e009      	b.n	8002954 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	4a06      	ldr	r2, [pc, #24]	@ (8002968 <_sbrk+0x64>)
 8002950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	20030000 	.word	0x20030000
 8002964:	00000400 	.word	0x00000400
 8002968:	2000060c 	.word	0x2000060c
 800296c:	2000ff68 	.word	0x2000ff68
 8002970:	2000ff58 	.word	0x2000ff58

08002974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <SystemInit+0x20>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <SystemInit+0x20>)
 8002980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299e:	f107 0320 	add.w	r3, r7, #32
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	615a      	str	r2, [r3, #20]
 80029b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029ba:	4b22      	ldr	r3, [pc, #136]	@ (8002a44 <MX_TIM3_Init+0xac>)
 80029bc:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <MX_TIM3_Init+0xb0>)
 80029be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029c0:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <MX_TIM3_Init+0xac>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a44 <MX_TIM3_Init+0xac>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <MX_TIM3_Init+0xac>)
 80029ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <MX_TIM3_Init+0xac>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <MX_TIM3_Init+0xac>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029e0:	4818      	ldr	r0, [pc, #96]	@ (8002a44 <MX_TIM3_Init+0xac>)
 80029e2:	f006 fb55 	bl	8009090 <HAL_TIM_PWM_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80029ec:	f7ff fbba 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029f8:	f107 0320 	add.w	r3, r7, #32
 80029fc:	4619      	mov	r1, r3
 80029fe:	4811      	ldr	r0, [pc, #68]	@ (8002a44 <MX_TIM3_Init+0xac>)
 8002a00:	f006 ffcc 	bl	800999c <HAL_TIMEx_MasterConfigSynchronization>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a0a:	f7ff fbab 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0e:	2360      	movs	r3, #96	@ 0x60
 8002a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2208      	movs	r2, #8
 8002a22:	4619      	mov	r1, r3
 8002a24:	4807      	ldr	r0, [pc, #28]	@ (8002a44 <MX_TIM3_Init+0xac>)
 8002a26:	f006 fc73 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002a30:	f7ff fb98 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a34:	4803      	ldr	r0, [pc, #12]	@ (8002a44 <MX_TIM3_Init+0xac>)
 8002a36:	f000 f89b 	bl	8002b70 <HAL_TIM_MspPostInit>

}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	@ 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000610 	.word	0x20000610
 8002a48:	40000400 	.word	0x40000400

08002a4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a52:	f107 0320 	add.w	r3, r7, #32
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a6e:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002a70:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <MX_TIM4_Init+0xb0>)
 8002a72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a74:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a94:	4818      	ldr	r0, [pc, #96]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002a96:	f006 fafb 	bl	8009090 <HAL_TIM_PWM_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002aa0:	f7ff fb60 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aac:	f107 0320 	add.w	r3, r7, #32
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4811      	ldr	r0, [pc, #68]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002ab4:	f006 ff72 	bl	800999c <HAL_TIMEx_MasterConfigSynchronization>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002abe:	f7ff fb51 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac2:	2360      	movs	r3, #96	@ 0x60
 8002ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	220c      	movs	r2, #12
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002ada:	f006 fc19 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002ae4:	f7ff fb3e 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ae8:	4803      	ldr	r0, [pc, #12]	@ (8002af8 <MX_TIM4_Init+0xac>)
 8002aea:	f000 f841 	bl	8002b70 <HAL_TIM_MspPostInit>

}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	@ 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000658 	.word	0x20000658
 8002afc:	40000800 	.word	0x40000800

08002b00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	@ (8002b64 <HAL_TIM_PWM_MspInit+0x64>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <HAL_TIM_PWM_MspInit+0x68>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <HAL_TIM_PWM_MspInit+0x68>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <HAL_TIM_PWM_MspInit+0x68>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b2e:	e012      	b.n	8002b56 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <HAL_TIM_PWM_MspInit+0x6c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10d      	bne.n	8002b56 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <HAL_TIM_PWM_MspInit+0x68>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a09      	ldr	r2, [pc, #36]	@ (8002b68 <HAL_TIM_PWM_MspInit+0x68>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <HAL_TIM_PWM_MspInit+0x68>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40000800 	.word	0x40000800

08002b70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a25      	ldr	r2, [pc, #148]	@ (8002c24 <HAL_TIM_MspPostInit+0xb4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d11f      	bne.n	8002bd2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a23      	ldr	r2, [pc, #140]	@ (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = HEATER_PWM2_Pin;
 8002bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4818      	ldr	r0, [pc, #96]	@ (8002c2c <HAL_TIM_MspPostInit+0xbc>)
 8002bcc:	f002 fd88 	bl	80056e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bd0:	e023      	b.n	8002c1a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	@ (8002c30 <HAL_TIM_MspPostInit+0xc0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d11e      	bne.n	8002c1a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bec:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_PWM1_Pin;
 8002bf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM1_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	@ (8002c34 <HAL_TIM_MspPostInit+0xc4>)
 8002c16:	f002 fd63 	bl	80056e0 <HAL_GPIO_Init>
}
 8002c1a:	bf00      	nop
 8002c1c:	3728      	adds	r7, #40	@ 0x28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40020c00 	.word	0x40020c00

08002c38 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <MX_USART3_UART_Init+0x50>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c6e:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_USART3_UART_Init+0x4c>)
 8002c70:	f006 ff24 	bl	8009abc <HAL_UART_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c7a:	f7ff fa73 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200006a0 	.word	0x200006a0
 8002c88:	40004800 	.word	0x40004800

08002c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	@ 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a34      	ldr	r2, [pc, #208]	@ (8002d7c <HAL_UART_MspInit+0xf0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d162      	bne.n	8002d74 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b33      	ldr	r3, [pc, #204]	@ (8002d80 <HAL_UART_MspInit+0xf4>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a32      	ldr	r2, [pc, #200]	@ (8002d80 <HAL_UART_MspInit+0xf4>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <HAL_UART_MspInit+0xf4>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b2c      	ldr	r3, [pc, #176]	@ (8002d80 <HAL_UART_MspInit+0xf4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d80 <HAL_UART_MspInit+0xf4>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cda:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <HAL_UART_MspInit+0xf4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	4820      	ldr	r0, [pc, #128]	@ (8002d84 <HAL_UART_MspInit+0xf8>)
 8002d04:	f002 fcec 	bl	80056e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002d08:	4b1f      	ldr	r3, [pc, #124]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d0a:	4a20      	ldr	r2, [pc, #128]	@ (8002d8c <HAL_UART_MspInit+0x100>)
 8002d0c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d10:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d14:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d16:	4b1c      	ldr	r3, [pc, #112]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d22:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d28:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d2a:	4b17      	ldr	r3, [pc, #92]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d30:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002d36:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d42:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002d48:	480f      	ldr	r0, [pc, #60]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d4a:	f000 fe43 	bl	80039d4 <HAL_DMA_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002d54:	f7ff fa06 	bl	8002164 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <HAL_UART_MspInit+0xfc>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2105      	movs	r1, #5
 8002d68:	2027      	movs	r0, #39	@ 0x27
 8002d6a:	f000 fe09 	bl	8003980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d6e:	2027      	movs	r0, #39	@ 0x27
 8002d70:	f000 fe22 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d74:	bf00      	nop
 8002d76:	3728      	adds	r7, #40	@ 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40004800 	.word	0x40004800
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	200006e8 	.word	0x200006e8
 8002d8c:	40026028 	.word	0x40026028

08002d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dc8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d94:	480d      	ldr	r0, [pc, #52]	@ (8002dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d96:	490e      	ldr	r1, [pc, #56]	@ (8002dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d98:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d9c:	e002      	b.n	8002da4 <LoopCopyDataInit>

08002d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da2:	3304      	adds	r3, #4

08002da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da8:	d3f9      	bcc.n	8002d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002daa:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dac:	4c0b      	ldr	r4, [pc, #44]	@ (8002ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db0:	e001      	b.n	8002db6 <LoopFillZerobss>

08002db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db4:	3204      	adds	r2, #4

08002db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db8:	d3fb      	bcc.n	8002db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dba:	f7ff fddb 	bl	8002974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dbe:	f01b fd0b 	bl	801e7d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc2:	f7ff f91f 	bl	8002004 <main>
  bx  lr    
 8002dc6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002dc8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002dd4:	08024ab4 	.word	0x08024ab4
  ldr r2, =_sbss
 8002dd8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002ddc:	2000ff68 	.word	0x2000ff68

08002de0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <CAN1_RX0_IRQHandler>

08002de2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <LAN8742_RegisterBusIO+0x28>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <LAN8742_RegisterBusIO+0x28>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <LAN8742_RegisterBusIO+0x28>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e0e:	e014      	b.n	8002e3a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d139      	bne.n	8002ed6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e01c      	b.n	8002eb6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f107 020c 	add.w	r2, r7, #12
 8002e84:	2112      	movs	r1, #18
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	4798      	blx	r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da03      	bge.n	8002e98 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002e90:	f06f 0304 	mvn.w	r3, #4
 8002e94:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002e96:	e00b      	b.n	8002eb0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d105      	bne.n	8002eb0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
         break;
 8002eae:	e005      	b.n	8002ebc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b1f      	cmp	r3, #31
 8002eba:	d9df      	bls.n	8002e7c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b1f      	cmp	r3, #31
 8002ec2:	d902      	bls.n	8002eca <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002ec4:	f06f 0302 	mvn.w	r3, #2
 8002ec8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 }
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6810      	ldr	r0, [r2, #0]
 8002ef4:	f107 020c 	add.w	r2, r7, #12
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4798      	blx	r3
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da02      	bge.n	8002f08 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002f02:	f06f 0304 	mvn.w	r3, #4
 8002f06:	e06e      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6810      	ldr	r0, [r2, #0]
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	2101      	movs	r1, #1
 8002f16:	4798      	blx	r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da02      	bge.n	8002f24 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002f1e:	f06f 0304 	mvn.w	r3, #4
 8002f22:	e060      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e059      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6810      	ldr	r0, [r2, #0]
 8002f3a:	f107 020c 	add.w	r2, r7, #12
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4798      	blx	r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da02      	bge.n	8002f4e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002f48:	f06f 0304 	mvn.w	r3, #4
 8002f4c:	e04b      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11b      	bne.n	8002f90 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <LAN8742_GetLinkState+0x90>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e03a      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e033      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e02c      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002f8c:	2305      	movs	r3, #5
 8002f8e:	e02a      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6810      	ldr	r0, [r2, #0]
 8002f98:	f107 020c 	add.w	r2, r7, #12
 8002f9c:	211f      	movs	r1, #31
 8002f9e:	4798      	blx	r3
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da02      	bge.n	8002fac <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002fa6:	f06f 0304 	mvn.w	r3, #4
 8002faa:	e01c      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	e015      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 031c 	and.w	r3, r3, #28
 8002fc0:	2b18      	cmp	r3, #24
 8002fc2:	d101      	bne.n	8002fc8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e00e      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 031c 	and.w	r3, r3, #28
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d101      	bne.n	8002fd6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e007      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 031c 	and.w	r3, r3, #28
 8002fdc:	2b14      	cmp	r3, #20
 8002fde:	d101      	bne.n	8002fe4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	e000      	b.n	8002fe6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002fe4:	2305      	movs	r3, #5
    }
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <HAL_Init+0x40>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <HAL_Init+0x40>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800300a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <HAL_Init+0x40>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f000 fca6 	bl	800396a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	200f      	movs	r0, #15
 8003020:	f7ff faea 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fabc 	bl	80025a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000008 	.word	0x20000008
 8003058:	20000748 	.word	0x20000748

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000748 	.word	0x20000748

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000008 	.word	0x20000008

080030bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e033      	b.n	800313a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd ff90 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa78 	bl	8003604 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
 800312a:	e001      	b.n	8003130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d049      	beq.n	800320c <HAL_ADC_IRQHandler+0xca>
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d046      	beq.n	800320c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d12b      	bne.n	80031fc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d127      	bne.n	80031fc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d119      	bne.n	80031fc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0220 	bic.w	r2, r2, #32
 80031d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8b0 	bl	8003362 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0212 	mvn.w	r2, #18
 800320a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d057      	beq.n	80032d2 <HAL_ADC_IRQHandler+0x190>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d054      	beq.n	80032d2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d139      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003266:	2b00      	cmp	r3, #0
 8003268:	d12b      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003274:	2b00      	cmp	r3, #0
 8003276:	d124      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11d      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d119      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800329c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa9a 	bl	80037fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 020c 	mvn.w	r2, #12
 80032d0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_ADC_IRQHandler+0x1d6>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d014      	beq.n	8003318 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10d      	bne.n	8003318 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f834 	bl	8003376 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f06f 0201 	mvn.w	r2, #1
 8003316:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003326:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d015      	beq.n	800335a <HAL_ADC_IRQHandler+0x218>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f043 0202 	orr.w	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0220 	mvn.w	r2, #32
 8003348:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f81d 	bl	800338a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0220 	mvn.w	r2, #32
 8003358:	601a      	str	r2, [r3, #0]
  }
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e113      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x244>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d925      	bls.n	8003418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43da      	mvns	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	400a      	ands	r2, r1
 80033f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	4603      	mov	r3, r0
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4403      	add	r3, r0
 800340a:	3b1e      	subs	r3, #30
 800340c:	409a      	lsls	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e022      	b.n	800345e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	2207      	movs	r2, #7
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	400a      	ands	r2, r1
 800343a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6919      	ldr	r1, [r3, #16]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
 800344e:	4603      	mov	r3, r0
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4403      	add	r3, r0
 8003454:	409a      	lsls	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d824      	bhi.n	80034b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	221f      	movs	r2, #31
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	4618      	mov	r0, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b05      	subs	r3, #5
 80034a2:	fa00 f203 	lsl.w	r2, r0, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80034ae:	e04c      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d824      	bhi.n	8003502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b23      	subs	r3, #35	@ 0x23
 80034ca:	221f      	movs	r2, #31
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	400a      	ands	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b23      	subs	r3, #35	@ 0x23
 80034f4:	fa00 f203 	lsl.w	r2, r0, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003500:	e023      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b41      	subs	r3, #65	@ 0x41
 8003514:	221f      	movs	r2, #31
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b41      	subs	r3, #65	@ 0x41
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354a:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <HAL_ADC_ConfigChannel+0x250>)
 800354c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a28      	ldr	r2, [pc, #160]	@ (80035f4 <HAL_ADC_ConfigChannel+0x254>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d10f      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x1d8>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b12      	cmp	r3, #18
 800355e:	d10b      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <HAL_ADC_ConfigChannel+0x254>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d12b      	bne.n	80035da <HAL_ADC_ConfigChannel+0x23a>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <HAL_ADC_ConfigChannel+0x258>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <HAL_ADC_ConfigChannel+0x1f4>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b11      	cmp	r3, #17
 8003592:	d122      	bne.n	80035da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a11      	ldr	r2, [pc, #68]	@ (80035f8 <HAL_ADC_ConfigChannel+0x258>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d111      	bne.n	80035da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035b6:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <HAL_ADC_ConfigChannel+0x25c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a11      	ldr	r2, [pc, #68]	@ (8003600 <HAL_ADC_ConfigChannel+0x260>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	0c9a      	lsrs	r2, r3, #18
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035cc:	e002      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f9      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40012300 	.word	0x40012300
 80035f4:	40012000 	.word	0x40012000
 80035f8:	10000012 	.word	0x10000012
 80035fc:	20000000 	.word	0x20000000
 8003600:	431bde83 	.word	0x431bde83

08003604 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800360c:	4b79      	ldr	r3, [pc, #484]	@ (80037f4 <ADC_Init+0x1f0>)
 800360e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	021a      	lsls	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800365c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800367e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	4a58      	ldr	r2, [pc, #352]	@ (80037f8 <ADC_Init+0x1f4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d022      	beq.n	80036e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6899      	ldr	r1, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e00f      	b.n	8003702 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0202 	bic.w	r2, r2, #2
 8003710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7e1b      	ldrb	r3, [r3, #24]
 800371c:	005a      	lsls	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800373e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800374e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	3b01      	subs	r3, #1
 800375c:	035a      	lsls	r2, r3, #13
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e007      	b.n	8003778 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	3b01      	subs	r3, #1
 8003794:	051a      	lsls	r2, r3, #20
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6899      	ldr	r1, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037ba:	025a      	lsls	r2, r3, #9
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	029a      	lsls	r2, r3, #10
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40012300 	.word	0x40012300
 80037f8:	0f000001 	.word	0x0f000001

080037fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <__NVIC_SetPriorityGrouping+0x44>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800382c:	4013      	ands	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800383c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003842:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <__NVIC_SetPriorityGrouping+0x44>)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	60d3      	str	r3, [r2, #12]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800385c:	4b04      	ldr	r3, [pc, #16]	@ (8003870 <__NVIC_GetPriorityGrouping+0x18>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	0a1b      	lsrs	r3, r3, #8
 8003862:	f003 0307 	and.w	r3, r3, #7
}
 8003866:	4618      	mov	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	2b00      	cmp	r3, #0
 8003884:	db0b      	blt.n	800389e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	f003 021f 	and.w	r2, r3, #31
 800388c:	4907      	ldr	r1, [pc, #28]	@ (80038ac <__NVIC_EnableIRQ+0x38>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2001      	movs	r0, #1
 8003896:	fa00 f202 	lsl.w	r2, r0, r2
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000e100 	.word	0xe000e100

080038b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	db0a      	blt.n	80038da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	490c      	ldr	r1, [pc, #48]	@ (80038fc <__NVIC_SetPriority+0x4c>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	440b      	add	r3, r1
 80038d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d8:	e00a      	b.n	80038f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4908      	ldr	r1, [pc, #32]	@ (8003900 <__NVIC_SetPriority+0x50>)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	3b04      	subs	r3, #4
 80038e8:	0112      	lsls	r2, r2, #4
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	440b      	add	r3, r1
 80038ee:	761a      	strb	r2, [r3, #24]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000e100 	.word	0xe000e100
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003904:	b480      	push	{r7}
 8003906:	b089      	sub	sp, #36	@ 0x24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f1c3 0307 	rsb	r3, r3, #7
 800391e:	2b04      	cmp	r3, #4
 8003920:	bf28      	it	cs
 8003922:	2304      	movcs	r3, #4
 8003924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3304      	adds	r3, #4
 800392a:	2b06      	cmp	r3, #6
 800392c:	d902      	bls.n	8003934 <NVIC_EncodePriority+0x30>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3b03      	subs	r3, #3
 8003932:	e000      	b.n	8003936 <NVIC_EncodePriority+0x32>
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	401a      	ands	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800394c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	43d9      	mvns	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	4313      	orrs	r3, r2
         );
}
 800395e:	4618      	mov	r0, r3
 8003960:	3724      	adds	r7, #36	@ 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff4c 	bl	8003810 <__NVIC_SetPriorityGrouping>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003992:	f7ff ff61 	bl	8003858 <__NVIC_GetPriorityGrouping>
 8003996:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f7ff ffb1 	bl	8003904 <NVIC_EncodePriority>
 80039a2:	4602      	mov	r2, r0
 80039a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff80 	bl	80038b0 <__NVIC_SetPriority>
}
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff54 	bl	8003874 <__NVIC_EnableIRQ>
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fb3c 	bl	800305c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e099      	b.n	8003b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a10:	e00f      	b.n	8003a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a12:	f7ff fb23 	bl	800305c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d908      	bls.n	8003a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e078      	b.n	8003b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e8      	bne.n	8003a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4b38      	ldr	r3, [pc, #224]	@ (8003b2c <HAL_DMA_Init+0x158>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d107      	bne.n	8003a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	4313      	orrs	r3, r2
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0307 	bic.w	r3, r3, #7
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d117      	bne.n	8003af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fb1b 	bl	8004114 <DMA_CheckFifoParam>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2240      	movs	r2, #64	@ 0x40
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003af2:	2301      	movs	r3, #1
 8003af4:	e016      	b.n	8003b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fad2 	bl	80040a8 <DMA_CalcBaseAndBitshift>
 8003b04:	4603      	mov	r3, r0
 8003b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0c:	223f      	movs	r2, #63	@ 0x3f
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	f010803f 	.word	0xf010803f

08003b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_DMA_Start_IT+0x26>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e040      	b.n	8003bd8 <HAL_DMA_Start_IT+0xa8>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d12f      	bne.n	8003bca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa64 	bl	800404c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	223f      	movs	r2, #63	@ 0x3f
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0216 	orr.w	r2, r2, #22
 8003b9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0208 	orr.w	r2, r2, #8
 8003bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e005      	b.n	8003bd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bee:	f7ff fa35 	bl	800305c <HAL_GetTick>
 8003bf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d008      	beq.n	8003c12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2280      	movs	r2, #128	@ 0x80
 8003c04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e052      	b.n	8003cb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0216 	bic.w	r2, r2, #22
 8003c20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <HAL_DMA_Abort+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0208 	bic.w	r2, r2, #8
 8003c50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c62:	e013      	b.n	8003c8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c64:	f7ff f9fa 	bl	800305c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d90c      	bls.n	8003c8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e015      	b.n	8003cb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e4      	bne.n	8003c64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9e:	223f      	movs	r2, #63	@ 0x3f
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2280      	movs	r2, #128	@ 0x80
 8003cd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00c      	b.n	8003cf8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d10:	4b8e      	ldr	r3, [pc, #568]	@ (8003f4c <HAL_DMA_IRQHandler+0x248>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a8e      	ldr	r2, [pc, #568]	@ (8003f50 <HAL_DMA_IRQHandler+0x24c>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	2208      	movs	r2, #8
 8003d30:	409a      	lsls	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01a      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d012      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d92:	2201      	movs	r2, #1
 8003d94:	409a      	lsls	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f043 0202 	orr.w	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	2204      	movs	r2, #4
 8003dac:	409a      	lsls	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d012      	beq.n	8003ddc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	2204      	movs	r2, #4
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	f043 0204 	orr.w	r2, r3, #4
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de0:	2210      	movs	r2, #16
 8003de2:	409a      	lsls	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d043      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03c      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfe:	2210      	movs	r2, #16
 8003e00:	409a      	lsls	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d108      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d024      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
 8003e32:	e01f      	b.n	8003e74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
 8003e44:	e016      	b.n	8003e74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0208 	bic.w	r2, r2, #8
 8003e62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e78:	2220      	movs	r2, #32
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 808f 	beq.w	8003fa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8087 	beq.w	8003fa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d136      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0216 	bic.w	r2, r2, #22
 8003ebc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ecc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_DMA_IRQHandler+0x1da>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0208 	bic.w	r2, r2, #8
 8003eec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	223f      	movs	r2, #63	@ 0x3f
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d07e      	beq.n	8004010 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
        }
        return;
 8003f1a:	e079      	b.n	8004010 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01d      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10d      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d031      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
 8003f48:	e02c      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x2a0>
 8003f4a:	bf00      	nop
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d023      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e01e      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10f      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0210 	bic.w	r2, r2, #16
 8003f82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d032      	beq.n	8004012 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2205      	movs	r2, #5
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d307      	bcc.n	8003fec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f2      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x2cc>
 8003fea:	e000      	b.n	8003fee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
 800400e:	e000      	b.n	8004012 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004010:	bf00      	nop
    }
  }
}
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004026:	b2db      	uxtb	r3, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004068:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	d108      	bne.n	800408c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800408a:	e007      	b.n	800409c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	3b10      	subs	r3, #16
 80040b8:	4a14      	ldr	r2, [pc, #80]	@ (800410c <DMA_CalcBaseAndBitshift+0x64>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040c2:	4a13      	ldr	r2, [pc, #76]	@ (8004110 <DMA_CalcBaseAndBitshift+0x68>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d909      	bls.n	80040ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80040e8:	e007      	b.n	80040fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	aaaaaaab 	.word	0xaaaaaaab
 8004110:	08024540 	.word	0x08024540

08004114 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11f      	bne.n	800416e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d856      	bhi.n	80041e2 <DMA_CheckFifoParam+0xce>
 8004134:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <DMA_CheckFifoParam+0x28>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	0800414d 	.word	0x0800414d
 8004140:	0800415f 	.word	0x0800415f
 8004144:	0800414d 	.word	0x0800414d
 8004148:	080041e3 	.word	0x080041e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d046      	beq.n	80041e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415c:	e043      	b.n	80041e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004166:	d140      	bne.n	80041ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416c:	e03d      	b.n	80041ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004176:	d121      	bne.n	80041bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d837      	bhi.n	80041ee <DMA_CheckFifoParam+0xda>
 800417e:	a201      	add	r2, pc, #4	@ (adr r2, 8004184 <DMA_CheckFifoParam+0x70>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	08004195 	.word	0x08004195
 8004188:	0800419b 	.word	0x0800419b
 800418c:	08004195 	.word	0x08004195
 8004190:	080041ad 	.word	0x080041ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      break;
 8004198:	e030      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d025      	beq.n	80041f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041aa:	e022      	b.n	80041f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041b4:	d11f      	bne.n	80041f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ba:	e01c      	b.n	80041f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d903      	bls.n	80041ca <DMA_CheckFifoParam+0xb6>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d003      	beq.n	80041d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041c8:	e018      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
      break;
 80041ce:	e015      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00e      	beq.n	80041fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e00b      	b.n	80041fa <DMA_CheckFifoParam+0xe6>
      break;
 80041e2:	bf00      	nop
 80041e4:	e00a      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      break;
 80041e6:	bf00      	nop
 80041e8:	e008      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      break;
 80041ea:	bf00      	nop
 80041ec:	e006      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      break;
 80041ee:	bf00      	nop
 80041f0:	e004      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      break;   
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
    }
  } 
  
  return status; 
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop

0800420c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e08a      	b.n	8004334 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2223      	movs	r2, #35	@ 0x23
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f007 fa59 	bl	800b6e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b40      	ldr	r3, [pc, #256]	@ (800433c <HAL_ETH_Init+0x130>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	4a3f      	ldr	r2, [pc, #252]	@ (800433c <HAL_ETH_Init+0x130>)
 8004240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004244:	6453      	str	r3, [r2, #68]	@ 0x44
 8004246:	4b3d      	ldr	r3, [pc, #244]	@ (800433c <HAL_ETH_Init+0x130>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004252:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_ETH_Init+0x134>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4a3a      	ldr	r2, [pc, #232]	@ (8004340 <HAL_ETH_Init+0x134>)
 8004258:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800425c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800425e:	4b38      	ldr	r3, [pc, #224]	@ (8004340 <HAL_ETH_Init+0x134>)
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4936      	ldr	r1, [pc, #216]	@ (8004340 <HAL_ETH_Init+0x134>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800426c:	4b34      	ldr	r3, [pc, #208]	@ (8004340 <HAL_ETH_Init+0x134>)
 800426e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004286:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004288:	f7fe fee8 	bl	800305c <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800428e:	e011      	b.n	80042b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004290:	f7fe fee4 	bl	800305c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800429e:	d909      	bls.n	80042b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	22e0      	movs	r2, #224	@ 0xe0
 80042ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e03f      	b.n	8004334 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e4      	bne.n	8004290 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 ff4c 	bl	8005164 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fff7 	bl	80052c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 f84d 	bl	8005372 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	461a      	mov	r2, r3
 80042de:	2100      	movs	r1, #0
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 ffb5 	bl	8005250 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80042f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004306:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800430a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800431e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2210      	movs	r2, #16
 800432e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	40013800 	.word	0x40013800

08004344 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004352:	2b10      	cmp	r3, #16
 8004354:	d161      	bne.n	800441a <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2223      	movs	r2, #35	@ 0x23
 800435a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2204      	movs	r2, #4
 8004368:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f9f4 	bl	8004758 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004378:	2001      	movs	r0, #1
 800437a:	f7fe fe7b 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004398:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800439c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043b4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fd71 	bl	8004e9e <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043d4:	2001      	movs	r0, #1
 80043d6:	f7fe fe4d 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0204 	orr.w	r2, r2, #4
 80043f0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8004404:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8004408:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800440c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2223      	movs	r2, #35	@ 0x23
 8004412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004432:	2b23      	cmp	r3, #35	@ 0x23
 8004434:	d170      	bne.n	8004518 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2223      	movs	r2, #35	@ 0x23
 800443a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8004450:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8004454:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004458:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800446c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004470:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	f023 0302 	bic.w	r3, r3, #2
 8004484:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004488:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0204 	bic.w	r2, r2, #4
 8004498:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044a2:	2001      	movs	r0, #1
 80044a4:	f7fe fde6 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fcf4 	bl	8004e9e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0208 	bic.w	r2, r2, #8
 80044c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f7fe fdd0 	bl	8003074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e00e      	b.n	8004500 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	3212      	adds	r2, #18
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	3301      	adds	r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d9ed      	bls.n	80044e2 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2210      	movs	r2, #16
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004538:	f043 0201 	orr.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e045      	b.n	80045d2 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454c:	2b23      	cmp	r3, #35	@ 0x23
 800454e:	d13f      	bne.n	80045d0 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004558:	2201      	movs	r2, #1
 800455a:	6839      	ldr	r1, [r7, #0]
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 ff77 	bl	8005450 <ETH_Prepare_Tx_Descriptors>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	f043 0202 	orr.w	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e02a      	b.n	80045d2 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800457c:	f3bf 8f4f 	dsb	sy
}
 8004580:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	@ 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	2b03      	cmp	r3, #3
 8004592:	d904      	bls.n	800459e <HAL_ETH_Transmit_IT+0x7c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004598:	1f1a      	subs	r2, r3, #4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b8:	461a      	mov	r2, r3
 80045ba:	2304      	movs	r3, #4
 80045bc:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c6:	461a      	mov	r2, r3
 80045c8:	2300      	movs	r3, #0
 80045ca:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e0a4      	b.n	8004750 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460c:	2b23      	cmp	r3, #35	@ 0x23
 800460e:	d001      	beq.n	8004614 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e09d      	b.n	8004750 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004618:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	3212      	adds	r2, #18
 8004620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004624:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800462a:	f1c3 0304 	rsb	r3, r3, #4
 800462e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004630:	e066      	b.n	8004700 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <HAL_ETH_ReadData+0x88>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d03c      	beq.n	80046dc <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004684:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046b6:	461a      	mov	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f007 f9ee 	bl	800ba9c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2200      	movs	r2, #0
 80046da:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3301      	adds	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d902      	bls.n	80046ee <HAL_ETH_ReadData+0x114>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	3b04      	subs	r3, #4
 80046ec:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	3212      	adds	r2, #18
 80046f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3301      	adds	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004704:	2b00      	cmp	r3, #0
 8004706:	db06      	blt.n	8004716 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d202      	bcs.n	8004716 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d08d      	beq.n	8004632 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	441a      	add	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f814 	bl	8004758 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d108      	bne.n	800474e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
}
 8004750:	4618      	mov	r0, r3
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004764:	2301      	movs	r3, #1
 8004766:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800476c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	3212      	adds	r2, #18
 8004774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004778:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004780:	e044      	b.n	800480c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d112      	bne.n	80047b0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4618      	mov	r0, r3
 8004790:	f007 f954 	bl	800ba3c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	74fb      	strb	r3, [r7, #19]
 800479e:	e007      	b.n	80047b0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	461a      	mov	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	461a      	mov	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d02a      	beq.n	800480c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	6053      	str	r3, [r2, #4]
 80047ce:	e005      	b.n	80047dc <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d902      	bls.n	80047fa <ETH_UpdateDescriptor+0xa2>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3b04      	subs	r3, #4
 80047f8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	3212      	adds	r2, #18
 8004800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004804:	617b      	str	r3, [r7, #20]
      desccount--;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3b01      	subs	r3, #1
 800480a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <ETH_UpdateDescriptor+0xc0>
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1b4      	bne.n	8004782 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d01a      	beq.n	8004858 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800482c:	f3bf 8f5f 	dmb	sy
}
 8004830:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6919      	ldr	r1, [r3, #16]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	18ca      	adds	r2, r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004858:	bf00      	nop
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3318      	adds	r3, #24
 800486c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800487e:	e047      	b.n	8004910 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	3b01      	subs	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3304      	adds	r3, #4
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3301      	adds	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d902      	bls.n	80048ac <HAL_ETH_ReleaseTxPacket+0x4c>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80048b0:	7bbb      	ldrb	r3, [r7, #14]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02c      	beq.n	8004910 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68d9      	ldr	r1, [r3, #12]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	440b      	add	r3, r1
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	db1f      	blt.n	800490c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3304      	adds	r3, #4
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	f007 f91f 	bl	800bb1c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	3304      	adds	r3, #4
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3301      	adds	r3, #1
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d902      	bls.n	80048fe <HAL_ETH_ReleaseTxPacket+0x9e>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3b04      	subs	r3, #4
 80048fc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	62da      	str	r2, [r3, #44]	@ 0x2c
 800490a:	e001      	b.n	8004910 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_ETH_ReleaseTxPacket+0xbc>
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1b1      	bne.n	8004880 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004950:	4b4b      	ldr	r3, [pc, #300]	@ (8004a80 <HAL_ETH_IRQHandler+0x158>)
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00e      	beq.n	800497e <HAL_ETH_IRQHandler+0x56>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004972:	461a      	mov	r2, r3
 8004974:	4b43      	ldr	r3, [pc, #268]	@ (8004a84 <HAL_ETH_IRQHandler+0x15c>)
 8004976:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f006 fc09 	bl	800b190 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00f      	beq.n	80049a8 <HAL_ETH_IRQHandler+0x80>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800499a:	461a      	mov	r2, r3
 800499c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80049a0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f006 fc04 	bl	800b1b0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d042      	beq.n	8004a38 <HAL_ETH_IRQHandler+0x110>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d03d      	beq.n	8004a38 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f043 0208 	orr.w	r2, r3, #8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01a      	beq.n	8004a0c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	4b29      	ldr	r3, [pc, #164]	@ (8004a88 <HAL_ETH_IRQHandler+0x160>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80049fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a00:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	22e0      	movs	r2, #224	@ 0xe0
 8004a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004a0a:	e012      	b.n	8004a32 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a30:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f006 fbcc 	bl	800b1d0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00e      	beq.n	8004a60 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f81a 	bl	8004a8c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a6a:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_ETH_IRQHandler+0x158>)
 8004a6c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004a70:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f814 	bl	8004aa0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40013c00 	.word	0x40013c00
 8004a84:	00010040 	.word	0x00010040
 8004a88:	007e2000 	.word	0x007e2000

08004a8c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 031c 	and.w	r3, r3, #28
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	02db      	lsls	r3, r3, #11
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0302 	bic.w	r3, r3, #2
 8004af2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004b04:	f7fe faaa 	bl	800305c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b0a:	e00d      	b.n	8004b28 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004b0c:	f7fe faa6 	bl	800305c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b1a:	d301      	bcc.n	8004b20 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e010      	b.n	8004b42 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ec      	bne.n	8004b0c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 031c 	and.w	r3, r3, #28
 8004b66:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	02db      	lsls	r3, r3, #11
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	019b      	lsls	r3, r3, #6
 8004b78:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba4:	f7fe fa5a 	bl	800305c <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004baa:	e00d      	b.n	8004bc8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004bac:	f7fe fa56 	bl	800305c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bba:	d301      	bcc.n	8004bc0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e009      	b.n	8004bd4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1ec      	bne.n	8004bac <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0e6      	b.n	8004dbe <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf14      	ite	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	2300      	moveq	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf14      	ite	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	2300      	moveq	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf14      	ite	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	2300      	moveq	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e00b      	b.n	8004df6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d105      	bne.n	8004df4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f87c 	bl	8004ee8 <ETH_SetMACConfig>

    return HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e000      	b.n	8004df6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 031c 	bic.w	r3, r3, #28
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e18:	f003 ff82 	bl	8008d20 <HAL_RCC_GetHCLKFreq>
 8004e1c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d804      	bhi.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f043 0308 	orr.w	r3, r3, #8
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e019      	b.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a11      	ldr	r2, [pc, #68]	@ (8004e78 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d204      	bcs.n	8004e42 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f043 030c 	orr.w	r3, r3, #12
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e010      	b.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a0d      	ldr	r2, [pc, #52]	@ (8004e7c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d90c      	bls.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e80 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d804      	bhi.n	8004e5c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f043 0304 	orr.w	r3, r3, #4
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e003      	b.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f043 0310 	orr.w	r3, r3, #16
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	611a      	str	r2, [r3, #16]
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	02160ebf 	.word	0x02160ebf
 8004e78:	03938700 	.word	0x03938700
 8004e7c:	05f5e0ff 	.word	0x05f5e0ff
 8004e80:	08f0d17f 	.word	0x08f0d17f

08004e84 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ebc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ec0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ece:	2001      	movs	r0, #1
 8004ed0:	f7fe f8d0 	bl	8003074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ede:	6193      	str	r3, [r2, #24]
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4b53      	ldr	r3, [pc, #332]	@ (800504c <ETH_SetMACConfig+0x164>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	7b9b      	ldrb	r3, [r3, #14]
 8004f06:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	7c12      	ldrb	r2, [r2, #16]
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	d102      	bne.n	8004f16 <ETH_SetMACConfig+0x2e>
 8004f10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f14:	e000      	b.n	8004f18 <ETH_SetMACConfig+0x30>
 8004f16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	7c52      	ldrb	r2, [r2, #17]
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	d102      	bne.n	8004f28 <ETH_SetMACConfig+0x40>
 8004f22:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004f26:	e000      	b.n	8004f2a <ETH_SetMACConfig+0x42>
 8004f28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f2a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	7fdb      	ldrb	r3, [r3, #31]
 8004f36:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004f38:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	7f92      	ldrb	r2, [r2, #30]
 8004f44:	2a00      	cmp	r2, #0
 8004f46:	d102      	bne.n	8004f4e <ETH_SetMACConfig+0x66>
 8004f48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f4c:	e000      	b.n	8004f50 <ETH_SetMACConfig+0x68>
 8004f4e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004f50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	7f1b      	ldrb	r3, [r3, #28]
 8004f56:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f58:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	791b      	ldrb	r3, [r3, #4]
 8004f64:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	d102      	bne.n	8004f78 <ETH_SetMACConfig+0x90>
 8004f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f76:	e000      	b.n	8004f7a <ETH_SetMACConfig+0x92>
 8004f78:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7bdb      	ldrb	r3, [r3, #15]
 8004f80:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f82:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f90:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f92:	4313      	orrs	r3, r2
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004faa:	2001      	movs	r0, #1
 8004fac:	f7fe f862 	bl	8003074 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004fd6:	2a00      	cmp	r2, #0
 8004fd8:	d101      	bne.n	8004fde <ETH_SetMACConfig+0xf6>
 8004fda:	2280      	movs	r2, #128	@ 0x80
 8004fdc:	e000      	b.n	8004fe0 <ETH_SetMACConfig+0xf8>
 8004fde:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fe0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004fe6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004fee:	2a01      	cmp	r2, #1
 8004ff0:	d101      	bne.n	8004ff6 <ETH_SetMACConfig+0x10e>
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	e000      	b.n	8004ff8 <ETH_SetMACConfig+0x110>
 8004ff6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004ff8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005000:	2a01      	cmp	r2, #1
 8005002:	d101      	bne.n	8005008 <ETH_SetMACConfig+0x120>
 8005004:	2204      	movs	r2, #4
 8005006:	e000      	b.n	800500a <ETH_SetMACConfig+0x122>
 8005008:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800500a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005012:	2a01      	cmp	r2, #1
 8005014:	d101      	bne.n	800501a <ETH_SetMACConfig+0x132>
 8005016:	2202      	movs	r2, #2
 8005018:	e000      	b.n	800501c <ETH_SetMACConfig+0x134>
 800501a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800501c:	4313      	orrs	r3, r2
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005034:	2001      	movs	r0, #1
 8005036:	f7fe f81d 	bl	8003074 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	fd20810f 	.word	0xfd20810f

08005050 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4b3d      	ldr	r3, [pc, #244]	@ (8005160 <ETH_SetDMAConfig+0x110>)
 800506a:	4013      	ands	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	7b1b      	ldrb	r3, [r3, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <ETH_SetDMAConfig+0x2c>
 8005076:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800507a:	e000      	b.n	800507e <ETH_SetDMAConfig+0x2e>
 800507c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	7b5b      	ldrb	r3, [r3, #13]
 8005082:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005084:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	7f52      	ldrb	r2, [r2, #29]
 800508a:	2a00      	cmp	r2, #0
 800508c:	d102      	bne.n	8005094 <ETH_SetDMAConfig+0x44>
 800508e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005092:	e000      	b.n	8005096 <ETH_SetDMAConfig+0x46>
 8005094:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005096:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	7b9b      	ldrb	r3, [r3, #14]
 800509c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800509e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	7f1b      	ldrb	r3, [r3, #28]
 80050aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80050ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	7f9b      	ldrb	r3, [r3, #30]
 80050b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050c4:	4313      	orrs	r3, r2
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d4:	461a      	mov	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050e6:	2001      	movs	r0, #1
 80050e8:	f7fd ffc4 	bl	8003074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f4:	461a      	mov	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	791b      	ldrb	r3, [r3, #4]
 80050fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005104:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800510a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005110:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005118:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800511a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005122:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005128:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005132:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005136:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005144:	2001      	movs	r0, #1
 8005146:	f7fd ff95 	bl	8003074 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6013      	str	r3, [r2, #0]
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	f8de3f23 	.word	0xf8de3f23

08005164 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b0a6      	sub	sp, #152	@ 0x98
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005178:	2300      	movs	r3, #0
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800519a:	2300      	movs	r3, #0
 800519c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051a6:	2300      	movs	r3, #0
 80051a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80051cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80051de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fe7f 	bl	8004ee8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80051ea:	2301      	movs	r3, #1
 80051ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800520c:	2300      	movs	r3, #0
 800520e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005216:	2301      	movs	r3, #1
 8005218:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800521a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800521e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005220:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005224:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800522a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005232:	2300      	movs	r3, #0
 8005234:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800523a:	f107 0308 	add.w	r3, r7, #8
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ff05 	bl	8005050 <ETH_SetDMAConfig>
}
 8005246:	bf00      	nop
 8005248:	3798      	adds	r7, #152	@ 0x98
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3305      	adds	r3, #5
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	3204      	adds	r2, #4
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <ETH_MACAddressConfig+0x68>)
 8005272:	4413      	add	r3, r2
 8005274:	461a      	mov	r2, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3303      	adds	r3, #3
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	061a      	lsls	r2, r3, #24
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3302      	adds	r3, #2
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3301      	adds	r3, #1
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	4313      	orrs	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <ETH_MACAddressConfig+0x6c>)
 80052a2:	4413      	add	r3, r2
 80052a4:	461a      	mov	r2, r3
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6013      	str	r3, [r2, #0]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40028040 	.word	0x40028040
 80052bc:	40028044 	.word	0x40028044

080052c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e03e      	b.n	800534c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	3206      	adds	r2, #6
 8005300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d80c      	bhi.n	8005330 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68d9      	ldr	r1, [r3, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e004      	b.n	800533a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	461a      	mov	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b03      	cmp	r3, #3
 8005350:	d9bd      	bls.n	80052ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005364:	611a      	str	r2, [r3, #16]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e048      	b.n	8005412 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6919      	ldr	r1, [r3, #16]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	3212      	adds	r2, #18
 80053de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d80c      	bhi.n	8005402 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6919      	ldr	r1, [r3, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	461a      	mov	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	e004      	b.n	800540c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	461a      	mov	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d9b3      	bls.n	8005380 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005442:	60da      	str	r2, [r3, #12]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005450:	b480      	push	{r7}
 8005452:	b091      	sub	sp, #68	@ 0x44
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3318      	adds	r3, #24
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800548e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005492:	d007      	beq.n	80054a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005498:	3304      	adds	r3, #4
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80054a4:	2302      	movs	r3, #2
 80054a6:	e115      	b.n	80056d4 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80054a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054aa:	3301      	adds	r3, #1
 80054ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80054c0:	f023 031f 	bic.w	r3, r3, #31
 80054c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c6:	6852      	ldr	r2, [r2, #4]
 80054c8:	431a      	orrs	r2, r3
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	431a      	orrs	r2, r3
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800552e:	e084      	b.n	800563a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d006      	beq.n	8005550 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e005      	b.n	800555c <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800555c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555e:	3301      	adds	r3, #1
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005564:	2b03      	cmp	r3, #3
 8005566:	d902      	bls.n	800556e <ETH_Prepare_Tx_Descriptors+0x11e>
 8005568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556a:	3b04      	subs	r3, #4
 800556c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005576:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005584:	d007      	beq.n	8005596 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558a:	3304      	adds	r3, #4
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d029      	beq.n	80055ea <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055a8:	e019      	b.n	80055de <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80055aa:	f3bf 8f5f 	dmb	sy
}
 80055ae:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80055bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055be:	3301      	adds	r3, #1
 80055c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d902      	bls.n	80055ce <ETH_Prepare_Tx_Descriptors+0x17e>
 80055c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ca:	3b04      	subs	r3, #4
 80055cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	3301      	adds	r3, #1
 80055dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d3e1      	bcc.n	80055aa <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80055e6:	2302      	movs	r3, #2
 80055e8:	e074      	b.n	80056d4 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	3301      	adds	r3, #1
 80055fa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005614:	f023 031f 	bic.w	r3, r3, #31
 8005618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800561a:	6852      	ldr	r2, [r2, #4]
 800561c:	431a      	orrs	r2, r3
 800561e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005620:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	3301      	adds	r3, #1
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005628:	f3bf 8f5f 	dmb	sy
}
 800562c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005638:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f47f af76 	bne.w	8005530 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d006      	beq.n	8005658 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e005      	b.n	8005664 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	6a3a      	ldr	r2, [r7, #32]
 8005674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005678:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800567a:	f3bf 8f5f 	dmb	sy
}
 800567e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005694:	3304      	adds	r3, #4
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056a0:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056a2:	f3ef 8310 	mrs	r3, PRIMASK
 80056a6:	613b      	str	r3, [r7, #16]
  return(result);
 80056a8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	4413      	add	r3, r2
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f383 8810 	msr	PRIMASK, r3
}
 80056d0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3744      	adds	r7, #68	@ 0x44
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	@ 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	e177      	b.n	80059ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056fc:	2201      	movs	r2, #1
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4013      	ands	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	429a      	cmp	r2, r3
 8005716:	f040 8166 	bne.w	80059e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b01      	cmp	r3, #1
 8005724:	d005      	beq.n	8005732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800572e:	2b02      	cmp	r3, #2
 8005730:	d130      	bne.n	8005794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	2203      	movs	r2, #3
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005768:	2201      	movs	r2, #1
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	f003 0201 	and.w	r2, r3, #1
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	2b03      	cmp	r3, #3
 800579e:	d017      	beq.n	80057d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	2203      	movs	r2, #3
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d123      	bne.n	8005824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	08da      	lsrs	r2, r3, #3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3208      	adds	r2, #8
 80057e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	220f      	movs	r2, #15
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4313      	orrs	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	08da      	lsrs	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3208      	adds	r2, #8
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f003 0203 	and.w	r2, r3, #3
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4313      	orrs	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80c0 	beq.w	80059e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	4b66      	ldr	r3, [pc, #408]	@ (8005a04 <HAL_GPIO_Init+0x324>)
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	4a65      	ldr	r2, [pc, #404]	@ (8005a04 <HAL_GPIO_Init+0x324>)
 8005870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005874:	6453      	str	r3, [r2, #68]	@ 0x44
 8005876:	4b63      	ldr	r3, [pc, #396]	@ (8005a04 <HAL_GPIO_Init+0x324>)
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005882:	4a61      	ldr	r2, [pc, #388]	@ (8005a08 <HAL_GPIO_Init+0x328>)
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	3302      	adds	r3, #2
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	220f      	movs	r2, #15
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a58      	ldr	r2, [pc, #352]	@ (8005a0c <HAL_GPIO_Init+0x32c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d037      	beq.n	800591e <HAL_GPIO_Init+0x23e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a57      	ldr	r2, [pc, #348]	@ (8005a10 <HAL_GPIO_Init+0x330>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d031      	beq.n	800591a <HAL_GPIO_Init+0x23a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a56      	ldr	r2, [pc, #344]	@ (8005a14 <HAL_GPIO_Init+0x334>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d02b      	beq.n	8005916 <HAL_GPIO_Init+0x236>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a55      	ldr	r2, [pc, #340]	@ (8005a18 <HAL_GPIO_Init+0x338>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d025      	beq.n	8005912 <HAL_GPIO_Init+0x232>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a54      	ldr	r2, [pc, #336]	@ (8005a1c <HAL_GPIO_Init+0x33c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01f      	beq.n	800590e <HAL_GPIO_Init+0x22e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a53      	ldr	r2, [pc, #332]	@ (8005a20 <HAL_GPIO_Init+0x340>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d019      	beq.n	800590a <HAL_GPIO_Init+0x22a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a52      	ldr	r2, [pc, #328]	@ (8005a24 <HAL_GPIO_Init+0x344>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_GPIO_Init+0x226>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a51      	ldr	r2, [pc, #324]	@ (8005a28 <HAL_GPIO_Init+0x348>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00d      	beq.n	8005902 <HAL_GPIO_Init+0x222>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a50      	ldr	r2, [pc, #320]	@ (8005a2c <HAL_GPIO_Init+0x34c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d007      	beq.n	80058fe <HAL_GPIO_Init+0x21e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005a30 <HAL_GPIO_Init+0x350>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_GPIO_Init+0x21a>
 80058f6:	2309      	movs	r3, #9
 80058f8:	e012      	b.n	8005920 <HAL_GPIO_Init+0x240>
 80058fa:	230a      	movs	r3, #10
 80058fc:	e010      	b.n	8005920 <HAL_GPIO_Init+0x240>
 80058fe:	2308      	movs	r3, #8
 8005900:	e00e      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005902:	2307      	movs	r3, #7
 8005904:	e00c      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005906:	2306      	movs	r3, #6
 8005908:	e00a      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800590a:	2305      	movs	r3, #5
 800590c:	e008      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800590e:	2304      	movs	r3, #4
 8005910:	e006      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005912:	2303      	movs	r3, #3
 8005914:	e004      	b.n	8005920 <HAL_GPIO_Init+0x240>
 8005916:	2302      	movs	r3, #2
 8005918:	e002      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_GPIO_Init+0x240>
 800591e:	2300      	movs	r3, #0
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f002 0203 	and.w	r2, r2, #3
 8005926:	0092      	lsls	r2, r2, #2
 8005928:	4093      	lsls	r3, r2
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005930:	4935      	ldr	r1, [pc, #212]	@ (8005a08 <HAL_GPIO_Init+0x328>)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	089b      	lsrs	r3, r3, #2
 8005936:	3302      	adds	r3, #2
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800593e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	43db      	mvns	r3, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4013      	ands	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005962:	4a34      	ldr	r2, [pc, #208]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005968:	4b32      	ldr	r3, [pc, #200]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800598c:	4a29      	ldr	r2, [pc, #164]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005992:	4b28      	ldr	r3, [pc, #160]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059e0:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <HAL_GPIO_Init+0x354>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	f67f ae84 	bls.w	80056fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3724      	adds	r7, #36	@ 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40013800 	.word	0x40013800
 8005a0c:	40020000 	.word	0x40020000
 8005a10:	40020400 	.word	0x40020400
 8005a14:	40020800 	.word	0x40020800
 8005a18:	40020c00 	.word	0x40020c00
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	40021400 	.word	0x40021400
 8005a24:	40021800 	.word	0x40021800
 8005a28:	40021c00 	.word	0x40021c00
 8005a2c:	40022000 	.word	0x40022000
 8005a30:	40022400 	.word	0x40022400
 8005a34:	40013c00 	.word	0x40013c00

08005a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
 8005a44:	4613      	mov	r3, r2
 8005a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a48:	787b      	ldrb	r3, [r7, #1]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a4e:	887a      	ldrh	r2, [r7, #2]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a54:	e003      	b.n	8005a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a56:	887b      	ldrh	r3, [r7, #2]
 8005a58:	041a      	lsls	r2, r3, #16
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	619a      	str	r2, [r3, #24]
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e171      	b.n	8005d62 <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d12c      	bne.n	8005ae4 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a77      	ldr	r2, [pc, #476]	@ (8005c74 <HAL_I2C_Init+0x208>)
 8005a96:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a77      	ldr	r2, [pc, #476]	@ (8005c78 <HAL_I2C_Init+0x20c>)
 8005a9c:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a76      	ldr	r2, [pc, #472]	@ (8005c7c <HAL_I2C_Init+0x210>)
 8005aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a76      	ldr	r2, [pc, #472]	@ (8005c80 <HAL_I2C_Init+0x214>)
 8005aa8:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a75      	ldr	r2, [pc, #468]	@ (8005c84 <HAL_I2C_Init+0x218>)
 8005aae:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a75      	ldr	r2, [pc, #468]	@ (8005c88 <HAL_I2C_Init+0x21c>)
 8005ab4:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a74      	ldr	r2, [pc, #464]	@ (8005c8c <HAL_I2C_Init+0x220>)
 8005aba:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a74      	ldr	r2, [pc, #464]	@ (8005c90 <HAL_I2C_Init+0x224>)
 8005ac0:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a73      	ldr	r2, [pc, #460]	@ (8005c94 <HAL_I2C_Init+0x228>)
 8005ac6:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a73      	ldr	r2, [pc, #460]	@ (8005c98 <HAL_I2C_Init+0x22c>)
 8005acc:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d102      	bne.n	8005adc <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a70      	ldr	r2, [pc, #448]	@ (8005c9c <HAL_I2C_Init+0x230>)
 8005ada:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	@ 0x24
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b1c:	f003 f90c 	bl	8008d38 <HAL_RCC_GetPCLK1Freq>
 8005b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4a5e      	ldr	r2, [pc, #376]	@ (8005ca0 <HAL_I2C_Init+0x234>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d807      	bhi.n	8005b3c <HAL_I2C_Init+0xd0>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ca4 <HAL_I2C_Init+0x238>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	bf94      	ite	ls
 8005b34:	2301      	movls	r3, #1
 8005b36:	2300      	movhi	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	e006      	b.n	8005b4a <HAL_I2C_Init+0xde>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8005ca8 <HAL_I2C_Init+0x23c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bf94      	ite	ls
 8005b44:	2301      	movls	r3, #1
 8005b46:	2300      	movhi	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e107      	b.n	8005d62 <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a55      	ldr	r2, [pc, #340]	@ (8005cac <HAL_I2C_Init+0x240>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0c9b      	lsrs	r3, r3, #18
 8005b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4a47      	ldr	r2, [pc, #284]	@ (8005ca0 <HAL_I2C_Init+0x234>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d802      	bhi.n	8005b8c <HAL_I2C_Init+0x120>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	e009      	b.n	8005ba0 <HAL_I2C_Init+0x134>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	4a46      	ldr	r2, [pc, #280]	@ (8005cb0 <HAL_I2C_Init+0x244>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	099b      	lsrs	r3, r3, #6
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4939      	ldr	r1, [pc, #228]	@ (8005ca0 <HAL_I2C_Init+0x234>)
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	d819      	bhi.n	8005bf4 <HAL_I2C_Init+0x188>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1e59      	subs	r1, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bd4:	400b      	ands	r3, r1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_I2C_Init+0x184>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1e59      	subs	r1, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bee:	e071      	b.n	8005cd4 <HAL_I2C_Init+0x268>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e06f      	b.n	8005cd4 <HAL_I2C_Init+0x268>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d111      	bne.n	8005c20 <HAL_I2C_Init+0x1b4>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1e58      	subs	r0, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	440b      	add	r3, r1
 8005c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e012      	b.n	8005c46 <HAL_I2C_Init+0x1da>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1e58      	subs	r0, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	0099      	lsls	r1, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf0c      	ite	eq
 8005c40:	2301      	moveq	r3, #1
 8005c42:	2300      	movne	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_I2C_Init+0x1e2>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e042      	b.n	8005cd4 <HAL_I2C_Init+0x268>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d12e      	bne.n	8005cb4 <HAL_I2C_Init+0x248>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1e58      	subs	r0, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	440b      	add	r3, r1
 8005c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c72:	e02f      	b.n	8005cd4 <HAL_I2C_Init+0x268>
 8005c74:	0800661b 	.word	0x0800661b
 8005c78:	0800662f 	.word	0x0800662f
 8005c7c:	08006643 	.word	0x08006643
 8005c80:	08006657 	.word	0x08006657
 8005c84:	08006687 	.word	0x08006687
 8005c88:	0800188d 	.word	0x0800188d
 8005c8c:	08001861 	.word	0x08001861
 8005c90:	0800669b 	.word	0x0800669b
 8005c94:	080066af 	.word	0x080066af
 8005c98:	0800666b 	.word	0x0800666b
 8005c9c:	08001d5d 	.word	0x08001d5d
 8005ca0:	000186a0 	.word	0x000186a0
 8005ca4:	001e847f 	.word	0x001e847f
 8005ca8:	003d08ff 	.word	0x003d08ff
 8005cac:	431bde83 	.word	0x431bde83
 8005cb0:	10624dd3 	.word	0x10624dd3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1e58      	subs	r0, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	0099      	lsls	r1, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	6809      	ldr	r1, [r1, #0]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6911      	ldr	r1, [r2, #16]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68d2      	ldr	r2, [r2, #12]
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop

08005d6c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7e:	2b80      	cmp	r3, #128	@ 0x80
 8005d80:	d103      	bne.n	8005d8a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	611a      	str	r2, [r3, #16]
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	@ 0x28
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	817b      	strh	r3, [r7, #10]
 8005daa:	460b      	mov	r3, r1
 8005dac:	813b      	strh	r3, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005db6:	f7fd f951 	bl	800305c <HAL_GetTick>
 8005dba:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	f040 8136 	bne.w	8006036 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dca:	4b9d      	ldr	r3, [pc, #628]	@ (8006040 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	4a9c      	ldr	r2, [pc, #624]	@ (8006044 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	0a1a      	lsrs	r2, r3, #8
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009a      	lsls	r2, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d112      	bne.n	8005e16 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
 8005e14:	e110      	b.n	8006038 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d0df      	beq.n	8005de4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_I2C_Mem_Write_DMA+0x9a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e102      	b.n	8006038 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d007      	beq.n	8005e58 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2221      	movs	r2, #33	@ 0x21
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2240      	movs	r2, #64	@ 0x40
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a6c      	ldr	r2, [pc, #432]	@ (8006048 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8005e98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005e9a:	897a      	ldrh	r2, [r7, #10]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005ea0:	893a      	ldrh	r2, [r7, #8]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80a9 	beq.w	800600e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d02a      	beq.n	8005f1a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec8:	4a60      	ldr	r2, [pc, #384]	@ (800604c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8005eca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed0:	4a5f      	ldr	r2, [pc, #380]	@ (8006050 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8005ed2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed8:	2200      	movs	r2, #0
 8005eda:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee8:	2200      	movs	r2, #0
 8005eea:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	4619      	mov	r1, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3310      	adds	r3, #16
 8005f04:	461a      	mov	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0a:	f7fd fe11 	bl	8003b30 <HAL_DMA_Start_IT>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005f12:	7efb      	ldrb	r3, [r7, #27]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d166      	bne.n	8005fe6 <HAL_I2C_Mem_Write_DMA+0x24e>
 8005f18:	e013      	b.n	8005f42 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e07a      	b.n	8006038 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005f42:	88f8      	ldrh	r0, [r7, #6]
 8005f44:	893a      	ldrh	r2, [r7, #8]
 8005f46:	8979      	ldrh	r1, [r7, #10]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	2323      	movs	r3, #35	@ 0x23
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4603      	mov	r3, r0
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f001 fcdc 	bl	8007910 <I2C_RequestMemoryWrite>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d022      	beq.n	8005fa4 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fd feac 	bl	8003cc0 <HAL_DMA_Abort_IT>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f70:	2200      	movs	r2, #0
 8005f72:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f82:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e049      	b.n	8006038 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fd0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe0:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e028      	b.n	8006038 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	f043 0210 	orr.w	r2, r3, #16
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e014      	b.n	8006038 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006036:	2302      	movs	r3, #2
  }
}
 8006038:	4618      	mov	r0, r3
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20000000 	.word	0x20000000
 8006044:	14f8b589 	.word	0x14f8b589
 8006048:	ffff0000 	.word	0xffff0000
 800604c:	08007c0d 	.word	0x08007c0d
 8006050:	08007dd5 	.word	0x08007dd5

08006054 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	@ 0x30
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	4608      	mov	r0, r1
 800605e:	4611      	mov	r1, r2
 8006060:	461a      	mov	r2, r3
 8006062:	4603      	mov	r3, r0
 8006064:	817b      	strh	r3, [r7, #10]
 8006066:	460b      	mov	r3, r1
 8006068:	813b      	strh	r3, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800606e:	f7fc fff5 	bl	800305c <HAL_GetTick>
 8006072:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b20      	cmp	r3, #32
 8006082:	f040 8172 	bne.w	800636a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006086:	4b93      	ldr	r3, [pc, #588]	@ (80062d4 <HAL_I2C_Mem_Read_DMA+0x280>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	08db      	lsrs	r3, r3, #3
 800608c:	4a92      	ldr	r2, [pc, #584]	@ (80062d8 <HAL_I2C_Mem_Read_DMA+0x284>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	0a1a      	lsrs	r2, r3, #8
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009a      	lsls	r2, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d112      	bne.n	80060d2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
 80060d0:	e14c      	b.n	800636c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d0df      	beq.n	80060a0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_I2C_Mem_Read_DMA+0x9a>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e13e      	b.n	800636c <HAL_I2C_Mem_Read_DMA+0x318>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	d007      	beq.n	8006114 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2222      	movs	r2, #34	@ 0x22
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2240      	movs	r2, #64	@ 0x40
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a62      	ldr	r2, [pc, #392]	@ (80062dc <HAL_I2C_Mem_Read_DMA+0x288>)
 8006154:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006156:	897a      	ldrh	r2, [r7, #10]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800615c:	893a      	ldrh	r2, [r7, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80cc 	beq.w	8006310 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617c:	2b00      	cmp	r3, #0
 800617e:	d02d      	beq.n	80061dc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	4a56      	ldr	r2, [pc, #344]	@ (80062e0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006186:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	4a55      	ldr	r2, [pc, #340]	@ (80062e4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800618e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	2200      	movs	r2, #0
 8006196:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	2200      	movs	r2, #0
 800619e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	2200      	movs	r2, #0
 80061a6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	2200      	movs	r2, #0
 80061ae:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3310      	adds	r3, #16
 80061ba:	4619      	mov	r1, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	461a      	mov	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c6:	f7fd fcb3 	bl	8003b30 <HAL_DMA_Start_IT>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 8087 	bne.w	80062e8 <HAL_I2C_Mem_Read_DMA+0x294>
 80061da:	e013      	b.n	8006204 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0b3      	b.n	800636c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006204:	88f8      	ldrh	r0, [r7, #6]
 8006206:	893a      	ldrh	r2, [r7, #8]
 8006208:	8979      	ldrh	r1, [r7, #10]
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	2323      	movs	r3, #35	@ 0x23
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	4603      	mov	r3, r0
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f001 fc11 	bl	8007a3c <I2C_RequestMemoryRead>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d023      	beq.n	8006268 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006224:	4618      	mov	r0, r3
 8006226:	f7fd fd4b 	bl	8003cc0 <HAL_DMA_Abort_IT>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006234:	2200      	movs	r2, #0
 8006236:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006246:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e081      	b.n	800636c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626c:	2b01      	cmp	r3, #1
 800626e:	d108      	bne.n	8006282 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e007      	b.n	8006292 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006290:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062be:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	e049      	b.n	8006366 <HAL_I2C_Mem_Read_DMA+0x312>
 80062d2:	bf00      	nop
 80062d4:	20000000 	.word	0x20000000
 80062d8:	14f8b589 	.word	0x14f8b589
 80062dc:	ffff0000 	.word	0xffff0000
 80062e0:	08007c0d 	.word	0x08007c0d
 80062e4:	08007dd5 	.word	0x08007dd5
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0210 	orr.w	r2, r3, #16
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e02d      	b.n	800636c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006310:	88f8      	ldrh	r0, [r7, #6]
 8006312:	893a      	ldrh	r2, [r7, #8]
 8006314:	8979      	ldrh	r1, [r7, #10]
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	2323      	movs	r3, #35	@ 0x23
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	4603      	mov	r3, r0
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f001 fb8b 	bl	8007a3c <I2C_RequestMemoryRead>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e01d      	b.n	800636c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006354:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800636a:	2302      	movs	r3, #2
  }
}
 800636c:	4618      	mov	r0, r3
 800636e:	3728      	adds	r7, #40	@ 0x28
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006394:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800639c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d003      	beq.n	80063ac <HAL_I2C_EV_IRQHandler+0x38>
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b40      	cmp	r3, #64	@ 0x40
 80063a8:	f040 80b1 	bne.w	800650e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10d      	bne.n	80063e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80063cc:	d003      	beq.n	80063d6 <HAL_I2C_EV_IRQHandler+0x62>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80063d4:	d101      	bne.n	80063da <HAL_I2C_EV_IRQHandler+0x66>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_I2C_EV_IRQHandler+0x68>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	f000 8114 	beq.w	800660a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <HAL_I2C_EV_IRQHandler+0x90>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d006      	beq.n	8006404 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 ff97 	bl	800832a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fcd4 	bl	8006daa <I2C_Master_SB>
 8006402:	e083      	b.n	800650c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d008      	beq.n	8006420 <HAL_I2C_EV_IRQHandler+0xac>
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fd4c 	bl	8006eb6 <I2C_Master_ADD10>
 800641e:	e075      	b.n	800650c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_I2C_EV_IRQHandler+0xc8>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fd68 	bl	8006f0a <I2C_Master_ADDR>
 800643a:	e067      	b.n	800650c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d036      	beq.n	80064b4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006454:	f000 80db 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00d      	beq.n	800647e <HAL_I2C_EV_IRQHandler+0x10a>
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_I2C_EV_IRQHandler+0x10a>
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f923 	bl	80066c2 <I2C_MasterTransmit_TXE>
 800647c:	e046      	b.n	800650c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80c2 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x29a>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80bc 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	2b21      	cmp	r3, #33	@ 0x21
 800649a:	d103      	bne.n	80064a4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f9af 	bl	8006800 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064a2:	e0b4      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	2b40      	cmp	r3, #64	@ 0x40
 80064a8:	f040 80b1 	bne.w	800660e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa20 	bl	80068f2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064b2:	e0ac      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c2:	f000 80a4 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <HAL_I2C_EV_IRQHandler+0x178>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_I2C_EV_IRQHandler+0x178>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa9d 	bl	8006a24 <I2C_MasterReceive_RXNE>
 80064ea:	e00f      	b.n	800650c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 808b 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x29a>
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8085 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fb59 	bl	8006bbc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800650a:	e080      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x29a>
 800650c:	e07f      	b.n	800660e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	e007      	b.n	8006530 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d011      	beq.n	800655e <HAL_I2C_EV_IRQHandler+0x1ea>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00c      	beq.n	800655e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006554:	69b9      	ldr	r1, [r7, #24]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 ff28 	bl	80073ac <I2C_Slave_ADDR>
 800655c:	e05a      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_I2C_EV_IRQHandler+0x206>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 ff62 	bl	800743c <I2C_Slave_STOPF>
 8006578:	e04c      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800657a:	7bbb      	ldrb	r3, [r7, #14]
 800657c:	2b21      	cmp	r3, #33	@ 0x21
 800657e:	d002      	beq.n	8006586 <HAL_I2C_EV_IRQHandler+0x212>
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	2b29      	cmp	r3, #41	@ 0x29
 8006584:	d120      	bne.n	80065c8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00d      	beq.n	80065ac <HAL_I2C_EV_IRQHandler+0x238>
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006596:	2b00      	cmp	r3, #0
 8006598:	d008      	beq.n	80065ac <HAL_I2C_EV_IRQHandler+0x238>
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fe41 	bl	800722c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065aa:	e032      	b.n	8006612 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02d      	beq.n	8006612 <HAL_I2C_EV_IRQHandler+0x29e>
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d028      	beq.n	8006612 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fe71 	bl	80072a8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065c6:	e024      	b.n	8006612 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00d      	beq.n	80065ee <HAL_I2C_EV_IRQHandler+0x27a>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_I2C_EV_IRQHandler+0x27a>
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fe7f 	bl	80072ea <I2C_SlaveReceive_RXNE>
 80065ec:	e012      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00d      	beq.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 feb0 	bl	8007368 <I2C_SlaveReceive_BTF>
 8006608:	e004      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006612:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006614:	3720      	adds	r7, #32
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
 8006676:	4613      	mov	r3, r2
 8006678:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066d8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d153      	bne.n	8006790 <I2C_MasterTransmit_TXE+0xce>
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b21      	cmp	r3, #33	@ 0x21
 80066ec:	d150      	bne.n	8006790 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d01e      	beq.n	8006732 <I2C_MasterTransmit_TXE+0x70>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	d01b      	beq.n	8006732 <I2C_MasterTransmit_TXE+0x70>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006700:	d017      	beq.n	8006732 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006710:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2211      	movs	r2, #17
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006730:	e062      	b.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006740:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006750:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b40      	cmp	r3, #64	@ 0x40
 800676a:	d108      	bne.n	800677e <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800677c:	e03c      	b.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800678e:	e033      	b.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b21      	cmp	r3, #33	@ 0x21
 8006794:	d005      	beq.n	80067a2 <I2C_MasterTransmit_TXE+0xe0>
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	d12d      	bne.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b22      	cmp	r3, #34	@ 0x22
 80067a0:	d12a      	bne.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d108      	bne.n	80067be <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80067bc:	e01c      	b.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b40      	cmp	r3, #64	@ 0x40
 80067c8:	d103      	bne.n	80067d2 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f891 	bl	80068f2 <I2C_MemoryTransmit_TXE_BTF>
}
 80067d0:	e012      	b.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80067f6:	e7ff      	b.n	80067f8 <I2C_MasterTransmit_TXE+0x136>
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b21      	cmp	r3, #33	@ 0x21
 8006818:	d167      	bne.n	80068ea <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006848:	e04f      	b.n	80068ea <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d01e      	beq.n	800688e <I2C_MasterTransmit_BTF+0x8e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b20      	cmp	r3, #32
 8006854:	d01b      	beq.n	800688e <I2C_MasterTransmit_BTF+0x8e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800685c:	d017      	beq.n	800688e <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800686c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2211      	movs	r2, #17
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
}
 800688c:	e02d      	b.n	80068ea <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800689c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b40      	cmp	r3, #64	@ 0x40
 80068c6:	d108      	bne.n	80068da <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
}
 80068d8:	e007      	b.n	80068ea <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006900:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006906:	2b00      	cmp	r3, #0
 8006908:	d11d      	bne.n	8006946 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d10b      	bne.n	800692a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006916:	b2da      	uxtb	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006922:	1c9a      	adds	r2, r3, #2
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006928:	e078      	b.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692e:	b29b      	uxth	r3, r3
 8006930:	121b      	asrs	r3, r3, #8
 8006932:	b2da      	uxtb	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006944:	e06a      	b.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
  else if (hi2c->EventCount == 1U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694a:	2b01      	cmp	r3, #1
 800694c:	d10b      	bne.n	8006966 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006952:	b2da      	uxtb	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006964:	e05a      	b.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
  else if (hi2c->EventCount == 2U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696a:	2b02      	cmp	r3, #2
 800696c:	d153      	bne.n	8006a16 <I2C_MemoryTransmit_TXE_BTF+0x124>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b22      	cmp	r3, #34	@ 0x22
 8006972:	d10d      	bne.n	8006990 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006982:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800698e:	e045      	b.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d015      	beq.n	80069c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	2b21      	cmp	r3, #33	@ 0x21
 800699e:	d112      	bne.n	80069c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	781a      	ldrb	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80069c4:	e02a      	b.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d125      	bne.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b21      	cmp	r3, #33	@ 0x21
 80069d4:	d122      	bne.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069e4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069f4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
}
 8006a14:	e002      	b.n	8006a1c <I2C_MemoryTransmit_TXE_BTF+0x12a>
    I2C_Flush_DR(hi2c);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff f9a8 	bl	8005d6c <I2C_Flush_DR>
}
 8006a1c:	bf00      	nop
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b22      	cmp	r3, #34	@ 0x22
 8006a36:	f040 80bd 	bne.w	8006bb4 <I2C_MasterReceive_RXNE+0x190>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d921      	bls.n	8006a92 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	f040 809a 	bne.w	8006bb4 <I2C_MasterReceive_RXNE+0x190>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a8e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006a90:	e090      	b.n	8006bb4 <I2C_MasterReceive_RXNE+0x190>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	f000 8083 	beq.w	8006ba2 <I2C_MasterReceive_RXNE+0x17e>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d002      	beq.n	8006aa8 <I2C_MasterReceive_RXNE+0x84>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d17c      	bne.n	8006ba2 <I2C_MasterReceive_RXNE+0x17e>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fbdd 	bl	8008268 <I2C_WaitOnSTOPRequestThroughIT>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d14e      	bne.n	8006b52 <I2C_MasterReceive_RXNE+0x12e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ad2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d10b      	bne.n	8006b26 <I2C_MasterReceive_RXNE+0x102>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b24:	e046      	b.n	8006bb4 <I2C_MasterReceive_RXNE+0x190>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d002      	beq.n	8006b3a <I2C_MasterReceive_RXNE+0x116>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d103      	bne.n	8006b42 <I2C_MasterReceive_RXNE+0x11e>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b40:	e002      	b.n	8006b48 <I2C_MasterReceive_RXNE+0x124>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2212      	movs	r2, #18
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b50:	e030      	b.n	8006bb4 <I2C_MasterReceive_RXNE+0x190>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b60:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCallback(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ba0:	e008      	b.n	8006bb4 <I2C_MasterReceive_RXNE+0x190>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bb0:	605a      	str	r2, [r3, #4]
}
 8006bb2:	e7ff      	b.n	8006bb4 <I2C_MasterReceive_RXNE+0x190>
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d11b      	bne.n	8006c0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006be2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006c0a:	e0ca      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1e6>
  else if (hi2c->XferCount == 3U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d129      	bne.n	8006c6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d00a      	beq.n	8006c42 <I2C_MasterReceive_BTF+0x86>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d007      	beq.n	8006c42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006c68:	e09b      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1e6>
  else if (hi2c->XferCount == 2U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	f040 8083 	bne.w	8006d7c <I2C_MasterReceive_BTF+0x1c0>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d002      	beq.n	8006c82 <I2C_MasterReceive_BTF+0xc6>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d108      	bne.n	8006c94 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e019      	b.n	8006cc8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d002      	beq.n	8006ca0 <I2C_MasterReceive_BTF+0xe4>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d108      	bne.n	8006cb2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	e00a      	b.n	8006cc8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d007      	beq.n	8006cc8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b40      	cmp	r3, #64	@ 0x40
 8006d36:	d10b      	bne.n	8006d50 <I2C_MasterReceive_BTF+0x194>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
}
 8006d4e:	e028      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1e6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d002      	beq.n	8006d64 <I2C_MasterReceive_BTF+0x1a8>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d103      	bne.n	8006d6c <I2C_MasterReceive_BTF+0x1b0>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d6a:	e002      	b.n	8006d72 <I2C_MasterReceive_BTF+0x1b6>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2212      	movs	r2, #18
 8006d70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
}
 8006d7a:	e012      	b.n	8006da2 <I2C_MasterReceive_BTF+0x1e6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	d117      	bne.n	8006dee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006dd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006dd8:	e067      	b.n	8006eaa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f043 0301 	orr.w	r3, r3, #1
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	611a      	str	r2, [r3, #16]
}
 8006dec:	e05d      	b.n	8006eaa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006df6:	d133      	bne.n	8006e60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b21      	cmp	r3, #33	@ 0x21
 8006e02:	d109      	bne.n	8006e18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e14:	611a      	str	r2, [r3, #16]
 8006e16:	e008      	b.n	8006e2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <I2C_Master_SB+0x92>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d108      	bne.n	8006e4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d032      	beq.n	8006eaa <I2C_Master_SB+0x100>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d02d      	beq.n	8006eaa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e5c:	605a      	str	r2, [r3, #4]
}
 8006e5e:	e024      	b.n	8006eaa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10e      	bne.n	8006e86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	11db      	asrs	r3, r3, #7
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0306 	and.w	r3, r3, #6
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f063 030f 	orn	r3, r3, #15
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	611a      	str	r2, [r3, #16]
}
 8006e84:	e011      	b.n	8006eaa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10d      	bne.n	8006eaa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	11db      	asrs	r3, r3, #7
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 0306 	and.w	r3, r3, #6
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f063 030e 	orn	r3, r3, #14
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	611a      	str	r2, [r3, #16]
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <I2C_Master_ADD10+0x26>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00c      	beq.n	8006efe <I2C_Master_ADD10+0x48>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006efc:	605a      	str	r2, [r3, #4]
  }
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b091      	sub	sp, #68	@ 0x44
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b22      	cmp	r3, #34	@ 0x22
 8006f32:	f040 8169 	bne.w	8007208 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10f      	bne.n	8006f5e <I2C_Master_ADDR+0x54>
 8006f3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006f42:	2b40      	cmp	r3, #64	@ 0x40
 8006f44:	d10b      	bne.n	8006f5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f46:	2300      	movs	r3, #0
 8006f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	e160      	b.n	8007220 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d11d      	bne.n	8006fa2 <I2C_Master_ADDR+0x98>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006f6e:	d118      	bne.n	8006fa2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f70:	2300      	movs	r3, #0
 8006f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006fa0:	e13e      	b.n	8007220 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d113      	bne.n	8006fd4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fac:	2300      	movs	r3, #0
 8006fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e115      	b.n	8007200 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	f040 808a 	bne.w	80070f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fe6:	d137      	bne.n	8007058 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ff6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007006:	d113      	bne.n	8007030 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007016:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007018:	2300      	movs	r3, #0
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	627b      	str	r3, [r7, #36]	@ 0x24
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	e0e7      	b.n	8007200 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007030:	2300      	movs	r3, #0
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	623b      	str	r3, [r7, #32]
 8007044:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e0d3      	b.n	8007200 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705a:	2b08      	cmp	r3, #8
 800705c:	d02e      	beq.n	80070bc <I2C_Master_ADDR+0x1b2>
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	2b20      	cmp	r3, #32
 8007062:	d02b      	beq.n	80070bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007066:	2b12      	cmp	r3, #18
 8007068:	d102      	bne.n	8007070 <I2C_Master_ADDR+0x166>
 800706a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706c:	2b01      	cmp	r3, #1
 800706e:	d125      	bne.n	80070bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007072:	2b04      	cmp	r3, #4
 8007074:	d00e      	beq.n	8007094 <I2C_Master_ADDR+0x18a>
 8007076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007078:	2b02      	cmp	r3, #2
 800707a:	d00b      	beq.n	8007094 <I2C_Master_ADDR+0x18a>
 800707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707e:	2b10      	cmp	r3, #16
 8007080:	d008      	beq.n	8007094 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e007      	b.n	80070a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	e0a1      	b.n	8007200 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070cc:	2300      	movs	r3, #0
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	e085      	b.n	8007200 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d14d      	bne.n	800719a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80070fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007100:	2b04      	cmp	r3, #4
 8007102:	d016      	beq.n	8007132 <I2C_Master_ADDR+0x228>
 8007104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007106:	2b02      	cmp	r3, #2
 8007108:	d013      	beq.n	8007132 <I2C_Master_ADDR+0x228>
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	2b10      	cmp	r3, #16
 800710e:	d010      	beq.n	8007132 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800711e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e007      	b.n	8007142 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007140:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800714c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007150:	d117      	bne.n	8007182 <I2C_Master_ADDR+0x278>
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007158:	d00b      	beq.n	8007172 <I2C_Master_ADDR+0x268>
 800715a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715c:	2b01      	cmp	r3, #1
 800715e:	d008      	beq.n	8007172 <I2C_Master_ADDR+0x268>
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	2b08      	cmp	r3, #8
 8007164:	d005      	beq.n	8007172 <I2C_Master_ADDR+0x268>
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	2b10      	cmp	r3, #16
 800716a:	d002      	beq.n	8007172 <I2C_Master_ADDR+0x268>
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	2b20      	cmp	r3, #32
 8007170:	d107      	bne.n	8007182 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007180:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007182:	2300      	movs	r3, #0
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	e032      	b.n	8007200 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071b8:	d117      	bne.n	80071ea <I2C_Master_ADDR+0x2e0>
 80071ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071c0:	d00b      	beq.n	80071da <I2C_Master_ADDR+0x2d0>
 80071c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d008      	beq.n	80071da <I2C_Master_ADDR+0x2d0>
 80071c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d005      	beq.n	80071da <I2C_Master_ADDR+0x2d0>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d002      	beq.n	80071da <I2C_Master_ADDR+0x2d0>
 80071d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d107      	bne.n	80071ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	613b      	str	r3, [r7, #16]
 80071fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007206:	e00b      	b.n	8007220 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
}
 800721e:	e7ff      	b.n	8007220 <I2C_Master_ADDR+0x316>
 8007220:	bf00      	nop
 8007222:	3744      	adds	r7, #68	@ 0x44
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800723a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d02c      	beq.n	80072a0 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d115      	bne.n	80072a0 <I2C_SlaveTransmit_TXE+0x74>
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b29      	cmp	r3, #41	@ 0x29
 8007278:	d112      	bne.n	80072a0 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007288:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2221      	movs	r2, #33	@ 0x21
 800728e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2228      	movs	r2, #40	@ 0x28
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d011      	beq.n	80072de <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d02d      	beq.n	8007360 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691a      	ldr	r2, [r3, #16]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d115      	bne.n	8007360 <I2C_SlaveReceive_RXNE+0x76>
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b2a      	cmp	r3, #42	@ 0x2a
 8007338:	d112      	bne.n	8007360 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007348:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2222      	movs	r2, #34	@ 0x22
 800734e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2228      	movs	r2, #40	@ 0x28
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d012      	beq.n	80073a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80073c6:	2b28      	cmp	r3, #40	@ 0x28
 80073c8:	d125      	bne.n	8007416 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	81bb      	strh	r3, [r7, #12]
 80073f8:	e002      	b.n	8007400 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800740c:	89ba      	ldrh	r2, [r7, #12]
 800740e:	7bf9      	ldrb	r1, [r7, #15]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007414:	e00e      	b.n	8007434 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007434:	bf00      	nop
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800744a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800745a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800745c:	2300      	movs	r3, #0
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0201 	orr.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007488:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007498:	d172      	bne.n	8007580 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b22      	cmp	r3, #34	@ 0x22
 800749e:	d002      	beq.n	80074a6 <I2C_Slave_STOPF+0x6a>
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074a4:	d135      	bne.n	8007512 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	f043 0204 	orr.w	r2, r3, #4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fc fd9a 	bl	8004018 <HAL_DMA_GetState>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d049      	beq.n	800757e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	4a6b      	ldr	r2, [pc, #428]	@ (800769c <I2C_Slave_STOPF+0x260>)
 80074f0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fc fbe2 	bl	8003cc0 <HAL_DMA_Abort_IT>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d03d      	beq.n	800757e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007510:	e035      	b.n	800757e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	b29a      	uxth	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	f043 0204 	orr.w	r2, r3, #4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007544:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754a:	4618      	mov	r0, r3
 800754c:	f7fc fd64 	bl	8004018 <HAL_DMA_GetState>
 8007550:	4603      	mov	r3, r0
 8007552:	2b01      	cmp	r3, #1
 8007554:	d014      	beq.n	8007580 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755a:	4a50      	ldr	r2, [pc, #320]	@ (800769c <I2C_Slave_STOPF+0x260>)
 800755c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007562:	4618      	mov	r0, r3
 8007564:	f7fc fbac 	bl	8003cc0 <HAL_DMA_Abort_IT>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d008      	beq.n	8007580 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	e000      	b.n	8007580 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800757e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d03e      	beq.n	8007608 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b04      	cmp	r3, #4
 8007596:	d112      	bne.n	80075be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c8:	2b40      	cmp	r3, #64	@ 0x40
 80075ca:	d112      	bne.n	80075f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007600:	f043 0204 	orr.w	r2, r3, #4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f847 	bl	80076a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007616:	e03c      	b.n	8007692 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b2a      	cmp	r3, #42	@ 0x2a
 800761c:	d10a      	bne.n	8007634 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2228      	movs	r2, #40	@ 0x28
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b28      	cmp	r3, #40	@ 0x28
 800763e:	d112      	bne.n	8007666 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a17      	ldr	r2, [pc, #92]	@ (80076a0 <I2C_Slave_STOPF+0x264>)
 8007644:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ListenCpltCallback(hi2c);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
}
 8007664:	e015      	b.n	8007692 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766a:	2b22      	cmp	r3, #34	@ 0x22
 800766c:	d002      	beq.n	8007674 <I2C_Slave_STOPF+0x238>
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b22      	cmp	r3, #34	@ 0x22
 8007672:	d10e      	bne.n	8007692 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	4798      	blx	r3
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	08007e51 	.word	0x08007e51
 80076a0:	ffff0000 	.word	0xffff0000

080076a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b10      	cmp	r3, #16
 80076c0:	d002      	beq.n	80076c8 <I2C_ITError+0x24>
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b40      	cmp	r3, #64	@ 0x40
 80076c6:	d10a      	bne.n	80076de <I2C_ITError+0x3a>
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b22      	cmp	r3, #34	@ 0x22
 80076cc:	d107      	bne.n	80076de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076e4:	2b28      	cmp	r3, #40	@ 0x28
 80076e6:	d107      	bne.n	80076f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2228      	movs	r2, #40	@ 0x28
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80076f6:	e015      	b.n	8007724 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007706:	d00a      	beq.n	800771e <I2C_ITError+0x7a>
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	2b60      	cmp	r3, #96	@ 0x60
 800770c:	d007      	beq.n	800771e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800772e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007732:	d162      	bne.n	80077fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007742:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d020      	beq.n	8007794 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007756:	4a6c      	ldr	r2, [pc, #432]	@ (8007908 <I2C_ITError+0x264>)
 8007758:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775e:	4618      	mov	r0, r3
 8007760:	f7fc faae 	bl	8003cc0 <HAL_DMA_Abort_IT>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 808b 	beq.w	8007882 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800778e:	4610      	mov	r0, r2
 8007790:	4798      	blx	r3
 8007792:	e076      	b.n	8007882 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	4a5b      	ldr	r2, [pc, #364]	@ (8007908 <I2C_ITError+0x264>)
 800779a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fc fa8d 	bl	8003cc0 <HAL_DMA_Abort_IT>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d06a      	beq.n	8007882 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b6:	2b40      	cmp	r3, #64	@ 0x40
 80077b8:	d10b      	bne.n	80077d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0201 	bic.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	e043      	b.n	8007882 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b60      	cmp	r3, #96	@ 0x60
 8007804:	d126      	bne.n	8007854 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800781e:	2b40      	cmp	r3, #64	@ 0x40
 8007820:	d10b      	bne.n	800783a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
 8007852:	e016      	b.n	8007882 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785e:	2b40      	cmp	r3, #64	@ 0x40
 8007860:	d10b      	bne.n	800787a <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691a      	ldr	r2, [r3, #16]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007886:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10e      	bne.n	80078b0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d007      	beq.n	80078c0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d114      	bne.n	80078fe <I2C_ITError+0x25a>
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	2b28      	cmp	r3, #40	@ 0x28
 80078d8:	d111      	bne.n	80078fe <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a0b      	ldr	r2, [pc, #44]	@ (800790c <I2C_ITError+0x268>)
 80078de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	08007e51 	.word	0x08007e51
 800790c:	ffff0000 	.word	0xffff0000

08007910 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af02      	add	r7, sp, #8
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	4608      	mov	r0, r1
 800791a:	4611      	mov	r1, r2
 800791c:	461a      	mov	r2, r3
 800791e:	4603      	mov	r3, r0
 8007920:	817b      	strh	r3, [r7, #10]
 8007922:	460b      	mov	r3, r1
 8007924:	813b      	strh	r3, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007938:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	2200      	movs	r2, #0
 8007942:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fb2c 	bl	8007fa4 <I2C_WaitOnFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00d      	beq.n	800796e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007960:	d103      	bne.n	800796a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007968:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e05f      	b.n	8007a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800796e:	897b      	ldrh	r3, [r7, #10]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800797c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800797e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007980:	6a3a      	ldr	r2, [r7, #32]
 8007982:	492d      	ldr	r1, [pc, #180]	@ (8007a38 <I2C_RequestMemoryWrite+0x128>)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fb87 	bl	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e04c      	b.n	8007a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ac:	6a39      	ldr	r1, [r7, #32]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 fc12 	bl	80081d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00d      	beq.n	80079d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d107      	bne.n	80079d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e02b      	b.n	8007a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d105      	bne.n	80079e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079dc:	893b      	ldrh	r3, [r7, #8]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	611a      	str	r2, [r3, #16]
 80079e6:	e021      	b.n	8007a2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079e8:	893b      	ldrh	r3, [r7, #8]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079f8:	6a39      	ldr	r1, [r7, #32]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fbec 	bl	80081d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d107      	bne.n	8007a1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e005      	b.n	8007a2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a22:	893b      	ldrh	r3, [r7, #8]
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	00010002 	.word	0x00010002

08007a3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	817b      	strh	r3, [r7, #10]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	813b      	strh	r3, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fa8e 	bl	8007fa4 <I2C_WaitOnFlagUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a9c:	d103      	bne.n	8007aa6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e0aa      	b.n	8007c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007aaa:	897b      	ldrh	r3, [r7, #10]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ab8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	4952      	ldr	r1, [pc, #328]	@ (8007c08 <I2C_RequestMemoryRead+0x1cc>)
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fae9 	bl	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e097      	b.n	8007c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae8:	6a39      	ldr	r1, [r7, #32]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fb74 	bl	80081d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00d      	beq.n	8007b12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d107      	bne.n	8007b0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e076      	b.n	8007c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b18:	893b      	ldrh	r3, [r7, #8]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	611a      	str	r2, [r3, #16]
 8007b22:	e021      	b.n	8007b68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b24:	893b      	ldrh	r3, [r7, #8]
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b34:	6a39      	ldr	r1, [r7, #32]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fb4e 	bl	80081d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00d      	beq.n	8007b5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d107      	bne.n	8007b5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e050      	b.n	8007c00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b5e:	893b      	ldrh	r3, [r7, #8]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b6a:	6a39      	ldr	r1, [r7, #32]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fb33 	bl	80081d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00d      	beq.n	8007b94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d107      	bne.n	8007b90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e035      	b.n	8007c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f9f7 	bl	8007fa4 <I2C_WaitOnFlagUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00d      	beq.n	8007bd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bca:	d103      	bne.n	8007bd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e013      	b.n	8007c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007bd8:	897b      	ldrh	r3, [r7, #10]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f043 0301 	orr.w	r3, r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	6a3a      	ldr	r2, [r7, #32]
 8007bec:	4906      	ldr	r1, [pc, #24]	@ (8007c08 <I2C_RequestMemoryRead+0x1cc>)
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fa52 	bl	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	00010002 	.word	0x00010002

08007c0c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c20:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c28:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007c3e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007c60:	7cfb      	ldrb	r3, [r7, #19]
 8007c62:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007c66:	2b21      	cmp	r3, #33	@ 0x21
 8007c68:	d007      	beq.n	8007c7a <I2C_DMAXferCplt+0x6e>
 8007c6a:	7cfb      	ldrb	r3, [r7, #19]
 8007c6c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007c70:	2b22      	cmp	r3, #34	@ 0x22
 8007c72:	d133      	bne.n	8007cdc <I2C_DMAXferCplt+0xd0>
 8007c74:	7cbb      	ldrb	r3, [r7, #18]
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d130      	bne.n	8007cdc <I2C_DMAXferCplt+0xd0>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c88:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	2b29      	cmp	r3, #41	@ 0x29
 8007c94:	d10b      	bne.n	8007cae <I2C_DMAXferCplt+0xa2>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2221      	movs	r2, #33	@ 0x21
 8007c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2228      	movs	r2, #40	@ 0x28
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca8:	6978      	ldr	r0, [r7, #20]
 8007caa:	4798      	blx	r3
 8007cac:	e00d      	b.n	8007cca <I2C_DMAXferCplt+0xbe>
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007cae:	7cfb      	ldrb	r3, [r7, #19]
 8007cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cb2:	d10a      	bne.n	8007cca <I2C_DMAXferCplt+0xbe>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2222      	movs	r2, #34	@ 0x22
 8007cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2228      	movs	r2, #40	@ 0x28
 8007cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc6:	6978      	ldr	r0, [r7, #20]
 8007cc8:	4798      	blx	r3
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007cd8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007cda:	e077      	b.n	8007dcc <I2C_DMAXferCplt+0x1c0>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d071      	beq.n	8007dcc <I2C_DMAXferCplt+0x1c0>
    if (hi2c->XferCount == (uint16_t)1)
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <I2C_DMAXferCplt+0xf6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d00:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007d10:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d18:	d009      	beq.n	8007d2e <I2C_DMAXferCplt+0x122>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d006      	beq.n	8007d2e <I2C_DMAXferCplt+0x122>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007d26:	d002      	beq.n	8007d2e <I2C_DMAXferCplt+0x122>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d107      	bne.n	8007d3e <I2C_DMAXferCplt+0x132>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d3c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d4c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d5c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2200      	movs	r2, #0
 8007d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <I2C_DMAXferCplt+0x16a>
      hi2c->ErrorCallback(hi2c);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d70:	6978      	ldr	r0, [r7, #20]
 8007d72:	4798      	blx	r3
}
 8007d74:	e02a      	b.n	8007dcc <I2C_DMAXferCplt+0x1c0>
      hi2c->State = HAL_I2C_STATE_READY;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b40      	cmp	r3, #64	@ 0x40
 8007d88:	d10b      	bne.n	8007da2 <I2C_DMAXferCplt+0x196>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2200      	movs	r2, #0
 8007d96:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->MemRxCpltCallback(hi2c);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d9c:	6978      	ldr	r0, [r7, #20]
 8007d9e:	4798      	blx	r3
}
 8007da0:	e014      	b.n	8007dcc <I2C_DMAXferCplt+0x1c0>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d002      	beq.n	8007db6 <I2C_DMAXferCplt+0x1aa>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d103      	bne.n	8007dbe <I2C_DMAXferCplt+0x1b2>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2200      	movs	r2, #0
 8007dba:	631a      	str	r2, [r3, #48]	@ 0x30
 8007dbc:	e002      	b.n	8007dc4 <I2C_DMAXferCplt+0x1b8>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2212      	movs	r2, #18
 8007dc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->MasterRxCpltCallback(hi2c);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc8:	6978      	ldr	r0, [r7, #20]
 8007dca:	4798      	blx	r3
}
 8007dcc:	bf00      	nop
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dee:	2200      	movs	r2, #0
 8007df0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	2200      	movs	r2, #0
 8007e00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7fc f916 	bl	8004034 <HAL_DMA_GetError>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d01c      	beq.n	8007e48 <I2C_DMAError+0x74>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e1c:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e38:	f043 0210 	orr.w	r2, r3, #16
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	4798      	blx	r3
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8007f9c <I2C_DMAAbort+0x14c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	08db      	lsrs	r3, r3, #3
 8007e70:	4a4b      	ldr	r2, [pc, #300]	@ (8007fa0 <I2C_DMAAbort+0x150>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	0a1a      	lsrs	r2, r3, #8
 8007e78:	4613      	mov	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	00da      	lsls	r2, r3, #3
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8e:	f043 0220 	orr.w	r2, r3, #32
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007e96:	e00a      	b.n	8007eae <I2C_DMAAbort+0x5e>
    }
    count--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eac:	d0ea      	beq.n	8007e84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eba:	2200      	movs	r2, #0
 8007ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eca:	2200      	movs	r2, #0
 8007ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007edc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f00:	2200      	movs	r2, #0
 8007f02:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b60      	cmp	r3, #96	@ 0x60
 8007f1e:	d10f      	bne.n	8007f40 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2200      	movs	r2, #0
 8007f34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f3a:	6978      	ldr	r0, [r7, #20]
 8007f3c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f3e:	e028      	b.n	8007f92 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f40:	7cfb      	ldrb	r3, [r7, #19]
 8007f42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f46:	2b28      	cmp	r3, #40	@ 0x28
 8007f48:	d117      	bne.n	8007f7a <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 0201 	orr.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f68:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2228      	movs	r2, #40	@ 0x28
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007f78:	e007      	b.n	8007f8a <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCallback(hi2c);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8e:	6978      	ldr	r0, [r7, #20]
 8007f90:	4798      	blx	r3
}
 8007f92:	bf00      	nop
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000000 	.word	0x20000000
 8007fa0:	14f8b589 	.word	0x14f8b589

08007fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fb4:	e048      	b.n	8008048 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fbc:	d044      	beq.n	8008048 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fbe:	f7fb f84d 	bl	800305c <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d302      	bcc.n	8007fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d139      	bne.n	8008048 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d10d      	bne.n	8007ffa <I2C_WaitOnFlagUntilTimeout+0x56>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	43da      	mvns	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bf0c      	ite	eq
 8007ff0:	2301      	moveq	r3, #1
 8007ff2:	2300      	movne	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	e00c      	b.n	8008014 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	43da      	mvns	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4013      	ands	r3, r2
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	bf0c      	ite	eq
 800800c:	2301      	moveq	r3, #1
 800800e:	2300      	movne	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	461a      	mov	r2, r3
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	429a      	cmp	r2, r3
 8008018:	d116      	bne.n	8008048 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	f043 0220 	orr.w	r2, r3, #32
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e023      	b.n	8008090 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	0c1b      	lsrs	r3, r3, #16
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b01      	cmp	r3, #1
 8008050:	d10d      	bne.n	800806e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	43da      	mvns	r2, r3
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	4013      	ands	r3, r2
 800805e:	b29b      	uxth	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf0c      	ite	eq
 8008064:	2301      	moveq	r3, #1
 8008066:	2300      	movne	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	461a      	mov	r2, r3
 800806c:	e00c      	b.n	8008088 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	43da      	mvns	r2, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	4013      	ands	r3, r2
 800807a:	b29b      	uxth	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	bf0c      	ite	eq
 8008080:	2301      	moveq	r3, #1
 8008082:	2300      	movne	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	429a      	cmp	r2, r3
 800808c:	d093      	beq.n	8007fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080a6:	e071      	b.n	800818c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b6:	d123      	bne.n	8008100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80080d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ec:	f043 0204 	orr.w	r2, r3, #4
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e067      	b.n	80081d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008106:	d041      	beq.n	800818c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008108:	f7fa ffa8 	bl	800305c <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d302      	bcc.n	800811e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d136      	bne.n	800818c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	0c1b      	lsrs	r3, r3, #16
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	d10c      	bne.n	8008142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	43da      	mvns	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4013      	ands	r3, r2
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	bf14      	ite	ne
 800813a:	2301      	movne	r3, #1
 800813c:	2300      	moveq	r3, #0
 800813e:	b2db      	uxtb	r3, r3
 8008140:	e00b      	b.n	800815a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	43da      	mvns	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4013      	ands	r3, r2
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	bf14      	ite	ne
 8008154:	2301      	movne	r3, #1
 8008156:	2300      	moveq	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d016      	beq.n	800818c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008178:	f043 0220 	orr.w	r2, r3, #32
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e021      	b.n	80081d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	0c1b      	lsrs	r3, r3, #16
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b01      	cmp	r3, #1
 8008194:	d10c      	bne.n	80081b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	43da      	mvns	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4013      	ands	r3, r2
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bf14      	ite	ne
 80081a8:	2301      	movne	r3, #1
 80081aa:	2300      	moveq	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	e00b      	b.n	80081c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	43da      	mvns	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4013      	ands	r3, r2
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bf14      	ite	ne
 80081c2:	2301      	movne	r3, #1
 80081c4:	2300      	moveq	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f47f af6d 	bne.w	80080a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081e4:	e034      	b.n	8008250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 f870 	bl	80082cc <I2C_IsAcknowledgeFailed>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e034      	b.n	8008260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081fc:	d028      	beq.n	8008250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fe:	f7fa ff2d 	bl	800305c <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	429a      	cmp	r2, r3
 800820c:	d302      	bcc.n	8008214 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d11d      	bne.n	8008250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821e:	2b80      	cmp	r3, #128	@ 0x80
 8008220:	d016      	beq.n	8008250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2220      	movs	r2, #32
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823c:	f043 0220 	orr.w	r2, r3, #32
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e007      	b.n	8008260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825a:	2b80      	cmp	r3, #128	@ 0x80
 800825c:	d1c3      	bne.n	80081e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008274:	4b13      	ldr	r3, [pc, #76]	@ (80082c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	4a13      	ldr	r2, [pc, #76]	@ (80082c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800827c:	fba2 2303 	umull	r2, r3, r2, r3
 8008280:	0a1a      	lsrs	r2, r3, #8
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3b01      	subs	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d107      	bne.n	80082a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e008      	b.n	80082b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b4:	d0e9      	beq.n	800828a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	20000000 	.word	0x20000000
 80082c8:	14f8b589 	.word	0x14f8b589

080082cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082e2:	d11b      	bne.n	800831c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80082ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008308:	f043 0204 	orr.w	r2, r3, #4
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e000      	b.n	800831e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800833a:	d103      	bne.n	8008344 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008342:	e007      	b.n	8008354 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800834c:	d102      	bne.n	8008354 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2208      	movs	r2, #8
 8008352:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b20      	cmp	r3, #32
 8008374:	d129      	bne.n	80083ca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2224      	movs	r2, #36	@ 0x24
 800837a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0210 	bic.w	r2, r2, #16
 800839c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0201 	orr.w	r2, r2, #1
 80083bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e000      	b.n	80083cc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80083ca:	2302      	movs	r3, #2
  }
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	d12a      	bne.n	8008448 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2224      	movs	r2, #36	@ 0x24
 80083f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008410:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008412:	89fb      	ldrh	r3, [r7, #14]
 8008414:	f023 030f 	bic.w	r3, r3, #15
 8008418:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	b29a      	uxth	r2, r3
 800841e:	89fb      	ldrh	r3, [r7, #14]
 8008420:	4313      	orrs	r3, r2
 8008422:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	89fa      	ldrh	r2, [r7, #14]
 800842a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e267      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d075      	beq.n	8008562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008476:	4b88      	ldr	r3, [pc, #544]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 030c 	and.w	r3, r3, #12
 800847e:	2b04      	cmp	r3, #4
 8008480:	d00c      	beq.n	800849c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008482:	4b85      	ldr	r3, [pc, #532]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800848a:	2b08      	cmp	r3, #8
 800848c:	d112      	bne.n	80084b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800848e:	4b82      	ldr	r3, [pc, #520]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800849a:	d10b      	bne.n	80084b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800849c:	4b7e      	ldr	r3, [pc, #504]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05b      	beq.n	8008560 <HAL_RCC_OscConfig+0x108>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d157      	bne.n	8008560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e242      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084bc:	d106      	bne.n	80084cc <HAL_RCC_OscConfig+0x74>
 80084be:	4b76      	ldr	r3, [pc, #472]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a75      	ldr	r2, [pc, #468]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	e01d      	b.n	8008508 <HAL_RCC_OscConfig+0xb0>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084d4:	d10c      	bne.n	80084f0 <HAL_RCC_OscConfig+0x98>
 80084d6:	4b70      	ldr	r3, [pc, #448]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a6f      	ldr	r2, [pc, #444]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	4b6d      	ldr	r3, [pc, #436]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a6c      	ldr	r2, [pc, #432]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	e00b      	b.n	8008508 <HAL_RCC_OscConfig+0xb0>
 80084f0:	4b69      	ldr	r3, [pc, #420]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a68      	ldr	r2, [pc, #416]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	4b66      	ldr	r3, [pc, #408]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a65      	ldr	r2, [pc, #404]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d013      	beq.n	8008538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008510:	f7fa fda4 	bl	800305c <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008518:	f7fa fda0 	bl	800305c <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b64      	cmp	r3, #100	@ 0x64
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e207      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800852a:	4b5b      	ldr	r3, [pc, #364]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <HAL_RCC_OscConfig+0xc0>
 8008536:	e014      	b.n	8008562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008538:	f7fa fd90 	bl	800305c <HAL_GetTick>
 800853c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800853e:	e008      	b.n	8008552 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008540:	f7fa fd8c 	bl	800305c <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b64      	cmp	r3, #100	@ 0x64
 800854c:	d901      	bls.n	8008552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e1f3      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008552:	4b51      	ldr	r3, [pc, #324]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1f0      	bne.n	8008540 <HAL_RCC_OscConfig+0xe8>
 800855e:	e000      	b.n	8008562 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d063      	beq.n	8008636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800856e:	4b4a      	ldr	r3, [pc, #296]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 030c 	and.w	r3, r3, #12
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800857a:	4b47      	ldr	r3, [pc, #284]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008582:	2b08      	cmp	r3, #8
 8008584:	d11c      	bne.n	80085c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008586:	4b44      	ldr	r3, [pc, #272]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d116      	bne.n	80085c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008592:	4b41      	ldr	r3, [pc, #260]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <HAL_RCC_OscConfig+0x152>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d001      	beq.n	80085aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e1c7      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	4937      	ldr	r1, [pc, #220]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085be:	e03a      	b.n	8008636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d020      	beq.n	800860a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085c8:	4b34      	ldr	r3, [pc, #208]	@ (800869c <HAL_RCC_OscConfig+0x244>)
 80085ca:	2201      	movs	r2, #1
 80085cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ce:	f7fa fd45 	bl	800305c <HAL_GetTick>
 80085d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085d4:	e008      	b.n	80085e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085d6:	f7fa fd41 	bl	800305c <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e1a8      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0f0      	beq.n	80085d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f4:	4b28      	ldr	r3, [pc, #160]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	4925      	ldr	r1, [pc, #148]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 8008604:	4313      	orrs	r3, r2
 8008606:	600b      	str	r3, [r1, #0]
 8008608:	e015      	b.n	8008636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800860a:	4b24      	ldr	r3, [pc, #144]	@ (800869c <HAL_RCC_OscConfig+0x244>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008610:	f7fa fd24 	bl	800305c <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008618:	f7fa fd20 	bl	800305c <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e187      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800862a:	4b1b      	ldr	r3, [pc, #108]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0308 	and.w	r3, r3, #8
 800863e:	2b00      	cmp	r3, #0
 8008640:	d036      	beq.n	80086b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d016      	beq.n	8008678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800864a:	4b15      	ldr	r3, [pc, #84]	@ (80086a0 <HAL_RCC_OscConfig+0x248>)
 800864c:	2201      	movs	r2, #1
 800864e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008650:	f7fa fd04 	bl	800305c <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008658:	f7fa fd00 	bl	800305c <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e167      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800866a:	4b0b      	ldr	r3, [pc, #44]	@ (8008698 <HAL_RCC_OscConfig+0x240>)
 800866c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f0      	beq.n	8008658 <HAL_RCC_OscConfig+0x200>
 8008676:	e01b      	b.n	80086b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <HAL_RCC_OscConfig+0x248>)
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800867e:	f7fa fced 	bl	800305c <HAL_GetTick>
 8008682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008684:	e00e      	b.n	80086a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008686:	f7fa fce9 	bl	800305c <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d907      	bls.n	80086a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e150      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
 8008698:	40023800 	.word	0x40023800
 800869c:	42470000 	.word	0x42470000
 80086a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086a4:	4b88      	ldr	r3, [pc, #544]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80086a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1ea      	bne.n	8008686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8097 	beq.w	80087ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086c2:	4b81      	ldr	r3, [pc, #516]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80086c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10f      	bne.n	80086ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	4b7d      	ldr	r3, [pc, #500]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80086d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d6:	4a7c      	ldr	r2, [pc, #496]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80086d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80086de:	4b7a      	ldr	r3, [pc, #488]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80086e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086e6:	60bb      	str	r3, [r7, #8]
 80086e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086ea:	2301      	movs	r3, #1
 80086ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086ee:	4b77      	ldr	r3, [pc, #476]	@ (80088cc <HAL_RCC_OscConfig+0x474>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d118      	bne.n	800872c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086fa:	4b74      	ldr	r3, [pc, #464]	@ (80088cc <HAL_RCC_OscConfig+0x474>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a73      	ldr	r2, [pc, #460]	@ (80088cc <HAL_RCC_OscConfig+0x474>)
 8008700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008706:	f7fa fca9 	bl	800305c <HAL_GetTick>
 800870a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800870c:	e008      	b.n	8008720 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800870e:	f7fa fca5 	bl	800305c <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e10c      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008720:	4b6a      	ldr	r3, [pc, #424]	@ (80088cc <HAL_RCC_OscConfig+0x474>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0f0      	beq.n	800870e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d106      	bne.n	8008742 <HAL_RCC_OscConfig+0x2ea>
 8008734:	4b64      	ldr	r3, [pc, #400]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 8008736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008738:	4a63      	ldr	r2, [pc, #396]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 800873a:	f043 0301 	orr.w	r3, r3, #1
 800873e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008740:	e01c      	b.n	800877c <HAL_RCC_OscConfig+0x324>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	2b05      	cmp	r3, #5
 8008748:	d10c      	bne.n	8008764 <HAL_RCC_OscConfig+0x30c>
 800874a:	4b5f      	ldr	r3, [pc, #380]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 800874c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874e:	4a5e      	ldr	r2, [pc, #376]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 8008750:	f043 0304 	orr.w	r3, r3, #4
 8008754:	6713      	str	r3, [r2, #112]	@ 0x70
 8008756:	4b5c      	ldr	r3, [pc, #368]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875a:	4a5b      	ldr	r2, [pc, #364]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	6713      	str	r3, [r2, #112]	@ 0x70
 8008762:	e00b      	b.n	800877c <HAL_RCC_OscConfig+0x324>
 8008764:	4b58      	ldr	r3, [pc, #352]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 8008766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008768:	4a57      	ldr	r2, [pc, #348]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 800876a:	f023 0301 	bic.w	r3, r3, #1
 800876e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008770:	4b55      	ldr	r3, [pc, #340]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 8008772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008774:	4a54      	ldr	r2, [pc, #336]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 8008776:	f023 0304 	bic.w	r3, r3, #4
 800877a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d015      	beq.n	80087b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008784:	f7fa fc6a 	bl	800305c <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800878a:	e00a      	b.n	80087a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800878c:	f7fa fc66 	bl	800305c <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800879a:	4293      	cmp	r3, r2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e0cb      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a2:	4b49      	ldr	r3, [pc, #292]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80087a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0ee      	beq.n	800878c <HAL_RCC_OscConfig+0x334>
 80087ae:	e014      	b.n	80087da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087b0:	f7fa fc54 	bl	800305c <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087b6:	e00a      	b.n	80087ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087b8:	f7fa fc50 	bl	800305c <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e0b5      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087ce:	4b3e      	ldr	r3, [pc, #248]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80087d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1ee      	bne.n	80087b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d105      	bne.n	80087ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087e0:	4b39      	ldr	r3, [pc, #228]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80087e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e4:	4a38      	ldr	r2, [pc, #224]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80087e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80a1 	beq.w	8008938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087f6:	4b34      	ldr	r3, [pc, #208]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 030c 	and.w	r3, r3, #12
 80087fe:	2b08      	cmp	r3, #8
 8008800:	d05c      	beq.n	80088bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d141      	bne.n	800888e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880a:	4b31      	ldr	r3, [pc, #196]	@ (80088d0 <HAL_RCC_OscConfig+0x478>)
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008810:	f7fa fc24 	bl	800305c <HAL_GetTick>
 8008814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008818:	f7fa fc20 	bl	800305c <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e087      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882a:	4b27      	ldr	r3, [pc, #156]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1f0      	bne.n	8008818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69da      	ldr	r2, [r3, #28]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008844:	019b      	lsls	r3, r3, #6
 8008846:	431a      	orrs	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	3b01      	subs	r3, #1
 8008850:	041b      	lsls	r3, r3, #16
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	061b      	lsls	r3, r3, #24
 800885a:	491b      	ldr	r1, [pc, #108]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 800885c:	4313      	orrs	r3, r2
 800885e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008860:	4b1b      	ldr	r3, [pc, #108]	@ (80088d0 <HAL_RCC_OscConfig+0x478>)
 8008862:	2201      	movs	r2, #1
 8008864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008866:	f7fa fbf9 	bl	800305c <HAL_GetTick>
 800886a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800886c:	e008      	b.n	8008880 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800886e:	f7fa fbf5 	bl	800305c <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e05c      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008880:	4b11      	ldr	r3, [pc, #68]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f0      	beq.n	800886e <HAL_RCC_OscConfig+0x416>
 800888c:	e054      	b.n	8008938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800888e:	4b10      	ldr	r3, [pc, #64]	@ (80088d0 <HAL_RCC_OscConfig+0x478>)
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008894:	f7fa fbe2 	bl	800305c <HAL_GetTick>
 8008898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889a:	e008      	b.n	80088ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800889c:	f7fa fbde 	bl	800305c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e045      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ae:	4b06      	ldr	r3, [pc, #24]	@ (80088c8 <HAL_RCC_OscConfig+0x470>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f0      	bne.n	800889c <HAL_RCC_OscConfig+0x444>
 80088ba:	e03d      	b.n	8008938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d107      	bne.n	80088d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e038      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
 80088c8:	40023800 	.word	0x40023800
 80088cc:	40007000 	.word	0x40007000
 80088d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80088d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008944 <HAL_RCC_OscConfig+0x4ec>)
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d028      	beq.n	8008934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d121      	bne.n	8008934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d11a      	bne.n	8008934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008904:	4013      	ands	r3, r2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800890a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800890c:	4293      	cmp	r3, r2
 800890e:	d111      	bne.n	8008934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	3b01      	subs	r3, #1
 800891e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008920:	429a      	cmp	r2, r3
 8008922:	d107      	bne.n	8008934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008930:	429a      	cmp	r2, r3
 8008932:	d001      	beq.n	8008938 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e000      	b.n	800893a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	40023800 	.word	0x40023800

08008948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e0cc      	b.n	8008af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800895c:	4b68      	ldr	r3, [pc, #416]	@ (8008b00 <HAL_RCC_ClockConfig+0x1b8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d90c      	bls.n	8008984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800896a:	4b65      	ldr	r3, [pc, #404]	@ (8008b00 <HAL_RCC_ClockConfig+0x1b8>)
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008972:	4b63      	ldr	r3, [pc, #396]	@ (8008b00 <HAL_RCC_ClockConfig+0x1b8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d001      	beq.n	8008984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e0b8      	b.n	8008af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d020      	beq.n	80089d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800899c:	4b59      	ldr	r3, [pc, #356]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	4a58      	ldr	r2, [pc, #352]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 80089a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0308 	and.w	r3, r3, #8
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089b4:	4b53      	ldr	r3, [pc, #332]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	4a52      	ldr	r2, [pc, #328]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 80089ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80089be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089c0:	4b50      	ldr	r3, [pc, #320]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	494d      	ldr	r1, [pc, #308]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d044      	beq.n	8008a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d107      	bne.n	80089f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089e6:	4b47      	ldr	r3, [pc, #284]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d119      	bne.n	8008a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e07f      	b.n	8008af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d003      	beq.n	8008a06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d107      	bne.n	8008a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a06:	4b3f      	ldr	r3, [pc, #252]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e06f      	b.n	8008af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a16:	4b3b      	ldr	r3, [pc, #236]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e067      	b.n	8008af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a26:	4b37      	ldr	r3, [pc, #220]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f023 0203 	bic.w	r2, r3, #3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	4934      	ldr	r1, [pc, #208]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a38:	f7fa fb10 	bl	800305c <HAL_GetTick>
 8008a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a3e:	e00a      	b.n	8008a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a40:	f7fa fb0c 	bl	800305c <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e04f      	b.n	8008af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a56:	4b2b      	ldr	r3, [pc, #172]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 020c 	and.w	r2, r3, #12
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d1eb      	bne.n	8008a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a68:	4b25      	ldr	r3, [pc, #148]	@ (8008b00 <HAL_RCC_ClockConfig+0x1b8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d20c      	bcs.n	8008a90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a76:	4b22      	ldr	r3, [pc, #136]	@ (8008b00 <HAL_RCC_ClockConfig+0x1b8>)
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	b2d2      	uxtb	r2, r2
 8008a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a7e:	4b20      	ldr	r3, [pc, #128]	@ (8008b00 <HAL_RCC_ClockConfig+0x1b8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 030f 	and.w	r3, r3, #15
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d001      	beq.n	8008a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e032      	b.n	8008af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d008      	beq.n	8008aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a9c:	4b19      	ldr	r3, [pc, #100]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	4916      	ldr	r1, [pc, #88]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008aba:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	490e      	ldr	r1, [pc, #56]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ace:	f000 f821 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	f003 030f 	and.w	r3, r3, #15
 8008ade:	490a      	ldr	r1, [pc, #40]	@ (8008b08 <HAL_RCC_ClockConfig+0x1c0>)
 8008ae0:	5ccb      	ldrb	r3, [r1, r3]
 8008ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae6:	4a09      	ldr	r2, [pc, #36]	@ (8008b0c <HAL_RCC_ClockConfig+0x1c4>)
 8008ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008aea:	4b09      	ldr	r3, [pc, #36]	@ (8008b10 <HAL_RCC_ClockConfig+0x1c8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f9 fd82 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	40023c00 	.word	0x40023c00
 8008b04:	40023800 	.word	0x40023800
 8008b08:	08024528 	.word	0x08024528
 8008b0c:	20000000 	.word	0x20000000
 8008b10:	20000004 	.word	0x20000004

08008b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b18:	b094      	sub	sp, #80	@ 0x50
 8008b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b2c:	4b79      	ldr	r3, [pc, #484]	@ (8008d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f003 030c 	and.w	r3, r3, #12
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d00d      	beq.n	8008b54 <HAL_RCC_GetSysClockFreq+0x40>
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	f200 80e1 	bhi.w	8008d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <HAL_RCC_GetSysClockFreq+0x34>
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d003      	beq.n	8008b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8008b46:	e0db      	b.n	8008d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b48:	4b73      	ldr	r3, [pc, #460]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b4c:	e0db      	b.n	8008d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b4e:	4b73      	ldr	r3, [pc, #460]	@ (8008d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8008b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b52:	e0d8      	b.n	8008d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b54:	4b6f      	ldr	r3, [pc, #444]	@ (8008d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8008d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d063      	beq.n	8008c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8008d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	099b      	lsrs	r3, r3, #6
 8008b70:	2200      	movs	r2, #0
 8008b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b7e:	2300      	movs	r3, #0
 8008b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b86:	4622      	mov	r2, r4
 8008b88:	462b      	mov	r3, r5
 8008b8a:	f04f 0000 	mov.w	r0, #0
 8008b8e:	f04f 0100 	mov.w	r1, #0
 8008b92:	0159      	lsls	r1, r3, #5
 8008b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b98:	0150      	lsls	r0, r2, #5
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	1a51      	subs	r1, r2, r1
 8008ba2:	6139      	str	r1, [r7, #16]
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bb8:	4659      	mov	r1, fp
 8008bba:	018b      	lsls	r3, r1, #6
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bc2:	4651      	mov	r1, sl
 8008bc4:	018a      	lsls	r2, r1, #6
 8008bc6:	4651      	mov	r1, sl
 8008bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8008bcc:	4659      	mov	r1, fp
 8008bce:	eb63 0901 	sbc.w	r9, r3, r1
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008be6:	4690      	mov	r8, r2
 8008be8:	4699      	mov	r9, r3
 8008bea:	4623      	mov	r3, r4
 8008bec:	eb18 0303 	adds.w	r3, r8, r3
 8008bf0:	60bb      	str	r3, [r7, #8]
 8008bf2:	462b      	mov	r3, r5
 8008bf4:	eb49 0303 	adc.w	r3, r9, r3
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c06:	4629      	mov	r1, r5
 8008c08:	024b      	lsls	r3, r1, #9
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c10:	4621      	mov	r1, r4
 8008c12:	024a      	lsls	r2, r1, #9
 8008c14:	4610      	mov	r0, r2
 8008c16:	4619      	mov	r1, r3
 8008c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c24:	f7f8 f820 	bl	8000c68 <__aeabi_uldivmod>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c30:	e058      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c32:	4b38      	ldr	r3, [pc, #224]	@ (8008d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	099b      	lsrs	r3, r3, #6
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c42:	623b      	str	r3, [r7, #32]
 8008c44:	2300      	movs	r3, #0
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	f04f 0000 	mov.w	r0, #0
 8008c54:	f04f 0100 	mov.w	r1, #0
 8008c58:	0159      	lsls	r1, r3, #5
 8008c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c5e:	0150      	lsls	r0, r2, #5
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4641      	mov	r1, r8
 8008c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c84:	ebb2 040a 	subs.w	r4, r2, sl
 8008c88:	eb63 050b 	sbc.w	r5, r3, fp
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	00eb      	lsls	r3, r5, #3
 8008c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c9a:	00e2      	lsls	r2, r4, #3
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	4643      	mov	r3, r8
 8008ca2:	18e3      	adds	r3, r4, r3
 8008ca4:	603b      	str	r3, [r7, #0]
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	eb45 0303 	adc.w	r3, r5, r3
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	f04f 0300 	mov.w	r3, #0
 8008cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cba:	4629      	mov	r1, r5
 8008cbc:	028b      	lsls	r3, r1, #10
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	028a      	lsls	r2, r1, #10
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cce:	2200      	movs	r2, #0
 8008cd0:	61bb      	str	r3, [r7, #24]
 8008cd2:	61fa      	str	r2, [r7, #28]
 8008cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cd8:	f7f7 ffc6 	bl	8000c68 <__aeabi_uldivmod>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8008d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	3301      	adds	r3, #1
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008cfe:	e002      	b.n	8008d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d00:	4b05      	ldr	r3, [pc, #20]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3750      	adds	r7, #80	@ 0x50
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d12:	bf00      	nop
 8008d14:	40023800 	.word	0x40023800
 8008d18:	00f42400 	.word	0x00f42400
 8008d1c:	007a1200 	.word	0x007a1200

08008d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d24:	4b03      	ldr	r3, [pc, #12]	@ (8008d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d26:	681b      	ldr	r3, [r3, #0]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20000000 	.word	0x20000000

08008d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d3c:	f7ff fff0 	bl	8008d20 <HAL_RCC_GetHCLKFreq>
 8008d40:	4602      	mov	r2, r0
 8008d42:	4b05      	ldr	r3, [pc, #20]	@ (8008d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	0a9b      	lsrs	r3, r3, #10
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	4903      	ldr	r1, [pc, #12]	@ (8008d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d4e:	5ccb      	ldrb	r3, [r1, r3]
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	40023800 	.word	0x40023800
 8008d5c:	08024538 	.word	0x08024538

08008d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d64:	f7ff ffdc 	bl	8008d20 <HAL_RCC_GetHCLKFreq>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	4b05      	ldr	r3, [pc, #20]	@ (8008d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	0b5b      	lsrs	r3, r3, #13
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	4903      	ldr	r1, [pc, #12]	@ (8008d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d76:	5ccb      	ldrb	r3, [r1, r3]
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40023800 	.word	0x40023800
 8008d84:	08024538 	.word	0x08024538

08008d88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	220f      	movs	r2, #15
 8008d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d98:	4b12      	ldr	r3, [pc, #72]	@ (8008de4 <HAL_RCC_GetClockConfig+0x5c>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f003 0203 	and.w	r2, r3, #3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008da4:	4b0f      	ldr	r3, [pc, #60]	@ (8008de4 <HAL_RCC_GetClockConfig+0x5c>)
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008db0:	4b0c      	ldr	r3, [pc, #48]	@ (8008de4 <HAL_RCC_GetClockConfig+0x5c>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008dbc:	4b09      	ldr	r3, [pc, #36]	@ (8008de4 <HAL_RCC_GetClockConfig+0x5c>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	08db      	lsrs	r3, r3, #3
 8008dc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008dca:	4b07      	ldr	r3, [pc, #28]	@ (8008de8 <HAL_RCC_GetClockConfig+0x60>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 020f 	and.w	r2, r3, #15
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	601a      	str	r2, [r3, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	40023800 	.word	0x40023800
 8008de8:	40023c00 	.word	0x40023c00

08008dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e07b      	b.n	8008ef6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d108      	bne.n	8008e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e0e:	d009      	beq.n	8008e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	61da      	str	r2, [r3, #28]
 8008e16:	e005      	b.n	8008e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d106      	bne.n	8008e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7f9 fb66 	bl	8002510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea8:	ea42 0103 	orr.w	r1, r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	0c1b      	lsrs	r3, r3, #16
 8008ec2:	f003 0104 	and.w	r1, r3, #4
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eca:	f003 0210 	and.w	r2, r3, #16
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e041      	b.n	8008f94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f839 	bl	8008f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f000 fad1 	bl	80094e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d001      	beq.n	8008fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e04e      	b.n	8009066 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a23      	ldr	r2, [pc, #140]	@ (8009074 <HAL_TIM_Base_Start_IT+0xc4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d022      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff2:	d01d      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8009078 <HAL_TIM_Base_Start_IT+0xc8>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d018      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a1e      	ldr	r2, [pc, #120]	@ (800907c <HAL_TIM_Base_Start_IT+0xcc>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d013      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a1c      	ldr	r2, [pc, #112]	@ (8009080 <HAL_TIM_Base_Start_IT+0xd0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00e      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a1b      	ldr	r2, [pc, #108]	@ (8009084 <HAL_TIM_Base_Start_IT+0xd4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d009      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a19      	ldr	r2, [pc, #100]	@ (8009088 <HAL_TIM_Base_Start_IT+0xd8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d004      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a18      	ldr	r2, [pc, #96]	@ (800908c <HAL_TIM_Base_Start_IT+0xdc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d111      	bne.n	8009054 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b06      	cmp	r3, #6
 8009040:	d010      	beq.n	8009064 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0201 	orr.w	r2, r2, #1
 8009050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009052:	e007      	b.n	8009064 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f042 0201 	orr.w	r2, r2, #1
 8009062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40010000 	.word	0x40010000
 8009078:	40000400 	.word	0x40000400
 800907c:	40000800 	.word	0x40000800
 8009080:	40000c00 	.word	0x40000c00
 8009084:	40010400 	.word	0x40010400
 8009088:	40014000 	.word	0x40014000
 800908c:	40001800 	.word	0x40001800

08009090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e041      	b.n	8009126 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d106      	bne.n	80090bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7f9 fd22 	bl	8002b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3304      	adds	r3, #4
 80090cc:	4619      	mov	r1, r3
 80090ce:	4610      	mov	r0, r2
 80090d0:	f000 fa08 	bl	80094e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d020      	beq.n	8009192 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01b      	beq.n	8009192 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f06f 0202 	mvn.w	r2, #2
 8009162:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f995 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 800917e:	e005      	b.n	800918c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f987 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f998 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	2b00      	cmp	r3, #0
 800919a:	d020      	beq.n	80091de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01b      	beq.n	80091de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f06f 0204 	mvn.w	r2, #4
 80091ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d003      	beq.n	80091cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f96f 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 80091ca:	e005      	b.n	80091d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f961 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f972 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d020      	beq.n	800922a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 0308 	and.w	r3, r3, #8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d01b      	beq.n	800922a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f06f 0208 	mvn.w	r2, #8
 80091fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2204      	movs	r2, #4
 8009200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f949 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 8009216:	e005      	b.n	8009224 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f93b 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f94c 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f003 0310 	and.w	r3, r3, #16
 8009230:	2b00      	cmp	r3, #0
 8009232:	d020      	beq.n	8009276 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0310 	and.w	r3, r3, #16
 800923a:	2b00      	cmp	r3, #0
 800923c:	d01b      	beq.n	8009276 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f06f 0210 	mvn.w	r2, #16
 8009246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2208      	movs	r2, #8
 800924c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f923 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 8009262:	e005      	b.n	8009270 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f915 	bl	8009494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f926 	bl	80094bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00c      	beq.n	800929a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d007      	beq.n	800929a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f06f 0201 	mvn.w	r2, #1
 8009292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7f8 ff53 	bl	8002140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00c      	beq.n	80092be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d007      	beq.n	80092be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80092b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fbf5 	bl	8009aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00c      	beq.n	80092e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f8f7 	bl	80094d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00c      	beq.n	8009306 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f06f 0220 	mvn.w	r2, #32
 80092fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fbc7 	bl	8009a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009306:	bf00      	nop
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800932a:	2302      	movs	r3, #2
 800932c:	e0ae      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b0c      	cmp	r3, #12
 800933a:	f200 809f 	bhi.w	800947c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800933e:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009379 	.word	0x08009379
 8009348:	0800947d 	.word	0x0800947d
 800934c:	0800947d 	.word	0x0800947d
 8009350:	0800947d 	.word	0x0800947d
 8009354:	080093b9 	.word	0x080093b9
 8009358:	0800947d 	.word	0x0800947d
 800935c:	0800947d 	.word	0x0800947d
 8009360:	0800947d 	.word	0x0800947d
 8009364:	080093fb 	.word	0x080093fb
 8009368:	0800947d 	.word	0x0800947d
 800936c:	0800947d 	.word	0x0800947d
 8009370:	0800947d 	.word	0x0800947d
 8009374:	0800943b 	.word	0x0800943b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f95c 	bl	800963c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0208 	orr.w	r2, r2, #8
 8009392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 0204 	bic.w	r2, r2, #4
 80093a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6999      	ldr	r1, [r3, #24]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	619a      	str	r2, [r3, #24]
      break;
 80093b6:	e064      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68b9      	ldr	r1, [r7, #8]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 f9ac 	bl	800971c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6999      	ldr	r1, [r3, #24]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	021a      	lsls	r2, r3, #8
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	619a      	str	r2, [r3, #24]
      break;
 80093f8:	e043      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fa01 	bl	8009808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69da      	ldr	r2, [r3, #28]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0208 	orr.w	r2, r2, #8
 8009414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0204 	bic.w	r2, r2, #4
 8009424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69d9      	ldr	r1, [r3, #28]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	691a      	ldr	r2, [r3, #16]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	61da      	str	r2, [r3, #28]
      break;
 8009438:	e023      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68b9      	ldr	r1, [r7, #8]
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fa55 	bl	80098f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69da      	ldr	r2, [r3, #28]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69d9      	ldr	r1, [r3, #28]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	021a      	lsls	r2, r3, #8
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	61da      	str	r2, [r3, #28]
      break;
 800947a:	e002      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	75fb      	strb	r3, [r7, #23]
      break;
 8009480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a46      	ldr	r2, [pc, #280]	@ (8009610 <TIM_Base_SetConfig+0x12c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d013      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009502:	d00f      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a43      	ldr	r2, [pc, #268]	@ (8009614 <TIM_Base_SetConfig+0x130>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00b      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a42      	ldr	r2, [pc, #264]	@ (8009618 <TIM_Base_SetConfig+0x134>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d007      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a41      	ldr	r2, [pc, #260]	@ (800961c <TIM_Base_SetConfig+0x138>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <TIM_Base_SetConfig+0x40>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a40      	ldr	r2, [pc, #256]	@ (8009620 <TIM_Base_SetConfig+0x13c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d108      	bne.n	8009536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a35      	ldr	r2, [pc, #212]	@ (8009610 <TIM_Base_SetConfig+0x12c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d02b      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009544:	d027      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a32      	ldr	r2, [pc, #200]	@ (8009614 <TIM_Base_SetConfig+0x130>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d023      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a31      	ldr	r2, [pc, #196]	@ (8009618 <TIM_Base_SetConfig+0x134>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d01f      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a30      	ldr	r2, [pc, #192]	@ (800961c <TIM_Base_SetConfig+0x138>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d01b      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a2f      	ldr	r2, [pc, #188]	@ (8009620 <TIM_Base_SetConfig+0x13c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d017      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a2e      	ldr	r2, [pc, #184]	@ (8009624 <TIM_Base_SetConfig+0x140>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d013      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a2d      	ldr	r2, [pc, #180]	@ (8009628 <TIM_Base_SetConfig+0x144>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a2c      	ldr	r2, [pc, #176]	@ (800962c <TIM_Base_SetConfig+0x148>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00b      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a2b      	ldr	r2, [pc, #172]	@ (8009630 <TIM_Base_SetConfig+0x14c>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d007      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a2a      	ldr	r2, [pc, #168]	@ (8009634 <TIM_Base_SetConfig+0x150>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_Base_SetConfig+0xb2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a29      	ldr	r2, [pc, #164]	@ (8009638 <TIM_Base_SetConfig+0x154>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d108      	bne.n	80095a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800959c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a10      	ldr	r2, [pc, #64]	@ (8009610 <TIM_Base_SetConfig+0x12c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d003      	beq.n	80095dc <TIM_Base_SetConfig+0xf8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a12      	ldr	r2, [pc, #72]	@ (8009620 <TIM_Base_SetConfig+0x13c>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d103      	bne.n	80095e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d105      	bne.n	8009602 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f023 0201 	bic.w	r2, r3, #1
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	611a      	str	r2, [r3, #16]
  }
}
 8009602:	bf00      	nop
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40010000 	.word	0x40010000
 8009614:	40000400 	.word	0x40000400
 8009618:	40000800 	.word	0x40000800
 800961c:	40000c00 	.word	0x40000c00
 8009620:	40010400 	.word	0x40010400
 8009624:	40014000 	.word	0x40014000
 8009628:	40014400 	.word	0x40014400
 800962c:	40014800 	.word	0x40014800
 8009630:	40001800 	.word	0x40001800
 8009634:	40001c00 	.word	0x40001c00
 8009638:	40002000 	.word	0x40002000

0800963c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	f023 0201 	bic.w	r2, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f023 0302 	bic.w	r3, r3, #2
 8009684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	4313      	orrs	r3, r2
 800968e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a20      	ldr	r2, [pc, #128]	@ (8009714 <TIM_OC1_SetConfig+0xd8>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_OC1_SetConfig+0x64>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a1f      	ldr	r2, [pc, #124]	@ (8009718 <TIM_OC1_SetConfig+0xdc>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d10c      	bne.n	80096ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f023 0308 	bic.w	r3, r3, #8
 80096a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f023 0304 	bic.w	r3, r3, #4
 80096b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a15      	ldr	r2, [pc, #84]	@ (8009714 <TIM_OC1_SetConfig+0xd8>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d003      	beq.n	80096ca <TIM_OC1_SetConfig+0x8e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a14      	ldr	r2, [pc, #80]	@ (8009718 <TIM_OC1_SetConfig+0xdc>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d111      	bne.n	80096ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	621a      	str	r2, [r3, #32]
}
 8009708:	bf00      	nop
 800970a:	371c      	adds	r7, #28
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	40010000 	.word	0x40010000
 8009718:	40010400 	.word	0x40010400

0800971c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	f023 0210 	bic.w	r2, r3, #16
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800974a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	4313      	orrs	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f023 0320 	bic.w	r3, r3, #32
 8009766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4313      	orrs	r3, r2
 8009772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a22      	ldr	r2, [pc, #136]	@ (8009800 <TIM_OC2_SetConfig+0xe4>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_OC2_SetConfig+0x68>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a21      	ldr	r2, [pc, #132]	@ (8009804 <TIM_OC2_SetConfig+0xe8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d10d      	bne.n	80097a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800978a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800979e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a17      	ldr	r2, [pc, #92]	@ (8009800 <TIM_OC2_SetConfig+0xe4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_OC2_SetConfig+0x94>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a16      	ldr	r2, [pc, #88]	@ (8009804 <TIM_OC2_SetConfig+0xe8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d113      	bne.n	80097d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	621a      	str	r2, [r3, #32]
}
 80097f2:	bf00      	nop
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40010000 	.word	0x40010000
 8009804:	40010400 	.word	0x40010400

08009808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	4313      	orrs	r3, r2
 8009848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	021b      	lsls	r3, r3, #8
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a21      	ldr	r2, [pc, #132]	@ (80098e8 <TIM_OC3_SetConfig+0xe0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d003      	beq.n	800986e <TIM_OC3_SetConfig+0x66>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a20      	ldr	r2, [pc, #128]	@ (80098ec <TIM_OC3_SetConfig+0xe4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d10d      	bne.n	800988a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	021b      	lsls	r3, r3, #8
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	4313      	orrs	r3, r2
 8009880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a16      	ldr	r2, [pc, #88]	@ (80098e8 <TIM_OC3_SetConfig+0xe0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d003      	beq.n	800989a <TIM_OC3_SetConfig+0x92>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a15      	ldr	r2, [pc, #84]	@ (80098ec <TIM_OC3_SetConfig+0xe4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d113      	bne.n	80098c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	011b      	lsls	r3, r3, #4
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	621a      	str	r2, [r3, #32]
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40010400 	.word	0x40010400

080098f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800991e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	4313      	orrs	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800993a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	031b      	lsls	r3, r3, #12
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a12      	ldr	r2, [pc, #72]	@ (8009994 <TIM_OC4_SetConfig+0xa4>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d003      	beq.n	8009958 <TIM_OC4_SetConfig+0x68>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a11      	ldr	r2, [pc, #68]	@ (8009998 <TIM_OC4_SetConfig+0xa8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d109      	bne.n	800996c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800995e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	019b      	lsls	r3, r3, #6
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	4313      	orrs	r3, r2
 800996a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	621a      	str	r2, [r3, #32]
}
 8009986:	bf00      	nop
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	40010000 	.word	0x40010000
 8009998:	40010400 	.word	0x40010400

0800999c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d101      	bne.n	80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099b0:	2302      	movs	r3, #2
 80099b2:	e05a      	b.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a21      	ldr	r2, [pc, #132]	@ (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d022      	beq.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a00:	d01d      	beq.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1d      	ldr	r2, [pc, #116]	@ (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d018      	beq.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1b      	ldr	r2, [pc, #108]	@ (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d013      	beq.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00e      	beq.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a18      	ldr	r2, [pc, #96]	@ (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d009      	beq.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a17      	ldr	r2, [pc, #92]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d004      	beq.n	8009a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a15      	ldr	r2, [pc, #84]	@ (8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d10c      	bne.n	8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40010000 	.word	0x40010000
 8009a7c:	40000400 	.word	0x40000400
 8009a80:	40000800 	.word	0x40000800
 8009a84:	40000c00 	.word	0x40000c00
 8009a88:	40010400 	.word	0x40010400
 8009a8c:	40014000 	.word	0x40014000
 8009a90:	40001800 	.word	0x40001800

08009a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e042      	b.n	8009b54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d106      	bne.n	8009ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7f9 f8d2 	bl	8002c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2224      	movs	r2, #36	@ 0x24
 8009aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 ff85 	bl	800aa10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	695a      	ldr	r2, [r3, #20]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08a      	sub	sp, #40	@ 0x28
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d175      	bne.n	8009c68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <HAL_UART_Transmit+0x2c>
 8009b82:	88fb      	ldrh	r3, [r7, #6]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e06e      	b.n	8009c6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2221      	movs	r2, #33	@ 0x21
 8009b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b9a:	f7f9 fa5f 	bl	800305c <HAL_GetTick>
 8009b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	88fa      	ldrh	r2, [r7, #6]
 8009ba4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	88fa      	ldrh	r2, [r7, #6]
 8009baa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bb4:	d108      	bne.n	8009bc8 <HAL_UART_Transmit+0x6c>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d104      	bne.n	8009bc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	61bb      	str	r3, [r7, #24]
 8009bc6:	e003      	b.n	8009bd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009bd0:	e02e      	b.n	8009c30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2180      	movs	r1, #128	@ 0x80
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 fc5d 	bl	800a49c <UART_WaitOnFlagUntilTimeout>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d005      	beq.n	8009bf4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e03a      	b.n	8009c6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10b      	bne.n	8009c12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	3302      	adds	r3, #2
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	e007      	b.n	8009c22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	781a      	ldrb	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1cb      	bne.n	8009bd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2200      	movs	r2, #0
 8009c42:	2140      	movs	r1, #64	@ 0x40
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 fc29 	bl	800a49c <UART_WaitOnFlagUntilTimeout>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e006      	b.n	8009c6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2220      	movs	r2, #32
 8009c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	e000      	b.n	8009c6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009c68:	2302      	movs	r3, #2
  }
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b08c      	sub	sp, #48	@ 0x30
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b20      	cmp	r3, #32
 8009c8a:	d14a      	bne.n	8009d22 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e043      	b.n	8009d24 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009ca8:	88fb      	ldrh	r3, [r7, #6]
 8009caa:	461a      	mov	r2, r3
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 fc4e 	bl	800a550 <UART_Start_Receive_DMA>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009cba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d12c      	bne.n	8009d1c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d125      	bne.n	8009d16 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cca:	2300      	movs	r3, #0
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	613b      	str	r3, [r7, #16]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	613b      	str	r3, [r7, #16]
 8009cde:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	617b      	str	r3, [r7, #20]
   return(result);
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f043 0310 	orr.w	r3, r3, #16
 8009cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	330c      	adds	r3, #12
 8009cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d00:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6a39      	ldr	r1, [r7, #32]
 8009d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e5      	bne.n	8009ce0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8009d14:	e002      	b.n	8009d1c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009d20:	e000      	b.n	8009d24 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009d22:	2302      	movs	r3, #2
  }
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3730      	adds	r7, #48	@ 0x30
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b0ba      	sub	sp, #232	@ 0xe8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d62:	f003 030f 	and.w	r3, r3, #15
 8009d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10f      	bne.n	8009d92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <HAL_UART_IRQHandler+0x66>
 8009d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fd81 	bl	800a892 <UART_Receive_IT>
      return;
 8009d90:	e25b      	b.n	800a24a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 80de 	beq.w	8009f58 <HAL_UART_IRQHandler+0x22c>
 8009d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80d1 	beq.w	8009f58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00b      	beq.n	8009dda <HAL_UART_IRQHandler+0xae>
 8009dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d005      	beq.n	8009dda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dd2:	f043 0201 	orr.w	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00b      	beq.n	8009dfe <HAL_UART_IRQHandler+0xd2>
 8009de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	f043 0202 	orr.w	r2, r3, #2
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00b      	beq.n	8009e22 <HAL_UART_IRQHandler+0xf6>
 8009e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d005      	beq.n	8009e22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e1a:	f043 0204 	orr.w	r2, r3, #4
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e26:	f003 0308 	and.w	r3, r3, #8
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d011      	beq.n	8009e52 <HAL_UART_IRQHandler+0x126>
 8009e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d105      	bne.n	8009e46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d005      	beq.n	8009e52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4a:	f043 0208 	orr.w	r2, r3, #8
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 81f2 	beq.w	800a240 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d008      	beq.n	8009e7a <HAL_UART_IRQHandler+0x14e>
 8009e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fd0c 	bl	800a892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e84:	2b40      	cmp	r3, #64	@ 0x40
 8009e86:	bf0c      	ite	eq
 8009e88:	2301      	moveq	r3, #1
 8009e8a:	2300      	movne	r3, #0
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e96:	f003 0308 	and.w	r3, r3, #8
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d103      	bne.n	8009ea6 <HAL_UART_IRQHandler+0x17a>
 8009e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d04f      	beq.n	8009f46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fc14 	bl	800a6d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb6:	2b40      	cmp	r3, #64	@ 0x40
 8009eb8:	d141      	bne.n	8009f3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3314      	adds	r3, #20
 8009ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3314      	adds	r3, #20
 8009ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1d9      	bne.n	8009eba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d013      	beq.n	8009f36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f12:	4a7e      	ldr	r2, [pc, #504]	@ (800a10c <HAL_UART_IRQHandler+0x3e0>)
 8009f14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7f9 fed0 	bl	8003cc0 <HAL_DMA_Abort_IT>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d016      	beq.n	8009f54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f30:	4610      	mov	r0, r2
 8009f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f34:	e00e      	b.n	8009f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f9a8 	bl	800a28c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f3c:	e00a      	b.n	8009f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f9a4 	bl	800a28c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f44:	e006      	b.n	8009f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f9a0 	bl	800a28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009f52:	e175      	b.n	800a240 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f54:	bf00      	nop
    return;
 8009f56:	e173      	b.n	800a240 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	f040 814f 	bne.w	800a200 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f66:	f003 0310 	and.w	r3, r3, #16
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8148 	beq.w	800a200 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f74:	f003 0310 	and.w	r3, r3, #16
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 8141 	beq.w	800a200 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60bb      	str	r3, [r7, #8]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60bb      	str	r3, [r7, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	60bb      	str	r3, [r7, #8]
 8009f92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9e:	2b40      	cmp	r3, #64	@ 0x40
 8009fa0:	f040 80b6 	bne.w	800a110 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 8145 	beq.w	800a244 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	f080 813e 	bcs.w	800a244 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fda:	f000 8088 	beq.w	800a0ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	330c      	adds	r3, #12
 800a006:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a00a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a00e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a016:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1d9      	bne.n	8009fde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3314      	adds	r3, #20
 800a030:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a034:	e853 3f00 	ldrex	r3, [r3]
 800a038:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a03a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a03c:	f023 0301 	bic.w	r3, r3, #1
 800a040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3314      	adds	r3, #20
 800a04a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a04e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a052:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a056:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e1      	bne.n	800a02a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3314      	adds	r3, #20
 800a06c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a07c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3314      	adds	r3, #20
 800a086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a08a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a08c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a090:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e3      	bne.n	800a066 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	330c      	adds	r3, #12
 800a0b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0be:	f023 0310 	bic.w	r3, r3, #16
 800a0c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	330c      	adds	r3, #12
 800a0cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a0d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a0d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e3      	bne.n	800a0ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7f9 fd79 	bl	8003be0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	b29b      	uxth	r3, r3
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7f7 fa3b 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a10a:	e09b      	b.n	800a244 <HAL_UART_IRQHandler+0x518>
 800a10c:	0800a79b 	.word	0x0800a79b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a118:	b29b      	uxth	r3, r3
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a124:	b29b      	uxth	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 808e 	beq.w	800a248 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a12c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8089 	beq.w	800a248 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	330c      	adds	r3, #12
 800a13c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a140:	e853 3f00 	ldrex	r3, [r3]
 800a144:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a14c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	330c      	adds	r3, #12
 800a156:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a15a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a15c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e3      	bne.n	800a136 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3314      	adds	r3, #20
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	623b      	str	r3, [r7, #32]
   return(result);
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	f023 0301 	bic.w	r3, r3, #1
 800a184:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3314      	adds	r3, #20
 800a18e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a192:	633a      	str	r2, [r7, #48]	@ 0x30
 800a194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e3      	bne.n	800a16e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0310 	bic.w	r3, r3, #16
 800a1ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	330c      	adds	r3, #12
 800a1d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a1d8:	61fa      	str	r2, [r7, #28]
 800a1da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	69b9      	ldr	r1, [r7, #24]
 800a1de:	69fa      	ldr	r2, [r7, #28]
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e3      	bne.n	800a1b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7f7 f9c1 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1fe:	e023      	b.n	800a248 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d009      	beq.n	800a220 <HAL_UART_IRQHandler+0x4f4>
 800a20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fad2 	bl	800a7c2 <UART_Transmit_IT>
    return;
 800a21e:	e014      	b.n	800a24a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00e      	beq.n	800a24a <HAL_UART_IRQHandler+0x51e>
 800a22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d008      	beq.n	800a24a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fb12 	bl	800a862 <UART_EndTransmit_IT>
    return;
 800a23e:	e004      	b.n	800a24a <HAL_UART_IRQHandler+0x51e>
    return;
 800a240:	bf00      	nop
 800a242:	e002      	b.n	800a24a <HAL_UART_IRQHandler+0x51e>
      return;
 800a244:	bf00      	nop
 800a246:	e000      	b.n	800a24a <HAL_UART_IRQHandler+0x51e>
      return;
 800a248:	bf00      	nop
  }
}
 800a24a:	37e8      	adds	r7, #232	@ 0xe8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b09c      	sub	sp, #112	@ 0x70
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ac:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d172      	bne.n	800a3a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a2bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2be:	2200      	movs	r2, #0
 800a2c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a2d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	330c      	adds	r3, #12
 800a2e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a2e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a2e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2ea:	e841 2300 	strex	r3, r2, [r1]
 800a2ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1e5      	bne.n	800a2c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3314      	adds	r3, #20
 800a2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a308:	f023 0301 	bic.w	r3, r3, #1
 800a30c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a30e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3314      	adds	r3, #20
 800a314:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a316:	647a      	str	r2, [r7, #68]	@ 0x44
 800a318:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a31c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e5      	bne.n	800a2f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a32a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3314      	adds	r3, #20
 800a330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a334:	e853 3f00 	ldrex	r3, [r3]
 800a338:	623b      	str	r3, [r7, #32]
   return(result);
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a340:	663b      	str	r3, [r7, #96]	@ 0x60
 800a342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3314      	adds	r3, #20
 800a348:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a34a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e5      	bne.n	800a32a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a35e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a360:	2220      	movs	r2, #32
 800a362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d119      	bne.n	800a3a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a36e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	330c      	adds	r3, #12
 800a374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f023 0310 	bic.w	r3, r3, #16
 800a384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	330c      	adds	r3, #12
 800a38c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a38e:	61fa      	str	r2, [r7, #28]
 800a390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	69b9      	ldr	r1, [r7, #24]
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	617b      	str	r3, [r7, #20]
   return(result);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e5      	bne.n	800a36e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d106      	bne.n	800a3be <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a3b8:	f7f7 f8e2 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3bc:	e002      	b.n	800a3c4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a3be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a3c0:	f7ff ff50 	bl	800a264 <HAL_UART_RxCpltCallback>
}
 800a3c4:	bf00      	nop
 800a3c6:	3770      	adds	r7, #112	@ 0x70
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d108      	bne.n	800a3fa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3ec:	085b      	lsrs	r3, r3, #1
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7f7 f8c4 	bl	8001580 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3f8:	e002      	b.n	800a400 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f7ff ff3c 	bl	800a278 <HAL_UART_RxHalfCpltCallback>
}
 800a400:	bf00      	nop
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a418:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a424:	2b80      	cmp	r3, #128	@ 0x80
 800a426:	bf0c      	ite	eq
 800a428:	2301      	moveq	r3, #1
 800a42a:	2300      	movne	r3, #0
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b21      	cmp	r3, #33	@ 0x21
 800a43a:	d108      	bne.n	800a44e <UART_DMAError+0x46>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d005      	beq.n	800a44e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2200      	movs	r2, #0
 800a446:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a448:	68b8      	ldr	r0, [r7, #8]
 800a44a:	f000 f91b 	bl	800a684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a458:	2b40      	cmp	r3, #64	@ 0x40
 800a45a:	bf0c      	ite	eq
 800a45c:	2301      	moveq	r3, #1
 800a45e:	2300      	movne	r3, #0
 800a460:	b2db      	uxtb	r3, r3
 800a462:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b22      	cmp	r3, #34	@ 0x22
 800a46e:	d108      	bne.n	800a482 <UART_DMAError+0x7a>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d005      	beq.n	800a482 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2200      	movs	r2, #0
 800a47a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f000 f929 	bl	800a6d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a486:	f043 0210 	orr.w	r2, r3, #16
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a48e:	68b8      	ldr	r0, [r7, #8]
 800a490:	f7ff fefc 	bl	800a28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a494:	bf00      	nop
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ac:	e03b      	b.n	800a526 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4b4:	d037      	beq.n	800a526 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b6:	f7f8 fdd1 	bl	800305c <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	6a3a      	ldr	r2, [r7, #32]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d302      	bcc.n	800a4cc <UART_WaitOnFlagUntilTimeout+0x30>
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e03a      	b.n	800a546 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f003 0304 	and.w	r3, r3, #4
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d023      	beq.n	800a526 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b80      	cmp	r3, #128	@ 0x80
 800a4e2:	d020      	beq.n	800a526 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b40      	cmp	r3, #64	@ 0x40
 800a4e8:	d01d      	beq.n	800a526 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0308 	and.w	r3, r3, #8
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d116      	bne.n	800a526 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	617b      	str	r3, [r7, #20]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 f8e0 	bl	800a6d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2208      	movs	r2, #8
 800a518:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e00f      	b.n	800a546 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	4013      	ands	r3, r2
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	429a      	cmp	r2, r3
 800a534:	bf0c      	ite	eq
 800a536:	2301      	moveq	r3, #1
 800a538:	2300      	movne	r3, #0
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	429a      	cmp	r2, r3
 800a542:	d0b4      	beq.n	800a4ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b098      	sub	sp, #96	@ 0x60
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	88fa      	ldrh	r2, [r7, #6]
 800a568:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2222      	movs	r2, #34	@ 0x22
 800a574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57c:	4a3e      	ldr	r2, [pc, #248]	@ (800a678 <UART_Start_Receive_DMA+0x128>)
 800a57e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a584:	4a3d      	ldr	r2, [pc, #244]	@ (800a67c <UART_Start_Receive_DMA+0x12c>)
 800a586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58c:	4a3c      	ldr	r2, [pc, #240]	@ (800a680 <UART_Start_Receive_DMA+0x130>)
 800a58e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a594:	2200      	movs	r2, #0
 800a596:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a598:	f107 0308 	add.w	r3, r7, #8
 800a59c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	88fb      	ldrh	r3, [r7, #6]
 800a5b0:	f7f9 fabe 	bl	8003b30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	613b      	str	r3, [r7, #16]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	613b      	str	r3, [r7, #16]
 800a5c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d019      	beq.n	800a606 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	330c      	adds	r3, #12
 800a5d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5dc:	e853 3f00 	ldrex	r3, [r3]
 800a5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	330c      	adds	r3, #12
 800a5f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a5f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5fa:	e841 2300 	strex	r3, r2, [r1]
 800a5fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1e5      	bne.n	800a5d2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3314      	adds	r3, #20
 800a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a610:	e853 3f00 	ldrex	r3, [r3]
 800a614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a618:	f043 0301 	orr.w	r3, r3, #1
 800a61c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3314      	adds	r3, #20
 800a624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a626:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a62c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a62e:	e841 2300 	strex	r3, r2, [r1]
 800a632:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1e5      	bne.n	800a606 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	3314      	adds	r3, #20
 800a640:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	e853 3f00 	ldrex	r3, [r3]
 800a648:	617b      	str	r3, [r7, #20]
   return(result);
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a650:	653b      	str	r3, [r7, #80]	@ 0x50
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3314      	adds	r3, #20
 800a658:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a65a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a65c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65e:	6a39      	ldr	r1, [r7, #32]
 800a660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	61fb      	str	r3, [r7, #28]
   return(result);
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e5      	bne.n	800a63a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3760      	adds	r7, #96	@ 0x60
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	0800a2a1 	.word	0x0800a2a1
 800a67c:	0800a3cd 	.word	0x0800a3cd
 800a680:	0800a409 	.word	0x0800a409

0800a684 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a684:	b480      	push	{r7}
 800a686:	b089      	sub	sp, #36	@ 0x24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	e853 3f00 	ldrex	r3, [r3]
 800a69a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a6a2:	61fb      	str	r3, [r7, #28]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	330c      	adds	r3, #12
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	61ba      	str	r2, [r7, #24]
 800a6ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6979      	ldr	r1, [r7, #20]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e5      	bne.n	800a68c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a6c8:	bf00      	nop
 800a6ca:	3724      	adds	r7, #36	@ 0x24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b095      	sub	sp, #84	@ 0x54
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a6fc:	643a      	str	r2, [r7, #64]	@ 0x40
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e5      	bne.n	800a6dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3314      	adds	r3, #20
 800a716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f023 0301 	bic.w	r3, r3, #1
 800a726:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3314      	adds	r3, #20
 800a72e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a732:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a738:	e841 2300 	strex	r3, r2, [r1]
 800a73c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e5      	bne.n	800a710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d119      	bne.n	800a780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330c      	adds	r3, #12
 800a752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f023 0310 	bic.w	r3, r3, #16
 800a762:	647b      	str	r3, [r7, #68]	@ 0x44
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	330c      	adds	r3, #12
 800a76a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a76c:	61ba      	str	r2, [r7, #24]
 800a76e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6979      	ldr	r1, [r7, #20]
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	613b      	str	r3, [r7, #16]
   return(result);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2220      	movs	r2, #32
 800a784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a78e:	bf00      	nop
 800a790:	3754      	adds	r7, #84	@ 0x54
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff fd69 	bl	800a28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b085      	sub	sp, #20
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b21      	cmp	r3, #33	@ 0x21
 800a7d4:	d13e      	bne.n	800a854 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7de:	d114      	bne.n	800a80a <UART_Transmit_IT+0x48>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d110      	bne.n	800a80a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a1b      	ldr	r3, [r3, #32]
 800a7ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	1c9a      	adds	r2, r3, #2
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	621a      	str	r2, [r3, #32]
 800a808:	e008      	b.n	800a81c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	6211      	str	r1, [r2, #32]
 800a814:	781a      	ldrb	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b01      	subs	r3, #1
 800a824:	b29b      	uxth	r3, r3
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	4619      	mov	r1, r3
 800a82a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10f      	bne.n	800a850 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a83e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a84e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a854:	2302      	movs	r3, #2
  }
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68da      	ldr	r2, [r3, #12]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a878:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2220      	movs	r2, #32
 800a87e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff fce4 	bl	800a250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b08c      	sub	sp, #48	@ 0x30
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b22      	cmp	r3, #34	@ 0x22
 800a8a4:	f040 80ae 	bne.w	800aa04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8b0:	d117      	bne.n	800a8e2 <UART_Receive_IT+0x50>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d113      	bne.n	800a8e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8da:	1c9a      	adds	r2, r3, #2
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	629a      	str	r2, [r3, #40]	@ 0x28
 800a8e0:	e026      	b.n	800a930 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f4:	d007      	beq.n	800a906 <UART_Receive_IT+0x74>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10a      	bne.n	800a914 <UART_Receive_IT+0x82>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e008      	b.n	800a926 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a920:	b2da      	uxtb	r2, r3
 800a922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a924:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a934:	b29b      	uxth	r3, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	b29b      	uxth	r3, r3
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	4619      	mov	r1, r3
 800a93e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a940:	2b00      	cmp	r3, #0
 800a942:	d15d      	bne.n	800aa00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 0220 	bic.w	r2, r2, #32
 800a952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	695a      	ldr	r2, [r3, #20]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 0201 	bic.w	r2, r2, #1
 800a972:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2220      	movs	r2, #32
 800a978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a986:	2b01      	cmp	r3, #1
 800a988:	d135      	bne.n	800a9f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	330c      	adds	r3, #12
 800a996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	613b      	str	r3, [r7, #16]
   return(result);
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f023 0310 	bic.w	r3, r3, #16
 800a9a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	330c      	adds	r3, #12
 800a9ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9b0:	623a      	str	r2, [r7, #32]
 800a9b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	69f9      	ldr	r1, [r7, #28]
 800a9b6:	6a3a      	ldr	r2, [r7, #32]
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e5      	bne.n	800a990 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 0310 	and.w	r3, r3, #16
 800a9ce:	2b10      	cmp	r3, #16
 800a9d0:	d10a      	bne.n	800a9e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	60fb      	str	r3, [r7, #12]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	60fb      	str	r3, [r7, #12]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7f6 fdc6 	bl	8001580 <HAL_UARTEx_RxEventCallback>
 800a9f4:	e002      	b.n	800a9fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fc34 	bl	800a264 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e002      	b.n	800aa06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e000      	b.n	800aa06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aa04:	2302      	movs	r3, #2
  }
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3730      	adds	r7, #48	@ 0x30
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa14:	b0c0      	sub	sp, #256	@ 0x100
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aa28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa2c:	68d9      	ldr	r1, [r3, #12]
 800aa2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	ea40 0301 	orr.w	r3, r0, r1
 800aa38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	431a      	orrs	r2, r3
 800aa48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	431a      	orrs	r2, r3
 800aa50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aa68:	f021 010c 	bic.w	r1, r1, #12
 800aa6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aa76:	430b      	orrs	r3, r1
 800aa78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aa86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa8a:	6999      	ldr	r1, [r3, #24]
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	ea40 0301 	orr.w	r3, r0, r1
 800aa96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	4b8f      	ldr	r3, [pc, #572]	@ (800acdc <UART_SetConfig+0x2cc>)
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d005      	beq.n	800aab0 <UART_SetConfig+0xa0>
 800aaa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4b8d      	ldr	r3, [pc, #564]	@ (800ace0 <UART_SetConfig+0x2d0>)
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d104      	bne.n	800aaba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aab0:	f7fe f956 	bl	8008d60 <HAL_RCC_GetPCLK2Freq>
 800aab4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aab8:	e003      	b.n	800aac2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaba:	f7fe f93d 	bl	8008d38 <HAL_RCC_GetPCLK1Freq>
 800aabe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aacc:	f040 810c 	bne.w	800ace8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aada:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aade:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aae2:	4622      	mov	r2, r4
 800aae4:	462b      	mov	r3, r5
 800aae6:	1891      	adds	r1, r2, r2
 800aae8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aaea:	415b      	adcs	r3, r3
 800aaec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aaee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	eb12 0801 	adds.w	r8, r2, r1
 800aaf8:	4629      	mov	r1, r5
 800aafa:	eb43 0901 	adc.w	r9, r3, r1
 800aafe:	f04f 0200 	mov.w	r2, #0
 800ab02:	f04f 0300 	mov.w	r3, #0
 800ab06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab12:	4690      	mov	r8, r2
 800ab14:	4699      	mov	r9, r3
 800ab16:	4623      	mov	r3, r4
 800ab18:	eb18 0303 	adds.w	r3, r8, r3
 800ab1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab20:	462b      	mov	r3, r5
 800ab22:	eb49 0303 	adc.w	r3, r9, r3
 800ab26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ab2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ab3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ab3e:	460b      	mov	r3, r1
 800ab40:	18db      	adds	r3, r3, r3
 800ab42:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab44:	4613      	mov	r3, r2
 800ab46:	eb42 0303 	adc.w	r3, r2, r3
 800ab4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ab50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ab54:	f7f6 f888 	bl	8000c68 <__aeabi_uldivmod>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4b61      	ldr	r3, [pc, #388]	@ (800ace4 <UART_SetConfig+0x2d4>)
 800ab5e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab62:	095b      	lsrs	r3, r3, #5
 800ab64:	011c      	lsls	r4, r3, #4
 800ab66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ab74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ab78:	4642      	mov	r2, r8
 800ab7a:	464b      	mov	r3, r9
 800ab7c:	1891      	adds	r1, r2, r2
 800ab7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ab80:	415b      	adcs	r3, r3
 800ab82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab88:	4641      	mov	r1, r8
 800ab8a:	eb12 0a01 	adds.w	sl, r2, r1
 800ab8e:	4649      	mov	r1, r9
 800ab90:	eb43 0b01 	adc.w	fp, r3, r1
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aba0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aba8:	4692      	mov	sl, r2
 800abaa:	469b      	mov	fp, r3
 800abac:	4643      	mov	r3, r8
 800abae:	eb1a 0303 	adds.w	r3, sl, r3
 800abb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800abb6:	464b      	mov	r3, r9
 800abb8:	eb4b 0303 	adc.w	r3, fp, r3
 800abbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800abc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800abd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800abd4:	460b      	mov	r3, r1
 800abd6:	18db      	adds	r3, r3, r3
 800abd8:	643b      	str	r3, [r7, #64]	@ 0x40
 800abda:	4613      	mov	r3, r2
 800abdc:	eb42 0303 	adc.w	r3, r2, r3
 800abe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800abe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800abe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800abea:	f7f6 f83d 	bl	8000c68 <__aeabi_uldivmod>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4611      	mov	r1, r2
 800abf4:	4b3b      	ldr	r3, [pc, #236]	@ (800ace4 <UART_SetConfig+0x2d4>)
 800abf6:	fba3 2301 	umull	r2, r3, r3, r1
 800abfa:	095b      	lsrs	r3, r3, #5
 800abfc:	2264      	movs	r2, #100	@ 0x64
 800abfe:	fb02 f303 	mul.w	r3, r2, r3
 800ac02:	1acb      	subs	r3, r1, r3
 800ac04:	00db      	lsls	r3, r3, #3
 800ac06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ac0a:	4b36      	ldr	r3, [pc, #216]	@ (800ace4 <UART_SetConfig+0x2d4>)
 800ac0c:	fba3 2302 	umull	r2, r3, r3, r2
 800ac10:	095b      	lsrs	r3, r3, #5
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ac18:	441c      	add	r4, r3
 800ac1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ac28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ac2c:	4642      	mov	r2, r8
 800ac2e:	464b      	mov	r3, r9
 800ac30:	1891      	adds	r1, r2, r2
 800ac32:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ac34:	415b      	adcs	r3, r3
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ac3c:	4641      	mov	r1, r8
 800ac3e:	1851      	adds	r1, r2, r1
 800ac40:	6339      	str	r1, [r7, #48]	@ 0x30
 800ac42:	4649      	mov	r1, r9
 800ac44:	414b      	adcs	r3, r1
 800ac46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	f04f 0300 	mov.w	r3, #0
 800ac50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ac54:	4659      	mov	r1, fp
 800ac56:	00cb      	lsls	r3, r1, #3
 800ac58:	4651      	mov	r1, sl
 800ac5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac5e:	4651      	mov	r1, sl
 800ac60:	00ca      	lsls	r2, r1, #3
 800ac62:	4610      	mov	r0, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	4603      	mov	r3, r0
 800ac68:	4642      	mov	r2, r8
 800ac6a:	189b      	adds	r3, r3, r2
 800ac6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac70:	464b      	mov	r3, r9
 800ac72:	460a      	mov	r2, r1
 800ac74:	eb42 0303 	adc.w	r3, r2, r3
 800ac78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ac8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ac90:	460b      	mov	r3, r1
 800ac92:	18db      	adds	r3, r3, r3
 800ac94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac96:	4613      	mov	r3, r2
 800ac98:	eb42 0303 	adc.w	r3, r2, r3
 800ac9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aca2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aca6:	f7f5 ffdf 	bl	8000c68 <__aeabi_uldivmod>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4b0d      	ldr	r3, [pc, #52]	@ (800ace4 <UART_SetConfig+0x2d4>)
 800acb0:	fba3 1302 	umull	r1, r3, r3, r2
 800acb4:	095b      	lsrs	r3, r3, #5
 800acb6:	2164      	movs	r1, #100	@ 0x64
 800acb8:	fb01 f303 	mul.w	r3, r1, r3
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	3332      	adds	r3, #50	@ 0x32
 800acc2:	4a08      	ldr	r2, [pc, #32]	@ (800ace4 <UART_SetConfig+0x2d4>)
 800acc4:	fba2 2303 	umull	r2, r3, r2, r3
 800acc8:	095b      	lsrs	r3, r3, #5
 800acca:	f003 0207 	and.w	r2, r3, #7
 800acce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4422      	add	r2, r4
 800acd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800acd8:	e106      	b.n	800aee8 <UART_SetConfig+0x4d8>
 800acda:	bf00      	nop
 800acdc:	40011000 	.word	0x40011000
 800ace0:	40011400 	.word	0x40011400
 800ace4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ace8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acec:	2200      	movs	r2, #0
 800acee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800acf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800acf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800acfa:	4642      	mov	r2, r8
 800acfc:	464b      	mov	r3, r9
 800acfe:	1891      	adds	r1, r2, r2
 800ad00:	6239      	str	r1, [r7, #32]
 800ad02:	415b      	adcs	r3, r3
 800ad04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad0a:	4641      	mov	r1, r8
 800ad0c:	1854      	adds	r4, r2, r1
 800ad0e:	4649      	mov	r1, r9
 800ad10:	eb43 0501 	adc.w	r5, r3, r1
 800ad14:	f04f 0200 	mov.w	r2, #0
 800ad18:	f04f 0300 	mov.w	r3, #0
 800ad1c:	00eb      	lsls	r3, r5, #3
 800ad1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad22:	00e2      	lsls	r2, r4, #3
 800ad24:	4614      	mov	r4, r2
 800ad26:	461d      	mov	r5, r3
 800ad28:	4643      	mov	r3, r8
 800ad2a:	18e3      	adds	r3, r4, r3
 800ad2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad30:	464b      	mov	r3, r9
 800ad32:	eb45 0303 	adc.w	r3, r5, r3
 800ad36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	f04f 0300 	mov.w	r3, #0
 800ad52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ad56:	4629      	mov	r1, r5
 800ad58:	008b      	lsls	r3, r1, #2
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad60:	4621      	mov	r1, r4
 800ad62:	008a      	lsls	r2, r1, #2
 800ad64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ad68:	f7f5 ff7e 	bl	8000c68 <__aeabi_uldivmod>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4b60      	ldr	r3, [pc, #384]	@ (800aef4 <UART_SetConfig+0x4e4>)
 800ad72:	fba3 2302 	umull	r2, r3, r3, r2
 800ad76:	095b      	lsrs	r3, r3, #5
 800ad78:	011c      	lsls	r4, r3, #4
 800ad7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ad88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ad8c:	4642      	mov	r2, r8
 800ad8e:	464b      	mov	r3, r9
 800ad90:	1891      	adds	r1, r2, r2
 800ad92:	61b9      	str	r1, [r7, #24]
 800ad94:	415b      	adcs	r3, r3
 800ad96:	61fb      	str	r3, [r7, #28]
 800ad98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad9c:	4641      	mov	r1, r8
 800ad9e:	1851      	adds	r1, r2, r1
 800ada0:	6139      	str	r1, [r7, #16]
 800ada2:	4649      	mov	r1, r9
 800ada4:	414b      	adcs	r3, r1
 800ada6:	617b      	str	r3, [r7, #20]
 800ada8:	f04f 0200 	mov.w	r2, #0
 800adac:	f04f 0300 	mov.w	r3, #0
 800adb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800adb4:	4659      	mov	r1, fp
 800adb6:	00cb      	lsls	r3, r1, #3
 800adb8:	4651      	mov	r1, sl
 800adba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adbe:	4651      	mov	r1, sl
 800adc0:	00ca      	lsls	r2, r1, #3
 800adc2:	4610      	mov	r0, r2
 800adc4:	4619      	mov	r1, r3
 800adc6:	4603      	mov	r3, r0
 800adc8:	4642      	mov	r2, r8
 800adca:	189b      	adds	r3, r3, r2
 800adcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800add0:	464b      	mov	r3, r9
 800add2:	460a      	mov	r2, r1
 800add4:	eb42 0303 	adc.w	r3, r2, r3
 800add8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800addc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ade6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ade8:	f04f 0200 	mov.w	r2, #0
 800adec:	f04f 0300 	mov.w	r3, #0
 800adf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800adf4:	4649      	mov	r1, r9
 800adf6:	008b      	lsls	r3, r1, #2
 800adf8:	4641      	mov	r1, r8
 800adfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adfe:	4641      	mov	r1, r8
 800ae00:	008a      	lsls	r2, r1, #2
 800ae02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ae06:	f7f5 ff2f 	bl	8000c68 <__aeabi_uldivmod>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4b38      	ldr	r3, [pc, #224]	@ (800aef4 <UART_SetConfig+0x4e4>)
 800ae12:	fba3 2301 	umull	r2, r3, r3, r1
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	2264      	movs	r2, #100	@ 0x64
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
 800ae1e:	1acb      	subs	r3, r1, r3
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	3332      	adds	r3, #50	@ 0x32
 800ae24:	4a33      	ldr	r2, [pc, #204]	@ (800aef4 <UART_SetConfig+0x4e4>)
 800ae26:	fba2 2303 	umull	r2, r3, r2, r3
 800ae2a:	095b      	lsrs	r3, r3, #5
 800ae2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae30:	441c      	add	r4, r3
 800ae32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae36:	2200      	movs	r2, #0
 800ae38:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae3a:	677a      	str	r2, [r7, #116]	@ 0x74
 800ae3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ae40:	4642      	mov	r2, r8
 800ae42:	464b      	mov	r3, r9
 800ae44:	1891      	adds	r1, r2, r2
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	415b      	adcs	r3, r3
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae50:	4641      	mov	r1, r8
 800ae52:	1851      	adds	r1, r2, r1
 800ae54:	6039      	str	r1, [r7, #0]
 800ae56:	4649      	mov	r1, r9
 800ae58:	414b      	adcs	r3, r1
 800ae5a:	607b      	str	r3, [r7, #4]
 800ae5c:	f04f 0200 	mov.w	r2, #0
 800ae60:	f04f 0300 	mov.w	r3, #0
 800ae64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae68:	4659      	mov	r1, fp
 800ae6a:	00cb      	lsls	r3, r1, #3
 800ae6c:	4651      	mov	r1, sl
 800ae6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae72:	4651      	mov	r1, sl
 800ae74:	00ca      	lsls	r2, r1, #3
 800ae76:	4610      	mov	r0, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4642      	mov	r2, r8
 800ae7e:	189b      	adds	r3, r3, r2
 800ae80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae82:	464b      	mov	r3, r9
 800ae84:	460a      	mov	r2, r1
 800ae86:	eb42 0303 	adc.w	r3, r2, r3
 800ae8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae96:	667a      	str	r2, [r7, #100]	@ 0x64
 800ae98:	f04f 0200 	mov.w	r2, #0
 800ae9c:	f04f 0300 	mov.w	r3, #0
 800aea0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aea4:	4649      	mov	r1, r9
 800aea6:	008b      	lsls	r3, r1, #2
 800aea8:	4641      	mov	r1, r8
 800aeaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aeae:	4641      	mov	r1, r8
 800aeb0:	008a      	lsls	r2, r1, #2
 800aeb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aeb6:	f7f5 fed7 	bl	8000c68 <__aeabi_uldivmod>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4b0d      	ldr	r3, [pc, #52]	@ (800aef4 <UART_SetConfig+0x4e4>)
 800aec0:	fba3 1302 	umull	r1, r3, r3, r2
 800aec4:	095b      	lsrs	r3, r3, #5
 800aec6:	2164      	movs	r1, #100	@ 0x64
 800aec8:	fb01 f303 	mul.w	r3, r1, r3
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	011b      	lsls	r3, r3, #4
 800aed0:	3332      	adds	r3, #50	@ 0x32
 800aed2:	4a08      	ldr	r2, [pc, #32]	@ (800aef4 <UART_SetConfig+0x4e4>)
 800aed4:	fba2 2303 	umull	r2, r3, r2, r3
 800aed8:	095b      	lsrs	r3, r3, #5
 800aeda:	f003 020f 	and.w	r2, r3, #15
 800aede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4422      	add	r2, r4
 800aee6:	609a      	str	r2, [r3, #8]
}
 800aee8:	bf00      	nop
 800aeea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aeee:	46bd      	mov	sp, r7
 800aef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aef4:	51eb851f 	.word	0x51eb851f

0800aef8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800aefe:	4b92      	ldr	r3, [pc, #584]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af00:	22c0      	movs	r2, #192	@ 0xc0
 800af02:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800af04:	4b90      	ldr	r3, [pc, #576]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af06:	22a8      	movs	r2, #168	@ 0xa8
 800af08:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 800af0a:	4b8f      	ldr	r3, [pc, #572]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af0c:	2208      	movs	r2, #8
 800af0e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 140;
 800af10:	4b8d      	ldr	r3, [pc, #564]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af12:	228c      	movs	r2, #140	@ 0x8c
 800af14:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800af16:	4b8d      	ldr	r3, [pc, #564]	@ (800b14c <MX_LWIP_Init+0x254>)
 800af18:	22ff      	movs	r2, #255	@ 0xff
 800af1a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800af1c:	4b8b      	ldr	r3, [pc, #556]	@ (800b14c <MX_LWIP_Init+0x254>)
 800af1e:	22ff      	movs	r2, #255	@ 0xff
 800af20:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800af22:	4b8a      	ldr	r3, [pc, #552]	@ (800b14c <MX_LWIP_Init+0x254>)
 800af24:	22ff      	movs	r2, #255	@ 0xff
 800af26:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800af28:	4b88      	ldr	r3, [pc, #544]	@ (800b14c <MX_LWIP_Init+0x254>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800af2e:	4b88      	ldr	r3, [pc, #544]	@ (800b150 <MX_LWIP_Init+0x258>)
 800af30:	22c0      	movs	r2, #192	@ 0xc0
 800af32:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800af34:	4b86      	ldr	r3, [pc, #536]	@ (800b150 <MX_LWIP_Init+0x258>)
 800af36:	22a8      	movs	r2, #168	@ 0xa8
 800af38:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 8;
 800af3a:	4b85      	ldr	r3, [pc, #532]	@ (800b150 <MX_LWIP_Init+0x258>)
 800af3c:	2208      	movs	r2, #8
 800af3e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800af40:	4b83      	ldr	r3, [pc, #524]	@ (800b150 <MX_LWIP_Init+0x258>)
 800af42:	2201      	movs	r2, #1
 800af44:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800af46:	2100      	movs	r1, #0
 800af48:	2000      	movs	r0, #0
 800af4a:	f006 feb1 	bl	8011cb0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800af4e:	4b7e      	ldr	r3, [pc, #504]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	061a      	lsls	r2, r3, #24
 800af54:	4b7c      	ldr	r3, [pc, #496]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af56:	785b      	ldrb	r3, [r3, #1]
 800af58:	041b      	lsls	r3, r3, #16
 800af5a:	431a      	orrs	r2, r3
 800af5c:	4b7a      	ldr	r3, [pc, #488]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af5e:	789b      	ldrb	r3, [r3, #2]
 800af60:	021b      	lsls	r3, r3, #8
 800af62:	4313      	orrs	r3, r2
 800af64:	4a78      	ldr	r2, [pc, #480]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af66:	78d2      	ldrb	r2, [r2, #3]
 800af68:	4313      	orrs	r3, r2
 800af6a:	061a      	lsls	r2, r3, #24
 800af6c:	4b76      	ldr	r3, [pc, #472]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	0619      	lsls	r1, r3, #24
 800af72:	4b75      	ldr	r3, [pc, #468]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af74:	785b      	ldrb	r3, [r3, #1]
 800af76:	041b      	lsls	r3, r3, #16
 800af78:	4319      	orrs	r1, r3
 800af7a:	4b73      	ldr	r3, [pc, #460]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af7c:	789b      	ldrb	r3, [r3, #2]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	430b      	orrs	r3, r1
 800af82:	4971      	ldr	r1, [pc, #452]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af84:	78c9      	ldrb	r1, [r1, #3]
 800af86:	430b      	orrs	r3, r1
 800af88:	021b      	lsls	r3, r3, #8
 800af8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800af8e:	431a      	orrs	r2, r3
 800af90:	4b6d      	ldr	r3, [pc, #436]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	0619      	lsls	r1, r3, #24
 800af96:	4b6c      	ldr	r3, [pc, #432]	@ (800b148 <MX_LWIP_Init+0x250>)
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	041b      	lsls	r3, r3, #16
 800af9c:	4319      	orrs	r1, r3
 800af9e:	4b6a      	ldr	r3, [pc, #424]	@ (800b148 <MX_LWIP_Init+0x250>)
 800afa0:	789b      	ldrb	r3, [r3, #2]
 800afa2:	021b      	lsls	r3, r3, #8
 800afa4:	430b      	orrs	r3, r1
 800afa6:	4968      	ldr	r1, [pc, #416]	@ (800b148 <MX_LWIP_Init+0x250>)
 800afa8:	78c9      	ldrb	r1, [r1, #3]
 800afaa:	430b      	orrs	r3, r1
 800afac:	0a1b      	lsrs	r3, r3, #8
 800afae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800afb2:	431a      	orrs	r2, r3
 800afb4:	4b64      	ldr	r3, [pc, #400]	@ (800b148 <MX_LWIP_Init+0x250>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	0619      	lsls	r1, r3, #24
 800afba:	4b63      	ldr	r3, [pc, #396]	@ (800b148 <MX_LWIP_Init+0x250>)
 800afbc:	785b      	ldrb	r3, [r3, #1]
 800afbe:	041b      	lsls	r3, r3, #16
 800afc0:	4319      	orrs	r1, r3
 800afc2:	4b61      	ldr	r3, [pc, #388]	@ (800b148 <MX_LWIP_Init+0x250>)
 800afc4:	789b      	ldrb	r3, [r3, #2]
 800afc6:	021b      	lsls	r3, r3, #8
 800afc8:	430b      	orrs	r3, r1
 800afca:	495f      	ldr	r1, [pc, #380]	@ (800b148 <MX_LWIP_Init+0x250>)
 800afcc:	78c9      	ldrb	r1, [r1, #3]
 800afce:	430b      	orrs	r3, r1
 800afd0:	0e1b      	lsrs	r3, r3, #24
 800afd2:	4313      	orrs	r3, r2
 800afd4:	4a5f      	ldr	r2, [pc, #380]	@ (800b154 <MX_LWIP_Init+0x25c>)
 800afd6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800afd8:	4b5c      	ldr	r3, [pc, #368]	@ (800b14c <MX_LWIP_Init+0x254>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	061a      	lsls	r2, r3, #24
 800afde:	4b5b      	ldr	r3, [pc, #364]	@ (800b14c <MX_LWIP_Init+0x254>)
 800afe0:	785b      	ldrb	r3, [r3, #1]
 800afe2:	041b      	lsls	r3, r3, #16
 800afe4:	431a      	orrs	r2, r3
 800afe6:	4b59      	ldr	r3, [pc, #356]	@ (800b14c <MX_LWIP_Init+0x254>)
 800afe8:	789b      	ldrb	r3, [r3, #2]
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	4313      	orrs	r3, r2
 800afee:	4a57      	ldr	r2, [pc, #348]	@ (800b14c <MX_LWIP_Init+0x254>)
 800aff0:	78d2      	ldrb	r2, [r2, #3]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	061a      	lsls	r2, r3, #24
 800aff6:	4b55      	ldr	r3, [pc, #340]	@ (800b14c <MX_LWIP_Init+0x254>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	0619      	lsls	r1, r3, #24
 800affc:	4b53      	ldr	r3, [pc, #332]	@ (800b14c <MX_LWIP_Init+0x254>)
 800affe:	785b      	ldrb	r3, [r3, #1]
 800b000:	041b      	lsls	r3, r3, #16
 800b002:	4319      	orrs	r1, r3
 800b004:	4b51      	ldr	r3, [pc, #324]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b006:	789b      	ldrb	r3, [r3, #2]
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	430b      	orrs	r3, r1
 800b00c:	494f      	ldr	r1, [pc, #316]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b00e:	78c9      	ldrb	r1, [r1, #3]
 800b010:	430b      	orrs	r3, r1
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b018:	431a      	orrs	r2, r3
 800b01a:	4b4c      	ldr	r3, [pc, #304]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	0619      	lsls	r1, r3, #24
 800b020:	4b4a      	ldr	r3, [pc, #296]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b022:	785b      	ldrb	r3, [r3, #1]
 800b024:	041b      	lsls	r3, r3, #16
 800b026:	4319      	orrs	r1, r3
 800b028:	4b48      	ldr	r3, [pc, #288]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b02a:	789b      	ldrb	r3, [r3, #2]
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	430b      	orrs	r3, r1
 800b030:	4946      	ldr	r1, [pc, #280]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b032:	78c9      	ldrb	r1, [r1, #3]
 800b034:	430b      	orrs	r3, r1
 800b036:	0a1b      	lsrs	r3, r3, #8
 800b038:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b03c:	431a      	orrs	r2, r3
 800b03e:	4b43      	ldr	r3, [pc, #268]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	0619      	lsls	r1, r3, #24
 800b044:	4b41      	ldr	r3, [pc, #260]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b046:	785b      	ldrb	r3, [r3, #1]
 800b048:	041b      	lsls	r3, r3, #16
 800b04a:	4319      	orrs	r1, r3
 800b04c:	4b3f      	ldr	r3, [pc, #252]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b04e:	789b      	ldrb	r3, [r3, #2]
 800b050:	021b      	lsls	r3, r3, #8
 800b052:	430b      	orrs	r3, r1
 800b054:	493d      	ldr	r1, [pc, #244]	@ (800b14c <MX_LWIP_Init+0x254>)
 800b056:	78c9      	ldrb	r1, [r1, #3]
 800b058:	430b      	orrs	r3, r1
 800b05a:	0e1b      	lsrs	r3, r3, #24
 800b05c:	4313      	orrs	r3, r2
 800b05e:	4a3e      	ldr	r2, [pc, #248]	@ (800b158 <MX_LWIP_Init+0x260>)
 800b060:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b062:	4b3b      	ldr	r3, [pc, #236]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	061a      	lsls	r2, r3, #24
 800b068:	4b39      	ldr	r3, [pc, #228]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b06a:	785b      	ldrb	r3, [r3, #1]
 800b06c:	041b      	lsls	r3, r3, #16
 800b06e:	431a      	orrs	r2, r3
 800b070:	4b37      	ldr	r3, [pc, #220]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b072:	789b      	ldrb	r3, [r3, #2]
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	4313      	orrs	r3, r2
 800b078:	4a35      	ldr	r2, [pc, #212]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b07a:	78d2      	ldrb	r2, [r2, #3]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	061a      	lsls	r2, r3, #24
 800b080:	4b33      	ldr	r3, [pc, #204]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	0619      	lsls	r1, r3, #24
 800b086:	4b32      	ldr	r3, [pc, #200]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b088:	785b      	ldrb	r3, [r3, #1]
 800b08a:	041b      	lsls	r3, r3, #16
 800b08c:	4319      	orrs	r1, r3
 800b08e:	4b30      	ldr	r3, [pc, #192]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b090:	789b      	ldrb	r3, [r3, #2]
 800b092:	021b      	lsls	r3, r3, #8
 800b094:	430b      	orrs	r3, r1
 800b096:	492e      	ldr	r1, [pc, #184]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b098:	78c9      	ldrb	r1, [r1, #3]
 800b09a:	430b      	orrs	r3, r1
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	0619      	lsls	r1, r3, #24
 800b0aa:	4b29      	ldr	r3, [pc, #164]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0ac:	785b      	ldrb	r3, [r3, #1]
 800b0ae:	041b      	lsls	r3, r3, #16
 800b0b0:	4319      	orrs	r1, r3
 800b0b2:	4b27      	ldr	r3, [pc, #156]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0b4:	789b      	ldrb	r3, [r3, #2]
 800b0b6:	021b      	lsls	r3, r3, #8
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	4925      	ldr	r1, [pc, #148]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0bc:	78c9      	ldrb	r1, [r1, #3]
 800b0be:	430b      	orrs	r3, r1
 800b0c0:	0a1b      	lsrs	r3, r3, #8
 800b0c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	4b21      	ldr	r3, [pc, #132]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	0619      	lsls	r1, r3, #24
 800b0ce:	4b20      	ldr	r3, [pc, #128]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0d0:	785b      	ldrb	r3, [r3, #1]
 800b0d2:	041b      	lsls	r3, r3, #16
 800b0d4:	4319      	orrs	r1, r3
 800b0d6:	4b1e      	ldr	r3, [pc, #120]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0d8:	789b      	ldrb	r3, [r3, #2]
 800b0da:	021b      	lsls	r3, r3, #8
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	491c      	ldr	r1, [pc, #112]	@ (800b150 <MX_LWIP_Init+0x258>)
 800b0e0:	78c9      	ldrb	r1, [r1, #3]
 800b0e2:	430b      	orrs	r3, r1
 800b0e4:	0e1b      	lsrs	r3, r3, #24
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b15c <MX_LWIP_Init+0x264>)
 800b0ea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b0ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b160 <MX_LWIP_Init+0x268>)
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b164 <MX_LWIP_Init+0x26c>)
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4b18      	ldr	r3, [pc, #96]	@ (800b15c <MX_LWIP_Init+0x264>)
 800b0fa:	4a17      	ldr	r2, [pc, #92]	@ (800b158 <MX_LWIP_Init+0x260>)
 800b0fc:	4915      	ldr	r1, [pc, #84]	@ (800b154 <MX_LWIP_Init+0x25c>)
 800b0fe:	481a      	ldr	r0, [pc, #104]	@ (800b168 <MX_LWIP_Init+0x270>)
 800b100:	f007 fe6a 	bl	8012dd8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b104:	4818      	ldr	r0, [pc, #96]	@ (800b168 <MX_LWIP_Init+0x270>)
 800b106:	f008 f819 	bl	801313c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b10a:	4817      	ldr	r0, [pc, #92]	@ (800b168 <MX_LWIP_Init+0x270>)
 800b10c:	f008 f826 	bl	801315c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b110:	4916      	ldr	r1, [pc, #88]	@ (800b16c <MX_LWIP_Init+0x274>)
 800b112:	4815      	ldr	r0, [pc, #84]	@ (800b168 <MX_LWIP_Init+0x270>)
 800b114:	f008 f924 	bl	8013360 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b118:	2224      	movs	r2, #36	@ 0x24
 800b11a:	2100      	movs	r1, #0
 800b11c:	4814      	ldr	r0, [pc, #80]	@ (800b170 <MX_LWIP_Init+0x278>)
 800b11e:	f013 fab3 	bl	801e688 <memset>
  attributes.name = "EthLink";
 800b122:	4b13      	ldr	r3, [pc, #76]	@ (800b170 <MX_LWIP_Init+0x278>)
 800b124:	4a13      	ldr	r2, [pc, #76]	@ (800b174 <MX_LWIP_Init+0x27c>)
 800b126:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b128:	4b11      	ldr	r3, [pc, #68]	@ (800b170 <MX_LWIP_Init+0x278>)
 800b12a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b12e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b130:	4b0f      	ldr	r3, [pc, #60]	@ (800b170 <MX_LWIP_Init+0x278>)
 800b132:	2210      	movs	r2, #16
 800b134:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b136:	4a0e      	ldr	r2, [pc, #56]	@ (800b170 <MX_LWIP_Init+0x278>)
 800b138:	490b      	ldr	r1, [pc, #44]	@ (800b168 <MX_LWIP_Init+0x270>)
 800b13a:	480f      	ldr	r0, [pc, #60]	@ (800b178 <MX_LWIP_Init+0x280>)
 800b13c:	f000 fd9d 	bl	800bc7a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b140:	bf00      	nop
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	2000078c 	.word	0x2000078c
 800b14c:	20000790 	.word	0x20000790
 800b150:	20000794 	.word	0x20000794
 800b154:	20000780 	.word	0x20000780
 800b158:	20000784 	.word	0x20000784
 800b15c:	20000788 	.word	0x20000788
 800b160:	08011bc1 	.word	0x08011bc1
 800b164:	0800b63d 	.word	0x0800b63d
 800b168:	2000074c 	.word	0x2000074c
 800b16c:	0800b17d 	.word	0x0800b17d
 800b170:	20000798 	.word	0x20000798
 800b174:	08020944 	.word	0x08020944
 800b178:	0800b921 	.word	0x0800b921

0800b17c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b198:	4b04      	ldr	r3, [pc, #16]	@ (800b1ac <HAL_ETH_RxCpltCallback+0x1c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f001 f803 	bl	800c1a8 <osSemaphoreRelease>
}
 800b1a2:	bf00      	nop
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20005288 	.word	0x20005288

0800b1b0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b1b8:	4b04      	ldr	r3, [pc, #16]	@ (800b1cc <HAL_ETH_TxCpltCallback+0x1c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fff3 	bl	800c1a8 <osSemaphoreRelease>
}
 800b1c2:	bf00      	nop
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	2000528c 	.word	0x2000528c

0800b1d0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7f9 fe53 	bl	8004e84 <HAL_ETH_GetDMAError>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e4:	2b80      	cmp	r3, #128	@ 0x80
 800b1e6:	d104      	bne.n	800b1f2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b1e8:	4b04      	ldr	r3, [pc, #16]	@ (800b1fc <HAL_ETH_ErrorCallback+0x2c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 ffdb 	bl	800c1a8 <osSemaphoreRelease>
  }
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20005288 	.word	0x20005288

0800b200 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b0aa      	sub	sp, #168	@ 0xa8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800b21a:	f107 0310 	add.w	r3, r7, #16
 800b21e:	2264      	movs	r2, #100	@ 0x64
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f013 fa30 	bl	801e688 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b228:	4b89      	ldr	r3, [pc, #548]	@ (800b450 <low_level_init+0x250>)
 800b22a:	4a8a      	ldr	r2, [pc, #552]	@ (800b454 <low_level_init+0x254>)
 800b22c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b22e:	2300      	movs	r3, #0
 800b230:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b232:	2380      	movs	r3, #128	@ 0x80
 800b234:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b236:	23e1      	movs	r3, #225	@ 0xe1
 800b238:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b23a:	2300      	movs	r3, #0
 800b23c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b23e:	2300      	movs	r3, #0
 800b240:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b242:	2300      	movs	r3, #0
 800b244:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b246:	4a82      	ldr	r2, [pc, #520]	@ (800b450 <low_level_init+0x250>)
 800b248:	f107 0308 	add.w	r3, r7, #8
 800b24c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b24e:	4b80      	ldr	r3, [pc, #512]	@ (800b450 <low_level_init+0x250>)
 800b250:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b254:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b256:	4b7e      	ldr	r3, [pc, #504]	@ (800b450 <low_level_init+0x250>)
 800b258:	4a7f      	ldr	r2, [pc, #508]	@ (800b458 <low_level_init+0x258>)
 800b25a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b25c:	4b7c      	ldr	r3, [pc, #496]	@ (800b450 <low_level_init+0x250>)
 800b25e:	4a7f      	ldr	r2, [pc, #508]	@ (800b45c <low_level_init+0x25c>)
 800b260:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b262:	4b7b      	ldr	r3, [pc, #492]	@ (800b450 <low_level_init+0x250>)
 800b264:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b268:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b26a:	4879      	ldr	r0, [pc, #484]	@ (800b450 <low_level_init+0x250>)
 800b26c:	f7f8 ffce 	bl	800420c <HAL_ETH_Init>
 800b270:	4603      	mov	r3, r0
 800b272:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b276:	2238      	movs	r2, #56	@ 0x38
 800b278:	2100      	movs	r1, #0
 800b27a:	4879      	ldr	r0, [pc, #484]	@ (800b460 <low_level_init+0x260>)
 800b27c:	f013 fa04 	bl	801e688 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b280:	4b77      	ldr	r3, [pc, #476]	@ (800b460 <low_level_init+0x260>)
 800b282:	2221      	movs	r2, #33	@ 0x21
 800b284:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b286:	4b76      	ldr	r3, [pc, #472]	@ (800b460 <low_level_init+0x260>)
 800b288:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800b28c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b28e:	4b74      	ldr	r3, [pc, #464]	@ (800b460 <low_level_init+0x260>)
 800b290:	2200      	movs	r2, #0
 800b292:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b294:	4873      	ldr	r0, [pc, #460]	@ (800b464 <low_level_init+0x264>)
 800b296:	f007 fc59 	bl	8012b4c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2206      	movs	r2, #6
 800b29e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b2a2:	4b6b      	ldr	r3, [pc, #428]	@ (800b450 <low_level_init+0x250>)
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b2ae:	4b68      	ldr	r3, [pc, #416]	@ (800b450 <low_level_init+0x250>)
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	785a      	ldrb	r2, [r3, #1]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b2ba:	4b65      	ldr	r3, [pc, #404]	@ (800b450 <low_level_init+0x250>)
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	789a      	ldrb	r2, [r3, #2]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b2c6:	4b62      	ldr	r3, [pc, #392]	@ (800b450 <low_level_init+0x250>)
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	78da      	ldrb	r2, [r3, #3]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b2d2:	4b5f      	ldr	r3, [pc, #380]	@ (800b450 <low_level_init+0x250>)
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	791a      	ldrb	r2, [r3, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b2de:	4b5c      	ldr	r3, [pc, #368]	@ (800b450 <low_level_init+0x250>)
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	795a      	ldrb	r2, [r3, #5]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b2f0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2f8:	f043 030a 	orr.w	r3, r3, #10
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b304:	2200      	movs	r2, #0
 800b306:	2100      	movs	r1, #0
 800b308:	2001      	movs	r0, #1
 800b30a:	f000 fe71 	bl	800bff0 <osSemaphoreNew>
 800b30e:	4603      	mov	r3, r0
 800b310:	4a55      	ldr	r2, [pc, #340]	@ (800b468 <low_level_init+0x268>)
 800b312:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	2001      	movs	r0, #1
 800b31a:	f000 fe69 	bl	800bff0 <osSemaphoreNew>
 800b31e:	4603      	mov	r3, r0
 800b320:	4a52      	ldr	r2, [pc, #328]	@ (800b46c <low_level_init+0x26c>)
 800b322:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b324:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b328:	2224      	movs	r2, #36	@ 0x24
 800b32a:	2100      	movs	r1, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f013 f9ab 	bl	801e688 <memset>
  attributes.name = "EthIf";
 800b332:	4b4f      	ldr	r3, [pc, #316]	@ (800b470 <low_level_init+0x270>)
 800b334:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b336:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800b33a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800b33e:	2330      	movs	r3, #48	@ 0x30
 800b340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800b344:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b348:	461a      	mov	r2, r3
 800b34a:	6879      	ldr	r1, [r7, #4]
 800b34c:	4849      	ldr	r0, [pc, #292]	@ (800b474 <low_level_init+0x274>)
 800b34e:	f000 fc94 	bl	800bc7a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b352:	4949      	ldr	r1, [pc, #292]	@ (800b478 <low_level_init+0x278>)
 800b354:	4849      	ldr	r0, [pc, #292]	@ (800b47c <low_level_init+0x27c>)
 800b356:	f7f7 fd44 	bl	8002de2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b35a:	4848      	ldr	r0, [pc, #288]	@ (800b47c <low_level_init+0x27c>)
 800b35c:	f7f7 fd73 	bl	8002e46 <LAN8742_Init>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d006      	beq.n	800b374 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f007 ffca 	bl	8013300 <netif_set_link_down>
    netif_set_down(netif);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f007 ff61 	bl	8013234 <netif_set_down>
 800b372:	e06a      	b.n	800b44a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b374:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d164      	bne.n	800b446 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b37c:	483f      	ldr	r0, [pc, #252]	@ (800b47c <low_level_init+0x27c>)
 800b37e:	f7f7 fdaf 	bl	8002ee0 <LAN8742_GetLinkState>
 800b382:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b386:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	dc06      	bgt.n	800b39c <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f007 ffb6 	bl	8013300 <netif_set_link_down>
      netif_set_down(netif);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f007 ff4d 	bl	8013234 <netif_set_down>
 800b39a:	e056      	b.n	800b44a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800b39c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3a0:	3b02      	subs	r3, #2
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d82a      	bhi.n	800b3fc <low_level_init+0x1fc>
 800b3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ac <low_level_init+0x1ac>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3bd 	.word	0x0800b3bd
 800b3b0:	0800b3cf 	.word	0x0800b3cf
 800b3b4:	0800b3df 	.word	0x0800b3df
 800b3b8:	0800b3ef 	.word	0x0800b3ef
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b3bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b3c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b3c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b3c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b3cc:	e01f      	b.n	800b40e <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b3d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b3d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b3dc:	e017      	b.n	800b40e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b3de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b3e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b3ec:	e00f      	b.n	800b40e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b3fa:	e008      	b.n	800b40e <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800b3fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b404:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b40c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b40e:	f107 0310 	add.w	r3, r7, #16
 800b412:	4619      	mov	r1, r3
 800b414:	480e      	ldr	r0, [pc, #56]	@ (800b450 <low_level_init+0x250>)
 800b416:	f7f9 fbe1 	bl	8004bdc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b41a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b41e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800b420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b426:	f107 0310 	add.w	r3, r7, #16
 800b42a:	4619      	mov	r1, r3
 800b42c:	4808      	ldr	r0, [pc, #32]	@ (800b450 <low_level_init+0x250>)
 800b42e:	f7f9 fccc 	bl	8004dca <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800b432:	4807      	ldr	r0, [pc, #28]	@ (800b450 <low_level_init+0x250>)
 800b434:	f7f8 ff86 	bl	8004344 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f007 fe8f 	bl	801315c <netif_set_up>
    netif_set_link_up(netif);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f007 ff2a 	bl	8013298 <netif_set_link_up>
 800b444:	e001      	b.n	800b44a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800b446:	f7f6 fe8d 	bl	8002164 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b44a:	37a8      	adds	r7, #168	@ 0xa8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20005290 	.word	0x20005290
 800b454:	40028000 	.word	0x40028000
 800b458:	200051e8 	.word	0x200051e8
 800b45c:	20005148 	.word	0x20005148
 800b460:	20005340 	.word	0x20005340
 800b464:	08024548 	.word	0x08024548
 800b468:	20005288 	.word	0x20005288
 800b46c:	2000528c 	.word	0x2000528c
 800b470:	0802094c 	.word	0x0802094c
 800b474:	0800b5e9 	.word	0x0800b5e9
 800b478:	2000000c 	.word	0x2000000c
 800b47c:	20005378 	.word	0x20005378

0800b480 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b092      	sub	sp, #72	@ 0x48
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b498:	f107 030c 	add.w	r3, r7, #12
 800b49c:	2230      	movs	r2, #48	@ 0x30
 800b49e:	2100      	movs	r1, #0
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f013 f8f1 	bl	801e688 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b4a6:	f107 030c 	add.w	r3, r7, #12
 800b4aa:	2230      	movs	r2, #48	@ 0x30
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f013 f8ea 	bl	801e688 <memset>

  for(q = p; q != NULL; q = q->next)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4b8:	e045      	b.n	800b546 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b4ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d902      	bls.n	800b4c6 <low_level_output+0x46>
      return ERR_IF;
 800b4c0:	f06f 030b 	mvn.w	r3, #11
 800b4c4:	e06c      	b.n	800b5a0 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800b4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4c8:	6859      	ldr	r1, [r3, #4]
 800b4ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	3348      	adds	r3, #72	@ 0x48
 800b4d6:	443b      	add	r3, r7
 800b4d8:	3b3c      	subs	r3, #60	@ 0x3c
 800b4da:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b4dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4de:	895b      	ldrh	r3, [r3, #10]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	005b      	lsls	r3, r3, #1
 800b4e8:	4413      	add	r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	3348      	adds	r3, #72	@ 0x48
 800b4ee:	443b      	add	r3, r7
 800b4f0:	3b38      	subs	r3, #56	@ 0x38
 800b4f2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b4f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d011      	beq.n	800b51e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4fc:	1e5a      	subs	r2, r3, #1
 800b4fe:	f107 000c 	add.w	r0, r7, #12
 800b502:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b504:	460b      	mov	r3, r1
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	440b      	add	r3, r1
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	18c1      	adds	r1, r0, r3
 800b50e:	4613      	mov	r3, r2
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	4413      	add	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	3348      	adds	r3, #72	@ 0x48
 800b518:	443b      	add	r3, r7
 800b51a:	3b34      	subs	r3, #52	@ 0x34
 800b51c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b51e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d109      	bne.n	800b53a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b528:	4613      	mov	r3, r2
 800b52a:	005b      	lsls	r3, r3, #1
 800b52c:	4413      	add	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	3348      	adds	r3, #72	@ 0x48
 800b532:	443b      	add	r3, r7
 800b534:	3b34      	subs	r3, #52	@ 0x34
 800b536:	2200      	movs	r2, #0
 800b538:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b53a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b53c:	3301      	adds	r3, #1
 800b53e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	643b      	str	r3, [r7, #64]	@ 0x40
 800b546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1b6      	bne.n	800b4ba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	891b      	ldrh	r3, [r3, #8]
 800b550:	461a      	mov	r2, r3
 800b552:	4b15      	ldr	r3, [pc, #84]	@ (800b5a8 <low_level_output+0x128>)
 800b554:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b556:	4a14      	ldr	r2, [pc, #80]	@ (800b5a8 <low_level_output+0x128>)
 800b558:	f107 030c 	add.w	r3, r7, #12
 800b55c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b55e:	4a12      	ldr	r2, [pc, #72]	@ (800b5a8 <low_level_output+0x128>)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800b564:	6838      	ldr	r0, [r7, #0]
 800b566:	f008 fb4f 	bl	8013c08 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800b56a:	490f      	ldr	r1, [pc, #60]	@ (800b5a8 <low_level_output+0x128>)
 800b56c:	480f      	ldr	r0, [pc, #60]	@ (800b5ac <low_level_output+0x12c>)
 800b56e:	f7f8 ffd8 	bl	8004522 <HAL_ETH_Transmit_IT>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10e      	bne.n	800b596 <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800b578:	bf00      	nop
 800b57a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b0 <low_level_output+0x130>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b582:	4618      	mov	r0, r3
 800b584:	f000 fdbe 	bl	800c104 <osSemaphoreAcquire>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1f5      	bne.n	800b57a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800b58e:	4807      	ldr	r0, [pc, #28]	@ (800b5ac <low_level_output+0x12c>)
 800b590:	f7f9 f966 	bl	8004860 <HAL_ETH_ReleaseTxPacket>
 800b594:	e002      	b.n	800b59c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800b596:	6838      	ldr	r0, [r7, #0]
 800b598:	f008 fa90 	bl	8013abc <pbuf_free>
  }

  return errval;
 800b59c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3748      	adds	r7, #72	@ 0x48
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20005340 	.word	0x20005340
 800b5ac:	20005290 	.word	0x20005290
 800b5b0:	2000528c 	.word	0x2000528c

0800b5b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b5c0:	4b07      	ldr	r3, [pc, #28]	@ (800b5e0 <low_level_input+0x2c>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d105      	bne.n	800b5d4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b5c8:	f107 030c 	add.w	r3, r7, #12
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4805      	ldr	r0, [pc, #20]	@ (800b5e4 <low_level_input+0x30>)
 800b5d0:	f7f9 f803 	bl	80045da <HAL_ETH_ReadData>
  }

  return p;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20005144 	.word	0x20005144
 800b5e4:	20005290 	.word	0x20005290

0800b5e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b5f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b638 <ethernetif_input+0x50>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b600:	4618      	mov	r0, r3
 800b602:	f000 fd7f 	bl	800c104 <osSemaphoreAcquire>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1f5      	bne.n	800b5f8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800b60c:	68b8      	ldr	r0, [r7, #8]
 800b60e:	f7ff ffd1 	bl	800b5b4 <low_level_input>
 800b612:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	4798      	blx	r3
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d002      	beq.n	800b630 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f008 fa46 	bl	8013abc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1ea      	bne.n	800b60c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b636:	e7df      	b.n	800b5f8 <ethernetif_input+0x10>
 800b638:	20005288 	.word	0x20005288

0800b63c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d106      	bne.n	800b658 <ethernetif_init+0x1c>
 800b64a:	4b0e      	ldr	r3, [pc, #56]	@ (800b684 <ethernetif_init+0x48>)
 800b64c:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 800b650:	490d      	ldr	r1, [pc, #52]	@ (800b688 <ethernetif_init+0x4c>)
 800b652:	480e      	ldr	r0, [pc, #56]	@ (800b68c <ethernetif_init+0x50>)
 800b654:	f012 fe86 	bl	801e364 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2273      	movs	r2, #115	@ 0x73
 800b65c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2274      	movs	r2, #116	@ 0x74
 800b664:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a09      	ldr	r2, [pc, #36]	@ (800b690 <ethernetif_init+0x54>)
 800b66c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a08      	ldr	r2, [pc, #32]	@ (800b694 <ethernetif_init+0x58>)
 800b672:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff fdc3 	bl	800b200 <low_level_init>

  return ERR_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	08020954 	.word	0x08020954
 800b688:	08020970 	.word	0x08020970
 800b68c:	08020980 	.word	0x08020980
 800b690:	0801b5d9 	.word	0x0801b5d9
 800b694:	0800b481 	.word	0x0800b481

0800b698 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b6a4:	68f9      	ldr	r1, [r7, #12]
 800b6a6:	4809      	ldr	r0, [pc, #36]	@ (800b6cc <pbuf_free_custom+0x34>)
 800b6a8:	f007 fb40 	bl	8012d2c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b6ac:	4b08      	ldr	r3, [pc, #32]	@ (800b6d0 <pbuf_free_custom+0x38>)
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d107      	bne.n	800b6c4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b6b4:	4b06      	ldr	r3, [pc, #24]	@ (800b6d0 <pbuf_free_custom+0x38>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b6ba:	4b06      	ldr	r3, [pc, #24]	@ (800b6d4 <pbuf_free_custom+0x3c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 fd72 	bl	800c1a8 <osSemaphoreRelease>
  }
}
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	08024548 	.word	0x08024548
 800b6d0:	20005144 	.word	0x20005144
 800b6d4:	20005288 	.word	0x20005288

0800b6d8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b6dc:	f7f7 fcbe 	bl	800305c <HAL_GetTick>
 800b6e0:	4603      	mov	r3, r0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08e      	sub	sp, #56	@ 0x38
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	605a      	str	r2, [r3, #4]
 800b6fa:	609a      	str	r2, [r3, #8]
 800b6fc:	60da      	str	r2, [r3, #12]
 800b6fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a59      	ldr	r2, [pc, #356]	@ (800b86c <HAL_ETH_MspInit+0x184>)
 800b706:	4293      	cmp	r3, r2
 800b708:	f040 80ac 	bne.w	800b864 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b70c:	2300      	movs	r3, #0
 800b70e:	623b      	str	r3, [r7, #32]
 800b710:	4b57      	ldr	r3, [pc, #348]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b714:	4a56      	ldr	r2, [pc, #344]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b716:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b71a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b71c:	4b54      	ldr	r3, [pc, #336]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b71e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b724:	623b      	str	r3, [r7, #32]
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	2300      	movs	r3, #0
 800b72a:	61fb      	str	r3, [r7, #28]
 800b72c:	4b50      	ldr	r3, [pc, #320]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b72e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b730:	4a4f      	ldr	r2, [pc, #316]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b736:	6313      	str	r3, [r2, #48]	@ 0x30
 800b738:	4b4d      	ldr	r3, [pc, #308]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b73c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	2300      	movs	r3, #0
 800b746:	61bb      	str	r3, [r7, #24]
 800b748:	4b49      	ldr	r3, [pc, #292]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b74c:	4a48      	ldr	r2, [pc, #288]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b74e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b752:	6313      	str	r3, [r2, #48]	@ 0x30
 800b754:	4b46      	ldr	r3, [pc, #280]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b760:	2300      	movs	r3, #0
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	4b42      	ldr	r3, [pc, #264]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b768:	4a41      	ldr	r2, [pc, #260]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b76a:	f043 0304 	orr.w	r3, r3, #4
 800b76e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b770:	4b3f      	ldr	r3, [pc, #252]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b774:	f003 0304 	and.w	r3, r3, #4
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b77c:	2300      	movs	r3, #0
 800b77e:	613b      	str	r3, [r7, #16]
 800b780:	4b3b      	ldr	r3, [pc, #236]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b784:	4a3a      	ldr	r2, [pc, #232]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b786:	f043 0301 	orr.w	r3, r3, #1
 800b78a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b78c:	4b38      	ldr	r3, [pc, #224]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b78e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	613b      	str	r3, [r7, #16]
 800b796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	4b34      	ldr	r3, [pc, #208]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a0:	4a33      	ldr	r2, [pc, #204]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b7a2:	f043 0302 	orr.w	r3, r3, #2
 800b7a6:	6313      	str	r3, [r2, #48]	@ 0x30
 800b7a8:	4b31      	ldr	r3, [pc, #196]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60bb      	str	r3, [r7, #8]
 800b7b8:	4b2d      	ldr	r3, [pc, #180]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b7ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7bc:	4a2c      	ldr	r2, [pc, #176]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b7c4:	4b2a      	ldr	r3, [pc, #168]	@ (800b870 <HAL_ETH_MspInit+0x188>)
 800b7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7cc:	60bb      	str	r3, [r7, #8]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> ETH_RX_ER
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b7d0:	2332      	movs	r3, #50	@ 0x32
 800b7d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b7e0:	230b      	movs	r3, #11
 800b7e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4822      	ldr	r0, [pc, #136]	@ (800b874 <HAL_ETH_MspInit+0x18c>)
 800b7ec:	f7f9 ff78 	bl	80056e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b7f0:	2386      	movs	r3, #134	@ 0x86
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b800:	230b      	movs	r3, #11
 800b802:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b808:	4619      	mov	r1, r3
 800b80a:	481b      	ldr	r0, [pc, #108]	@ (800b878 <HAL_ETH_MspInit+0x190>)
 800b80c:	f7f9 ff68 	bl	80056e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|RMII_TXD1_Pin;
 800b810:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800b814:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b816:	2302      	movs	r3, #2
 800b818:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b81a:	2300      	movs	r3, #0
 800b81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b81e:	2303      	movs	r3, #3
 800b820:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b822:	230b      	movs	r3, #11
 800b824:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b82a:	4619      	mov	r1, r3
 800b82c:	4813      	ldr	r0, [pc, #76]	@ (800b87c <HAL_ETH_MspInit+0x194>)
 800b82e:	f7f9 ff57 	bl	80056e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b832:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b838:	2302      	movs	r3, #2
 800b83a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b840:	2303      	movs	r3, #3
 800b842:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b844:	230b      	movs	r3, #11
 800b846:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b84c:	4619      	mov	r1, r3
 800b84e:	480c      	ldr	r0, [pc, #48]	@ (800b880 <HAL_ETH_MspInit+0x198>)
 800b850:	f7f9 ff46 	bl	80056e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b854:	2200      	movs	r2, #0
 800b856:	2105      	movs	r1, #5
 800b858:	203d      	movs	r0, #61	@ 0x3d
 800b85a:	f7f8 f891 	bl	8003980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b85e:	203d      	movs	r0, #61	@ 0x3d
 800b860:	f7f8 f8aa 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b864:	bf00      	nop
 800b866:	3738      	adds	r7, #56	@ 0x38
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	40028000 	.word	0x40028000
 800b870:	40023800 	.word	0x40023800
 800b874:	40020800 	.word	0x40020800
 800b878:	40020000 	.word	0x40020000
 800b87c:	40020400 	.word	0x40020400
 800b880:	40021800 	.word	0x40021800

0800b884 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b888:	4802      	ldr	r0, [pc, #8]	@ (800b894 <ETH_PHY_IO_Init+0x10>)
 800b88a:	f7f9 fab9 	bl	8004e00 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20005290 	.word	0x20005290

0800b898 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b898:	b480      	push	{r7}
 800b89a:	af00      	add	r7, sp, #0
  return 0;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	68f9      	ldr	r1, [r7, #12]
 800b8ba:	4807      	ldr	r0, [pc, #28]	@ (800b8d8 <ETH_PHY_IO_ReadReg+0x30>)
 800b8bc:	f7f9 f8fa 	bl	8004ab4 <HAL_ETH_ReadPHYRegister>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8ca:	e000      	b.n	800b8ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20005290 	.word	0x20005290

0800b8dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	68f9      	ldr	r1, [r7, #12]
 800b8ee:	4807      	ldr	r0, [pc, #28]	@ (800b90c <ETH_PHY_IO_WriteReg+0x30>)
 800b8f0:	f7f9 f92b 	bl	8004b4a <HAL_ETH_WritePHYRegister>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b8fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8fe:	e000      	b.n	800b902 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	20005290 	.word	0x20005290

0800b910 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b914:	f7f7 fba2 	bl	800305c <HAL_GetTick>
 800b918:	4603      	mov	r3, r0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b0a0      	sub	sp, #128	@ 0x80
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b928:	f107 0308 	add.w	r3, r7, #8
 800b92c:	2264      	movs	r2, #100	@ 0x64
 800b92e:	2100      	movs	r1, #0
 800b930:	4618      	mov	r0, r3
 800b932:	f012 fea9 	bl	801e688 <memset>
  int32_t PHYLinkState = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b93e:	2300      	movs	r3, #0
 800b940:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b942:	2300      	movs	r3, #0
 800b944:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b94a:	483a      	ldr	r0, [pc, #232]	@ (800ba34 <ethernet_link_thread+0x114>)
 800b94c:	f7f7 fac8 	bl	8002ee0 <LAN8742_GetLinkState>
 800b950:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b954:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b958:	089b      	lsrs	r3, r3, #2
 800b95a:	f003 0301 	and.w	r3, r3, #1
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00c      	beq.n	800b97e <ethernet_link_thread+0x5e>
 800b964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b966:	2b01      	cmp	r3, #1
 800b968:	dc09      	bgt.n	800b97e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b96a:	4833      	ldr	r0, [pc, #204]	@ (800ba38 <ethernet_link_thread+0x118>)
 800b96c:	f7f8 fd5a 	bl	8004424 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b970:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b972:	f007 fc5f 	bl	8013234 <netif_set_down>
    netif_set_link_down(netif);
 800b976:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b978:	f007 fcc2 	bl	8013300 <netif_set_link_down>
 800b97c:	e055      	b.n	800ba2a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b97e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b980:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d14e      	bne.n	800ba2a <ethernet_link_thread+0x10a>
 800b98c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b98e:	2b01      	cmp	r3, #1
 800b990:	dd4b      	ble.n	800ba2a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800b992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b994:	3b02      	subs	r3, #2
 800b996:	2b03      	cmp	r3, #3
 800b998:	d82a      	bhi.n	800b9f0 <ethernet_link_thread+0xd0>
 800b99a:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a0 <ethernet_link_thread+0x80>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9b1 	.word	0x0800b9b1
 800b9a4:	0800b9c3 	.word	0x0800b9c3
 800b9a8:	0800b9d3 	.word	0x0800b9d3
 800b9ac:	0800b9e3 	.word	0x0800b9e3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b9b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b9b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b9b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b9ba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b9c0:	e017      	b.n	800b9f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b9c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b9ca:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b9d0:	e00f      	b.n	800b9f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b9d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b9d6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b9e0:	e007      	b.n	800b9f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b9ee:	e000      	b.n	800b9f2 <ethernet_link_thread+0xd2>
    default:
      break;
 800b9f0:	bf00      	nop
    }

    if(linkchanged)
 800b9f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d018      	beq.n	800ba2a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b9f8:	f107 0308 	add.w	r3, r7, #8
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	480e      	ldr	r0, [pc, #56]	@ (800ba38 <ethernet_link_thread+0x118>)
 800ba00:	f7f9 f8ec 	bl	8004bdc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ba04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba06:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800ba08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba0a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ba0c:	f107 0308 	add.w	r3, r7, #8
 800ba10:	4619      	mov	r1, r3
 800ba12:	4809      	ldr	r0, [pc, #36]	@ (800ba38 <ethernet_link_thread+0x118>)
 800ba14:	f7f9 f9d9 	bl	8004dca <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800ba18:	4807      	ldr	r0, [pc, #28]	@ (800ba38 <ethernet_link_thread+0x118>)
 800ba1a:	f7f8 fc93 	bl	8004344 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ba1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba20:	f007 fb9c 	bl	801315c <netif_set_up>
      netif_set_link_up(netif);
 800ba24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba26:	f007 fc37 	bl	8013298 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ba2a:	2064      	movs	r0, #100	@ 0x64
 800ba2c:	f000 f9b7 	bl	800bd9e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ba30:	e78b      	b.n	800b94a <ethernet_link_thread+0x2a>
 800ba32:	bf00      	nop
 800ba34:	20005378 	.word	0x20005378
 800ba38:	20005290 	.word	0x20005290

0800ba3c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af02      	add	r7, sp, #8
 800ba42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ba44:	4812      	ldr	r0, [pc, #72]	@ (800ba90 <HAL_ETH_RxAllocateCallback+0x54>)
 800ba46:	f007 f8fd 	bl	8012c44 <memp_malloc_pool>
 800ba4a:	60f8      	str	r0, [r7, #12]
  if (p)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d014      	beq.n	800ba7c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f103 0220 	add.w	r2, r3, #32
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4a0d      	ldr	r2, [pc, #52]	@ (800ba94 <HAL_ETH_RxAllocateCallback+0x58>)
 800ba60:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ba6a:	9201      	str	r2, [sp, #4]
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2241      	movs	r2, #65	@ 0x41
 800ba72:	2100      	movs	r1, #0
 800ba74:	2000      	movs	r0, #0
 800ba76:	f007 fe67 	bl	8013748 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ba7a:	e005      	b.n	800ba88 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ba7c:	4b06      	ldr	r3, [pc, #24]	@ (800ba98 <HAL_ETH_RxAllocateCallback+0x5c>)
 800ba7e:	2201      	movs	r2, #1
 800ba80:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	601a      	str	r2, [r3, #0]
}
 800ba88:	bf00      	nop
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	08024548 	.word	0x08024548
 800ba94:	0800b699 	.word	0x0800b699
 800ba98:	20005144 	.word	0x20005144

0800ba9c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b089      	sub	sp, #36	@ 0x24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3b20      	subs	r3, #32
 800baba:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	2200      	movs	r2, #0
 800bac6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	887a      	ldrh	r2, [r7, #2]
 800bacc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d103      	bne.n	800bade <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	69fa      	ldr	r2, [r7, #28]
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	e003      	b.n	800bae6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	69fa      	ldr	r2, [r7, #28]
 800bae4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	e009      	b.n	800bb08 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	891a      	ldrh	r2, [r3, #8]
 800baf8:	887b      	ldrh	r3, [r7, #2]
 800bafa:	4413      	add	r3, r2
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	61fb      	str	r3, [r7, #28]
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1f2      	bne.n	800baf4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bb0e:	bf00      	nop
 800bb10:	bf00      	nop
 800bb12:	3724      	adds	r7, #36	@ 0x24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f007 ffc9 	bl	8013abc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <__NVIC_SetPriority>:
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	db0a      	blt.n	800bb5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	490c      	ldr	r1, [pc, #48]	@ (800bb80 <__NVIC_SetPriority+0x4c>)
 800bb4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb52:	0112      	lsls	r2, r2, #4
 800bb54:	b2d2      	uxtb	r2, r2
 800bb56:	440b      	add	r3, r1
 800bb58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bb5c:	e00a      	b.n	800bb74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	4908      	ldr	r1, [pc, #32]	@ (800bb84 <__NVIC_SetPriority+0x50>)
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	f003 030f 	and.w	r3, r3, #15
 800bb6a:	3b04      	subs	r3, #4
 800bb6c:	0112      	lsls	r2, r2, #4
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	440b      	add	r3, r1
 800bb72:	761a      	strb	r2, [r3, #24]
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	e000e100 	.word	0xe000e100
 800bb84:	e000ed00 	.word	0xe000ed00

0800bb88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bb8c:	4b05      	ldr	r3, [pc, #20]	@ (800bba4 <SysTick_Handler+0x1c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bb90:	f002 fd6c 	bl	800e66c <xTaskGetSchedulerState>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d001      	beq.n	800bb9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bb9a:	f003 fc65 	bl	800f468 <xPortSysTickHandler>
  }
}
 800bb9e:	bf00      	nop
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	e000e010 	.word	0xe000e010

0800bba8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bbac:	2100      	movs	r1, #0
 800bbae:	f06f 0004 	mvn.w	r0, #4
 800bbb2:	f7ff ffbf 	bl	800bb34 <__NVIC_SetPriority>
#endif
}
 800bbb6:	bf00      	nop
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbc2:	f3ef 8305 	mrs	r3, IPSR
 800bbc6:	603b      	str	r3, [r7, #0]
  return(result);
 800bbc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bbce:	f06f 0305 	mvn.w	r3, #5
 800bbd2:	607b      	str	r3, [r7, #4]
 800bbd4:	e00c      	b.n	800bbf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bbd6:	4b0a      	ldr	r3, [pc, #40]	@ (800bc00 <osKernelInitialize+0x44>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d105      	bne.n	800bbea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bbde:	4b08      	ldr	r3, [pc, #32]	@ (800bc00 <osKernelInitialize+0x44>)
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	607b      	str	r3, [r7, #4]
 800bbe8:	e002      	b.n	800bbf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bbea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bbee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bbf0:	687b      	ldr	r3, [r7, #4]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	20005398 	.word	0x20005398

0800bc04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc0a:	f3ef 8305 	mrs	r3, IPSR
 800bc0e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d003      	beq.n	800bc1e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc16:	f06f 0305 	mvn.w	r3, #5
 800bc1a:	607b      	str	r3, [r7, #4]
 800bc1c:	e010      	b.n	800bc40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc1e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc4c <osKernelStart+0x48>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d109      	bne.n	800bc3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc26:	f7ff ffbf 	bl	800bba8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc2a:	4b08      	ldr	r3, [pc, #32]	@ (800bc4c <osKernelStart+0x48>)
 800bc2c:	2202      	movs	r2, #2
 800bc2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc30:	f002 f896 	bl	800dd60 <vTaskStartScheduler>
      stat = osOK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	607b      	str	r3, [r7, #4]
 800bc38:	e002      	b.n	800bc40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc40:	687b      	ldr	r3, [r7, #4]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20005398 	.word	0x20005398

0800bc50 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc56:	f3ef 8305 	mrs	r3, IPSR
 800bc5a:	603b      	str	r3, [r7, #0]
  return(result);
 800bc5c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bc62:	f002 f9a9 	bl	800dfb8 <xTaskGetTickCountFromISR>
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	e002      	b.n	800bc70 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bc6a:	f002 f995 	bl	800df98 <xTaskGetTickCount>
 800bc6e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bc70:	687b      	ldr	r3, [r7, #4]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b08e      	sub	sp, #56	@ 0x38
 800bc7e:	af04      	add	r7, sp, #16
 800bc80:	60f8      	str	r0, [r7, #12]
 800bc82:	60b9      	str	r1, [r7, #8]
 800bc84:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc8a:	f3ef 8305 	mrs	r3, IPSR
 800bc8e:	617b      	str	r3, [r7, #20]
  return(result);
 800bc90:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d17e      	bne.n	800bd94 <osThreadNew+0x11a>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d07b      	beq.n	800bd94 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bc9c:	2380      	movs	r3, #128	@ 0x80
 800bc9e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bca0:	2318      	movs	r3, #24
 800bca2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d045      	beq.n	800bd40 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <osThreadNew+0x48>
        name = attr->name;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d008      	beq.n	800bce8 <osThreadNew+0x6e>
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	2b38      	cmp	r3, #56	@ 0x38
 800bcda:	d805      	bhi.n	800bce8 <osThreadNew+0x6e>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	f003 0301 	and.w	r3, r3, #1
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d001      	beq.n	800bcec <osThreadNew+0x72>
        return (NULL);
 800bce8:	2300      	movs	r3, #0
 800bcea:	e054      	b.n	800bd96 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	089b      	lsrs	r3, r3, #2
 800bcfa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00e      	beq.n	800bd22 <osThreadNew+0xa8>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	2ba7      	cmp	r3, #167	@ 0xa7
 800bd0a:	d90a      	bls.n	800bd22 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d006      	beq.n	800bd22 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <osThreadNew+0xa8>
        mem = 1;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	61bb      	str	r3, [r7, #24]
 800bd20:	e010      	b.n	800bd44 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10c      	bne.n	800bd44 <osThreadNew+0xca>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d108      	bne.n	800bd44 <osThreadNew+0xca>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d104      	bne.n	800bd44 <osThreadNew+0xca>
          mem = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	61bb      	str	r3, [r7, #24]
 800bd3e:	e001      	b.n	800bd44 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d110      	bne.n	800bd6c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd52:	9202      	str	r2, [sp, #8]
 800bd54:	9301      	str	r3, [sp, #4]
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6a3a      	ldr	r2, [r7, #32]
 800bd5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f001 fe09 	bl	800d978 <xTaskCreateStatic>
 800bd66:	4603      	mov	r3, r0
 800bd68:	613b      	str	r3, [r7, #16]
 800bd6a:	e013      	b.n	800bd94 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d110      	bne.n	800bd94 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	f107 0310 	add.w	r3, r7, #16
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f001 fe57 	bl	800da38 <xTaskCreate>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d001      	beq.n	800bd94 <osThreadNew+0x11a>
            hTask = NULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bd94:	693b      	ldr	r3, [r7, #16]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3728      	adds	r7, #40	@ 0x28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bda6:	f3ef 8305 	mrs	r3, IPSR
 800bdaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <osDelay+0x1c>
    stat = osErrorISR;
 800bdb2:	f06f 0305 	mvn.w	r3, #5
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	e007      	b.n	800bdca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d002      	beq.n	800bdca <osDelay+0x2c>
      vTaskDelay(ticks);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f001 ff95 	bl	800dcf4 <vTaskDelay>
    }
  }

  return (stat);
 800bdca:	68fb      	ldr	r3, [r7, #12]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bddc:	2300      	movs	r3, #0
 800bdde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bde0:	f3ef 8305 	mrs	r3, IPSR
 800bde4:	60bb      	str	r3, [r7, #8]
  return(result);
 800bde6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d174      	bne.n	800bed6 <osMutexNew+0x102>
    if (attr != NULL) {
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <osMutexNew+0x26>
      type = attr->attr_bits;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	61bb      	str	r3, [r7, #24]
 800bdf8:	e001      	b.n	800bdfe <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <osMutexNew+0x3a>
      rmtx = 1U;
 800be08:	2301      	movs	r3, #1
 800be0a:	617b      	str	r3, [r7, #20]
 800be0c:	e001      	b.n	800be12 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800be0e:	2300      	movs	r3, #0
 800be10:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	f003 0308 	and.w	r3, r3, #8
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d15c      	bne.n	800bed6 <osMutexNew+0x102>
      mem = -1;
 800be1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be20:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d015      	beq.n	800be54 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d006      	beq.n	800be3e <osMutexNew+0x6a>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	2b4f      	cmp	r3, #79	@ 0x4f
 800be36:	d902      	bls.n	800be3e <osMutexNew+0x6a>
          mem = 1;
 800be38:	2301      	movs	r3, #1
 800be3a:	613b      	str	r3, [r7, #16]
 800be3c:	e00c      	b.n	800be58 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d108      	bne.n	800be58 <osMutexNew+0x84>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d104      	bne.n	800be58 <osMutexNew+0x84>
            mem = 0;
 800be4e:	2300      	movs	r3, #0
 800be50:	613b      	str	r3, [r7, #16]
 800be52:	e001      	b.n	800be58 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d112      	bne.n	800be84 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d007      	beq.n	800be74 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	4619      	mov	r1, r3
 800be6a:	2004      	movs	r0, #4
 800be6c:	f000 fdd9 	bl	800ca22 <xQueueCreateMutexStatic>
 800be70:	61f8      	str	r0, [r7, #28]
 800be72:	e016      	b.n	800bea2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	4619      	mov	r1, r3
 800be7a:	2001      	movs	r0, #1
 800be7c:	f000 fdd1 	bl	800ca22 <xQueueCreateMutexStatic>
 800be80:	61f8      	str	r0, [r7, #28]
 800be82:	e00e      	b.n	800bea2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d004      	beq.n	800be9a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800be90:	2004      	movs	r0, #4
 800be92:	f000 fdae 	bl	800c9f2 <xQueueCreateMutex>
 800be96:	61f8      	str	r0, [r7, #28]
 800be98:	e003      	b.n	800bea2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800be9a:	2001      	movs	r0, #1
 800be9c:	f000 fda9 	bl	800c9f2 <xQueueCreateMutex>
 800bea0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00c      	beq.n	800bec2 <osMutexNew+0xee>
        if (attr != NULL) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <osMutexNew+0xe2>
          name = attr->name;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e001      	b.n	800beba <osMutexNew+0xe6>
        } else {
          name = NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	69f8      	ldr	r0, [r7, #28]
 800bebe:	f001 fcd3 	bl	800d868 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d006      	beq.n	800bed6 <osMutexNew+0x102>
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	f043 0301 	orr.w	r3, r3, #1
 800bed4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bed6:	69fb      	ldr	r3, [r7, #28]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3720      	adds	r7, #32
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f023 0301 	bic.w	r3, r3, #1
 800bef0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800befe:	f3ef 8305 	mrs	r3, IPSR
 800bf02:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf04:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800bf0a:	f06f 0305 	mvn.w	r3, #5
 800bf0e:	617b      	str	r3, [r7, #20]
 800bf10:	e02c      	b.n	800bf6c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d103      	bne.n	800bf20 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bf18:	f06f 0303 	mvn.w	r3, #3
 800bf1c:	617b      	str	r3, [r7, #20]
 800bf1e:	e025      	b.n	800bf6c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d011      	beq.n	800bf4a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6938      	ldr	r0, [r7, #16]
 800bf2a:	f000 fdca 	bl	800cac2 <xQueueTakeMutexRecursive>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d01b      	beq.n	800bf6c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800bf3a:	f06f 0301 	mvn.w	r3, #1
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	e014      	b.n	800bf6c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bf42:	f06f 0302 	mvn.w	r3, #2
 800bf46:	617b      	str	r3, [r7, #20]
 800bf48:	e010      	b.n	800bf6c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6938      	ldr	r0, [r7, #16]
 800bf4e:	f001 f96f 	bl	800d230 <xQueueSemaphoreTake>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d009      	beq.n	800bf6c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800bf5e:	f06f 0301 	mvn.w	r3, #1
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	e002      	b.n	800bf6c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bf66:	f06f 0302 	mvn.w	r3, #2
 800bf6a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800bf6c:	697b      	ldr	r3, [r7, #20]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b086      	sub	sp, #24
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf92:	f3ef 8305 	mrs	r3, IPSR
 800bf96:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf98:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800bf9e:	f06f 0305 	mvn.w	r3, #5
 800bfa2:	617b      	str	r3, [r7, #20]
 800bfa4:	e01f      	b.n	800bfe6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d103      	bne.n	800bfb4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800bfac:	f06f 0303 	mvn.w	r3, #3
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	e018      	b.n	800bfe6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d009      	beq.n	800bfce <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bfba:	6938      	ldr	r0, [r7, #16]
 800bfbc:	f000 fd4c 	bl	800ca58 <xQueueGiveMutexRecursive>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d00f      	beq.n	800bfe6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bfc6:	f06f 0302 	mvn.w	r3, #2
 800bfca:	617b      	str	r3, [r7, #20]
 800bfcc:	e00b      	b.n	800bfe6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	6938      	ldr	r0, [r7, #16]
 800bfd6:	f000 fe19 	bl	800cc0c <xQueueGenericSend>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d002      	beq.n	800bfe6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bfe0:	f06f 0302 	mvn.w	r3, #2
 800bfe4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bfe6:	697b      	ldr	r3, [r7, #20]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08a      	sub	sp, #40	@ 0x28
 800bff4:	af02      	add	r7, sp, #8
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bffc:	2300      	movs	r3, #0
 800bffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c000:	f3ef 8305 	mrs	r3, IPSR
 800c004:	613b      	str	r3, [r7, #16]
  return(result);
 800c006:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d175      	bne.n	800c0f8 <osSemaphoreNew+0x108>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d072      	beq.n	800c0f8 <osSemaphoreNew+0x108>
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	429a      	cmp	r2, r3
 800c018:	d86e      	bhi.n	800c0f8 <osSemaphoreNew+0x108>
    mem = -1;
 800c01a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c01e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d015      	beq.n	800c052 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d006      	beq.n	800c03c <osSemaphoreNew+0x4c>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	2b4f      	cmp	r3, #79	@ 0x4f
 800c034:	d902      	bls.n	800c03c <osSemaphoreNew+0x4c>
        mem = 1;
 800c036:	2301      	movs	r3, #1
 800c038:	61bb      	str	r3, [r7, #24]
 800c03a:	e00c      	b.n	800c056 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d108      	bne.n	800c056 <osSemaphoreNew+0x66>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d104      	bne.n	800c056 <osSemaphoreNew+0x66>
          mem = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	61bb      	str	r3, [r7, #24]
 800c050:	e001      	b.n	800c056 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c05c:	d04c      	beq.n	800c0f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d128      	bne.n	800c0b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d10a      	bne.n	800c080 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	2203      	movs	r2, #3
 800c070:	9200      	str	r2, [sp, #0]
 800c072:	2200      	movs	r2, #0
 800c074:	2100      	movs	r1, #0
 800c076:	2001      	movs	r0, #1
 800c078:	f000 fbc6 	bl	800c808 <xQueueGenericCreateStatic>
 800c07c:	61f8      	str	r0, [r7, #28]
 800c07e:	e005      	b.n	800c08c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c080:	2203      	movs	r2, #3
 800c082:	2100      	movs	r1, #0
 800c084:	2001      	movs	r0, #1
 800c086:	f000 fc3c 	bl	800c902 <xQueueGenericCreate>
 800c08a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d022      	beq.n	800c0d8 <osSemaphoreNew+0xe8>
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01f      	beq.n	800c0d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c098:	2300      	movs	r3, #0
 800c09a:	2200      	movs	r2, #0
 800c09c:	2100      	movs	r1, #0
 800c09e:	69f8      	ldr	r0, [r7, #28]
 800c0a0:	f000 fdb4 	bl	800cc0c <xQueueGenericSend>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d016      	beq.n	800c0d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c0aa:	69f8      	ldr	r0, [r7, #28]
 800c0ac:	f001 fa90 	bl	800d5d0 <vQueueDelete>
            hSemaphore = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	61fb      	str	r3, [r7, #28]
 800c0b4:	e010      	b.n	800c0d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d108      	bne.n	800c0ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 fd33 	bl	800cb30 <xQueueCreateCountingSemaphoreStatic>
 800c0ca:	61f8      	str	r0, [r7, #28]
 800c0cc:	e004      	b.n	800c0d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c0ce:	68b9      	ldr	r1, [r7, #8]
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 fd66 	bl	800cba2 <xQueueCreateCountingSemaphore>
 800c0d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00c      	beq.n	800c0f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d003      	beq.n	800c0ec <osSemaphoreNew+0xfc>
          name = attr->name;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	617b      	str	r3, [r7, #20]
 800c0ea:	e001      	b.n	800c0f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c0f0:	6979      	ldr	r1, [r7, #20]
 800c0f2:	69f8      	ldr	r0, [r7, #28]
 800c0f4:	f001 fbb8 	bl	800d868 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c0f8:	69fb      	ldr	r3, [r7, #28]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3720      	adds	r7, #32
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c112:	2300      	movs	r3, #0
 800c114:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d103      	bne.n	800c124 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c11c:	f06f 0303 	mvn.w	r3, #3
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	e039      	b.n	800c198 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c124:	f3ef 8305 	mrs	r3, IPSR
 800c128:	60fb      	str	r3, [r7, #12]
  return(result);
 800c12a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d022      	beq.n	800c176 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c136:	f06f 0303 	mvn.w	r3, #3
 800c13a:	617b      	str	r3, [r7, #20]
 800c13c:	e02c      	b.n	800c198 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c13e:	2300      	movs	r3, #0
 800c140:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c142:	f107 0308 	add.w	r3, r7, #8
 800c146:	461a      	mov	r2, r3
 800c148:	2100      	movs	r1, #0
 800c14a:	6938      	ldr	r0, [r7, #16]
 800c14c:	f001 f980 	bl	800d450 <xQueueReceiveFromISR>
 800c150:	4603      	mov	r3, r0
 800c152:	2b01      	cmp	r3, #1
 800c154:	d003      	beq.n	800c15e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c156:	f06f 0302 	mvn.w	r3, #2
 800c15a:	617b      	str	r3, [r7, #20]
 800c15c:	e01c      	b.n	800c198 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d019      	beq.n	800c198 <osSemaphoreAcquire+0x94>
 800c164:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a4 <osSemaphoreAcquire+0xa0>)
 800c166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c16a:	601a      	str	r2, [r3, #0]
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	e010      	b.n	800c198 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6938      	ldr	r0, [r7, #16]
 800c17a:	f001 f859 	bl	800d230 <xQueueSemaphoreTake>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b01      	cmp	r3, #1
 800c182:	d009      	beq.n	800c198 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c18a:	f06f 0301 	mvn.w	r3, #1
 800c18e:	617b      	str	r3, [r7, #20]
 800c190:	e002      	b.n	800c198 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c192:	f06f 0302 	mvn.w	r3, #2
 800c196:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c198:	697b      	ldr	r3, [r7, #20]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	e000ed04 	.word	0xe000ed04

0800c1a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d103      	bne.n	800c1c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c1be:	f06f 0303 	mvn.w	r3, #3
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	e02c      	b.n	800c220 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1c6:	f3ef 8305 	mrs	r3, IPSR
 800c1ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01a      	beq.n	800c208 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c1d6:	f107 0308 	add.w	r3, r7, #8
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6938      	ldr	r0, [r7, #16]
 800c1de:	f000 feb5 	bl	800cf4c <xQueueGiveFromISR>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d003      	beq.n	800c1f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c1e8:	f06f 0302 	mvn.w	r3, #2
 800c1ec:	617b      	str	r3, [r7, #20]
 800c1ee:	e017      	b.n	800c220 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d014      	beq.n	800c220 <osSemaphoreRelease+0x78>
 800c1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c22c <osSemaphoreRelease+0x84>)
 800c1f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	e00b      	b.n	800c220 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c208:	2300      	movs	r3, #0
 800c20a:	2200      	movs	r2, #0
 800c20c:	2100      	movs	r1, #0
 800c20e:	6938      	ldr	r0, [r7, #16]
 800c210:	f000 fcfc 	bl	800cc0c <xQueueGenericSend>
 800c214:	4603      	mov	r3, r0
 800c216:	2b01      	cmp	r3, #1
 800c218:	d002      	beq.n	800c220 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c21a:	f06f 0302 	mvn.w	r3, #2
 800c21e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c220:	697b      	ldr	r3, [r7, #20]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	e000ed04 	.word	0xe000ed04

0800c230 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c23c:	f3ef 8305 	mrs	r3, IPSR
 800c240:	60fb      	str	r3, [r7, #12]
  return(result);
 800c242:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800c248:	f06f 0305 	mvn.w	r3, #5
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	e00e      	b.n	800c26e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d103      	bne.n	800c25e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800c256:	f06f 0303 	mvn.w	r3, #3
 800c25a:	617b      	str	r3, [r7, #20]
 800c25c:	e007      	b.n	800c26e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c25e:	6938      	ldr	r0, [r7, #16]
 800c260:	f001 fb2c 	bl	800d8bc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800c268:	6938      	ldr	r0, [r7, #16]
 800c26a:	f001 f9b1 	bl	800d5d0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c26e:	697b      	ldr	r3, [r7, #20]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c278:	b580      	push	{r7, lr}
 800c27a:	b08a      	sub	sp, #40	@ 0x28
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c288:	f3ef 8305 	mrs	r3, IPSR
 800c28c:	613b      	str	r3, [r7, #16]
  return(result);
 800c28e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c290:	2b00      	cmp	r3, #0
 800c292:	d15f      	bne.n	800c354 <osMessageQueueNew+0xdc>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d05c      	beq.n	800c354 <osMessageQueueNew+0xdc>
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d059      	beq.n	800c354 <osMessageQueueNew+0xdc>
    mem = -1;
 800c2a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c2a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d029      	beq.n	800c300 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d012      	beq.n	800c2da <osMessageQueueNew+0x62>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	2b4f      	cmp	r3, #79	@ 0x4f
 800c2ba:	d90e      	bls.n	800c2da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00a      	beq.n	800c2da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	695a      	ldr	r2, [r3, #20]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	fb01 f303 	mul.w	r3, r1, r3
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d302      	bcc.n	800c2da <osMessageQueueNew+0x62>
        mem = 1;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	61bb      	str	r3, [r7, #24]
 800c2d8:	e014      	b.n	800c304 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d110      	bne.n	800c304 <osMessageQueueNew+0x8c>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10c      	bne.n	800c304 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d108      	bne.n	800c304 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d104      	bne.n	800c304 <osMessageQueueNew+0x8c>
          mem = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	61bb      	str	r3, [r7, #24]
 800c2fe:	e001      	b.n	800c304 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c300:	2300      	movs	r3, #0
 800c302:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d10b      	bne.n	800c322 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	691a      	ldr	r2, [r3, #16]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	2100      	movs	r1, #0
 800c314:	9100      	str	r1, [sp, #0]
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f000 fa75 	bl	800c808 <xQueueGenericCreateStatic>
 800c31e:	61f8      	str	r0, [r7, #28]
 800c320:	e008      	b.n	800c334 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d105      	bne.n	800c334 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c328:	2200      	movs	r2, #0
 800c32a:	68b9      	ldr	r1, [r7, #8]
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 fae8 	bl	800c902 <xQueueGenericCreate>
 800c332:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00c      	beq.n	800c354 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e001      	b.n	800c34c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c348:	2300      	movs	r3, #0
 800c34a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c34c:	6979      	ldr	r1, [r7, #20]
 800c34e:	69f8      	ldr	r0, [r7, #28]
 800c350:	f001 fa8a 	bl	800d868 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c354:	69fb      	ldr	r3, [r7, #28]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3720      	adds	r7, #32
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
	...

0800c360 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	4613      	mov	r3, r2
 800c36e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c374:	2300      	movs	r3, #0
 800c376:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c378:	f3ef 8305 	mrs	r3, IPSR
 800c37c:	617b      	str	r3, [r7, #20]
  return(result);
 800c37e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c380:	2b00      	cmp	r3, #0
 800c382:	d028      	beq.n	800c3d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d005      	beq.n	800c396 <osMessageQueuePut+0x36>
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <osMessageQueuePut+0x36>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c396:	f06f 0303 	mvn.w	r3, #3
 800c39a:	61fb      	str	r3, [r7, #28]
 800c39c:	e038      	b.n	800c410 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c3a2:	f107 0210 	add.w	r2, r7, #16
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	69b8      	ldr	r0, [r7, #24]
 800c3ac:	f000 fd30 	bl	800ce10 <xQueueGenericSendFromISR>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d003      	beq.n	800c3be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c3b6:	f06f 0302 	mvn.w	r3, #2
 800c3ba:	61fb      	str	r3, [r7, #28]
 800c3bc:	e028      	b.n	800c410 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d025      	beq.n	800c410 <osMessageQueuePut+0xb0>
 800c3c4:	4b15      	ldr	r3, [pc, #84]	@ (800c41c <osMessageQueuePut+0xbc>)
 800c3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ca:	601a      	str	r2, [r3, #0]
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	e01c      	b.n	800c410 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <osMessageQueuePut+0x82>
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d103      	bne.n	800c3ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c3e2:	f06f 0303 	mvn.w	r3, #3
 800c3e6:	61fb      	str	r3, [r7, #28]
 800c3e8:	e012      	b.n	800c410 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	69b8      	ldr	r0, [r7, #24]
 800c3f2:	f000 fc0b 	bl	800cc0c <xQueueGenericSend>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d009      	beq.n	800c410 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c402:	f06f 0301 	mvn.w	r3, #1
 800c406:	61fb      	str	r3, [r7, #28]
 800c408:	e002      	b.n	800c410 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c40a:	f06f 0302 	mvn.w	r3, #2
 800c40e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c410:	69fb      	ldr	r3, [r7, #28]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3720      	adds	r7, #32
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	e000ed04 	.word	0xe000ed04

0800c420 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c432:	2300      	movs	r3, #0
 800c434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c436:	f3ef 8305 	mrs	r3, IPSR
 800c43a:	617b      	str	r3, [r7, #20]
  return(result);
 800c43c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d028      	beq.n	800c494 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d005      	beq.n	800c454 <osMessageQueueGet+0x34>
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d002      	beq.n	800c454 <osMessageQueueGet+0x34>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d003      	beq.n	800c45c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c454:	f06f 0303 	mvn.w	r3, #3
 800c458:	61fb      	str	r3, [r7, #28]
 800c45a:	e037      	b.n	800c4cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c460:	f107 0310 	add.w	r3, r7, #16
 800c464:	461a      	mov	r2, r3
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	69b8      	ldr	r0, [r7, #24]
 800c46a:	f000 fff1 	bl	800d450 <xQueueReceiveFromISR>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b01      	cmp	r3, #1
 800c472:	d003      	beq.n	800c47c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c474:	f06f 0302 	mvn.w	r3, #2
 800c478:	61fb      	str	r3, [r7, #28]
 800c47a:	e027      	b.n	800c4cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d024      	beq.n	800c4cc <osMessageQueueGet+0xac>
 800c482:	4b15      	ldr	r3, [pc, #84]	@ (800c4d8 <osMessageQueueGet+0xb8>)
 800c484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	e01b      	b.n	800c4cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <osMessageQueueGet+0x80>
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d103      	bne.n	800c4a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c4a0:	f06f 0303 	mvn.w	r3, #3
 800c4a4:	61fb      	str	r3, [r7, #28]
 800c4a6:	e011      	b.n	800c4cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c4a8:	683a      	ldr	r2, [r7, #0]
 800c4aa:	68b9      	ldr	r1, [r7, #8]
 800c4ac:	69b8      	ldr	r0, [r7, #24]
 800c4ae:	f000 fddd 	bl	800d06c <xQueueReceive>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d009      	beq.n	800c4cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d003      	beq.n	800c4c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c4be:	f06f 0301 	mvn.w	r3, #1
 800c4c2:	61fb      	str	r3, [r7, #28]
 800c4c4:	e002      	b.n	800c4cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c4c6:	f06f 0302 	mvn.w	r3, #2
 800c4ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c4cc:	69fb      	ldr	r3, [r7, #28]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3720      	adds	r7, #32
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d102      	bne.n	800c4f4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	617b      	str	r3, [r7, #20]
 800c4f2:	e00e      	b.n	800c512 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4f4:	f3ef 8305 	mrs	r3, IPSR
 800c4f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d004      	beq.n	800c50a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800c500:	6938      	ldr	r0, [r7, #16]
 800c502:	f001 f846 	bl	800d592 <uxQueueMessagesWaitingFromISR>
 800c506:	6178      	str	r0, [r7, #20]
 800c508:	e003      	b.n	800c512 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800c50a:	6938      	ldr	r0, [r7, #16]
 800c50c:	f001 f822 	bl	800d554 <uxQueueMessagesWaiting>
 800c510:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800c512:	697b      	ldr	r3, [r7, #20]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c528:	f3ef 8305 	mrs	r3, IPSR
 800c52c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c52e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800c534:	f06f 0305 	mvn.w	r3, #5
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	e00e      	b.n	800c55a <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d103      	bne.n	800c54a <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800c542:	f06f 0303 	mvn.w	r3, #3
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e007      	b.n	800c55a <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f001 f9b6 	bl	800d8bc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c550:	2300      	movs	r3, #0
 800c552:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800c554:	6938      	ldr	r0, [r7, #16]
 800c556:	f001 f83b 	bl	800d5d0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c55a:	697b      	ldr	r3, [r7, #20]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	4a07      	ldr	r2, [pc, #28]	@ (800c590 <vApplicationGetIdleTaskMemory+0x2c>)
 800c574:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	4a06      	ldr	r2, [pc, #24]	@ (800c594 <vApplicationGetIdleTaskMemory+0x30>)
 800c57a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2280      	movs	r2, #128	@ 0x80
 800c580:	601a      	str	r2, [r3, #0]
}
 800c582:	bf00      	nop
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	2000539c 	.word	0x2000539c
 800c594:	20005444 	.word	0x20005444

0800c598 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	4a07      	ldr	r2, [pc, #28]	@ (800c5c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c5a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	4a06      	ldr	r2, [pc, #24]	@ (800c5c8 <vApplicationGetTimerTaskMemory+0x30>)
 800c5ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5b6:	601a      	str	r2, [r3, #0]
}
 800c5b8:	bf00      	nop
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	20005644 	.word	0x20005644
 800c5c8:	200056ec 	.word	0x200056ec

0800c5cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f103 0208 	add.w	r2, r3, #8
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f103 0208 	add.w	r2, r3, #8
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f103 0208 	add.w	r2, r3, #8
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	683a      	ldr	r2, [r7, #0]
 800c64a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	683a      	ldr	r2, [r7, #0]
 800c650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	601a      	str	r2, [r3, #0]
}
 800c662:	bf00      	nop
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c66e:	b480      	push	{r7}
 800c670:	b085      	sub	sp, #20
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c684:	d103      	bne.n	800c68e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	e00c      	b.n	800c6a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3308      	adds	r3, #8
 800c692:	60fb      	str	r3, [r7, #12]
 800c694:	e002      	b.n	800c69c <vListInsert+0x2e>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d2f6      	bcs.n	800c696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	601a      	str	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	6892      	ldr	r2, [r2, #8]
 800c6f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	6852      	ldr	r2, [r2, #4]
 800c700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d103      	bne.n	800c714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	689a      	ldr	r2, [r3, #8]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	1e5a      	subs	r2, r3, #1
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10b      	bne.n	800c760 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	e7fd      	b.n	800c75c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c760:	f002 fdf2 	bl	800f348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c76c:	68f9      	ldr	r1, [r7, #12]
 800c76e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c770:	fb01 f303 	mul.w	r3, r1, r3
 800c774:	441a      	add	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c790:	3b01      	subs	r3, #1
 800c792:	68f9      	ldr	r1, [r7, #12]
 800c794:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c796:	fb01 f303 	mul.w	r3, r1, r3
 800c79a:	441a      	add	r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	22ff      	movs	r2, #255	@ 0xff
 800c7a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	22ff      	movs	r2, #255	@ 0xff
 800c7ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d114      	bne.n	800c7e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d01a      	beq.n	800c7f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3310      	adds	r3, #16
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f001 fd7c 	bl	800e2c0 <xTaskRemoveFromEventList>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d012      	beq.n	800c7f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c804 <xQueueGenericReset+0xd0>)
 800c7d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	e009      	b.n	800c7f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3310      	adds	r3, #16
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7ff fef1 	bl	800c5cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3324      	adds	r3, #36	@ 0x24
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff feec 	bl	800c5cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7f4:	f002 fdda 	bl	800f3ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c7f8:	2301      	movs	r3, #1
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	e000ed04 	.word	0xe000ed04

0800c808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08e      	sub	sp, #56	@ 0x38
 800c80c:	af02      	add	r7, sp, #8
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10b      	bne.n	800c834 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c82e:	bf00      	nop
 800c830:	bf00      	nop
 800c832:	e7fd      	b.n	800c830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10b      	bne.n	800c852 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	e7fd      	b.n	800c84e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <xQueueGenericCreateStatic+0x56>
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <xQueueGenericCreateStatic+0x5a>
 800c85e:	2301      	movs	r3, #1
 800c860:	e000      	b.n	800c864 <xQueueGenericCreateStatic+0x5c>
 800c862:	2300      	movs	r3, #0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10b      	bne.n	800c880 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	623b      	str	r3, [r7, #32]
}
 800c87a:	bf00      	nop
 800c87c:	bf00      	nop
 800c87e:	e7fd      	b.n	800c87c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <xQueueGenericCreateStatic+0x84>
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <xQueueGenericCreateStatic+0x88>
 800c88c:	2301      	movs	r3, #1
 800c88e:	e000      	b.n	800c892 <xQueueGenericCreateStatic+0x8a>
 800c890:	2300      	movs	r3, #0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10b      	bne.n	800c8ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	61fb      	str	r3, [r7, #28]
}
 800c8a8:	bf00      	nop
 800c8aa:	bf00      	nop
 800c8ac:	e7fd      	b.n	800c8aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8ae:	2350      	movs	r3, #80	@ 0x50
 800c8b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b50      	cmp	r3, #80	@ 0x50
 800c8b6:	d00b      	beq.n	800c8d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	61bb      	str	r3, [r7, #24]
}
 800c8ca:	bf00      	nop
 800c8cc:	bf00      	nop
 800c8ce:	e7fd      	b.n	800c8cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c8d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00d      	beq.n	800c8f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	68b9      	ldr	r1, [r7, #8]
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f000 f840 	bl	800c978 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3730      	adds	r7, #48	@ 0x30
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c902:	b580      	push	{r7, lr}
 800c904:	b08a      	sub	sp, #40	@ 0x28
 800c906:	af02      	add	r7, sp, #8
 800c908:	60f8      	str	r0, [r7, #12]
 800c90a:	60b9      	str	r1, [r7, #8]
 800c90c:	4613      	mov	r3, r2
 800c90e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10b      	bne.n	800c92e <xQueueGenericCreate+0x2c>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	613b      	str	r3, [r7, #16]
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	fb02 f303 	mul.w	r3, r2, r3
 800c936:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	3350      	adds	r3, #80	@ 0x50
 800c93c:	4618      	mov	r0, r3
 800c93e:	f002 fe25 	bl	800f58c <pvPortMalloc>
 800c942:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d011      	beq.n	800c96e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	3350      	adds	r3, #80	@ 0x50
 800c952:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c95c:	79fa      	ldrb	r2, [r7, #7]
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4613      	mov	r3, r2
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	68b9      	ldr	r1, [r7, #8]
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 f805 	bl	800c978 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c96e:	69bb      	ldr	r3, [r7, #24]
	}
 800c970:	4618      	mov	r0, r3
 800c972:	3720      	adds	r7, #32
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
 800c984:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d103      	bne.n	800c994 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	e002      	b.n	800c99a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	69b8      	ldr	r0, [r7, #24]
 800c9aa:	f7ff fec3 	bl	800c734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	78fa      	ldrb	r2, [r7, #3]
 800c9b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9b6:	bf00      	nop
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00e      	beq.n	800c9ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c9de:	2300      	movs	r3, #0
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 f911 	bl	800cc0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c9ea:	bf00      	nop
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b086      	sub	sp, #24
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	2300      	movs	r3, #0
 800ca02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	461a      	mov	r2, r3
 800ca08:	6939      	ldr	r1, [r7, #16]
 800ca0a:	6978      	ldr	r0, [r7, #20]
 800ca0c:	f7ff ff79 	bl	800c902 <xQueueGenericCreate>
 800ca10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f7ff ffd3 	bl	800c9be <prvInitialiseMutex>

		return xNewQueue;
 800ca18:	68fb      	ldr	r3, [r7, #12]
	}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b088      	sub	sp, #32
 800ca26:	af02      	add	r7, sp, #8
 800ca28:	4603      	mov	r3, r0
 800ca2a:	6039      	str	r1, [r7, #0]
 800ca2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	617b      	str	r3, [r7, #20]
 800ca32:	2300      	movs	r3, #0
 800ca34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ca36:	79fb      	ldrb	r3, [r7, #7]
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	6939      	ldr	r1, [r7, #16]
 800ca40:	6978      	ldr	r0, [r7, #20]
 800ca42:	f7ff fee1 	bl	800c808 <xQueueGenericCreateStatic>
 800ca46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff ffb8 	bl	800c9be <prvInitialiseMutex>

		return xNewQueue;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
	}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3718      	adds	r7, #24
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ca58:	b590      	push	{r4, r7, lr}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10b      	bne.n	800ca82 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	60fb      	str	r3, [r7, #12]
}
 800ca7c:	bf00      	nop
 800ca7e:	bf00      	nop
 800ca80:	e7fd      	b.n	800ca7e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	689c      	ldr	r4, [r3, #8]
 800ca86:	f001 fde1 	bl	800e64c <xTaskGetCurrentTaskHandle>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	d111      	bne.n	800cab4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	1e5a      	subs	r2, r3, #1
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d105      	bne.n	800caae <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800caa2:	2300      	movs	r3, #0
 800caa4:	2200      	movs	r2, #0
 800caa6:	2100      	movs	r1, #0
 800caa8:	6938      	ldr	r0, [r7, #16]
 800caaa:	f000 f8af 	bl	800cc0c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800caae:	2301      	movs	r3, #1
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	e001      	b.n	800cab8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cab4:	2300      	movs	r3, #0
 800cab6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cab8:	697b      	ldr	r3, [r7, #20]
	}
 800caba:	4618      	mov	r0, r3
 800cabc:	371c      	adds	r7, #28
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd90      	pop	{r4, r7, pc}

0800cac2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cac2:	b590      	push	{r4, r7, lr}
 800cac4:	b087      	sub	sp, #28
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10b      	bne.n	800caee <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	60fb      	str	r3, [r7, #12]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	689c      	ldr	r4, [r3, #8]
 800caf2:	f001 fdab 	bl	800e64c <xTaskGetCurrentTaskHandle>
 800caf6:	4603      	mov	r3, r0
 800caf8:	429c      	cmp	r4, r3
 800cafa:	d107      	bne.n	800cb0c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cb06:	2301      	movs	r3, #1
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	e00c      	b.n	800cb26 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6938      	ldr	r0, [r7, #16]
 800cb10:	f000 fb8e 	bl	800d230 <xQueueSemaphoreTake>
 800cb14:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d004      	beq.n	800cb26 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	1c5a      	adds	r2, r3, #1
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cb26:	697b      	ldr	r3, [r7, #20]
	}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	371c      	adds	r7, #28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd90      	pop	{r4, r7, pc}

0800cb30 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08a      	sub	sp, #40	@ 0x28
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10b      	bne.n	800cb5a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	61bb      	str	r3, [r7, #24]
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop
 800cb58:	e7fd      	b.n	800cb56 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d90b      	bls.n	800cb7a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800cb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	617b      	str	r3, [r7, #20]
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop
 800cb78:	e7fd      	b.n	800cb76 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	2100      	movs	r1, #0
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f7ff fe3f 	bl	800c808 <xQueueGenericCreateStatic>
 800cb8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d002      	beq.n	800cb98 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cb98:	69fb      	ldr	r3, [r7, #28]
	}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b086      	sub	sp, #24
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10b      	bne.n	800cbca <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800cbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	613b      	str	r3, [r7, #16]
}
 800cbc4:	bf00      	nop
 800cbc6:	bf00      	nop
 800cbc8:	e7fd      	b.n	800cbc6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d90b      	bls.n	800cbea <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	60fb      	str	r3, [r7, #12]
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop
 800cbe8:	e7fd      	b.n	800cbe6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cbea:	2202      	movs	r2, #2
 800cbec:	2100      	movs	r1, #0
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fe87 	bl	800c902 <xQueueGenericCreate>
 800cbf4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc02:	697b      	ldr	r3, [r7, #20]
	}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08e      	sub	sp, #56	@ 0x38
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10b      	bne.n	800cc40 <xQueueGenericSend+0x34>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc3a:	bf00      	nop
 800cc3c:	bf00      	nop
 800cc3e:	e7fd      	b.n	800cc3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d103      	bne.n	800cc4e <xQueueGenericSend+0x42>
 800cc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <xQueueGenericSend+0x46>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e000      	b.n	800cc54 <xQueueGenericSend+0x48>
 800cc52:	2300      	movs	r3, #0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10b      	bne.n	800cc70 <xQueueGenericSend+0x64>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	e7fd      	b.n	800cc6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d103      	bne.n	800cc7e <xQueueGenericSend+0x72>
 800cc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d101      	bne.n	800cc82 <xQueueGenericSend+0x76>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e000      	b.n	800cc84 <xQueueGenericSend+0x78>
 800cc82:	2300      	movs	r3, #0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10b      	bne.n	800cca0 <xQueueGenericSend+0x94>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	623b      	str	r3, [r7, #32]
}
 800cc9a:	bf00      	nop
 800cc9c:	bf00      	nop
 800cc9e:	e7fd      	b.n	800cc9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cca0:	f001 fce4 	bl	800e66c <xTaskGetSchedulerState>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d102      	bne.n	800ccb0 <xQueueGenericSend+0xa4>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d101      	bne.n	800ccb4 <xQueueGenericSend+0xa8>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e000      	b.n	800ccb6 <xQueueGenericSend+0xaa>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10b      	bne.n	800ccd2 <xQueueGenericSend+0xc6>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	61fb      	str	r3, [r7, #28]
}
 800cccc:	bf00      	nop
 800ccce:	bf00      	nop
 800ccd0:	e7fd      	b.n	800ccce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ccd2:	f002 fb39 	bl	800f348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d302      	bcc.n	800cce8 <xQueueGenericSend+0xdc>
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d129      	bne.n	800cd3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccee:	f000 fcab 	bl	800d648 <prvCopyDataToQueue>
 800ccf2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d010      	beq.n	800cd1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfe:	3324      	adds	r3, #36	@ 0x24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f001 fadd 	bl	800e2c0 <xTaskRemoveFromEventList>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d013      	beq.n	800cd34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd0c:	4b3f      	ldr	r3, [pc, #252]	@ (800ce0c <xQueueGenericSend+0x200>)
 800cd0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	e00a      	b.n	800cd34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d007      	beq.n	800cd34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd24:	4b39      	ldr	r3, [pc, #228]	@ (800ce0c <xQueueGenericSend+0x200>)
 800cd26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd34:	f002 fb3a 	bl	800f3ac <vPortExitCritical>
				return pdPASS;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e063      	b.n	800ce04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d103      	bne.n	800cd4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd42:	f002 fb33 	bl	800f3ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	e05c      	b.n	800ce04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d106      	bne.n	800cd5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd50:	f107 0314 	add.w	r3, r7, #20
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 fb17 	bl	800e388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd5e:	f002 fb25 	bl	800f3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd62:	f001 f86d 	bl	800de40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd66:	f002 faef 	bl	800f348 <vPortEnterCritical>
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd70:	b25b      	sxtb	r3, r3
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd76:	d103      	bne.n	800cd80 <xQueueGenericSend+0x174>
 800cd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd86:	b25b      	sxtb	r3, r3
 800cd88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd8c:	d103      	bne.n	800cd96 <xQueueGenericSend+0x18a>
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd96:	f002 fb09 	bl	800f3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd9a:	1d3a      	adds	r2, r7, #4
 800cd9c:	f107 0314 	add.w	r3, r7, #20
 800cda0:	4611      	mov	r1, r2
 800cda2:	4618      	mov	r0, r3
 800cda4:	f001 fb06 	bl	800e3b4 <xTaskCheckForTimeOut>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d124      	bne.n	800cdf8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdb0:	f000 fd42 	bl	800d838 <prvIsQueueFull>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d018      	beq.n	800cdec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdbc:	3310      	adds	r3, #16
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f001 fa2a 	bl	800e21c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cdc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdca:	f000 fccd 	bl	800d768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cdce:	f001 f845 	bl	800de5c <xTaskResumeAll>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f47f af7c 	bne.w	800ccd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cdda:	4b0c      	ldr	r3, [pc, #48]	@ (800ce0c <xQueueGenericSend+0x200>)
 800cddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	e772      	b.n	800ccd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cdec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdee:	f000 fcbb 	bl	800d768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdf2:	f001 f833 	bl	800de5c <xTaskResumeAll>
 800cdf6:	e76c      	b.n	800ccd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdfa:	f000 fcb5 	bl	800d768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdfe:	f001 f82d 	bl	800de5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3738      	adds	r7, #56	@ 0x38
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	e000ed04 	.word	0xe000ed04

0800ce10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b090      	sub	sp, #64	@ 0x40
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
 800ce1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ce22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10b      	bne.n	800ce40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ce28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2c:	f383 8811 	msr	BASEPRI, r3
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce3a:	bf00      	nop
 800ce3c:	bf00      	nop
 800ce3e:	e7fd      	b.n	800ce3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d103      	bne.n	800ce4e <xQueueGenericSendFromISR+0x3e>
 800ce46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <xQueueGenericSendFromISR+0x42>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e000      	b.n	800ce54 <xQueueGenericSendFromISR+0x44>
 800ce52:	2300      	movs	r3, #0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10b      	bne.n	800ce70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce6a:	bf00      	nop
 800ce6c:	bf00      	nop
 800ce6e:	e7fd      	b.n	800ce6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	d103      	bne.n	800ce7e <xQueueGenericSendFromISR+0x6e>
 800ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d101      	bne.n	800ce82 <xQueueGenericSendFromISR+0x72>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e000      	b.n	800ce84 <xQueueGenericSendFromISR+0x74>
 800ce82:	2300      	movs	r3, #0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10b      	bne.n	800cea0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	623b      	str	r3, [r7, #32]
}
 800ce9a:	bf00      	nop
 800ce9c:	bf00      	nop
 800ce9e:	e7fd      	b.n	800ce9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cea0:	f002 fb32 	bl	800f508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cea4:	f3ef 8211 	mrs	r2, BASEPRI
 800cea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	61fa      	str	r2, [r7, #28]
 800ceba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cebc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cebe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d302      	bcc.n	800ced2 <xQueueGenericSendFromISR+0xc2>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d12f      	bne.n	800cf32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ced2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ced8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	68b9      	ldr	r1, [r7, #8]
 800cee6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cee8:	f000 fbae 	bl	800d648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ceec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cef4:	d112      	bne.n	800cf1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d016      	beq.n	800cf2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf00:	3324      	adds	r3, #36	@ 0x24
 800cf02:	4618      	mov	r0, r3
 800cf04:	f001 f9dc 	bl	800e2c0 <xTaskRemoveFromEventList>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00e      	beq.n	800cf2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00b      	beq.n	800cf2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	e007      	b.n	800cf2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cf20:	3301      	adds	r3, #1
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	b25a      	sxtb	r2, r3
 800cf26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cf30:	e001      	b.n	800cf36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3740      	adds	r7, #64	@ 0x40
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08e      	sub	sp, #56	@ 0x38
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10b      	bne.n	800cf78 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	623b      	str	r3, [r7, #32]
}
 800cf72:	bf00      	nop
 800cf74:	bf00      	nop
 800cf76:	e7fd      	b.n	800cf74 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00b      	beq.n	800cf98 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	61fb      	str	r3, [r7, #28]
}
 800cf92:	bf00      	nop
 800cf94:	bf00      	nop
 800cf96:	e7fd      	b.n	800cf94 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d103      	bne.n	800cfa8 <xQueueGiveFromISR+0x5c>
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d101      	bne.n	800cfac <xQueueGiveFromISR+0x60>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e000      	b.n	800cfae <xQueueGiveFromISR+0x62>
 800cfac:	2300      	movs	r3, #0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10b      	bne.n	800cfca <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	61bb      	str	r3, [r7, #24]
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
 800cfc8:	e7fd      	b.n	800cfc6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfca:	f002 fa9d 	bl	800f508 <vPortValidateInterruptPriority>
	__asm volatile
 800cfce:	f3ef 8211 	mrs	r2, BASEPRI
 800cfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	617a      	str	r2, [r7, #20]
 800cfe4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cfe6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d22b      	bcs.n	800d052 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d00c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d014:	d112      	bne.n	800d03c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d016      	beq.n	800d04c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d020:	3324      	adds	r3, #36	@ 0x24
 800d022:	4618      	mov	r0, r3
 800d024:	f001 f94c 	bl	800e2c0 <xTaskRemoveFromEventList>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00e      	beq.n	800d04c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2201      	movs	r2, #1
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	e007      	b.n	800d04c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d03c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d040:	3301      	adds	r3, #1
 800d042:	b2db      	uxtb	r3, r3
 800d044:	b25a      	sxtb	r2, r3
 800d046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d04c:	2301      	movs	r3, #1
 800d04e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d050:	e001      	b.n	800d056 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d052:	2300      	movs	r3, #0
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34
 800d056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d058:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f383 8811 	msr	BASEPRI, r3
}
 800d060:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d064:	4618      	mov	r0, r3
 800d066:	3738      	adds	r7, #56	@ 0x38
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08c      	sub	sp, #48	@ 0x30
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d078:	2300      	movs	r3, #0
 800d07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10b      	bne.n	800d09e <xQueueReceive+0x32>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	623b      	str	r3, [r7, #32]
}
 800d098:	bf00      	nop
 800d09a:	bf00      	nop
 800d09c:	e7fd      	b.n	800d09a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <xQueueReceive+0x40>
 800d0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <xQueueReceive+0x44>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <xQueueReceive+0x46>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10b      	bne.n	800d0ce <xQueueReceive+0x62>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	61fb      	str	r3, [r7, #28]
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	e7fd      	b.n	800d0ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0ce:	f001 facd 	bl	800e66c <xTaskGetSchedulerState>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d102      	bne.n	800d0de <xQueueReceive+0x72>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <xQueueReceive+0x76>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e000      	b.n	800d0e4 <xQueueReceive+0x78>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10b      	bne.n	800d100 <xQueueReceive+0x94>
	__asm volatile
 800d0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	61bb      	str	r3, [r7, #24]
}
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
 800d0fe:	e7fd      	b.n	800d0fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d100:	f002 f922 	bl	800f348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d108:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d01f      	beq.n	800d150 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d110:	68b9      	ldr	r1, [r7, #8]
 800d112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d114:	f000 fb02 	bl	800d71c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	1e5a      	subs	r2, r3, #1
 800d11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00f      	beq.n	800d148 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12a:	3310      	adds	r3, #16
 800d12c:	4618      	mov	r0, r3
 800d12e:	f001 f8c7 	bl	800e2c0 <xTaskRemoveFromEventList>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d138:	4b3c      	ldr	r3, [pc, #240]	@ (800d22c <xQueueReceive+0x1c0>)
 800d13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d148:	f002 f930 	bl	800f3ac <vPortExitCritical>
				return pdPASS;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e069      	b.n	800d224 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d103      	bne.n	800d15e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d156:	f002 f929 	bl	800f3ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d15a:	2300      	movs	r3, #0
 800d15c:	e062      	b.n	800d224 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d164:	f107 0310 	add.w	r3, r7, #16
 800d168:	4618      	mov	r0, r3
 800d16a:	f001 f90d 	bl	800e388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d16e:	2301      	movs	r3, #1
 800d170:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d172:	f002 f91b 	bl	800f3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d176:	f000 fe63 	bl	800de40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d17a:	f002 f8e5 	bl	800f348 <vPortEnterCritical>
 800d17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d184:	b25b      	sxtb	r3, r3
 800d186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d18a:	d103      	bne.n	800d194 <xQueueReceive+0x128>
 800d18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d19a:	b25b      	sxtb	r3, r3
 800d19c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1a0:	d103      	bne.n	800d1aa <xQueueReceive+0x13e>
 800d1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1aa:	f002 f8ff 	bl	800f3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1ae:	1d3a      	adds	r2, r7, #4
 800d1b0:	f107 0310 	add.w	r3, r7, #16
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f001 f8fc 	bl	800e3b4 <xTaskCheckForTimeOut>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d123      	bne.n	800d20a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1c4:	f000 fb22 	bl	800d80c <prvIsQueueEmpty>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d017      	beq.n	800d1fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d0:	3324      	adds	r3, #36	@ 0x24
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f001 f820 	bl	800e21c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1de:	f000 fac3 	bl	800d768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1e2:	f000 fe3b 	bl	800de5c <xTaskResumeAll>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d189      	bne.n	800d100 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d22c <xQueueReceive+0x1c0>)
 800d1ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	e780      	b.n	800d100 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d200:	f000 fab2 	bl	800d768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d204:	f000 fe2a 	bl	800de5c <xTaskResumeAll>
 800d208:	e77a      	b.n	800d100 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d20a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d20c:	f000 faac 	bl	800d768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d210:	f000 fe24 	bl	800de5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d214:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d216:	f000 faf9 	bl	800d80c <prvIsQueueEmpty>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f43f af6f 	beq.w	800d100 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d222:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d224:	4618      	mov	r0, r3
 800d226:	3730      	adds	r7, #48	@ 0x30
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	e000ed04 	.word	0xe000ed04

0800d230 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08e      	sub	sp, #56	@ 0x38
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d242:	2300      	movs	r3, #0
 800d244:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10b      	bne.n	800d264 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	623b      	str	r3, [r7, #32]
}
 800d25e:	bf00      	nop
 800d260:	bf00      	nop
 800d262:	e7fd      	b.n	800d260 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00b      	beq.n	800d284 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	61fb      	str	r3, [r7, #28]
}
 800d27e:	bf00      	nop
 800d280:	bf00      	nop
 800d282:	e7fd      	b.n	800d280 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d284:	f001 f9f2 	bl	800e66c <xTaskGetSchedulerState>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d102      	bne.n	800d294 <xQueueSemaphoreTake+0x64>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <xQueueSemaphoreTake+0x68>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <xQueueSemaphoreTake+0x6a>
 800d298:	2300      	movs	r3, #0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10b      	bne.n	800d2b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	61bb      	str	r3, [r7, #24]
}
 800d2b0:	bf00      	nop
 800d2b2:	bf00      	nop
 800d2b4:	e7fd      	b.n	800d2b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2b6:	f002 f847 	bl	800f348 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d024      	beq.n	800d310 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c8:	1e5a      	subs	r2, r3, #1
 800d2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d104      	bne.n	800d2e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2d6:	f001 fb43 	bl	800e960 <pvTaskIncrementMutexHeldCount>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00f      	beq.n	800d308 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	3310      	adds	r3, #16
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 ffe7 	bl	800e2c0 <xTaskRemoveFromEventList>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d007      	beq.n	800d308 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2f8:	4b54      	ldr	r3, [pc, #336]	@ (800d44c <xQueueSemaphoreTake+0x21c>)
 800d2fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d308:	f002 f850 	bl	800f3ac <vPortExitCritical>
				return pdPASS;
 800d30c:	2301      	movs	r3, #1
 800d30e:	e098      	b.n	800d442 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d112      	bne.n	800d33c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00b      	beq.n	800d334 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	617b      	str	r3, [r7, #20]
}
 800d32e:	bf00      	nop
 800d330:	bf00      	nop
 800d332:	e7fd      	b.n	800d330 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d334:	f002 f83a 	bl	800f3ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d338:	2300      	movs	r3, #0
 800d33a:	e082      	b.n	800d442 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d342:	f107 030c 	add.w	r3, r7, #12
 800d346:	4618      	mov	r0, r3
 800d348:	f001 f81e 	bl	800e388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d34c:	2301      	movs	r3, #1
 800d34e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d350:	f002 f82c 	bl	800f3ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d354:	f000 fd74 	bl	800de40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d358:	f001 fff6 	bl	800f348 <vPortEnterCritical>
 800d35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d362:	b25b      	sxtb	r3, r3
 800d364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d368:	d103      	bne.n	800d372 <xQueueSemaphoreTake+0x142>
 800d36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d378:	b25b      	sxtb	r3, r3
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d37e:	d103      	bne.n	800d388 <xQueueSemaphoreTake+0x158>
 800d380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d382:	2200      	movs	r2, #0
 800d384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d388:	f002 f810 	bl	800f3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d38c:	463a      	mov	r2, r7
 800d38e:	f107 030c 	add.w	r3, r7, #12
 800d392:	4611      	mov	r1, r2
 800d394:	4618      	mov	r0, r3
 800d396:	f001 f80d 	bl	800e3b4 <xTaskCheckForTimeOut>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d132      	bne.n	800d406 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3a2:	f000 fa33 	bl	800d80c <prvIsQueueEmpty>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d026      	beq.n	800d3fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d109      	bne.n	800d3c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d3b4:	f001 ffc8 	bl	800f348 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f001 f973 	bl	800e6a8 <xTaskPriorityInherit>
 800d3c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d3c4:	f001 fff2 	bl	800f3ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ca:	3324      	adds	r3, #36	@ 0x24
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f000 ff23 	bl	800e21c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3d8:	f000 f9c6 	bl	800d768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3dc:	f000 fd3e 	bl	800de5c <xTaskResumeAll>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f47f af67 	bne.w	800d2b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d3e8:	4b18      	ldr	r3, [pc, #96]	@ (800d44c <xQueueSemaphoreTake+0x21c>)
 800d3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	e75d      	b.n	800d2b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3fc:	f000 f9b4 	bl	800d768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d400:	f000 fd2c 	bl	800de5c <xTaskResumeAll>
 800d404:	e757      	b.n	800d2b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d408:	f000 f9ae 	bl	800d768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d40c:	f000 fd26 	bl	800de5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d410:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d412:	f000 f9fb 	bl	800d80c <prvIsQueueEmpty>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f43f af4c 	beq.w	800d2b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00d      	beq.n	800d440 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d424:	f001 ff90 	bl	800f348 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d428:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d42a:	f000 f8f5 	bl	800d618 <prvGetDisinheritPriorityAfterTimeout>
 800d42e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d436:	4618      	mov	r0, r3
 800d438:	f001 fa0e 	bl	800e858 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d43c:	f001 ffb6 	bl	800f3ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d442:	4618      	mov	r0, r3
 800d444:	3738      	adds	r7, #56	@ 0x38
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	e000ed04 	.word	0xe000ed04

0800d450 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b08e      	sub	sp, #56	@ 0x38
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10b      	bne.n	800d47e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46a:	f383 8811 	msr	BASEPRI, r3
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	623b      	str	r3, [r7, #32]
}
 800d478:	bf00      	nop
 800d47a:	bf00      	nop
 800d47c:	e7fd      	b.n	800d47a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d103      	bne.n	800d48c <xQueueReceiveFromISR+0x3c>
 800d484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <xQueueReceiveFromISR+0x40>
 800d48c:	2301      	movs	r3, #1
 800d48e:	e000      	b.n	800d492 <xQueueReceiveFromISR+0x42>
 800d490:	2300      	movs	r3, #0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10b      	bne.n	800d4ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49a:	f383 8811 	msr	BASEPRI, r3
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	61fb      	str	r3, [r7, #28]
}
 800d4a8:	bf00      	nop
 800d4aa:	bf00      	nop
 800d4ac:	e7fd      	b.n	800d4aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4ae:	f002 f82b 	bl	800f508 <vPortValidateInterruptPriority>
	__asm volatile
 800d4b2:	f3ef 8211 	mrs	r2, BASEPRI
 800d4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	61ba      	str	r2, [r7, #24]
 800d4c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d02f      	beq.n	800d53a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4e4:	68b9      	ldr	r1, [r7, #8]
 800d4e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4e8:	f000 f918 	bl	800d71c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ee:	1e5a      	subs	r2, r3, #1
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4fc:	d112      	bne.n	800d524 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d016      	beq.n	800d534 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	3310      	adds	r3, #16
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fed8 	bl	800e2c0 <xTaskRemoveFromEventList>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00e      	beq.n	800d534 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00b      	beq.n	800d534 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	601a      	str	r2, [r3, #0]
 800d522:	e007      	b.n	800d534 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d528:	3301      	adds	r3, #1
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	b25a      	sxtb	r2, r3
 800d52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d534:	2301      	movs	r3, #1
 800d536:	637b      	str	r3, [r7, #52]	@ 0x34
 800d538:	e001      	b.n	800d53e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d540:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	f383 8811 	msr	BASEPRI, r3
}
 800d548:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3738      	adds	r7, #56	@ 0x38
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10b      	bne.n	800d57a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	60bb      	str	r3, [r7, #8]
}
 800d574:	bf00      	nop
 800d576:	bf00      	nop
 800d578:	e7fd      	b.n	800d576 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d57a:	f001 fee5 	bl	800f348 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d582:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d584:	f001 ff12 	bl	800f3ac <vPortExitCritical>

	return uxReturn;
 800d588:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d592:	b480      	push	{r7}
 800d594:	b087      	sub	sp, #28
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10b      	bne.n	800d5bc <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	60fb      	str	r3, [r7, #12]
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	e7fd      	b.n	800d5b8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d5c2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	371c      	adds	r7, #28
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10b      	bne.n	800d5fa <vQueueDelete+0x2a>
	__asm volatile
 800d5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e6:	f383 8811 	msr	BASEPRI, r3
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	60bb      	str	r3, [r7, #8]
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop
 800d5f8:	e7fd      	b.n	800d5f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f000 f95e 	bl	800d8bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d606:	2b00      	cmp	r3, #0
 800d608:	d102      	bne.n	800d610 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f002 f88c 	bl	800f728 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d610:	bf00      	nop
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d624:	2b00      	cmp	r3, #0
 800d626:	d006      	beq.n	800d636 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	e001      	b.n	800d63a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d636:	2300      	movs	r3, #0
 800d638:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d63a:	68fb      	ldr	r3, [r7, #12]
	}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d65c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10d      	bne.n	800d682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d14d      	bne.n	800d70a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	4618      	mov	r0, r3
 800d674:	f001 f880 	bl	800e778 <xTaskPriorityDisinherit>
 800d678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2200      	movs	r2, #0
 800d67e:	609a      	str	r2, [r3, #8]
 800d680:	e043      	b.n	800d70a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d119      	bne.n	800d6bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6858      	ldr	r0, [r3, #4]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d690:	461a      	mov	r2, r3
 800d692:	68b9      	ldr	r1, [r7, #8]
 800d694:	f011 f8c7 	bl	801e826 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6a0:	441a      	add	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d32b      	bcc.n	800d70a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	605a      	str	r2, [r3, #4]
 800d6ba:	e026      	b.n	800d70a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68d8      	ldr	r0, [r3, #12]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	f011 f8ad 	bl	801e826 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	68da      	ldr	r2, [r3, #12]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d4:	425b      	negs	r3, r3
 800d6d6:	441a      	add	r2, r3
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	68da      	ldr	r2, [r3, #12]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d207      	bcs.n	800d6f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	689a      	ldr	r2, [r3, #8]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6f0:	425b      	negs	r3, r3
 800d6f2:	441a      	add	r2, r3
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d105      	bne.n	800d70a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d002      	beq.n	800d70a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	3b01      	subs	r3, #1
 800d708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d712:	697b      	ldr	r3, [r7, #20]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d018      	beq.n	800d760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68da      	ldr	r2, [r3, #12]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d736:	441a      	add	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68da      	ldr	r2, [r3, #12]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	429a      	cmp	r2, r3
 800d746:	d303      	bcc.n	800d750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68d9      	ldr	r1, [r3, #12]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d758:	461a      	mov	r2, r3
 800d75a:	6838      	ldr	r0, [r7, #0]
 800d75c:	f011 f863 	bl	801e826 <memcpy>
	}
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d770:	f001 fdea 	bl	800f348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d77a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d77c:	e011      	b.n	800d7a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d782:	2b00      	cmp	r3, #0
 800d784:	d012      	beq.n	800d7ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	3324      	adds	r3, #36	@ 0x24
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 fd98 	bl	800e2c0 <xTaskRemoveFromEventList>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d796:	f000 fe71 	bl	800e47c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	dce9      	bgt.n	800d77e <prvUnlockQueue+0x16>
 800d7aa:	e000      	b.n	800d7ae <prvUnlockQueue+0x46>
					break;
 800d7ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	22ff      	movs	r2, #255	@ 0xff
 800d7b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d7b6:	f001 fdf9 	bl	800f3ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7ba:	f001 fdc5 	bl	800f348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7c6:	e011      	b.n	800d7ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d012      	beq.n	800d7f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	3310      	adds	r3, #16
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f000 fd73 	bl	800e2c0 <xTaskRemoveFromEventList>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7e0:	f000 fe4c 	bl	800e47c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	dce9      	bgt.n	800d7c8 <prvUnlockQueue+0x60>
 800d7f4:	e000      	b.n	800d7f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	22ff      	movs	r2, #255	@ 0xff
 800d7fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d800:	f001 fdd4 	bl	800f3ac <vPortExitCritical>
}
 800d804:	bf00      	nop
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d814:	f001 fd98 	bl	800f348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d820:	2301      	movs	r3, #1
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	e001      	b.n	800d82a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d826:	2300      	movs	r3, #0
 800d828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d82a:	f001 fdbf 	bl	800f3ac <vPortExitCritical>

	return xReturn;
 800d82e:	68fb      	ldr	r3, [r7, #12]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d840:	f001 fd82 	bl	800f348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d102      	bne.n	800d856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d850:	2301      	movs	r3, #1
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	e001      	b.n	800d85a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d85a:	f001 fda7 	bl	800f3ac <vPortExitCritical>

	return xReturn;
 800d85e:	68fb      	ldr	r3, [r7, #12]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d872:	2300      	movs	r3, #0
 800d874:	60fb      	str	r3, [r7, #12]
 800d876:	e014      	b.n	800d8a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d878:	4a0f      	ldr	r2, [pc, #60]	@ (800d8b8 <vQueueAddToRegistry+0x50>)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10b      	bne.n	800d89c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d884:	490c      	ldr	r1, [pc, #48]	@ (800d8b8 <vQueueAddToRegistry+0x50>)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d88e:	4a0a      	ldr	r2, [pc, #40]	@ (800d8b8 <vQueueAddToRegistry+0x50>)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	4413      	add	r3, r2
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d89a:	e006      	b.n	800d8aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	60fb      	str	r3, [r7, #12]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2b07      	cmp	r3, #7
 800d8a6:	d9e7      	bls.n	800d878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d8a8:	bf00      	nop
 800d8aa:	bf00      	nop
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	20005aec 	.word	0x20005aec

0800d8bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	60fb      	str	r3, [r7, #12]
 800d8c8:	e016      	b.n	800d8f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8ca:	4a10      	ldr	r2, [pc, #64]	@ (800d90c <vQueueUnregisterQueue+0x50>)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	4413      	add	r3, r2
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d10b      	bne.n	800d8f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8da:	4a0c      	ldr	r2, [pc, #48]	@ (800d90c <vQueueUnregisterQueue+0x50>)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2100      	movs	r1, #0
 800d8e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8e4:	4a09      	ldr	r2, [pc, #36]	@ (800d90c <vQueueUnregisterQueue+0x50>)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	4413      	add	r3, r2
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	605a      	str	r2, [r3, #4]
				break;
 800d8f0:	e006      	b.n	800d900 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	60fb      	str	r3, [r7, #12]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2b07      	cmp	r3, #7
 800d8fc:	d9e5      	bls.n	800d8ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8fe:	bf00      	nop
 800d900:	bf00      	nop
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	20005aec 	.word	0x20005aec

0800d910 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d920:	f001 fd12 	bl	800f348 <vPortEnterCritical>
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d92a:	b25b      	sxtb	r3, r3
 800d92c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d930:	d103      	bne.n	800d93a <vQueueWaitForMessageRestricted+0x2a>
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d940:	b25b      	sxtb	r3, r3
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d946:	d103      	bne.n	800d950 <vQueueWaitForMessageRestricted+0x40>
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d950:	f001 fd2c 	bl	800f3ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d106      	bne.n	800d96a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	3324      	adds	r3, #36	@ 0x24
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	68b9      	ldr	r1, [r7, #8]
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fc7f 	bl	800e268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d96a:	6978      	ldr	r0, [r7, #20]
 800d96c:	f7ff fefc 	bl	800d768 <prvUnlockQueue>
	}
 800d970:	bf00      	nop
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b08e      	sub	sp, #56	@ 0x38
 800d97c:	af04      	add	r7, sp, #16
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10b      	bne.n	800d9a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	623b      	str	r3, [r7, #32]
}
 800d99e:	bf00      	nop
 800d9a0:	bf00      	nop
 800d9a2:	e7fd      	b.n	800d9a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10b      	bne.n	800d9c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	61fb      	str	r3, [r7, #28]
}
 800d9bc:	bf00      	nop
 800d9be:	bf00      	nop
 800d9c0:	e7fd      	b.n	800d9be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d9c2:	23a8      	movs	r3, #168	@ 0xa8
 800d9c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	2ba8      	cmp	r3, #168	@ 0xa8
 800d9ca:	d00b      	beq.n	800d9e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	61bb      	str	r3, [r7, #24]
}
 800d9de:	bf00      	nop
 800d9e0:	bf00      	nop
 800d9e2:	e7fd      	b.n	800d9e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d01e      	beq.n	800da2a <xTaskCreateStatic+0xb2>
 800d9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d01b      	beq.n	800da2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fe:	2202      	movs	r2, #2
 800da00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da04:	2300      	movs	r3, #0
 800da06:	9303      	str	r3, [sp, #12]
 800da08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0a:	9302      	str	r3, [sp, #8]
 800da0c:	f107 0314 	add.w	r3, r7, #20
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da14:	9300      	str	r3, [sp, #0]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 f851 	bl	800dac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da24:	f000 f8f6 	bl	800dc14 <prvAddNewTaskToReadyList>
 800da28:	e001      	b.n	800da2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da2e:	697b      	ldr	r3, [r7, #20]
	}
 800da30:	4618      	mov	r0, r3
 800da32:	3728      	adds	r7, #40	@ 0x28
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08c      	sub	sp, #48	@ 0x30
 800da3c:	af04      	add	r7, sp, #16
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	4613      	mov	r3, r2
 800da46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da48:	88fb      	ldrh	r3, [r7, #6]
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4618      	mov	r0, r3
 800da4e:	f001 fd9d 	bl	800f58c <pvPortMalloc>
 800da52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00e      	beq.n	800da78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da5a:	20a8      	movs	r0, #168	@ 0xa8
 800da5c:	f001 fd96 	bl	800f58c <pvPortMalloc>
 800da60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d003      	beq.n	800da70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	631a      	str	r2, [r3, #48]	@ 0x30
 800da6e:	e005      	b.n	800da7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da70:	6978      	ldr	r0, [r7, #20]
 800da72:	f001 fe59 	bl	800f728 <vPortFree>
 800da76:	e001      	b.n	800da7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da78:	2300      	movs	r3, #0
 800da7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d017      	beq.n	800dab2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da8a:	88fa      	ldrh	r2, [r7, #6]
 800da8c:	2300      	movs	r3, #0
 800da8e:	9303      	str	r3, [sp, #12]
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	9302      	str	r3, [sp, #8]
 800da94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da96:	9301      	str	r3, [sp, #4]
 800da98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 f80f 	bl	800dac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800daa6:	69f8      	ldr	r0, [r7, #28]
 800daa8:	f000 f8b4 	bl	800dc14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800daac:	2301      	movs	r3, #1
 800daae:	61bb      	str	r3, [r7, #24]
 800dab0:	e002      	b.n	800dab8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dab6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dab8:	69bb      	ldr	r3, [r7, #24]
	}
 800daba:	4618      	mov	r0, r3
 800dabc:	3720      	adds	r7, #32
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
	...

0800dac4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	461a      	mov	r2, r3
 800dadc:	21a5      	movs	r1, #165	@ 0xa5
 800dade:	f010 fdd3 	bl	801e688 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800daec:	3b01      	subs	r3, #1
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4413      	add	r3, r2
 800daf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	f023 0307 	bic.w	r3, r3, #7
 800dafa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	f003 0307 	and.w	r3, r3, #7
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00b      	beq.n	800db1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800db06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	617b      	str	r3, [r7, #20]
}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	e7fd      	b.n	800db1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01f      	beq.n	800db64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db24:	2300      	movs	r3, #0
 800db26:	61fb      	str	r3, [r7, #28]
 800db28:	e012      	b.n	800db50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	4413      	add	r3, r2
 800db30:	7819      	ldrb	r1, [r3, #0]
 800db32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	4413      	add	r3, r2
 800db38:	3334      	adds	r3, #52	@ 0x34
 800db3a:	460a      	mov	r2, r1
 800db3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	4413      	add	r3, r2
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	3301      	adds	r3, #1
 800db4e:	61fb      	str	r3, [r7, #28]
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	2b0f      	cmp	r3, #15
 800db54:	d9e9      	bls.n	800db2a <prvInitialiseNewTask+0x66>
 800db56:	e000      	b.n	800db5a <prvInitialiseNewTask+0x96>
			{
				break;
 800db58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800db62:	e003      	b.n	800db6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db66:	2200      	movs	r2, #0
 800db68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6e:	2b37      	cmp	r3, #55	@ 0x37
 800db70:	d901      	bls.n	800db76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db72:	2337      	movs	r3, #55	@ 0x37
 800db74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db84:	2200      	movs	r2, #0
 800db86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8a:	3304      	adds	r3, #4
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fe fd3d 	bl	800c60c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db94:	3318      	adds	r3, #24
 800db96:	4618      	mov	r0, r3
 800db98:	f7fe fd38 	bl	800c60c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc4:	3354      	adds	r3, #84	@ 0x54
 800dbc6:	224c      	movs	r2, #76	@ 0x4c
 800dbc8:	2100      	movs	r1, #0
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f010 fd5c 	bl	801e688 <memset>
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd2:	4a0d      	ldr	r2, [pc, #52]	@ (800dc08 <prvInitialiseNewTask+0x144>)
 800dbd4:	659a      	str	r2, [r3, #88]	@ 0x58
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd8:	4a0c      	ldr	r2, [pc, #48]	@ (800dc0c <prvInitialiseNewTask+0x148>)
 800dbda:	65da      	str	r2, [r3, #92]	@ 0x5c
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbde:	4a0c      	ldr	r2, [pc, #48]	@ (800dc10 <prvInitialiseNewTask+0x14c>)
 800dbe0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	68f9      	ldr	r1, [r7, #12]
 800dbe6:	69b8      	ldr	r0, [r7, #24]
 800dbe8:	f001 fa7c 	bl	800f0e4 <pxPortInitialiseStack>
 800dbec:	4602      	mov	r2, r0
 800dbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbfe:	bf00      	nop
 800dc00:	3720      	adds	r7, #32
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	2000fe1c 	.word	0x2000fe1c
 800dc0c:	2000fe84 	.word	0x2000fe84
 800dc10:	2000feec 	.word	0x2000feec

0800dc14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc1c:	f001 fb94 	bl	800f348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc20:	4b2d      	ldr	r3, [pc, #180]	@ (800dcd8 <prvAddNewTaskToReadyList+0xc4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3301      	adds	r3, #1
 800dc26:	4a2c      	ldr	r2, [pc, #176]	@ (800dcd8 <prvAddNewTaskToReadyList+0xc4>)
 800dc28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc2a:	4b2c      	ldr	r3, [pc, #176]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d109      	bne.n	800dc46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc32:	4a2a      	ldr	r2, [pc, #168]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc38:	4b27      	ldr	r3, [pc, #156]	@ (800dcd8 <prvAddNewTaskToReadyList+0xc4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d110      	bne.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc40:	f000 fc40 	bl	800e4c4 <prvInitialiseTaskLists>
 800dc44:	e00d      	b.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc46:	4b26      	ldr	r3, [pc, #152]	@ (800dce0 <prvAddNewTaskToReadyList+0xcc>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d109      	bne.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc4e:	4b23      	ldr	r3, [pc, #140]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d802      	bhi.n	800dc62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc5c:	4a1f      	ldr	r2, [pc, #124]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc62:	4b20      	ldr	r3, [pc, #128]	@ (800dce4 <prvAddNewTaskToReadyList+0xd0>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	3301      	adds	r3, #1
 800dc68:	4a1e      	ldr	r2, [pc, #120]	@ (800dce4 <prvAddNewTaskToReadyList+0xd0>)
 800dc6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dce4 <prvAddNewTaskToReadyList+0xd0>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc78:	4b1b      	ldr	r3, [pc, #108]	@ (800dce8 <prvAddNewTaskToReadyList+0xd4>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d903      	bls.n	800dc88 <prvAddNewTaskToReadyList+0x74>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc84:	4a18      	ldr	r2, [pc, #96]	@ (800dce8 <prvAddNewTaskToReadyList+0xd4>)
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	4413      	add	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4a15      	ldr	r2, [pc, #84]	@ (800dcec <prvAddNewTaskToReadyList+0xd8>)
 800dc96:	441a      	add	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4610      	mov	r0, r2
 800dca0:	f7fe fcc1 	bl	800c626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dca4:	f001 fb82 	bl	800f3ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dca8:	4b0d      	ldr	r3, [pc, #52]	@ (800dce0 <prvAddNewTaskToReadyList+0xcc>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00e      	beq.n	800dcce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcb0:	4b0a      	ldr	r3, [pc, #40]	@ (800dcdc <prvAddNewTaskToReadyList+0xc8>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d207      	bcs.n	800dcce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcbe:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf0 <prvAddNewTaskToReadyList+0xdc>)
 800dcc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	20006000 	.word	0x20006000
 800dcdc:	20005b2c 	.word	0x20005b2c
 800dce0:	2000600c 	.word	0x2000600c
 800dce4:	2000601c 	.word	0x2000601c
 800dce8:	20006008 	.word	0x20006008
 800dcec:	20005b30 	.word	0x20005b30
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d018      	beq.n	800dd38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd06:	4b14      	ldr	r3, [pc, #80]	@ (800dd58 <vTaskDelay+0x64>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00b      	beq.n	800dd26 <vTaskDelay+0x32>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	60bb      	str	r3, [r7, #8]
}
 800dd20:	bf00      	nop
 800dd22:	bf00      	nop
 800dd24:	e7fd      	b.n	800dd22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd26:	f000 f88b 	bl	800de40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fe2b 	bl	800e988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd32:	f000 f893 	bl	800de5c <xTaskResumeAll>
 800dd36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d107      	bne.n	800dd4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dd3e:	4b07      	ldr	r3, [pc, #28]	@ (800dd5c <vTaskDelay+0x68>)
 800dd40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd4e:	bf00      	nop
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20006028 	.word	0x20006028
 800dd5c:	e000ed04 	.word	0xe000ed04

0800dd60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	@ 0x28
 800dd64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd6e:	463a      	mov	r2, r7
 800dd70:	1d39      	adds	r1, r7, #4
 800dd72:	f107 0308 	add.w	r3, r7, #8
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fe fbf4 	bl	800c564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd7c:	6839      	ldr	r1, [r7, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	9202      	str	r2, [sp, #8]
 800dd84:	9301      	str	r3, [sp, #4]
 800dd86:	2300      	movs	r3, #0
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	460a      	mov	r2, r1
 800dd8e:	4924      	ldr	r1, [pc, #144]	@ (800de20 <vTaskStartScheduler+0xc0>)
 800dd90:	4824      	ldr	r0, [pc, #144]	@ (800de24 <vTaskStartScheduler+0xc4>)
 800dd92:	f7ff fdf1 	bl	800d978 <xTaskCreateStatic>
 800dd96:	4603      	mov	r3, r0
 800dd98:	4a23      	ldr	r2, [pc, #140]	@ (800de28 <vTaskStartScheduler+0xc8>)
 800dd9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd9c:	4b22      	ldr	r3, [pc, #136]	@ (800de28 <vTaskStartScheduler+0xc8>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dda4:	2301      	movs	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	e001      	b.n	800ddae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d102      	bne.n	800ddba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ddb4:	f000 fe3c 	bl	800ea30 <xTimerCreateTimerTask>
 800ddb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d11b      	bne.n	800ddf8 <vTaskStartScheduler+0x98>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	613b      	str	r3, [r7, #16]
}
 800ddd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ddd4:	4b15      	ldr	r3, [pc, #84]	@ (800de2c <vTaskStartScheduler+0xcc>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	3354      	adds	r3, #84	@ 0x54
 800ddda:	4a15      	ldr	r2, [pc, #84]	@ (800de30 <vTaskStartScheduler+0xd0>)
 800dddc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddde:	4b15      	ldr	r3, [pc, #84]	@ (800de34 <vTaskStartScheduler+0xd4>)
 800dde0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dde4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dde6:	4b14      	ldr	r3, [pc, #80]	@ (800de38 <vTaskStartScheduler+0xd8>)
 800dde8:	2201      	movs	r2, #1
 800ddea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddec:	4b13      	ldr	r3, [pc, #76]	@ (800de3c <vTaskStartScheduler+0xdc>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddf2:	f001 fa05 	bl	800f200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddf6:	e00f      	b.n	800de18 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ddfe:	d10b      	bne.n	800de18 <vTaskStartScheduler+0xb8>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	60fb      	str	r3, [r7, #12]
}
 800de12:	bf00      	nop
 800de14:	bf00      	nop
 800de16:	e7fd      	b.n	800de14 <vTaskStartScheduler+0xb4>
}
 800de18:	bf00      	nop
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	080209a8 	.word	0x080209a8
 800de24:	0800e495 	.word	0x0800e495
 800de28:	20006024 	.word	0x20006024
 800de2c:	20005b2c 	.word	0x20005b2c
 800de30:	2000003c 	.word	0x2000003c
 800de34:	20006020 	.word	0x20006020
 800de38:	2000600c 	.word	0x2000600c
 800de3c:	20006004 	.word	0x20006004

0800de40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de40:	b480      	push	{r7}
 800de42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de44:	4b04      	ldr	r3, [pc, #16]	@ (800de58 <vTaskSuspendAll+0x18>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	3301      	adds	r3, #1
 800de4a:	4a03      	ldr	r2, [pc, #12]	@ (800de58 <vTaskSuspendAll+0x18>)
 800de4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de4e:	bf00      	nop
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr
 800de58:	20006028 	.word	0x20006028

0800de5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de66:	2300      	movs	r3, #0
 800de68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de6a:	4b42      	ldr	r3, [pc, #264]	@ (800df74 <xTaskResumeAll+0x118>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10b      	bne.n	800de8a <xTaskResumeAll+0x2e>
	__asm volatile
 800de72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	f3bf 8f6f 	isb	sy
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	603b      	str	r3, [r7, #0]
}
 800de84:	bf00      	nop
 800de86:	bf00      	nop
 800de88:	e7fd      	b.n	800de86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de8a:	f001 fa5d 	bl	800f348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de8e:	4b39      	ldr	r3, [pc, #228]	@ (800df74 <xTaskResumeAll+0x118>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3b01      	subs	r3, #1
 800de94:	4a37      	ldr	r2, [pc, #220]	@ (800df74 <xTaskResumeAll+0x118>)
 800de96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de98:	4b36      	ldr	r3, [pc, #216]	@ (800df74 <xTaskResumeAll+0x118>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d162      	bne.n	800df66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dea0:	4b35      	ldr	r3, [pc, #212]	@ (800df78 <xTaskResumeAll+0x11c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d05e      	beq.n	800df66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dea8:	e02f      	b.n	800df0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deaa:	4b34      	ldr	r3, [pc, #208]	@ (800df7c <xTaskResumeAll+0x120>)
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3318      	adds	r3, #24
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fe fc12 	bl	800c6e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3304      	adds	r3, #4
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe fc0d 	bl	800c6e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deca:	4b2d      	ldr	r3, [pc, #180]	@ (800df80 <xTaskResumeAll+0x124>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d903      	bls.n	800deda <xTaskResumeAll+0x7e>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded6:	4a2a      	ldr	r2, [pc, #168]	@ (800df80 <xTaskResumeAll+0x124>)
 800ded8:	6013      	str	r3, [r2, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dede:	4613      	mov	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4a27      	ldr	r2, [pc, #156]	@ (800df84 <xTaskResumeAll+0x128>)
 800dee8:	441a      	add	r2, r3
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3304      	adds	r3, #4
 800deee:	4619      	mov	r1, r3
 800def0:	4610      	mov	r0, r2
 800def2:	f7fe fb98 	bl	800c626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800defa:	4b23      	ldr	r3, [pc, #140]	@ (800df88 <xTaskResumeAll+0x12c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df00:	429a      	cmp	r2, r3
 800df02:	d302      	bcc.n	800df0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800df04:	4b21      	ldr	r3, [pc, #132]	@ (800df8c <xTaskResumeAll+0x130>)
 800df06:	2201      	movs	r2, #1
 800df08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df0a:	4b1c      	ldr	r3, [pc, #112]	@ (800df7c <xTaskResumeAll+0x120>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1cb      	bne.n	800deaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df18:	f000 fb78 	bl	800e60c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df1c:	4b1c      	ldr	r3, [pc, #112]	@ (800df90 <xTaskResumeAll+0x134>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d010      	beq.n	800df4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df28:	f000 f858 	bl	800dfdc <xTaskIncrementTick>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800df32:	4b16      	ldr	r3, [pc, #88]	@ (800df8c <xTaskResumeAll+0x130>)
 800df34:	2201      	movs	r2, #1
 800df36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1f1      	bne.n	800df28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800df44:	4b12      	ldr	r3, [pc, #72]	@ (800df90 <xTaskResumeAll+0x134>)
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df4a:	4b10      	ldr	r3, [pc, #64]	@ (800df8c <xTaskResumeAll+0x130>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df52:	2301      	movs	r3, #1
 800df54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df56:	4b0f      	ldr	r3, [pc, #60]	@ (800df94 <xTaskResumeAll+0x138>)
 800df58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df66:	f001 fa21 	bl	800f3ac <vPortExitCritical>

	return xAlreadyYielded;
 800df6a:	68bb      	ldr	r3, [r7, #8]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	20006028 	.word	0x20006028
 800df78:	20006000 	.word	0x20006000
 800df7c:	20005fc0 	.word	0x20005fc0
 800df80:	20006008 	.word	0x20006008
 800df84:	20005b30 	.word	0x20005b30
 800df88:	20005b2c 	.word	0x20005b2c
 800df8c:	20006014 	.word	0x20006014
 800df90:	20006010 	.word	0x20006010
 800df94:	e000ed04 	.word	0xe000ed04

0800df98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df9e:	4b05      	ldr	r3, [pc, #20]	@ (800dfb4 <xTaskGetTickCount+0x1c>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dfa4:	687b      	ldr	r3, [r7, #4]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	20006004 	.word	0x20006004

0800dfb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dfbe:	f001 faa3 	bl	800f508 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dfc6:	4b04      	ldr	r3, [pc, #16]	@ (800dfd8 <xTaskGetTickCountFromISR+0x20>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfcc:	683b      	ldr	r3, [r7, #0]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20006004 	.word	0x20006004

0800dfdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfe6:	4b4f      	ldr	r3, [pc, #316]	@ (800e124 <xTaskIncrementTick+0x148>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f040 8090 	bne.w	800e110 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dff0:	4b4d      	ldr	r3, [pc, #308]	@ (800e128 <xTaskIncrementTick+0x14c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dff8:	4a4b      	ldr	r2, [pc, #300]	@ (800e128 <xTaskIncrementTick+0x14c>)
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d121      	bne.n	800e048 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e004:	4b49      	ldr	r3, [pc, #292]	@ (800e12c <xTaskIncrementTick+0x150>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00b      	beq.n	800e026 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	603b      	str	r3, [r7, #0]
}
 800e020:	bf00      	nop
 800e022:	bf00      	nop
 800e024:	e7fd      	b.n	800e022 <xTaskIncrementTick+0x46>
 800e026:	4b41      	ldr	r3, [pc, #260]	@ (800e12c <xTaskIncrementTick+0x150>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	60fb      	str	r3, [r7, #12]
 800e02c:	4b40      	ldr	r3, [pc, #256]	@ (800e130 <xTaskIncrementTick+0x154>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a3e      	ldr	r2, [pc, #248]	@ (800e12c <xTaskIncrementTick+0x150>)
 800e032:	6013      	str	r3, [r2, #0]
 800e034:	4a3e      	ldr	r2, [pc, #248]	@ (800e130 <xTaskIncrementTick+0x154>)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6013      	str	r3, [r2, #0]
 800e03a:	4b3e      	ldr	r3, [pc, #248]	@ (800e134 <xTaskIncrementTick+0x158>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	3301      	adds	r3, #1
 800e040:	4a3c      	ldr	r2, [pc, #240]	@ (800e134 <xTaskIncrementTick+0x158>)
 800e042:	6013      	str	r3, [r2, #0]
 800e044:	f000 fae2 	bl	800e60c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e048:	4b3b      	ldr	r3, [pc, #236]	@ (800e138 <xTaskIncrementTick+0x15c>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d349      	bcc.n	800e0e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e052:	4b36      	ldr	r3, [pc, #216]	@ (800e12c <xTaskIncrementTick+0x150>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d104      	bne.n	800e066 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e05c:	4b36      	ldr	r3, [pc, #216]	@ (800e138 <xTaskIncrementTick+0x15c>)
 800e05e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e062:	601a      	str	r2, [r3, #0]
					break;
 800e064:	e03f      	b.n	800e0e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e066:	4b31      	ldr	r3, [pc, #196]	@ (800e12c <xTaskIncrementTick+0x150>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e076:	693a      	ldr	r2, [r7, #16]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d203      	bcs.n	800e086 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e07e:	4a2e      	ldr	r2, [pc, #184]	@ (800e138 <xTaskIncrementTick+0x15c>)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e084:	e02f      	b.n	800e0e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	3304      	adds	r3, #4
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe fb28 	bl	800c6e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e094:	2b00      	cmp	r3, #0
 800e096:	d004      	beq.n	800e0a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	3318      	adds	r3, #24
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fe fb1f 	bl	800c6e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a6:	4b25      	ldr	r3, [pc, #148]	@ (800e13c <xTaskIncrementTick+0x160>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d903      	bls.n	800e0b6 <xTaskIncrementTick+0xda>
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b2:	4a22      	ldr	r2, [pc, #136]	@ (800e13c <xTaskIncrementTick+0x160>)
 800e0b4:	6013      	str	r3, [r2, #0]
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4a1f      	ldr	r2, [pc, #124]	@ (800e140 <xTaskIncrementTick+0x164>)
 800e0c4:	441a      	add	r2, r3
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	f7fe faaa 	bl	800c626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0d6:	4b1b      	ldr	r3, [pc, #108]	@ (800e144 <xTaskIncrementTick+0x168>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d3b8      	bcc.n	800e052 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0e4:	e7b5      	b.n	800e052 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0e6:	4b17      	ldr	r3, [pc, #92]	@ (800e144 <xTaskIncrementTick+0x168>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ec:	4914      	ldr	r1, [pc, #80]	@ (800e140 <xTaskIncrementTick+0x164>)
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	440b      	add	r3, r1
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d901      	bls.n	800e102 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e0fe:	2301      	movs	r3, #1
 800e100:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e102:	4b11      	ldr	r3, [pc, #68]	@ (800e148 <xTaskIncrementTick+0x16c>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d007      	beq.n	800e11a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e10a:	2301      	movs	r3, #1
 800e10c:	617b      	str	r3, [r7, #20]
 800e10e:	e004      	b.n	800e11a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e110:	4b0e      	ldr	r3, [pc, #56]	@ (800e14c <xTaskIncrementTick+0x170>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3301      	adds	r3, #1
 800e116:	4a0d      	ldr	r2, [pc, #52]	@ (800e14c <xTaskIncrementTick+0x170>)
 800e118:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e11a:	697b      	ldr	r3, [r7, #20]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	20006028 	.word	0x20006028
 800e128:	20006004 	.word	0x20006004
 800e12c:	20005fb8 	.word	0x20005fb8
 800e130:	20005fbc 	.word	0x20005fbc
 800e134:	20006018 	.word	0x20006018
 800e138:	20006020 	.word	0x20006020
 800e13c:	20006008 	.word	0x20006008
 800e140:	20005b30 	.word	0x20005b30
 800e144:	20005b2c 	.word	0x20005b2c
 800e148:	20006014 	.word	0x20006014
 800e14c:	20006010 	.word	0x20006010

0800e150 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e150:	b480      	push	{r7}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e156:	4b2b      	ldr	r3, [pc, #172]	@ (800e204 <vTaskSwitchContext+0xb4>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d003      	beq.n	800e166 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e15e:	4b2a      	ldr	r3, [pc, #168]	@ (800e208 <vTaskSwitchContext+0xb8>)
 800e160:	2201      	movs	r2, #1
 800e162:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e164:	e047      	b.n	800e1f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e166:	4b28      	ldr	r3, [pc, #160]	@ (800e208 <vTaskSwitchContext+0xb8>)
 800e168:	2200      	movs	r2, #0
 800e16a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e16c:	4b27      	ldr	r3, [pc, #156]	@ (800e20c <vTaskSwitchContext+0xbc>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60fb      	str	r3, [r7, #12]
 800e172:	e011      	b.n	800e198 <vTaskSwitchContext+0x48>
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d10b      	bne.n	800e192 <vTaskSwitchContext+0x42>
	__asm volatile
 800e17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17e:	f383 8811 	msr	BASEPRI, r3
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	607b      	str	r3, [r7, #4]
}
 800e18c:	bf00      	nop
 800e18e:	bf00      	nop
 800e190:	e7fd      	b.n	800e18e <vTaskSwitchContext+0x3e>
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	3b01      	subs	r3, #1
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	491d      	ldr	r1, [pc, #116]	@ (800e210 <vTaskSwitchContext+0xc0>)
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	440b      	add	r3, r1
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d0e3      	beq.n	800e174 <vTaskSwitchContext+0x24>
 800e1ac:	68fa      	ldr	r2, [r7, #12]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4a16      	ldr	r2, [pc, #88]	@ (800e210 <vTaskSwitchContext+0xc0>)
 800e1b8:	4413      	add	r3, r2
 800e1ba:	60bb      	str	r3, [r7, #8]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	685a      	ldr	r2, [r3, #4]
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	605a      	str	r2, [r3, #4]
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	685a      	ldr	r2, [r3, #4]
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d104      	bne.n	800e1dc <vTaskSwitchContext+0x8c>
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	685a      	ldr	r2, [r3, #4]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	605a      	str	r2, [r3, #4]
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	4a0c      	ldr	r2, [pc, #48]	@ (800e214 <vTaskSwitchContext+0xc4>)
 800e1e4:	6013      	str	r3, [r2, #0]
 800e1e6:	4a09      	ldr	r2, [pc, #36]	@ (800e20c <vTaskSwitchContext+0xbc>)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1ec:	4b09      	ldr	r3, [pc, #36]	@ (800e214 <vTaskSwitchContext+0xc4>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3354      	adds	r3, #84	@ 0x54
 800e1f2:	4a09      	ldr	r2, [pc, #36]	@ (800e218 <vTaskSwitchContext+0xc8>)
 800e1f4:	6013      	str	r3, [r2, #0]
}
 800e1f6:	bf00      	nop
 800e1f8:	3714      	adds	r7, #20
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	20006028 	.word	0x20006028
 800e208:	20006014 	.word	0x20006014
 800e20c:	20006008 	.word	0x20006008
 800e210:	20005b30 	.word	0x20005b30
 800e214:	20005b2c 	.word	0x20005b2c
 800e218:	2000003c 	.word	0x2000003c

0800e21c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10b      	bne.n	800e244 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e230:	f383 8811 	msr	BASEPRI, r3
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	60fb      	str	r3, [r7, #12]
}
 800e23e:	bf00      	nop
 800e240:	bf00      	nop
 800e242:	e7fd      	b.n	800e240 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e244:	4b07      	ldr	r3, [pc, #28]	@ (800e264 <vTaskPlaceOnEventList+0x48>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	3318      	adds	r3, #24
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7fe fa0e 	bl	800c66e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e252:	2101      	movs	r1, #1
 800e254:	6838      	ldr	r0, [r7, #0]
 800e256:	f000 fb97 	bl	800e988 <prvAddCurrentTaskToDelayedList>
}
 800e25a:	bf00      	nop
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	20005b2c 	.word	0x20005b2c

0800e268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d10b      	bne.n	800e292 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	617b      	str	r3, [r7, #20]
}
 800e28c:	bf00      	nop
 800e28e:	bf00      	nop
 800e290:	e7fd      	b.n	800e28e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e292:	4b0a      	ldr	r3, [pc, #40]	@ (800e2bc <vTaskPlaceOnEventListRestricted+0x54>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	3318      	adds	r3, #24
 800e298:	4619      	mov	r1, r3
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7fe f9c3 	bl	800c626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e2a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e2aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	68b8      	ldr	r0, [r7, #8]
 800e2b0:	f000 fb6a 	bl	800e988 <prvAddCurrentTaskToDelayedList>
	}
 800e2b4:	bf00      	nop
 800e2b6:	3718      	adds	r7, #24
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20005b2c 	.word	0x20005b2c

0800e2c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10b      	bne.n	800e2ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	60fb      	str	r3, [r7, #12]
}
 800e2e8:	bf00      	nop
 800e2ea:	bf00      	nop
 800e2ec:	e7fd      	b.n	800e2ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	3318      	adds	r3, #24
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fe f9f4 	bl	800c6e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e370 <xTaskRemoveFromEventList+0xb0>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d11d      	bne.n	800e33c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	3304      	adds	r3, #4
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe f9eb 	bl	800c6e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e30e:	4b19      	ldr	r3, [pc, #100]	@ (800e374 <xTaskRemoveFromEventList+0xb4>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	429a      	cmp	r2, r3
 800e314:	d903      	bls.n	800e31e <xTaskRemoveFromEventList+0x5e>
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e31a:	4a16      	ldr	r2, [pc, #88]	@ (800e374 <xTaskRemoveFromEventList+0xb4>)
 800e31c:	6013      	str	r3, [r2, #0]
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4a13      	ldr	r2, [pc, #76]	@ (800e378 <xTaskRemoveFromEventList+0xb8>)
 800e32c:	441a      	add	r2, r3
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	3304      	adds	r3, #4
 800e332:	4619      	mov	r1, r3
 800e334:	4610      	mov	r0, r2
 800e336:	f7fe f976 	bl	800c626 <vListInsertEnd>
 800e33a:	e005      	b.n	800e348 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	3318      	adds	r3, #24
 800e340:	4619      	mov	r1, r3
 800e342:	480e      	ldr	r0, [pc, #56]	@ (800e37c <xTaskRemoveFromEventList+0xbc>)
 800e344:	f7fe f96f 	bl	800c626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e34c:	4b0c      	ldr	r3, [pc, #48]	@ (800e380 <xTaskRemoveFromEventList+0xc0>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e352:	429a      	cmp	r2, r3
 800e354:	d905      	bls.n	800e362 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e356:	2301      	movs	r3, #1
 800e358:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e35a:	4b0a      	ldr	r3, [pc, #40]	@ (800e384 <xTaskRemoveFromEventList+0xc4>)
 800e35c:	2201      	movs	r2, #1
 800e35e:	601a      	str	r2, [r3, #0]
 800e360:	e001      	b.n	800e366 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e362:	2300      	movs	r3, #0
 800e364:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e366:	697b      	ldr	r3, [r7, #20]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3718      	adds	r7, #24
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	20006028 	.word	0x20006028
 800e374:	20006008 	.word	0x20006008
 800e378:	20005b30 	.word	0x20005b30
 800e37c:	20005fc0 	.word	0x20005fc0
 800e380:	20005b2c 	.word	0x20005b2c
 800e384:	20006014 	.word	0x20006014

0800e388 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e390:	4b06      	ldr	r3, [pc, #24]	@ (800e3ac <vTaskInternalSetTimeOutState+0x24>)
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e398:	4b05      	ldr	r3, [pc, #20]	@ (800e3b0 <vTaskInternalSetTimeOutState+0x28>)
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	605a      	str	r2, [r3, #4]
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	20006018 	.word	0x20006018
 800e3b0:	20006004 	.word	0x20006004

0800e3b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10b      	bne.n	800e3dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	613b      	str	r3, [r7, #16]
}
 800e3d6:	bf00      	nop
 800e3d8:	bf00      	nop
 800e3da:	e7fd      	b.n	800e3d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d10b      	bne.n	800e3fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	60fb      	str	r3, [r7, #12]
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop
 800e3f8:	e7fd      	b.n	800e3f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e3fa:	f000 ffa5 	bl	800f348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e3fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e474 <xTaskCheckForTimeOut+0xc0>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e416:	d102      	bne.n	800e41e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e418:	2300      	movs	r3, #0
 800e41a:	61fb      	str	r3, [r7, #28]
 800e41c:	e023      	b.n	800e466 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b15      	ldr	r3, [pc, #84]	@ (800e478 <xTaskCheckForTimeOut+0xc4>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d007      	beq.n	800e43a <xTaskCheckForTimeOut+0x86>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	69ba      	ldr	r2, [r7, #24]
 800e430:	429a      	cmp	r2, r3
 800e432:	d302      	bcc.n	800e43a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e434:	2301      	movs	r3, #1
 800e436:	61fb      	str	r3, [r7, #28]
 800e438:	e015      	b.n	800e466 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	429a      	cmp	r2, r3
 800e442:	d20b      	bcs.n	800e45c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	1ad2      	subs	r2, r2, r3
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff ff99 	bl	800e388 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e456:	2300      	movs	r3, #0
 800e458:	61fb      	str	r3, [r7, #28]
 800e45a:	e004      	b.n	800e466 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2200      	movs	r2, #0
 800e460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e462:	2301      	movs	r3, #1
 800e464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e466:	f000 ffa1 	bl	800f3ac <vPortExitCritical>

	return xReturn;
 800e46a:	69fb      	ldr	r3, [r7, #28]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3720      	adds	r7, #32
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	20006004 	.word	0x20006004
 800e478:	20006018 	.word	0x20006018

0800e47c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e47c:	b480      	push	{r7}
 800e47e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e480:	4b03      	ldr	r3, [pc, #12]	@ (800e490 <vTaskMissedYield+0x14>)
 800e482:	2201      	movs	r2, #1
 800e484:	601a      	str	r2, [r3, #0]
}
 800e486:	bf00      	nop
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	20006014 	.word	0x20006014

0800e494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e49c:	f000 f852 	bl	800e544 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4a0:	4b06      	ldr	r3, [pc, #24]	@ (800e4bc <prvIdleTask+0x28>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d9f9      	bls.n	800e49c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e4a8:	4b05      	ldr	r3, [pc, #20]	@ (800e4c0 <prvIdleTask+0x2c>)
 800e4aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e4b8:	e7f0      	b.n	800e49c <prvIdleTask+0x8>
 800e4ba:	bf00      	nop
 800e4bc:	20005b30 	.word	0x20005b30
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	607b      	str	r3, [r7, #4]
 800e4ce:	e00c      	b.n	800e4ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	4a12      	ldr	r2, [pc, #72]	@ (800e524 <prvInitialiseTaskLists+0x60>)
 800e4dc:	4413      	add	r3, r2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe f874 	bl	800c5cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	607b      	str	r3, [r7, #4]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2b37      	cmp	r3, #55	@ 0x37
 800e4ee:	d9ef      	bls.n	800e4d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4f0:	480d      	ldr	r0, [pc, #52]	@ (800e528 <prvInitialiseTaskLists+0x64>)
 800e4f2:	f7fe f86b 	bl	800c5cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4f6:	480d      	ldr	r0, [pc, #52]	@ (800e52c <prvInitialiseTaskLists+0x68>)
 800e4f8:	f7fe f868 	bl	800c5cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4fc:	480c      	ldr	r0, [pc, #48]	@ (800e530 <prvInitialiseTaskLists+0x6c>)
 800e4fe:	f7fe f865 	bl	800c5cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e502:	480c      	ldr	r0, [pc, #48]	@ (800e534 <prvInitialiseTaskLists+0x70>)
 800e504:	f7fe f862 	bl	800c5cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e508:	480b      	ldr	r0, [pc, #44]	@ (800e538 <prvInitialiseTaskLists+0x74>)
 800e50a:	f7fe f85f 	bl	800c5cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e50e:	4b0b      	ldr	r3, [pc, #44]	@ (800e53c <prvInitialiseTaskLists+0x78>)
 800e510:	4a05      	ldr	r2, [pc, #20]	@ (800e528 <prvInitialiseTaskLists+0x64>)
 800e512:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e514:	4b0a      	ldr	r3, [pc, #40]	@ (800e540 <prvInitialiseTaskLists+0x7c>)
 800e516:	4a05      	ldr	r2, [pc, #20]	@ (800e52c <prvInitialiseTaskLists+0x68>)
 800e518:	601a      	str	r2, [r3, #0]
}
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	20005b30 	.word	0x20005b30
 800e528:	20005f90 	.word	0x20005f90
 800e52c:	20005fa4 	.word	0x20005fa4
 800e530:	20005fc0 	.word	0x20005fc0
 800e534:	20005fd4 	.word	0x20005fd4
 800e538:	20005fec 	.word	0x20005fec
 800e53c:	20005fb8 	.word	0x20005fb8
 800e540:	20005fbc 	.word	0x20005fbc

0800e544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e54a:	e019      	b.n	800e580 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e54c:	f000 fefc 	bl	800f348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e550:	4b10      	ldr	r3, [pc, #64]	@ (800e594 <prvCheckTasksWaitingTermination+0x50>)
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3304      	adds	r3, #4
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fe f8bf 	bl	800c6e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e562:	4b0d      	ldr	r3, [pc, #52]	@ (800e598 <prvCheckTasksWaitingTermination+0x54>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3b01      	subs	r3, #1
 800e568:	4a0b      	ldr	r2, [pc, #44]	@ (800e598 <prvCheckTasksWaitingTermination+0x54>)
 800e56a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e56c:	4b0b      	ldr	r3, [pc, #44]	@ (800e59c <prvCheckTasksWaitingTermination+0x58>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3b01      	subs	r3, #1
 800e572:	4a0a      	ldr	r2, [pc, #40]	@ (800e59c <prvCheckTasksWaitingTermination+0x58>)
 800e574:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e576:	f000 ff19 	bl	800f3ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f810 	bl	800e5a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e580:	4b06      	ldr	r3, [pc, #24]	@ (800e59c <prvCheckTasksWaitingTermination+0x58>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1e1      	bne.n	800e54c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	20005fd4 	.word	0x20005fd4
 800e598:	20006000 	.word	0x20006000
 800e59c:	20005fe8 	.word	0x20005fe8

0800e5a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	3354      	adds	r3, #84	@ 0x54
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f010 f887 	bl	801e6c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d108      	bne.n	800e5ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f001 f8b1 	bl	800f728 <vPortFree>
				vPortFree( pxTCB );
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f001 f8ae 	bl	800f728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e5cc:	e019      	b.n	800e602 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d103      	bne.n	800e5e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f001 f8a5 	bl	800f728 <vPortFree>
	}
 800e5de:	e010      	b.n	800e602 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e5e6:	2b02      	cmp	r3, #2
 800e5e8:	d00b      	beq.n	800e602 <prvDeleteTCB+0x62>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	60fb      	str	r3, [r7, #12]
}
 800e5fc:	bf00      	nop
 800e5fe:	bf00      	nop
 800e600:	e7fd      	b.n	800e5fe <prvDeleteTCB+0x5e>
	}
 800e602:	bf00      	nop
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e612:	4b0c      	ldr	r3, [pc, #48]	@ (800e644 <prvResetNextTaskUnblockTime+0x38>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d104      	bne.n	800e626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e61c:	4b0a      	ldr	r3, [pc, #40]	@ (800e648 <prvResetNextTaskUnblockTime+0x3c>)
 800e61e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e624:	e008      	b.n	800e638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e626:	4b07      	ldr	r3, [pc, #28]	@ (800e644 <prvResetNextTaskUnblockTime+0x38>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	4a04      	ldr	r2, [pc, #16]	@ (800e648 <prvResetNextTaskUnblockTime+0x3c>)
 800e636:	6013      	str	r3, [r2, #0]
}
 800e638:	bf00      	nop
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	20005fb8 	.word	0x20005fb8
 800e648:	20006020 	.word	0x20006020

0800e64c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e652:	4b05      	ldr	r3, [pc, #20]	@ (800e668 <xTaskGetCurrentTaskHandle+0x1c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e658:	687b      	ldr	r3, [r7, #4]
	}
 800e65a:	4618      	mov	r0, r3
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	20005b2c 	.word	0x20005b2c

0800e66c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e672:	4b0b      	ldr	r3, [pc, #44]	@ (800e6a0 <xTaskGetSchedulerState+0x34>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d102      	bne.n	800e680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e67a:	2301      	movs	r3, #1
 800e67c:	607b      	str	r3, [r7, #4]
 800e67e:	e008      	b.n	800e692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e680:	4b08      	ldr	r3, [pc, #32]	@ (800e6a4 <xTaskGetSchedulerState+0x38>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d102      	bne.n	800e68e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e688:	2302      	movs	r3, #2
 800e68a:	607b      	str	r3, [r7, #4]
 800e68c:	e001      	b.n	800e692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e68e:	2300      	movs	r3, #0
 800e690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e692:	687b      	ldr	r3, [r7, #4]
	}
 800e694:	4618      	mov	r0, r3
 800e696:	370c      	adds	r7, #12
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	2000600c 	.word	0x2000600c
 800e6a4:	20006028 	.word	0x20006028

0800e6a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d051      	beq.n	800e762 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6c2:	4b2a      	ldr	r3, [pc, #168]	@ (800e76c <xTaskPriorityInherit+0xc4>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d241      	bcs.n	800e750 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	db06      	blt.n	800e6e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d4:	4b25      	ldr	r3, [pc, #148]	@ (800e76c <xTaskPriorityInherit+0xc4>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	6959      	ldr	r1, [r3, #20]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4a1f      	ldr	r2, [pc, #124]	@ (800e770 <xTaskPriorityInherit+0xc8>)
 800e6f4:	4413      	add	r3, r2
 800e6f6:	4299      	cmp	r1, r3
 800e6f8:	d122      	bne.n	800e740 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fd ffee 	bl	800c6e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e704:	4b19      	ldr	r3, [pc, #100]	@ (800e76c <xTaskPriorityInherit+0xc4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e712:	4b18      	ldr	r3, [pc, #96]	@ (800e774 <xTaskPriorityInherit+0xcc>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	429a      	cmp	r2, r3
 800e718:	d903      	bls.n	800e722 <xTaskPriorityInherit+0x7a>
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e71e:	4a15      	ldr	r2, [pc, #84]	@ (800e774 <xTaskPriorityInherit+0xcc>)
 800e720:	6013      	str	r3, [r2, #0]
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e726:	4613      	mov	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	4413      	add	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4a10      	ldr	r2, [pc, #64]	@ (800e770 <xTaskPriorityInherit+0xc8>)
 800e730:	441a      	add	r2, r3
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	3304      	adds	r3, #4
 800e736:	4619      	mov	r1, r3
 800e738:	4610      	mov	r0, r2
 800e73a:	f7fd ff74 	bl	800c626 <vListInsertEnd>
 800e73e:	e004      	b.n	800e74a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e740:	4b0a      	ldr	r3, [pc, #40]	@ (800e76c <xTaskPriorityInherit+0xc4>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e74a:	2301      	movs	r3, #1
 800e74c:	60fb      	str	r3, [r7, #12]
 800e74e:	e008      	b.n	800e762 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e754:	4b05      	ldr	r3, [pc, #20]	@ (800e76c <xTaskPriorityInherit+0xc4>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d201      	bcs.n	800e762 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e75e:	2301      	movs	r3, #1
 800e760:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e762:	68fb      	ldr	r3, [r7, #12]
	}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	20005b2c 	.word	0x20005b2c
 800e770:	20005b30 	.word	0x20005b30
 800e774:	20006008 	.word	0x20006008

0800e778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e784:	2300      	movs	r3, #0
 800e786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d058      	beq.n	800e840 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e78e:	4b2f      	ldr	r3, [pc, #188]	@ (800e84c <xTaskPriorityDisinherit+0xd4>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	429a      	cmp	r2, r3
 800e796:	d00b      	beq.n	800e7b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79c:	f383 8811 	msr	BASEPRI, r3
 800e7a0:	f3bf 8f6f 	isb	sy
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	60fb      	str	r3, [r7, #12]
}
 800e7aa:	bf00      	nop
 800e7ac:	bf00      	nop
 800e7ae:	e7fd      	b.n	800e7ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10b      	bne.n	800e7d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	60bb      	str	r3, [r7, #8]
}
 800e7ca:	bf00      	nop
 800e7cc:	bf00      	nop
 800e7ce:	e7fd      	b.n	800e7cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7d4:	1e5a      	subs	r2, r3, #1
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d02c      	beq.n	800e840 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d128      	bne.n	800e840 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fd ff74 	bl	800c6e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e804:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e810:	4b0f      	ldr	r3, [pc, #60]	@ (800e850 <xTaskPriorityDisinherit+0xd8>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	429a      	cmp	r2, r3
 800e816:	d903      	bls.n	800e820 <xTaskPriorityDisinherit+0xa8>
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e81c:	4a0c      	ldr	r2, [pc, #48]	@ (800e850 <xTaskPriorityDisinherit+0xd8>)
 800e81e:	6013      	str	r3, [r2, #0]
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e824:	4613      	mov	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	4413      	add	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4a09      	ldr	r2, [pc, #36]	@ (800e854 <xTaskPriorityDisinherit+0xdc>)
 800e82e:	441a      	add	r2, r3
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	3304      	adds	r3, #4
 800e834:	4619      	mov	r1, r3
 800e836:	4610      	mov	r0, r2
 800e838:	f7fd fef5 	bl	800c626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e83c:	2301      	movs	r3, #1
 800e83e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e840:	697b      	ldr	r3, [r7, #20]
	}
 800e842:	4618      	mov	r0, r3
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	20005b2c 	.word	0x20005b2c
 800e850:	20006008 	.word	0x20006008
 800e854:	20005b30 	.word	0x20005b30

0800e858 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b088      	sub	sp, #32
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e866:	2301      	movs	r3, #1
 800e868:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d06c      	beq.n	800e94a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10b      	bne.n	800e890 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	60fb      	str	r3, [r7, #12]
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	e7fd      	b.n	800e88c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e894:	683a      	ldr	r2, [r7, #0]
 800e896:	429a      	cmp	r2, r3
 800e898:	d902      	bls.n	800e8a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	61fb      	str	r3, [r7, #28]
 800e89e:	e002      	b.n	800e8a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8aa:	69fa      	ldr	r2, [r7, #28]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d04c      	beq.n	800e94a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8b4:	697a      	ldr	r2, [r7, #20]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d147      	bne.n	800e94a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e8ba:	4b26      	ldr	r3, [pc, #152]	@ (800e954 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	69ba      	ldr	r2, [r7, #24]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d10b      	bne.n	800e8dc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	60bb      	str	r3, [r7, #8]
}
 800e8d6:	bf00      	nop
 800e8d8:	bf00      	nop
 800e8da:	e7fd      	b.n	800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	69fa      	ldr	r2, [r7, #28]
 800e8e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	699b      	ldr	r3, [r3, #24]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	db04      	blt.n	800e8fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	6959      	ldr	r1, [r3, #20]
 800e8fe:	693a      	ldr	r2, [r7, #16]
 800e900:	4613      	mov	r3, r2
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	4a13      	ldr	r2, [pc, #76]	@ (800e958 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e90a:	4413      	add	r3, r2
 800e90c:	4299      	cmp	r1, r3
 800e90e:	d11c      	bne.n	800e94a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	3304      	adds	r3, #4
 800e914:	4618      	mov	r0, r3
 800e916:	f7fd fee3 	bl	800c6e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e91e:	4b0f      	ldr	r3, [pc, #60]	@ (800e95c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	429a      	cmp	r2, r3
 800e924:	d903      	bls.n	800e92e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92a:	4a0c      	ldr	r2, [pc, #48]	@ (800e95c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e92c:	6013      	str	r3, [r2, #0]
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e932:	4613      	mov	r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4413      	add	r3, r2
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	4a07      	ldr	r2, [pc, #28]	@ (800e958 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e93c:	441a      	add	r2, r3
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	3304      	adds	r3, #4
 800e942:	4619      	mov	r1, r3
 800e944:	4610      	mov	r0, r2
 800e946:	f7fd fe6e 	bl	800c626 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e94a:	bf00      	nop
 800e94c:	3720      	adds	r7, #32
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	20005b2c 	.word	0x20005b2c
 800e958:	20005b30 	.word	0x20005b30
 800e95c:	20006008 	.word	0x20006008

0800e960 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e960:	b480      	push	{r7}
 800e962:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e964:	4b07      	ldr	r3, [pc, #28]	@ (800e984 <pvTaskIncrementMutexHeldCount+0x24>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d004      	beq.n	800e976 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e96c:	4b05      	ldr	r3, [pc, #20]	@ (800e984 <pvTaskIncrementMutexHeldCount+0x24>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e972:	3201      	adds	r2, #1
 800e974:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e976:	4b03      	ldr	r3, [pc, #12]	@ (800e984 <pvTaskIncrementMutexHeldCount+0x24>)
 800e978:	681b      	ldr	r3, [r3, #0]
	}
 800e97a:	4618      	mov	r0, r3
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr
 800e984:	20005b2c 	.word	0x20005b2c

0800e988 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e992:	4b21      	ldr	r3, [pc, #132]	@ (800ea18 <prvAddCurrentTaskToDelayedList+0x90>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e998:	4b20      	ldr	r3, [pc, #128]	@ (800ea1c <prvAddCurrentTaskToDelayedList+0x94>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3304      	adds	r3, #4
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fd fe9e 	bl	800c6e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9aa:	d10a      	bne.n	800e9c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d007      	beq.n	800e9c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9b2:	4b1a      	ldr	r3, [pc, #104]	@ (800ea1c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4819      	ldr	r0, [pc, #100]	@ (800ea20 <prvAddCurrentTaskToDelayedList+0x98>)
 800e9bc:	f7fd fe33 	bl	800c626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9c0:	e026      	b.n	800ea10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9ca:	4b14      	ldr	r3, [pc, #80]	@ (800ea1c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d209      	bcs.n	800e9ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9da:	4b12      	ldr	r3, [pc, #72]	@ (800ea24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ea1c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	f7fd fe41 	bl	800c66e <vListInsert>
}
 800e9ec:	e010      	b.n	800ea10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ee:	4b0e      	ldr	r3, [pc, #56]	@ (800ea28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800ea1c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	f7fd fe37 	bl	800c66e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea00:	4b0a      	ldr	r3, [pc, #40]	@ (800ea2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d202      	bcs.n	800ea10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea0a:	4a08      	ldr	r2, [pc, #32]	@ (800ea2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	6013      	str	r3, [r2, #0]
}
 800ea10:	bf00      	nop
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	20006004 	.word	0x20006004
 800ea1c:	20005b2c 	.word	0x20005b2c
 800ea20:	20005fec 	.word	0x20005fec
 800ea24:	20005fbc 	.word	0x20005fbc
 800ea28:	20005fb8 	.word	0x20005fb8
 800ea2c:	20006020 	.word	0x20006020

0800ea30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b08a      	sub	sp, #40	@ 0x28
 800ea34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea36:	2300      	movs	r3, #0
 800ea38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea3a:	f000 fb13 	bl	800f064 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea3e:	4b1d      	ldr	r3, [pc, #116]	@ (800eab4 <xTimerCreateTimerTask+0x84>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d021      	beq.n	800ea8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea4e:	1d3a      	adds	r2, r7, #4
 800ea50:	f107 0108 	add.w	r1, r7, #8
 800ea54:	f107 030c 	add.w	r3, r7, #12
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fd fd9d 	bl	800c598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	9202      	str	r2, [sp, #8]
 800ea66:	9301      	str	r3, [sp, #4]
 800ea68:	2302      	movs	r3, #2
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	460a      	mov	r2, r1
 800ea70:	4911      	ldr	r1, [pc, #68]	@ (800eab8 <xTimerCreateTimerTask+0x88>)
 800ea72:	4812      	ldr	r0, [pc, #72]	@ (800eabc <xTimerCreateTimerTask+0x8c>)
 800ea74:	f7fe ff80 	bl	800d978 <xTaskCreateStatic>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	4a11      	ldr	r2, [pc, #68]	@ (800eac0 <xTimerCreateTimerTask+0x90>)
 800ea7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea7e:	4b10      	ldr	r3, [pc, #64]	@ (800eac0 <xTimerCreateTimerTask+0x90>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea86:	2301      	movs	r3, #1
 800ea88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d10b      	bne.n	800eaa8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	613b      	str	r3, [r7, #16]
}
 800eaa2:	bf00      	nop
 800eaa4:	bf00      	nop
 800eaa6:	e7fd      	b.n	800eaa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eaa8:	697b      	ldr	r3, [r7, #20]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	2000605c 	.word	0x2000605c
 800eab8:	080209b0 	.word	0x080209b0
 800eabc:	0800ebfd 	.word	0x0800ebfd
 800eac0:	20006060 	.word	0x20006060

0800eac4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08a      	sub	sp, #40	@ 0x28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ead2:	2300      	movs	r3, #0
 800ead4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10b      	bne.n	800eaf4 <xTimerGenericCommand+0x30>
	__asm volatile
 800eadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	623b      	str	r3, [r7, #32]
}
 800eaee:	bf00      	nop
 800eaf0:	bf00      	nop
 800eaf2:	e7fd      	b.n	800eaf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eaf4:	4b19      	ldr	r3, [pc, #100]	@ (800eb5c <xTimerGenericCommand+0x98>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d02a      	beq.n	800eb52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	2b05      	cmp	r3, #5
 800eb0c:	dc18      	bgt.n	800eb40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb0e:	f7ff fdad 	bl	800e66c <xTaskGetSchedulerState>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d109      	bne.n	800eb2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb18:	4b10      	ldr	r3, [pc, #64]	@ (800eb5c <xTimerGenericCommand+0x98>)
 800eb1a:	6818      	ldr	r0, [r3, #0]
 800eb1c:	f107 0110 	add.w	r1, r7, #16
 800eb20:	2300      	movs	r3, #0
 800eb22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb24:	f7fe f872 	bl	800cc0c <xQueueGenericSend>
 800eb28:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb2a:	e012      	b.n	800eb52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb2c:	4b0b      	ldr	r3, [pc, #44]	@ (800eb5c <xTimerGenericCommand+0x98>)
 800eb2e:	6818      	ldr	r0, [r3, #0]
 800eb30:	f107 0110 	add.w	r1, r7, #16
 800eb34:	2300      	movs	r3, #0
 800eb36:	2200      	movs	r2, #0
 800eb38:	f7fe f868 	bl	800cc0c <xQueueGenericSend>
 800eb3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb3e:	e008      	b.n	800eb52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb40:	4b06      	ldr	r3, [pc, #24]	@ (800eb5c <xTimerGenericCommand+0x98>)
 800eb42:	6818      	ldr	r0, [r3, #0]
 800eb44:	f107 0110 	add.w	r1, r7, #16
 800eb48:	2300      	movs	r3, #0
 800eb4a:	683a      	ldr	r2, [r7, #0]
 800eb4c:	f7fe f960 	bl	800ce10 <xQueueGenericSendFromISR>
 800eb50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3728      	adds	r7, #40	@ 0x28
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	2000605c 	.word	0x2000605c

0800eb60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b088      	sub	sp, #32
 800eb64:	af02      	add	r7, sp, #8
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb6a:	4b23      	ldr	r3, [pc, #140]	@ (800ebf8 <prvProcessExpiredTimer+0x98>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fd fdb1 	bl	800c6e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d023      	beq.n	800ebd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	699a      	ldr	r2, [r3, #24]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	18d1      	adds	r1, r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	6978      	ldr	r0, [r7, #20]
 800eb9a:	f000 f8d5 	bl	800ed48 <prvInsertTimerInActiveList>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d020      	beq.n	800ebe6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eba4:	2300      	movs	r3, #0
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	2100      	movs	r1, #0
 800ebae:	6978      	ldr	r0, [r7, #20]
 800ebb0:	f7ff ff88 	bl	800eac4 <xTimerGenericCommand>
 800ebb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d114      	bne.n	800ebe6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ebbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc0:	f383 8811 	msr	BASEPRI, r3
 800ebc4:	f3bf 8f6f 	isb	sy
 800ebc8:	f3bf 8f4f 	dsb	sy
 800ebcc:	60fb      	str	r3, [r7, #12]
}
 800ebce:	bf00      	nop
 800ebd0:	bf00      	nop
 800ebd2:	e7fd      	b.n	800ebd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebda:	f023 0301 	bic.w	r3, r3, #1
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	6978      	ldr	r0, [r7, #20]
 800ebec:	4798      	blx	r3
}
 800ebee:	bf00      	nop
 800ebf0:	3718      	adds	r7, #24
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20006054 	.word	0x20006054

0800ebfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec04:	f107 0308 	add.w	r3, r7, #8
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 f859 	bl	800ecc0 <prvGetNextExpireTime>
 800ec0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	4619      	mov	r1, r3
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f000 f805 	bl	800ec24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec1a:	f000 f8d7 	bl	800edcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec1e:	bf00      	nop
 800ec20:	e7f0      	b.n	800ec04 <prvTimerTask+0x8>
	...

0800ec24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec2e:	f7ff f907 	bl	800de40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec32:	f107 0308 	add.w	r3, r7, #8
 800ec36:	4618      	mov	r0, r3
 800ec38:	f000 f866 	bl	800ed08 <prvSampleTimeNow>
 800ec3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d130      	bne.n	800eca6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10a      	bne.n	800ec60 <prvProcessTimerOrBlockTask+0x3c>
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d806      	bhi.n	800ec60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec52:	f7ff f903 	bl	800de5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec56:	68f9      	ldr	r1, [r7, #12]
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7ff ff81 	bl	800eb60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec5e:	e024      	b.n	800ecaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d008      	beq.n	800ec78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec66:	4b13      	ldr	r3, [pc, #76]	@ (800ecb4 <prvProcessTimerOrBlockTask+0x90>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d101      	bne.n	800ec74 <prvProcessTimerOrBlockTask+0x50>
 800ec70:	2301      	movs	r3, #1
 800ec72:	e000      	b.n	800ec76 <prvProcessTimerOrBlockTask+0x52>
 800ec74:	2300      	movs	r3, #0
 800ec76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec78:	4b0f      	ldr	r3, [pc, #60]	@ (800ecb8 <prvProcessTimerOrBlockTask+0x94>)
 800ec7a:	6818      	ldr	r0, [r3, #0]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	4619      	mov	r1, r3
 800ec86:	f7fe fe43 	bl	800d910 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec8a:	f7ff f8e7 	bl	800de5c <xTaskResumeAll>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d10a      	bne.n	800ecaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec94:	4b09      	ldr	r3, [pc, #36]	@ (800ecbc <prvProcessTimerOrBlockTask+0x98>)
 800ec96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	f3bf 8f6f 	isb	sy
}
 800eca4:	e001      	b.n	800ecaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eca6:	f7ff f8d9 	bl	800de5c <xTaskResumeAll>
}
 800ecaa:	bf00      	nop
 800ecac:	3710      	adds	r7, #16
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20006058 	.word	0x20006058
 800ecb8:	2000605c 	.word	0x2000605c
 800ecbc:	e000ed04 	.word	0xe000ed04

0800ecc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ed04 <prvGetNextExpireTime+0x44>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d101      	bne.n	800ecd6 <prvGetNextExpireTime+0x16>
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	e000      	b.n	800ecd8 <prvGetNextExpireTime+0x18>
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d105      	bne.n	800ecf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ece4:	4b07      	ldr	r3, [pc, #28]	@ (800ed04 <prvGetNextExpireTime+0x44>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	60fb      	str	r3, [r7, #12]
 800ecee:	e001      	b.n	800ecf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	20006054 	.word	0x20006054

0800ed08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed10:	f7ff f942 	bl	800df98 <xTaskGetTickCount>
 800ed14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed16:	4b0b      	ldr	r3, [pc, #44]	@ (800ed44 <prvSampleTimeNow+0x3c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d205      	bcs.n	800ed2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed20:	f000 f93a 	bl	800ef98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	e002      	b.n	800ed32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed32:	4a04      	ldr	r2, [pc, #16]	@ (800ed44 <prvSampleTimeNow+0x3c>)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed38:	68fb      	ldr	r3, [r7, #12]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	20006064 	.word	0x20006064

0800ed48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed56:	2300      	movs	r3, #0
 800ed58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d812      	bhi.n	800ed94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	1ad2      	subs	r2, r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	699b      	ldr	r3, [r3, #24]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d302      	bcc.n	800ed82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	617b      	str	r3, [r7, #20]
 800ed80:	e01b      	b.n	800edba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed82:	4b10      	ldr	r3, [pc, #64]	@ (800edc4 <prvInsertTimerInActiveList+0x7c>)
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3304      	adds	r3, #4
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	f7fd fc6e 	bl	800c66e <vListInsert>
 800ed92:	e012      	b.n	800edba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d206      	bcs.n	800edaa <prvInsertTimerInActiveList+0x62>
 800ed9c:	68ba      	ldr	r2, [r7, #8]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d302      	bcc.n	800edaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eda4:	2301      	movs	r3, #1
 800eda6:	617b      	str	r3, [r7, #20]
 800eda8:	e007      	b.n	800edba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edaa:	4b07      	ldr	r3, [pc, #28]	@ (800edc8 <prvInsertTimerInActiveList+0x80>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3304      	adds	r3, #4
 800edb2:	4619      	mov	r1, r3
 800edb4:	4610      	mov	r0, r2
 800edb6:	f7fd fc5a 	bl	800c66e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edba:	697b      	ldr	r3, [r7, #20]
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3718      	adds	r7, #24
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	20006058 	.word	0x20006058
 800edc8:	20006054 	.word	0x20006054

0800edcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b08e      	sub	sp, #56	@ 0x38
 800edd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edd2:	e0ce      	b.n	800ef72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	da19      	bge.n	800ee0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edda:	1d3b      	adds	r3, r7, #4
 800eddc:	3304      	adds	r3, #4
 800edde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ede0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d10b      	bne.n	800edfe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ede6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	61fb      	str	r3, [r7, #28]
}
 800edf8:	bf00      	nop
 800edfa:	bf00      	nop
 800edfc:	e7fd      	b.n	800edfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800edfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee04:	6850      	ldr	r0, [r2, #4]
 800ee06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee08:	6892      	ldr	r2, [r2, #8]
 800ee0a:	4611      	mov	r1, r2
 800ee0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f2c0 80ae 	blt.w	800ef72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d004      	beq.n	800ee2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee24:	3304      	adds	r3, #4
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fd fc5a 	bl	800c6e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee2c:	463b      	mov	r3, r7
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff ff6a 	bl	800ed08 <prvSampleTimeNow>
 800ee34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b09      	cmp	r3, #9
 800ee3a:	f200 8097 	bhi.w	800ef6c <prvProcessReceivedCommands+0x1a0>
 800ee3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee44 <prvProcessReceivedCommands+0x78>)
 800ee40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee44:	0800ee6d 	.word	0x0800ee6d
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee6d 	.word	0x0800ee6d
 800ee50:	0800eee3 	.word	0x0800eee3
 800ee54:	0800eef7 	.word	0x0800eef7
 800ee58:	0800ef43 	.word	0x0800ef43
 800ee5c:	0800ee6d 	.word	0x0800ee6d
 800ee60:	0800ee6d 	.word	0x0800ee6d
 800ee64:	0800eee3 	.word	0x0800eee3
 800ee68:	0800eef7 	.word	0x0800eef7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee72:	f043 0301 	orr.w	r3, r3, #1
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee82:	699b      	ldr	r3, [r3, #24]
 800ee84:	18d1      	adds	r1, r2, r3
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee8c:	f7ff ff5c 	bl	800ed48 <prvInsertTimerInActiveList>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d06c      	beq.n	800ef70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eea4:	f003 0304 	and.w	r3, r3, #4
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d061      	beq.n	800ef70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	441a      	add	r2, r3
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	2300      	movs	r3, #0
 800eeba:	2100      	movs	r1, #0
 800eebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eebe:	f7ff fe01 	bl	800eac4 <xTimerGenericCommand>
 800eec2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d152      	bne.n	800ef70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eece:	f383 8811 	msr	BASEPRI, r3
 800eed2:	f3bf 8f6f 	isb	sy
 800eed6:	f3bf 8f4f 	dsb	sy
 800eeda:	61bb      	str	r3, [r7, #24]
}
 800eedc:	bf00      	nop
 800eede:	bf00      	nop
 800eee0:	e7fd      	b.n	800eede <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eee8:	f023 0301 	bic.w	r3, r3, #1
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eef4:	e03d      	b.n	800ef72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eefc:	f043 0301 	orr.w	r3, r3, #1
 800ef00:	b2da      	uxtb	r2, r3
 800ef02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef08:	68ba      	ldr	r2, [r7, #8]
 800ef0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef10:	699b      	ldr	r3, [r3, #24]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d10b      	bne.n	800ef2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ef16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1a:	f383 8811 	msr	BASEPRI, r3
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	f3bf 8f4f 	dsb	sy
 800ef26:	617b      	str	r3, [r7, #20]
}
 800ef28:	bf00      	nop
 800ef2a:	bf00      	nop
 800ef2c:	e7fd      	b.n	800ef2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef30:	699a      	ldr	r2, [r3, #24]
 800ef32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef34:	18d1      	adds	r1, r2, r3
 800ef36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef3c:	f7ff ff04 	bl	800ed48 <prvInsertTimerInActiveList>
					break;
 800ef40:	e017      	b.n	800ef72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef48:	f003 0302 	and.w	r3, r3, #2
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d103      	bne.n	800ef58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ef50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef52:	f000 fbe9 	bl	800f728 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef56:	e00c      	b.n	800ef72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef5e:	f023 0301 	bic.w	r3, r3, #1
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef6a:	e002      	b.n	800ef72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ef6c:	bf00      	nop
 800ef6e:	e000      	b.n	800ef72 <prvProcessReceivedCommands+0x1a6>
					break;
 800ef70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef72:	4b08      	ldr	r3, [pc, #32]	@ (800ef94 <prvProcessReceivedCommands+0x1c8>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	1d39      	adds	r1, r7, #4
 800ef78:	2200      	movs	r2, #0
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fe f876 	bl	800d06c <xQueueReceive>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f47f af26 	bne.w	800edd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ef88:	bf00      	nop
 800ef8a:	bf00      	nop
 800ef8c:	3730      	adds	r7, #48	@ 0x30
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	2000605c 	.word	0x2000605c

0800ef98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b088      	sub	sp, #32
 800ef9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef9e:	e049      	b.n	800f034 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efa0:	4b2e      	ldr	r3, [pc, #184]	@ (800f05c <prvSwitchTimerLists+0xc4>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efaa:	4b2c      	ldr	r3, [pc, #176]	@ (800f05c <prvSwitchTimerLists+0xc4>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	3304      	adds	r3, #4
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fd fb91 	bl	800c6e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efcc:	f003 0304 	and.w	r3, r3, #4
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d02f      	beq.n	800f034 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	699b      	ldr	r3, [r3, #24]
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	4413      	add	r3, r2
 800efdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d90e      	bls.n	800f004 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eff2:	4b1a      	ldr	r3, [pc, #104]	@ (800f05c <prvSwitchTimerLists+0xc4>)
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	3304      	adds	r3, #4
 800effa:	4619      	mov	r1, r3
 800effc:	4610      	mov	r0, r2
 800effe:	f7fd fb36 	bl	800c66e <vListInsert>
 800f002:	e017      	b.n	800f034 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f004:	2300      	movs	r3, #0
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	2300      	movs	r3, #0
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	2100      	movs	r1, #0
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f7ff fd58 	bl	800eac4 <xTimerGenericCommand>
 800f014:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10b      	bne.n	800f034 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	603b      	str	r3, [r7, #0]
}
 800f02e:	bf00      	nop
 800f030:	bf00      	nop
 800f032:	e7fd      	b.n	800f030 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f034:	4b09      	ldr	r3, [pc, #36]	@ (800f05c <prvSwitchTimerLists+0xc4>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1b0      	bne.n	800efa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f03e:	4b07      	ldr	r3, [pc, #28]	@ (800f05c <prvSwitchTimerLists+0xc4>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f044:	4b06      	ldr	r3, [pc, #24]	@ (800f060 <prvSwitchTimerLists+0xc8>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a04      	ldr	r2, [pc, #16]	@ (800f05c <prvSwitchTimerLists+0xc4>)
 800f04a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f04c:	4a04      	ldr	r2, [pc, #16]	@ (800f060 <prvSwitchTimerLists+0xc8>)
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	6013      	str	r3, [r2, #0]
}
 800f052:	bf00      	nop
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	20006054 	.word	0x20006054
 800f060:	20006058 	.word	0x20006058

0800f064 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f06a:	f000 f96d 	bl	800f348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f06e:	4b15      	ldr	r3, [pc, #84]	@ (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d120      	bne.n	800f0b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f076:	4814      	ldr	r0, [pc, #80]	@ (800f0c8 <prvCheckForValidListAndQueue+0x64>)
 800f078:	f7fd faa8 	bl	800c5cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f07c:	4813      	ldr	r0, [pc, #76]	@ (800f0cc <prvCheckForValidListAndQueue+0x68>)
 800f07e:	f7fd faa5 	bl	800c5cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f082:	4b13      	ldr	r3, [pc, #76]	@ (800f0d0 <prvCheckForValidListAndQueue+0x6c>)
 800f084:	4a10      	ldr	r2, [pc, #64]	@ (800f0c8 <prvCheckForValidListAndQueue+0x64>)
 800f086:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f088:	4b12      	ldr	r3, [pc, #72]	@ (800f0d4 <prvCheckForValidListAndQueue+0x70>)
 800f08a:	4a10      	ldr	r2, [pc, #64]	@ (800f0cc <prvCheckForValidListAndQueue+0x68>)
 800f08c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f08e:	2300      	movs	r3, #0
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	4b11      	ldr	r3, [pc, #68]	@ (800f0d8 <prvCheckForValidListAndQueue+0x74>)
 800f094:	4a11      	ldr	r2, [pc, #68]	@ (800f0dc <prvCheckForValidListAndQueue+0x78>)
 800f096:	2110      	movs	r1, #16
 800f098:	200a      	movs	r0, #10
 800f09a:	f7fd fbb5 	bl	800c808 <xQueueGenericCreateStatic>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	4a08      	ldr	r2, [pc, #32]	@ (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f0a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0a4:	4b07      	ldr	r3, [pc, #28]	@ (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d005      	beq.n	800f0b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0ac:	4b05      	ldr	r3, [pc, #20]	@ (800f0c4 <prvCheckForValidListAndQueue+0x60>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	490b      	ldr	r1, [pc, #44]	@ (800f0e0 <prvCheckForValidListAndQueue+0x7c>)
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fbd8 	bl	800d868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0b8:	f000 f978 	bl	800f3ac <vPortExitCritical>
}
 800f0bc:	bf00      	nop
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	2000605c 	.word	0x2000605c
 800f0c8:	2000602c 	.word	0x2000602c
 800f0cc:	20006040 	.word	0x20006040
 800f0d0:	20006054 	.word	0x20006054
 800f0d4:	20006058 	.word	0x20006058
 800f0d8:	20006108 	.word	0x20006108
 800f0dc:	20006068 	.word	0x20006068
 800f0e0:	080209b8 	.word	0x080209b8

0800f0e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	3b04      	subs	r3, #4
 800f0f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3b04      	subs	r3, #4
 800f102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	f023 0201 	bic.w	r2, r3, #1
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3b04      	subs	r3, #4
 800f112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f114:	4a0c      	ldr	r2, [pc, #48]	@ (800f148 <pxPortInitialiseStack+0x64>)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3b14      	subs	r3, #20
 800f11e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3b04      	subs	r3, #4
 800f12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f06f 0202 	mvn.w	r2, #2
 800f132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	3b20      	subs	r3, #32
 800f138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f13a:	68fb      	ldr	r3, [r7, #12]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	0800f14d 	.word	0x0800f14d

0800f14c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f156:	4b13      	ldr	r3, [pc, #76]	@ (800f1a4 <prvTaskExitError+0x58>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f15e:	d00b      	beq.n	800f178 <prvTaskExitError+0x2c>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	60fb      	str	r3, [r7, #12]
}
 800f172:	bf00      	nop
 800f174:	bf00      	nop
 800f176:	e7fd      	b.n	800f174 <prvTaskExitError+0x28>
	__asm volatile
 800f178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17c:	f383 8811 	msr	BASEPRI, r3
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	f3bf 8f4f 	dsb	sy
 800f188:	60bb      	str	r3, [r7, #8]
}
 800f18a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f18c:	bf00      	nop
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d0fc      	beq.n	800f18e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f194:	bf00      	nop
 800f196:	bf00      	nop
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	20000020 	.word	0x20000020
	...

0800f1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1b0:	4b07      	ldr	r3, [pc, #28]	@ (800f1d0 <pxCurrentTCBConst2>)
 800f1b2:	6819      	ldr	r1, [r3, #0]
 800f1b4:	6808      	ldr	r0, [r1, #0]
 800f1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ba:	f380 8809 	msr	PSP, r0
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f04f 0000 	mov.w	r0, #0
 800f1c6:	f380 8811 	msr	BASEPRI, r0
 800f1ca:	4770      	bx	lr
 800f1cc:	f3af 8000 	nop.w

0800f1d0 <pxCurrentTCBConst2>:
 800f1d0:	20005b2c 	.word	0x20005b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop

0800f1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1d8:	4808      	ldr	r0, [pc, #32]	@ (800f1fc <prvPortStartFirstTask+0x24>)
 800f1da:	6800      	ldr	r0, [r0, #0]
 800f1dc:	6800      	ldr	r0, [r0, #0]
 800f1de:	f380 8808 	msr	MSP, r0
 800f1e2:	f04f 0000 	mov.w	r0, #0
 800f1e6:	f380 8814 	msr	CONTROL, r0
 800f1ea:	b662      	cpsie	i
 800f1ec:	b661      	cpsie	f
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	f3bf 8f6f 	isb	sy
 800f1f6:	df00      	svc	0
 800f1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f1fa:	bf00      	nop
 800f1fc:	e000ed08 	.word	0xe000ed08

0800f200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f206:	4b47      	ldr	r3, [pc, #284]	@ (800f324 <xPortStartScheduler+0x124>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a47      	ldr	r2, [pc, #284]	@ (800f328 <xPortStartScheduler+0x128>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d10b      	bne.n	800f228 <xPortStartScheduler+0x28>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	613b      	str	r3, [r7, #16]
}
 800f222:	bf00      	nop
 800f224:	bf00      	nop
 800f226:	e7fd      	b.n	800f224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f228:	4b3e      	ldr	r3, [pc, #248]	@ (800f324 <xPortStartScheduler+0x124>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a3f      	ldr	r2, [pc, #252]	@ (800f32c <xPortStartScheduler+0x12c>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d10b      	bne.n	800f24a <xPortStartScheduler+0x4a>
	__asm volatile
 800f232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	60fb      	str	r3, [r7, #12]
}
 800f244:	bf00      	nop
 800f246:	bf00      	nop
 800f248:	e7fd      	b.n	800f246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f24a:	4b39      	ldr	r3, [pc, #228]	@ (800f330 <xPortStartScheduler+0x130>)
 800f24c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	22ff      	movs	r2, #255	@ 0xff
 800f25a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	b2db      	uxtb	r3, r3
 800f262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f264:	78fb      	ldrb	r3, [r7, #3]
 800f266:	b2db      	uxtb	r3, r3
 800f268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f26c:	b2da      	uxtb	r2, r3
 800f26e:	4b31      	ldr	r3, [pc, #196]	@ (800f334 <xPortStartScheduler+0x134>)
 800f270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f272:	4b31      	ldr	r3, [pc, #196]	@ (800f338 <xPortStartScheduler+0x138>)
 800f274:	2207      	movs	r2, #7
 800f276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f278:	e009      	b.n	800f28e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f27a:	4b2f      	ldr	r3, [pc, #188]	@ (800f338 <xPortStartScheduler+0x138>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	3b01      	subs	r3, #1
 800f280:	4a2d      	ldr	r2, [pc, #180]	@ (800f338 <xPortStartScheduler+0x138>)
 800f282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f284:	78fb      	ldrb	r3, [r7, #3]
 800f286:	b2db      	uxtb	r3, r3
 800f288:	005b      	lsls	r3, r3, #1
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f28e:	78fb      	ldrb	r3, [r7, #3]
 800f290:	b2db      	uxtb	r3, r3
 800f292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f296:	2b80      	cmp	r3, #128	@ 0x80
 800f298:	d0ef      	beq.n	800f27a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f29a:	4b27      	ldr	r3, [pc, #156]	@ (800f338 <xPortStartScheduler+0x138>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f1c3 0307 	rsb	r3, r3, #7
 800f2a2:	2b04      	cmp	r3, #4
 800f2a4:	d00b      	beq.n	800f2be <xPortStartScheduler+0xbe>
	__asm volatile
 800f2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2aa:	f383 8811 	msr	BASEPRI, r3
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	60bb      	str	r3, [r7, #8]
}
 800f2b8:	bf00      	nop
 800f2ba:	bf00      	nop
 800f2bc:	e7fd      	b.n	800f2ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f2be:	4b1e      	ldr	r3, [pc, #120]	@ (800f338 <xPortStartScheduler+0x138>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	021b      	lsls	r3, r3, #8
 800f2c4:	4a1c      	ldr	r2, [pc, #112]	@ (800f338 <xPortStartScheduler+0x138>)
 800f2c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f2c8:	4b1b      	ldr	r3, [pc, #108]	@ (800f338 <xPortStartScheduler+0x138>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f2d0:	4a19      	ldr	r2, [pc, #100]	@ (800f338 <xPortStartScheduler+0x138>)
 800f2d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	b2da      	uxtb	r2, r3
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f2dc:	4b17      	ldr	r3, [pc, #92]	@ (800f33c <xPortStartScheduler+0x13c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a16      	ldr	r2, [pc, #88]	@ (800f33c <xPortStartScheduler+0x13c>)
 800f2e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f2e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f2e8:	4b14      	ldr	r3, [pc, #80]	@ (800f33c <xPortStartScheduler+0x13c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a13      	ldr	r2, [pc, #76]	@ (800f33c <xPortStartScheduler+0x13c>)
 800f2ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f2f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f2f4:	f000 f8da 	bl	800f4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f2f8:	4b11      	ldr	r3, [pc, #68]	@ (800f340 <xPortStartScheduler+0x140>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f2fe:	f000 f8f9 	bl	800f4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f302:	4b10      	ldr	r3, [pc, #64]	@ (800f344 <xPortStartScheduler+0x144>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a0f      	ldr	r2, [pc, #60]	@ (800f344 <xPortStartScheduler+0x144>)
 800f308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f30c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f30e:	f7ff ff63 	bl	800f1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f312:	f7fe ff1d 	bl	800e150 <vTaskSwitchContext>
	prvTaskExitError();
 800f316:	f7ff ff19 	bl	800f14c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f31a:	2300      	movs	r3, #0
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	e000ed00 	.word	0xe000ed00
 800f328:	410fc271 	.word	0x410fc271
 800f32c:	410fc270 	.word	0x410fc270
 800f330:	e000e400 	.word	0xe000e400
 800f334:	20006158 	.word	0x20006158
 800f338:	2000615c 	.word	0x2000615c
 800f33c:	e000ed20 	.word	0xe000ed20
 800f340:	20000020 	.word	0x20000020
 800f344:	e000ef34 	.word	0xe000ef34

0800f348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	607b      	str	r3, [r7, #4]
}
 800f360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f362:	4b10      	ldr	r3, [pc, #64]	@ (800f3a4 <vPortEnterCritical+0x5c>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3301      	adds	r3, #1
 800f368:	4a0e      	ldr	r2, [pc, #56]	@ (800f3a4 <vPortEnterCritical+0x5c>)
 800f36a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f36c:	4b0d      	ldr	r3, [pc, #52]	@ (800f3a4 <vPortEnterCritical+0x5c>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d110      	bne.n	800f396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f374:	4b0c      	ldr	r3, [pc, #48]	@ (800f3a8 <vPortEnterCritical+0x60>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00b      	beq.n	800f396 <vPortEnterCritical+0x4e>
	__asm volatile
 800f37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	603b      	str	r3, [r7, #0]
}
 800f390:	bf00      	nop
 800f392:	bf00      	nop
 800f394:	e7fd      	b.n	800f392 <vPortEnterCritical+0x4a>
	}
}
 800f396:	bf00      	nop
 800f398:	370c      	adds	r7, #12
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	20000020 	.word	0x20000020
 800f3a8:	e000ed04 	.word	0xe000ed04

0800f3ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f3b2:	4b12      	ldr	r3, [pc, #72]	@ (800f3fc <vPortExitCritical+0x50>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10b      	bne.n	800f3d2 <vPortExitCritical+0x26>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	607b      	str	r3, [r7, #4]
}
 800f3cc:	bf00      	nop
 800f3ce:	bf00      	nop
 800f3d0:	e7fd      	b.n	800f3ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f3fc <vPortExitCritical+0x50>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	4a08      	ldr	r2, [pc, #32]	@ (800f3fc <vPortExitCritical+0x50>)
 800f3da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f3dc:	4b07      	ldr	r3, [pc, #28]	@ (800f3fc <vPortExitCritical+0x50>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d105      	bne.n	800f3f0 <vPortExitCritical+0x44>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	f383 8811 	msr	BASEPRI, r3
}
 800f3ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	20000020 	.word	0x20000020

0800f400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f400:	f3ef 8009 	mrs	r0, PSP
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	4b15      	ldr	r3, [pc, #84]	@ (800f460 <pxCurrentTCBConst>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	f01e 0f10 	tst.w	lr, #16
 800f410:	bf08      	it	eq
 800f412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41a:	6010      	str	r0, [r2, #0]
 800f41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f424:	f380 8811 	msr	BASEPRI, r0
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f7fe fe8e 	bl	800e150 <vTaskSwitchContext>
 800f434:	f04f 0000 	mov.w	r0, #0
 800f438:	f380 8811 	msr	BASEPRI, r0
 800f43c:	bc09      	pop	{r0, r3}
 800f43e:	6819      	ldr	r1, [r3, #0]
 800f440:	6808      	ldr	r0, [r1, #0]
 800f442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f446:	f01e 0f10 	tst.w	lr, #16
 800f44a:	bf08      	it	eq
 800f44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f450:	f380 8809 	msr	PSP, r0
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	f3af 8000 	nop.w

0800f460 <pxCurrentTCBConst>:
 800f460:	20005b2c 	.word	0x20005b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f464:	bf00      	nop
 800f466:	bf00      	nop

0800f468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	607b      	str	r3, [r7, #4]
}
 800f480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f482:	f7fe fdab 	bl	800dfdc <xTaskIncrementTick>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d003      	beq.n	800f494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f48c:	4b06      	ldr	r3, [pc, #24]	@ (800f4a8 <xPortSysTickHandler+0x40>)
 800f48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	2300      	movs	r3, #0
 800f496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	f383 8811 	msr	BASEPRI, r3
}
 800f49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f4a0:	bf00      	nop
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	e000ed04 	.word	0xe000ed04

0800f4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f4e0 <vPortSetupTimerInterrupt+0x34>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f4e4 <vPortSetupTimerInterrupt+0x38>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f4e8 <vPortSetupTimerInterrupt+0x3c>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a0a      	ldr	r2, [pc, #40]	@ (800f4ec <vPortSetupTimerInterrupt+0x40>)
 800f4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c6:	099b      	lsrs	r3, r3, #6
 800f4c8:	4a09      	ldr	r2, [pc, #36]	@ (800f4f0 <vPortSetupTimerInterrupt+0x44>)
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4ce:	4b04      	ldr	r3, [pc, #16]	@ (800f4e0 <vPortSetupTimerInterrupt+0x34>)
 800f4d0:	2207      	movs	r2, #7
 800f4d2:	601a      	str	r2, [r3, #0]
}
 800f4d4:	bf00      	nop
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	e000e010 	.word	0xe000e010
 800f4e4:	e000e018 	.word	0xe000e018
 800f4e8:	20000000 	.word	0x20000000
 800f4ec:	10624dd3 	.word	0x10624dd3
 800f4f0:	e000e014 	.word	0xe000e014

0800f4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f504 <vPortEnableVFP+0x10>
 800f4f8:	6801      	ldr	r1, [r0, #0]
 800f4fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f4fe:	6001      	str	r1, [r0, #0]
 800f500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f502:	bf00      	nop
 800f504:	e000ed88 	.word	0xe000ed88

0800f508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f50e:	f3ef 8305 	mrs	r3, IPSR
 800f512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2b0f      	cmp	r3, #15
 800f518:	d915      	bls.n	800f546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f51a:	4a18      	ldr	r2, [pc, #96]	@ (800f57c <vPortValidateInterruptPriority+0x74>)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f524:	4b16      	ldr	r3, [pc, #88]	@ (800f580 <vPortValidateInterruptPriority+0x78>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	7afa      	ldrb	r2, [r7, #11]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d20b      	bcs.n	800f546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	607b      	str	r3, [r7, #4]
}
 800f540:	bf00      	nop
 800f542:	bf00      	nop
 800f544:	e7fd      	b.n	800f542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f546:	4b0f      	ldr	r3, [pc, #60]	@ (800f584 <vPortValidateInterruptPriority+0x7c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f54e:	4b0e      	ldr	r3, [pc, #56]	@ (800f588 <vPortValidateInterruptPriority+0x80>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	429a      	cmp	r2, r3
 800f554:	d90b      	bls.n	800f56e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55a:	f383 8811 	msr	BASEPRI, r3
 800f55e:	f3bf 8f6f 	isb	sy
 800f562:	f3bf 8f4f 	dsb	sy
 800f566:	603b      	str	r3, [r7, #0]
}
 800f568:	bf00      	nop
 800f56a:	bf00      	nop
 800f56c:	e7fd      	b.n	800f56a <vPortValidateInterruptPriority+0x62>
	}
 800f56e:	bf00      	nop
 800f570:	3714      	adds	r7, #20
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	e000e3f0 	.word	0xe000e3f0
 800f580:	20006158 	.word	0x20006158
 800f584:	e000ed0c 	.word	0xe000ed0c
 800f588:	2000615c 	.word	0x2000615c

0800f58c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b08a      	sub	sp, #40	@ 0x28
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f594:	2300      	movs	r3, #0
 800f596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f598:	f7fe fc52 	bl	800de40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f59c:	4b5c      	ldr	r3, [pc, #368]	@ (800f710 <pvPortMalloc+0x184>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d101      	bne.n	800f5a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f5a4:	f000 f924 	bl	800f7f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f5a8:	4b5a      	ldr	r3, [pc, #360]	@ (800f714 <pvPortMalloc+0x188>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f040 8095 	bne.w	800f6e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d01e      	beq.n	800f5fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f5bc:	2208      	movs	r2, #8
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f003 0307 	and.w	r3, r3, #7
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d015      	beq.n	800f5fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f023 0307 	bic.w	r3, r3, #7
 800f5d4:	3308      	adds	r3, #8
 800f5d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f003 0307 	and.w	r3, r3, #7
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00b      	beq.n	800f5fa <pvPortMalloc+0x6e>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	617b      	str	r3, [r7, #20]
}
 800f5f4:	bf00      	nop
 800f5f6:	bf00      	nop
 800f5f8:	e7fd      	b.n	800f5f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d06f      	beq.n	800f6e0 <pvPortMalloc+0x154>
 800f600:	4b45      	ldr	r3, [pc, #276]	@ (800f718 <pvPortMalloc+0x18c>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	429a      	cmp	r2, r3
 800f608:	d86a      	bhi.n	800f6e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f60a:	4b44      	ldr	r3, [pc, #272]	@ (800f71c <pvPortMalloc+0x190>)
 800f60c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f60e:	4b43      	ldr	r3, [pc, #268]	@ (800f71c <pvPortMalloc+0x190>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f614:	e004      	b.n	800f620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	429a      	cmp	r2, r3
 800f628:	d903      	bls.n	800f632 <pvPortMalloc+0xa6>
 800f62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1f1      	bne.n	800f616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f632:	4b37      	ldr	r3, [pc, #220]	@ (800f710 <pvPortMalloc+0x184>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f638:	429a      	cmp	r2, r3
 800f63a:	d051      	beq.n	800f6e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2208      	movs	r2, #8
 800f642:	4413      	add	r3, r2
 800f644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	6a3b      	ldr	r3, [r7, #32]
 800f64c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f650:	685a      	ldr	r2, [r3, #4]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	1ad2      	subs	r2, r2, r3
 800f656:	2308      	movs	r3, #8
 800f658:	005b      	lsls	r3, r3, #1
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d920      	bls.n	800f6a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4413      	add	r3, r2
 800f664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	f003 0307 	and.w	r3, r3, #7
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00b      	beq.n	800f688 <pvPortMalloc+0xfc>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	613b      	str	r3, [r7, #16]
}
 800f682:	bf00      	nop
 800f684:	bf00      	nop
 800f686:	e7fd      	b.n	800f684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68a:	685a      	ldr	r2, [r3, #4]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	1ad2      	subs	r2, r2, r3
 800f690:	69bb      	ldr	r3, [r7, #24]
 800f692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f69a:	69b8      	ldr	r0, [r7, #24]
 800f69c:	f000 f90a 	bl	800f8b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f6a0:	4b1d      	ldr	r3, [pc, #116]	@ (800f718 <pvPortMalloc+0x18c>)
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	1ad3      	subs	r3, r2, r3
 800f6aa:	4a1b      	ldr	r2, [pc, #108]	@ (800f718 <pvPortMalloc+0x18c>)
 800f6ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f6ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f718 <pvPortMalloc+0x18c>)
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f720 <pvPortMalloc+0x194>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d203      	bcs.n	800f6c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f6ba:	4b17      	ldr	r3, [pc, #92]	@ (800f718 <pvPortMalloc+0x18c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4a18      	ldr	r2, [pc, #96]	@ (800f720 <pvPortMalloc+0x194>)
 800f6c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	4b13      	ldr	r3, [pc, #76]	@ (800f714 <pvPortMalloc+0x188>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	431a      	orrs	r2, r3
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f6d6:	4b13      	ldr	r3, [pc, #76]	@ (800f724 <pvPortMalloc+0x198>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	4a11      	ldr	r2, [pc, #68]	@ (800f724 <pvPortMalloc+0x198>)
 800f6de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6e0:	f7fe fbbc 	bl	800de5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	f003 0307 	and.w	r3, r3, #7
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00b      	beq.n	800f706 <pvPortMalloc+0x17a>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	60fb      	str	r3, [r7, #12]
}
 800f700:	bf00      	nop
 800f702:	bf00      	nop
 800f704:	e7fd      	b.n	800f702 <pvPortMalloc+0x176>
	return pvReturn;
 800f706:	69fb      	ldr	r3, [r7, #28]
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3728      	adds	r7, #40	@ 0x28
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	20009d68 	.word	0x20009d68
 800f714:	20009d7c 	.word	0x20009d7c
 800f718:	20009d6c 	.word	0x20009d6c
 800f71c:	20009d60 	.word	0x20009d60
 800f720:	20009d70 	.word	0x20009d70
 800f724:	20009d74 	.word	0x20009d74

0800f728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b086      	sub	sp, #24
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d04f      	beq.n	800f7da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f73a:	2308      	movs	r3, #8
 800f73c:	425b      	negs	r3, r3
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	4413      	add	r3, r2
 800f742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	685a      	ldr	r2, [r3, #4]
 800f74c:	4b25      	ldr	r3, [pc, #148]	@ (800f7e4 <vPortFree+0xbc>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4013      	ands	r3, r2
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10b      	bne.n	800f76e <vPortFree+0x46>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	60fb      	str	r3, [r7, #12]
}
 800f768:	bf00      	nop
 800f76a:	bf00      	nop
 800f76c:	e7fd      	b.n	800f76a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00b      	beq.n	800f78e <vPortFree+0x66>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	60bb      	str	r3, [r7, #8]
}
 800f788:	bf00      	nop
 800f78a:	bf00      	nop
 800f78c:	e7fd      	b.n	800f78a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	685a      	ldr	r2, [r3, #4]
 800f792:	4b14      	ldr	r3, [pc, #80]	@ (800f7e4 <vPortFree+0xbc>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	4013      	ands	r3, r2
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d01e      	beq.n	800f7da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d11a      	bne.n	800f7da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	685a      	ldr	r2, [r3, #4]
 800f7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f7e4 <vPortFree+0xbc>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	43db      	mvns	r3, r3
 800f7ae:	401a      	ands	r2, r3
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f7b4:	f7fe fb44 	bl	800de40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	685a      	ldr	r2, [r3, #4]
 800f7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f7e8 <vPortFree+0xc0>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	4a09      	ldr	r2, [pc, #36]	@ (800f7e8 <vPortFree+0xc0>)
 800f7c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f7c6:	6938      	ldr	r0, [r7, #16]
 800f7c8:	f000 f874 	bl	800f8b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f7cc:	4b07      	ldr	r3, [pc, #28]	@ (800f7ec <vPortFree+0xc4>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	4a06      	ldr	r2, [pc, #24]	@ (800f7ec <vPortFree+0xc4>)
 800f7d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f7d6:	f7fe fb41 	bl	800de5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f7da:	bf00      	nop
 800f7dc:	3718      	adds	r7, #24
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	20009d7c 	.word	0x20009d7c
 800f7e8:	20009d6c 	.word	0x20009d6c
 800f7ec:	20009d78 	.word	0x20009d78

0800f7f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f7f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f7fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f7fc:	4b27      	ldr	r3, [pc, #156]	@ (800f89c <prvHeapInit+0xac>)
 800f7fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f003 0307 	and.w	r3, r3, #7
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00c      	beq.n	800f824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3307      	adds	r3, #7
 800f80e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f023 0307 	bic.w	r3, r3, #7
 800f816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	4a1f      	ldr	r2, [pc, #124]	@ (800f89c <prvHeapInit+0xac>)
 800f820:	4413      	add	r3, r2
 800f822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f828:	4a1d      	ldr	r2, [pc, #116]	@ (800f8a0 <prvHeapInit+0xb0>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f82e:	4b1c      	ldr	r3, [pc, #112]	@ (800f8a0 <prvHeapInit+0xb0>)
 800f830:	2200      	movs	r2, #0
 800f832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	68ba      	ldr	r2, [r7, #8]
 800f838:	4413      	add	r3, r2
 800f83a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f83c:	2208      	movs	r2, #8
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	1a9b      	subs	r3, r3, r2
 800f842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f023 0307 	bic.w	r3, r3, #7
 800f84a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4a15      	ldr	r2, [pc, #84]	@ (800f8a4 <prvHeapInit+0xb4>)
 800f850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f852:	4b14      	ldr	r3, [pc, #80]	@ (800f8a4 <prvHeapInit+0xb4>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2200      	movs	r2, #0
 800f858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f85a:	4b12      	ldr	r3, [pc, #72]	@ (800f8a4 <prvHeapInit+0xb4>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2200      	movs	r2, #0
 800f860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	1ad2      	subs	r2, r2, r3
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f870:	4b0c      	ldr	r3, [pc, #48]	@ (800f8a4 <prvHeapInit+0xb4>)
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	4a0a      	ldr	r2, [pc, #40]	@ (800f8a8 <prvHeapInit+0xb8>)
 800f87e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	4a09      	ldr	r2, [pc, #36]	@ (800f8ac <prvHeapInit+0xbc>)
 800f886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f888:	4b09      	ldr	r3, [pc, #36]	@ (800f8b0 <prvHeapInit+0xc0>)
 800f88a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f88e:	601a      	str	r2, [r3, #0]
}
 800f890:	bf00      	nop
 800f892:	3714      	adds	r7, #20
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	20006160 	.word	0x20006160
 800f8a0:	20009d60 	.word	0x20009d60
 800f8a4:	20009d68 	.word	0x20009d68
 800f8a8:	20009d70 	.word	0x20009d70
 800f8ac:	20009d6c 	.word	0x20009d6c
 800f8b0:	20009d7c 	.word	0x20009d7c

0800f8b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f8bc:	4b28      	ldr	r3, [pc, #160]	@ (800f960 <prvInsertBlockIntoFreeList+0xac>)
 800f8be:	60fb      	str	r3, [r7, #12]
 800f8c0:	e002      	b.n	800f8c8 <prvInsertBlockIntoFreeList+0x14>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d8f7      	bhi.n	800f8c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	68ba      	ldr	r2, [r7, #8]
 800f8dc:	4413      	add	r3, r2
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d108      	bne.n	800f8f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	441a      	add	r2, r3
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	441a      	add	r2, r3
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	429a      	cmp	r2, r3
 800f908:	d118      	bne.n	800f93c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	4b15      	ldr	r3, [pc, #84]	@ (800f964 <prvInsertBlockIntoFreeList+0xb0>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	429a      	cmp	r2, r3
 800f914:	d00d      	beq.n	800f932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	441a      	add	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	e008      	b.n	800f944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f932:	4b0c      	ldr	r3, [pc, #48]	@ (800f964 <prvInsertBlockIntoFreeList+0xb0>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	601a      	str	r2, [r3, #0]
 800f93a:	e003      	b.n	800f944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f944:	68fa      	ldr	r2, [r7, #12]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d002      	beq.n	800f952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f952:	bf00      	nop
 800f954:	3714      	adds	r7, #20
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	20009d60 	.word	0x20009d60
 800f964:	20009d68 	.word	0x20009d68

0800f968 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	330c      	adds	r3, #12
 800f978:	461a      	mov	r2, r3
 800f97a:	6839      	ldr	r1, [r7, #0]
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f002 f981 	bl	8011c84 <tcpip_send_msg_wait_sem>
 800f982:	4603      	mov	r3, r0
 800f984:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d103      	bne.n	800f996 <netconn_apimsg+0x2e>
    return apimsg->err;
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f994:	e001      	b.n	800f99a <netconn_apimsg+0x32>
  }
  return err;
 800f996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
	...

0800f9a4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08c      	sub	sp, #48	@ 0x30
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	603a      	str	r2, [r7, #0]
 800f9ae:	71fb      	strb	r3, [r7, #7]
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800f9b4:	79fb      	ldrb	r3, [r7, #7]
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 fd73 	bl	80104a4 <netconn_alloc>
 800f9be:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800f9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d054      	beq.n	800fa70 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f9c6:	79bb      	ldrb	r3, [r7, #6]
 800f9c8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9cc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f9ce:	f107 0308 	add.w	r3, r7, #8
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	4829      	ldr	r0, [pc, #164]	@ (800fa7c <netconn_new_with_proto_and_callback+0xd8>)
 800f9d6:	f7ff ffc7 	bl	800f968 <netconn_apimsg>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800f9e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d043      	beq.n	800fa70 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d005      	beq.n	800f9fc <netconn_new_with_proto_and_callback+0x58>
 800f9f0:	4b23      	ldr	r3, [pc, #140]	@ (800fa80 <netconn_new_with_proto_and_callback+0xdc>)
 800f9f2:	22a3      	movs	r2, #163	@ 0xa3
 800f9f4:	4923      	ldr	r1, [pc, #140]	@ (800fa84 <netconn_new_with_proto_and_callback+0xe0>)
 800f9f6:	4824      	ldr	r0, [pc, #144]	@ (800fa88 <netconn_new_with_proto_and_callback+0xe4>)
 800f9f8:	f00e fcb4 	bl	801e364 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9fe:	3310      	adds	r3, #16
 800fa00:	4618      	mov	r0, r3
 800fa02:	f00d fe2f 	bl	801d664 <sys_mbox_valid>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d105      	bne.n	800fa18 <netconn_new_with_proto_and_callback+0x74>
 800fa0c:	4b1c      	ldr	r3, [pc, #112]	@ (800fa80 <netconn_new_with_proto_and_callback+0xdc>)
 800fa0e:	22a4      	movs	r2, #164	@ 0xa4
 800fa10:	491e      	ldr	r1, [pc, #120]	@ (800fa8c <netconn_new_with_proto_and_callback+0xe8>)
 800fa12:	481d      	ldr	r0, [pc, #116]	@ (800fa88 <netconn_new_with_proto_and_callback+0xe4>)
 800fa14:	f00e fca6 	bl	801e364 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800fa18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa1a:	3314      	adds	r3, #20
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f00d fe21 	bl	801d664 <sys_mbox_valid>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d005      	beq.n	800fa34 <netconn_new_with_proto_and_callback+0x90>
 800fa28:	4b15      	ldr	r3, [pc, #84]	@ (800fa80 <netconn_new_with_proto_and_callback+0xdc>)
 800fa2a:	22a6      	movs	r2, #166	@ 0xa6
 800fa2c:	4918      	ldr	r1, [pc, #96]	@ (800fa90 <netconn_new_with_proto_and_callback+0xec>)
 800fa2e:	4816      	ldr	r0, [pc, #88]	@ (800fa88 <netconn_new_with_proto_and_callback+0xe4>)
 800fa30:	f00e fc98 	bl	801e364 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800fa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa36:	330c      	adds	r3, #12
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f00d fea1 	bl	801d780 <sys_sem_valid>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d105      	bne.n	800fa50 <netconn_new_with_proto_and_callback+0xac>
 800fa44:	4b0e      	ldr	r3, [pc, #56]	@ (800fa80 <netconn_new_with_proto_and_callback+0xdc>)
 800fa46:	22a9      	movs	r2, #169	@ 0xa9
 800fa48:	4912      	ldr	r1, [pc, #72]	@ (800fa94 <netconn_new_with_proto_and_callback+0xf0>)
 800fa4a:	480f      	ldr	r0, [pc, #60]	@ (800fa88 <netconn_new_with_proto_and_callback+0xe4>)
 800fa4c:	f00e fc8a 	bl	801e364 <iprintf>
      sys_sem_free(&conn->op_completed);
 800fa50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa52:	330c      	adds	r3, #12
 800fa54:	4618      	mov	r0, r3
 800fa56:	f00d fe86 	bl	801d766 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800fa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa5c:	3310      	adds	r3, #16
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f00d fd8c 	bl	801d57c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800fa64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa66:	2007      	movs	r0, #7
 800fa68:	f003 f984 	bl	8012d74 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	e000      	b.n	800fa72 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800fa70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3730      	adds	r7, #48	@ 0x30
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	08010479 	.word	0x08010479
 800fa80:	080209c0 	.word	0x080209c0
 800fa84:	080209f4 	.word	0x080209f4
 800fa88:	08020a18 	.word	0x08020a18
 800fa8c:	08020a40 	.word	0x08020a40
 800fa90:	08020a58 	.word	0x08020a58
 800fa94:	08020a7c 	.word	0x08020a7c

0800fa98 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b08c      	sub	sp, #48	@ 0x30
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <netconn_prepare_delete+0x12>
    return ERR_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	e014      	b.n	800fad4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800faae:	2329      	movs	r3, #41	@ 0x29
 800fab0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800fab2:	f107 030c 	add.w	r3, r7, #12
 800fab6:	4619      	mov	r1, r3
 800fab8:	4808      	ldr	r0, [pc, #32]	@ (800fadc <netconn_prepare_delete+0x44>)
 800faba:	f7ff ff55 	bl	800f968 <netconn_apimsg>
 800fabe:	4603      	mov	r3, r0
 800fac0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800fac4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d002      	beq.n	800fad2 <netconn_prepare_delete+0x3a>
    return err;
 800facc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800fad0:	e000      	b.n	800fad4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3730      	adds	r7, #48	@ 0x30
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	080109e5 	.word	0x080109e5

0800fae0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d101      	bne.n	800faf2 <netconn_delete+0x12>
    return ERR_OK;
 800faee:	2300      	movs	r3, #0
 800faf0:	e00d      	b.n	800fb0e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7ff ffd0 	bl	800fa98 <netconn_prepare_delete>
 800faf8:	4603      	mov	r3, r0
 800fafa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800fafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d102      	bne.n	800fb0a <netconn_delete+0x2a>
    netconn_free(conn);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 fd3b 	bl	8010580 <netconn_free>
  }
  return err;
 800fb0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
	...

0800fb18 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08c      	sub	sp, #48	@ 0x30
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d109      	bne.n	800fb3c <netconn_send+0x24>
 800fb28:	4b0e      	ldr	r3, [pc, #56]	@ (800fb64 <netconn_send+0x4c>)
 800fb2a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800fb2e:	490e      	ldr	r1, [pc, #56]	@ (800fb68 <netconn_send+0x50>)
 800fb30:	480e      	ldr	r0, [pc, #56]	@ (800fb6c <netconn_send+0x54>)
 800fb32:	f00e fc17 	bl	801e364 <iprintf>
 800fb36:	f06f 030f 	mvn.w	r3, #15
 800fb3a:	e00e      	b.n	800fb5a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800fb44:	f107 030c 	add.w	r3, r7, #12
 800fb48:	4619      	mov	r1, r3
 800fb4a:	4809      	ldr	r0, [pc, #36]	@ (800fb70 <netconn_send+0x58>)
 800fb4c:	f7ff ff0c 	bl	800f968 <netconn_apimsg>
 800fb50:	4603      	mov	r3, r0
 800fb52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fb56:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3730      	adds	r7, #48	@ 0x30
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	080209c0 	.word	0x080209c0
 800fb68:	08020c7c 	.word	0x08020c7c
 800fb6c:	08020a18 	.word	0x08020a18
 800fb70:	08010bad 	.word	0x08010bad

0800fb74 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b088      	sub	sp, #32
 800fb78:	af02      	add	r7, sp, #8
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800fb8a:	78fa      	ldrb	r2, [r7, #3]
 800fb8c:	f107 0110 	add.w	r1, r7, #16
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	4613      	mov	r3, r2
 800fb96:	2201      	movs	r2, #1
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f000 f805 	bl	800fba8 <netconn_write_vectors_partly>
 800fb9e:	4603      	mov	r3, r0
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3718      	adds	r7, #24
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b092      	sub	sp, #72	@ 0x48
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	80fb      	strh	r3, [r7, #6]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d109      	bne.n	800fbd8 <netconn_write_vectors_partly+0x30>
 800fbc4:	4b4e      	ldr	r3, [pc, #312]	@ (800fd00 <netconn_write_vectors_partly+0x158>)
 800fbc6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800fbca:	494e      	ldr	r1, [pc, #312]	@ (800fd04 <netconn_write_vectors_partly+0x15c>)
 800fbcc:	484e      	ldr	r0, [pc, #312]	@ (800fd08 <netconn_write_vectors_partly+0x160>)
 800fbce:	f00e fbc9 	bl	801e364 <iprintf>
 800fbd2:	f06f 030f 	mvn.w	r3, #15
 800fbd6:	e08e      	b.n	800fcf6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fbe0:	2b10      	cmp	r3, #16
 800fbe2:	d009      	beq.n	800fbf8 <netconn_write_vectors_partly+0x50>
 800fbe4:	4b46      	ldr	r3, [pc, #280]	@ (800fd00 <netconn_write_vectors_partly+0x158>)
 800fbe6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800fbea:	4948      	ldr	r1, [pc, #288]	@ (800fd0c <netconn_write_vectors_partly+0x164>)
 800fbec:	4846      	ldr	r0, [pc, #280]	@ (800fd08 <netconn_write_vectors_partly+0x160>)
 800fbee:	f00e fbb9 	bl	801e364 <iprintf>
 800fbf2:	f06f 0305 	mvn.w	r3, #5
 800fbf6:	e07e      	b.n	800fcf6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	7f1b      	ldrb	r3, [r3, #28]
 800fbfc:	f003 0302 	and.w	r3, r3, #2
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d104      	bne.n	800fc0e <netconn_write_vectors_partly+0x66>
 800fc04:	797b      	ldrb	r3, [r7, #5]
 800fc06:	f003 0304 	and.w	r3, r3, #4
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d001      	beq.n	800fc12 <netconn_write_vectors_partly+0x6a>
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e000      	b.n	800fc14 <netconn_write_vectors_partly+0x6c>
 800fc12:	2300      	movs	r3, #0
 800fc14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800fc18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d005      	beq.n	800fc2c <netconn_write_vectors_partly+0x84>
 800fc20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d102      	bne.n	800fc2c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800fc26:	f06f 0305 	mvn.w	r3, #5
 800fc2a:	e064      	b.n	800fcf6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800fc30:	2300      	movs	r3, #0
 800fc32:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc34:	e015      	b.n	800fc62 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800fc36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc38:	00db      	lsls	r3, r3, #3
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc42:	4413      	add	r3, r2
 800fc44:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800fc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc48:	00db      	lsls	r3, r3, #3
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d202      	bcs.n	800fc5c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800fc56:	f06f 0305 	mvn.w	r3, #5
 800fc5a:	e04c      	b.n	800fcf6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800fc5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc5e:	3301      	adds	r3, #1
 800fc60:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc62:	88fb      	ldrh	r3, [r7, #6]
 800fc64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc66:	429a      	cmp	r2, r3
 800fc68:	dbe5      	blt.n	800fc36 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800fc6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	e040      	b.n	800fcf6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800fc74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	da0a      	bge.n	800fc90 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800fc7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d102      	bne.n	800fc86 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800fc80:	f06f 0305 	mvn.w	r3, #5
 800fc84:	e037      	b.n	800fcf6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800fc86:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fc8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800fc98:	88fb      	ldrh	r3, [r7, #6]
 800fc9a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800fca0:	797b      	ldrb	r3, [r7, #5]
 800fca2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800fca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800fcae:	f107 0314 	add.w	r3, r7, #20
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4816      	ldr	r0, [pc, #88]	@ (800fd10 <netconn_write_vectors_partly+0x168>)
 800fcb6:	f7ff fe57 	bl	800f968 <netconn_apimsg>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800fcc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d114      	bne.n	800fcf2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800fcc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d002      	beq.n	800fcd4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800fcce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcd2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800fcd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d10a      	bne.n	800fcf2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800fcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d006      	beq.n	800fcf2 <netconn_write_vectors_partly+0x14a>
 800fce4:	4b06      	ldr	r3, [pc, #24]	@ (800fd00 <netconn_write_vectors_partly+0x158>)
 800fce6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fcea:	490a      	ldr	r1, [pc, #40]	@ (800fd14 <netconn_write_vectors_partly+0x16c>)
 800fcec:	4806      	ldr	r0, [pc, #24]	@ (800fd08 <netconn_write_vectors_partly+0x160>)
 800fcee:	f00e fb39 	bl	801e364 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800fcf2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3748      	adds	r7, #72	@ 0x48
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	080209c0 	.word	0x080209c0
 800fd04:	08020c98 	.word	0x08020c98
 800fd08:	08020a18 	.word	0x08020a18
 800fd0c:	08020cb4 	.word	0x08020cb4
 800fd10:	08010fe1 	.word	0x08010fe1
 800fd14:	08020cd8 	.word	0x08020cd8

0800fd18 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <netconn_err+0x12>
    return ERR_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	e00d      	b.n	800fd46 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800fd2a:	f00d fda5 	bl	801d878 <sys_arch_protect>
 800fd2e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	7a1b      	ldrb	r3, [r3, #8]
 800fd34:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f00d fda9 	bl	801d894 <sys_arch_unprotect>
  return err;
 800fd42:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
	...

0800fd50 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	4603      	mov	r3, r0
 800fd58:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800fd5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd5e:	f113 0f0d 	cmn.w	r3, #13
 800fd62:	d009      	beq.n	800fd78 <lwip_netconn_err_to_msg+0x28>
 800fd64:	f113 0f0d 	cmn.w	r3, #13
 800fd68:	dc0c      	bgt.n	800fd84 <lwip_netconn_err_to_msg+0x34>
 800fd6a:	f113 0f0f 	cmn.w	r3, #15
 800fd6e:	d007      	beq.n	800fd80 <lwip_netconn_err_to_msg+0x30>
 800fd70:	f113 0f0e 	cmn.w	r3, #14
 800fd74:	d002      	beq.n	800fd7c <lwip_netconn_err_to_msg+0x2c>
 800fd76:	e005      	b.n	800fd84 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800fd78:	4b0a      	ldr	r3, [pc, #40]	@ (800fda4 <lwip_netconn_err_to_msg+0x54>)
 800fd7a:	e00e      	b.n	800fd9a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800fd7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fda8 <lwip_netconn_err_to_msg+0x58>)
 800fd7e:	e00c      	b.n	800fd9a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800fd80:	4b0a      	ldr	r3, [pc, #40]	@ (800fdac <lwip_netconn_err_to_msg+0x5c>)
 800fd82:	e00a      	b.n	800fd9a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800fd84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d005      	beq.n	800fd98 <lwip_netconn_err_to_msg+0x48>
 800fd8c:	4b08      	ldr	r3, [pc, #32]	@ (800fdb0 <lwip_netconn_err_to_msg+0x60>)
 800fd8e:	227d      	movs	r2, #125	@ 0x7d
 800fd90:	4908      	ldr	r1, [pc, #32]	@ (800fdb4 <lwip_netconn_err_to_msg+0x64>)
 800fd92:	4809      	ldr	r0, [pc, #36]	@ (800fdb8 <lwip_netconn_err_to_msg+0x68>)
 800fd94:	f00e fae6 	bl	801e364 <iprintf>
      return NULL;
 800fd98:	2300      	movs	r3, #0
  }
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3708      	adds	r7, #8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	08024554 	.word	0x08024554
 800fda8:	08024555 	.word	0x08024555
 800fdac:	08024556 	.word	0x08024556
 800fdb0:	08020d60 	.word	0x08020d60
 800fdb4:	08020d94 	.word	0x08020d94
 800fdb8:	08020da4 	.word	0x08020da4

0800fdbc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d105      	bne.n	800fdd8 <lwip_netconn_is_err_msg+0x1c>
 800fdcc:	4b12      	ldr	r3, [pc, #72]	@ (800fe18 <lwip_netconn_is_err_msg+0x5c>)
 800fdce:	2285      	movs	r2, #133	@ 0x85
 800fdd0:	4912      	ldr	r1, [pc, #72]	@ (800fe1c <lwip_netconn_is_err_msg+0x60>)
 800fdd2:	4813      	ldr	r0, [pc, #76]	@ (800fe20 <lwip_netconn_is_err_msg+0x64>)
 800fdd4:	f00e fac6 	bl	801e364 <iprintf>

  if (msg == &netconn_aborted) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4a12      	ldr	r2, [pc, #72]	@ (800fe24 <lwip_netconn_is_err_msg+0x68>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d104      	bne.n	800fdea <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	22f3      	movs	r2, #243	@ 0xf3
 800fde4:	701a      	strb	r2, [r3, #0]
    return 1;
 800fde6:	2301      	movs	r3, #1
 800fde8:	e012      	b.n	800fe10 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a0e      	ldr	r2, [pc, #56]	@ (800fe28 <lwip_netconn_is_err_msg+0x6c>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d104      	bne.n	800fdfc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	22f2      	movs	r2, #242	@ 0xf2
 800fdf6:	701a      	strb	r2, [r3, #0]
    return 1;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e009      	b.n	800fe10 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4a0b      	ldr	r2, [pc, #44]	@ (800fe2c <lwip_netconn_is_err_msg+0x70>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d104      	bne.n	800fe0e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	22f1      	movs	r2, #241	@ 0xf1
 800fe08:	701a      	strb	r2, [r3, #0]
    return 1;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e000      	b.n	800fe10 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	08020d60 	.word	0x08020d60
 800fe1c:	08020dcc 	.word	0x08020dcc
 800fe20:	08020da4 	.word	0x08020da4
 800fe24:	08024554 	.word	0x08024554
 800fe28:	08024555 	.word	0x08024555
 800fe2c:	08024556 	.word	0x08024556

0800fe30 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b088      	sub	sp, #32
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d105      	bne.n	800fe50 <recv_udp+0x20>
 800fe44:	4b34      	ldr	r3, [pc, #208]	@ (800ff18 <recv_udp+0xe8>)
 800fe46:	22e5      	movs	r2, #229	@ 0xe5
 800fe48:	4934      	ldr	r1, [pc, #208]	@ (800ff1c <recv_udp+0xec>)
 800fe4a:	4835      	ldr	r0, [pc, #212]	@ (800ff20 <recv_udp+0xf0>)
 800fe4c:	f00e fa8a 	bl	801e364 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d105      	bne.n	800fe62 <recv_udp+0x32>
 800fe56:	4b30      	ldr	r3, [pc, #192]	@ (800ff18 <recv_udp+0xe8>)
 800fe58:	22e6      	movs	r2, #230	@ 0xe6
 800fe5a:	4932      	ldr	r1, [pc, #200]	@ (800ff24 <recv_udp+0xf4>)
 800fe5c:	4830      	ldr	r0, [pc, #192]	@ (800ff20 <recv_udp+0xf0>)
 800fe5e:	f00e fa81 	bl	801e364 <iprintf>
  conn = (struct netconn *)arg;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d103      	bne.n	800fe74 <recv_udp+0x44>
    pbuf_free(p);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f003 fe25 	bl	8013abc <pbuf_free>
    return;
 800fe72:	e04d      	b.n	800ff10 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d005      	beq.n	800fe8a <recv_udp+0x5a>
 800fe7e:	4b26      	ldr	r3, [pc, #152]	@ (800ff18 <recv_udp+0xe8>)
 800fe80:	22ee      	movs	r2, #238	@ 0xee
 800fe82:	4929      	ldr	r1, [pc, #164]	@ (800ff28 <recv_udp+0xf8>)
 800fe84:	4826      	ldr	r0, [pc, #152]	@ (800ff20 <recv_udp+0xf0>)
 800fe86:	f00e fa6d 	bl	801e364 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	3310      	adds	r3, #16
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f00d fbe8 	bl	801d664 <sys_mbox_valid>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d103      	bne.n	800fea2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f003 fe0e 	bl	8013abc <pbuf_free>
    return;
 800fea0:	e036      	b.n	800ff10 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800fea2:	2006      	movs	r0, #6
 800fea4:	f002 fef0 	bl	8012c88 <memp_malloc>
 800fea8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d103      	bne.n	800feb8 <recv_udp+0x88>
    pbuf_free(p);
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f003 fe03 	bl	8013abc <pbuf_free>
    return;
 800feb6:	e02b      	b.n	800ff10 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d002      	beq.n	800fed0 <recv_udp+0xa0>
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	e000      	b.n	800fed2 <recv_udp+0xa2>
 800fed0:	2300      	movs	r3, #0
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800feda:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	891b      	ldrh	r3, [r3, #8]
 800fee0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	3310      	adds	r3, #16
 800fee6:	69b9      	ldr	r1, [r7, #24]
 800fee8:	4618      	mov	r0, r3
 800feea:	f00d fb59 	bl	801d5a0 <sys_mbox_trypost>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d003      	beq.n	800fefc <recv_udp+0xcc>
    netbuf_delete(buf);
 800fef4:	69b8      	ldr	r0, [r7, #24]
 800fef6:	f001 f91d 	bl	8011134 <netbuf_delete>
    return;
 800fefa:	e009      	b.n	800ff10 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d005      	beq.n	800ff10 <recv_udp+0xe0>
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff08:	8afa      	ldrh	r2, [r7, #22]
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	69f8      	ldr	r0, [r7, #28]
 800ff0e:	4798      	blx	r3
  }
}
 800ff10:	3720      	adds	r7, #32
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	08020d60 	.word	0x08020d60
 800ff1c:	08020dd8 	.word	0x08020dd8
 800ff20:	08020da4 	.word	0x08020da4
 800ff24:	08020dfc 	.word	0x08020dfc
 800ff28:	08020e1c 	.word	0x08020e1c

0800ff2c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b088      	sub	sp, #32
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	607a      	str	r2, [r7, #4]
 800ff38:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <recv_tcp+0x22>
 800ff40:	4b36      	ldr	r3, [pc, #216]	@ (801001c <recv_tcp+0xf0>)
 800ff42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ff46:	4936      	ldr	r1, [pc, #216]	@ (8010020 <recv_tcp+0xf4>)
 800ff48:	4836      	ldr	r0, [pc, #216]	@ (8010024 <recv_tcp+0xf8>)
 800ff4a:	f00e fa0b 	bl	801e364 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d106      	bne.n	800ff62 <recv_tcp+0x36>
 800ff54:	4b31      	ldr	r3, [pc, #196]	@ (801001c <recv_tcp+0xf0>)
 800ff56:	f240 122d 	movw	r2, #301	@ 0x12d
 800ff5a:	4933      	ldr	r1, [pc, #204]	@ (8010028 <recv_tcp+0xfc>)
 800ff5c:	4831      	ldr	r0, [pc, #196]	@ (8010024 <recv_tcp+0xf8>)
 800ff5e:	f00e fa01 	bl	801e364 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ff62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d006      	beq.n	800ff78 <recv_tcp+0x4c>
 800ff6a:	4b2c      	ldr	r3, [pc, #176]	@ (801001c <recv_tcp+0xf0>)
 800ff6c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800ff70:	492e      	ldr	r1, [pc, #184]	@ (801002c <recv_tcp+0x100>)
 800ff72:	482c      	ldr	r0, [pc, #176]	@ (8010024 <recv_tcp+0xf8>)
 800ff74:	f00e f9f6 	bl	801e364 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d102      	bne.n	800ff88 <recv_tcp+0x5c>
    return ERR_VAL;
 800ff82:	f06f 0305 	mvn.w	r3, #5
 800ff86:	e045      	b.n	8010014 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d006      	beq.n	800ffa0 <recv_tcp+0x74>
 800ff92:	4b22      	ldr	r3, [pc, #136]	@ (801001c <recv_tcp+0xf0>)
 800ff94:	f240 1235 	movw	r2, #309	@ 0x135
 800ff98:	4925      	ldr	r1, [pc, #148]	@ (8010030 <recv_tcp+0x104>)
 800ff9a:	4822      	ldr	r0, [pc, #136]	@ (8010024 <recv_tcp+0xf8>)
 800ff9c:	f00e f9e2 	bl	801e364 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	3310      	adds	r3, #16
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f00d fb5d 	bl	801d664 <sys_mbox_valid>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10d      	bne.n	800ffcc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d008      	beq.n	800ffc8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	891b      	ldrh	r3, [r3, #8]
 800ffba:	4619      	mov	r1, r3
 800ffbc:	68b8      	ldr	r0, [r7, #8]
 800ffbe:	f004 fd3d 	bl	8014a3c <tcp_recved>
      pbuf_free(p);
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f003 fd7a 	bl	8013abc <pbuf_free>
    }
    return ERR_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	e023      	b.n	8010014 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d005      	beq.n	800ffde <recv_tcp+0xb2>
    msg = p;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	891b      	ldrh	r3, [r3, #8]
 800ffda:	83fb      	strh	r3, [r7, #30]
 800ffdc:	e003      	b.n	800ffe6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ffde:	4b15      	ldr	r3, [pc, #84]	@ (8010034 <recv_tcp+0x108>)
 800ffe0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	3310      	adds	r3, #16
 800ffea:	69b9      	ldr	r1, [r7, #24]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f00d fad7 	bl	801d5a0 <sys_mbox_trypost>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d002      	beq.n	800fffe <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800fff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fffc:	e00a      	b.n	8010014 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010002:	2b00      	cmp	r3, #0
 8010004:	d005      	beq.n	8010012 <recv_tcp+0xe6>
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801000a:	8bfa      	ldrh	r2, [r7, #30]
 801000c:	2100      	movs	r1, #0
 801000e:	6978      	ldr	r0, [r7, #20]
 8010010:	4798      	blx	r3
  }

  return ERR_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3720      	adds	r7, #32
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	08020d60 	.word	0x08020d60
 8010020:	08020e3c 	.word	0x08020e3c
 8010024:	08020da4 	.word	0x08020da4
 8010028:	08020e60 	.word	0x08020e60
 801002c:	08020e80 	.word	0x08020e80
 8010030:	08020e98 	.word	0x08020e98
 8010034:	08024556 	.word	0x08024556

08010038 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d106      	bne.n	801005a <poll_tcp+0x22>
 801004c:	4b29      	ldr	r3, [pc, #164]	@ (80100f4 <poll_tcp+0xbc>)
 801004e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8010052:	4929      	ldr	r1, [pc, #164]	@ (80100f8 <poll_tcp+0xc0>)
 8010054:	4829      	ldr	r0, [pc, #164]	@ (80100fc <poll_tcp+0xc4>)
 8010056:	f00e f985 	bl	801e364 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	785b      	ldrb	r3, [r3, #1]
 801005e:	2b01      	cmp	r3, #1
 8010060:	d104      	bne.n	801006c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010062:	2101      	movs	r1, #1
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	f000 fdef 	bl	8010c48 <lwip_netconn_do_writemore>
 801006a:	e016      	b.n	801009a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	785b      	ldrb	r3, [r3, #1]
 8010070:	2b04      	cmp	r3, #4
 8010072:	d112      	bne.n	801009a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6a1b      	ldr	r3, [r3, #32]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00a      	beq.n	8010092 <poll_tcp+0x5a>
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	6a1b      	ldr	r3, [r3, #32]
 8010080:	7a5b      	ldrb	r3, [r3, #9]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d005      	beq.n	8010092 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	7a5a      	ldrb	r2, [r3, #9]
 801008c:	3a01      	subs	r2, #1
 801008e:	b2d2      	uxtb	r2, r2
 8010090:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010092:	2101      	movs	r1, #1
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f000 fb3b 	bl	8010710 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	7f1b      	ldrb	r3, [r3, #28]
 801009e:	f003 0310 	and.w	r3, r3, #16
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d021      	beq.n	80100ea <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d01d      	beq.n	80100ea <poll_tcp+0xb2>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80100b6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80100ba:	d316      	bcc.n	80100ea <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80100c4:	2b04      	cmp	r3, #4
 80100c6:	d810      	bhi.n	80100ea <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	7f1b      	ldrb	r3, [r3, #28]
 80100cc:	f023 0310 	bic.w	r3, r3, #16
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d005      	beq.n	80100ea <poll_tcp+0xb2>
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e2:	2200      	movs	r2, #0
 80100e4:	2102      	movs	r1, #2
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3710      	adds	r7, #16
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	08020d60 	.word	0x08020d60
 80100f8:	08020eb8 	.word	0x08020eb8
 80100fc:	08020da4 	.word	0x08020da4

08010100 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	4613      	mov	r3, r2
 801010c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d106      	bne.n	8010126 <sent_tcp+0x26>
 8010118:	4b20      	ldr	r3, [pc, #128]	@ (801019c <sent_tcp+0x9c>)
 801011a:	f240 1293 	movw	r2, #403	@ 0x193
 801011e:	4920      	ldr	r1, [pc, #128]	@ (80101a0 <sent_tcp+0xa0>)
 8010120:	4820      	ldr	r0, [pc, #128]	@ (80101a4 <sent_tcp+0xa4>)
 8010122:	f00e f91f 	bl	801e364 <iprintf>

  if (conn) {
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d032      	beq.n	8010192 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	785b      	ldrb	r3, [r3, #1]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d104      	bne.n	801013e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010134:	2101      	movs	r1, #1
 8010136:	6978      	ldr	r0, [r7, #20]
 8010138:	f000 fd86 	bl	8010c48 <lwip_netconn_do_writemore>
 801013c:	e007      	b.n	801014e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	785b      	ldrb	r3, [r3, #1]
 8010142:	2b04      	cmp	r3, #4
 8010144:	d103      	bne.n	801014e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010146:	2101      	movs	r1, #1
 8010148:	6978      	ldr	r0, [r7, #20]
 801014a:	f000 fae1 	bl	8010710 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d01d      	beq.n	8010192 <sent_tcp+0x92>
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801015e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010162:	d316      	bcc.n	8010192 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801016c:	2b04      	cmp	r3, #4
 801016e:	d810      	bhi.n	8010192 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	7f1b      	ldrb	r3, [r3, #28]
 8010174:	f023 0310 	bic.w	r3, r3, #16
 8010178:	b2da      	uxtb	r2, r3
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010182:	2b00      	cmp	r3, #0
 8010184:	d005      	beq.n	8010192 <sent_tcp+0x92>
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801018a:	88fa      	ldrh	r2, [r7, #6]
 801018c:	2102      	movs	r1, #2
 801018e:	6978      	ldr	r0, [r7, #20]
 8010190:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010192:	2300      	movs	r3, #0
}
 8010194:	4618      	mov	r0, r3
 8010196:	3718      	adds	r7, #24
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}
 801019c:	08020d60 	.word	0x08020d60
 80101a0:	08020eb8 	.word	0x08020eb8
 80101a4:	08020da4 	.word	0x08020da4

080101a8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b088      	sub	sp, #32
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	460b      	mov	r3, r1
 80101b2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d106      	bne.n	80101cc <err_tcp+0x24>
 80101be:	4b5f      	ldr	r3, [pc, #380]	@ (801033c <err_tcp+0x194>)
 80101c0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80101c4:	495e      	ldr	r1, [pc, #376]	@ (8010340 <err_tcp+0x198>)
 80101c6:	485f      	ldr	r0, [pc, #380]	@ (8010344 <err_tcp+0x19c>)
 80101c8:	f00e f8cc 	bl	801e364 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80101cc:	f00d fb54 	bl	801d878 <sys_arch_protect>
 80101d0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	2200      	movs	r2, #0
 80101d6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	78fa      	ldrb	r2, [r7, #3]
 80101dc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	7f1b      	ldrb	r3, [r3, #28]
 80101e2:	f043 0301 	orr.w	r3, r3, #1
 80101e6:	b2da      	uxtb	r2, r3
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	785b      	ldrb	r3, [r3, #1]
 80101f0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	2200      	movs	r2, #0
 80101f6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80101f8:	69b8      	ldr	r0, [r7, #24]
 80101fa:	f00d fb4b 	bl	801d894 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010202:	2b00      	cmp	r3, #0
 8010204:	d005      	beq.n	8010212 <err_tcp+0x6a>
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801020a:	2200      	movs	r2, #0
 801020c:	2104      	movs	r1, #4
 801020e:	69f8      	ldr	r0, [r7, #28]
 8010210:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010216:	2b00      	cmp	r3, #0
 8010218:	d005      	beq.n	8010226 <err_tcp+0x7e>
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801021e:	2200      	movs	r2, #0
 8010220:	2100      	movs	r1, #0
 8010222:	69f8      	ldr	r0, [r7, #28]
 8010224:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801022a:	2b00      	cmp	r3, #0
 801022c:	d005      	beq.n	801023a <err_tcp+0x92>
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010232:	2200      	movs	r2, #0
 8010234:	2102      	movs	r1, #2
 8010236:	69f8      	ldr	r0, [r7, #28]
 8010238:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801023a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801023e:	4618      	mov	r0, r3
 8010240:	f7ff fd86 	bl	800fd50 <lwip_netconn_err_to_msg>
 8010244:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	3310      	adds	r3, #16
 801024a:	4618      	mov	r0, r3
 801024c:	f00d fa0a 	bl	801d664 <sys_mbox_valid>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d005      	beq.n	8010262 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	3310      	adds	r3, #16
 801025a:	6939      	ldr	r1, [r7, #16]
 801025c:	4618      	mov	r0, r3
 801025e:	f00d f99f 	bl	801d5a0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	3314      	adds	r3, #20
 8010266:	4618      	mov	r0, r3
 8010268:	f00d f9fc 	bl	801d664 <sys_mbox_valid>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d005      	beq.n	801027e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	3314      	adds	r3, #20
 8010276:	6939      	ldr	r1, [r7, #16]
 8010278:	4618      	mov	r0, r3
 801027a:	f00d f991 	bl	801d5a0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801027e:	7dfb      	ldrb	r3, [r7, #23]
 8010280:	2b01      	cmp	r3, #1
 8010282:	d005      	beq.n	8010290 <err_tcp+0xe8>
 8010284:	7dfb      	ldrb	r3, [r7, #23]
 8010286:	2b04      	cmp	r3, #4
 8010288:	d002      	beq.n	8010290 <err_tcp+0xe8>
 801028a:	7dfb      	ldrb	r3, [r7, #23]
 801028c:	2b03      	cmp	r3, #3
 801028e:	d143      	bne.n	8010318 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	7f1b      	ldrb	r3, [r3, #28]
 8010294:	f003 0304 	and.w	r3, r3, #4
 8010298:	2b00      	cmp	r3, #0
 801029a:	bf14      	ite	ne
 801029c:	2301      	movne	r3, #1
 801029e:	2300      	moveq	r3, #0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	7f1b      	ldrb	r3, [r3, #28]
 80102a8:	f023 0304 	bic.w	r3, r3, #4
 80102ac:	b2da      	uxtb	r2, r3
 80102ae:	69fb      	ldr	r3, [r7, #28]
 80102b0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d13b      	bne.n	8010330 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	6a1b      	ldr	r3, [r3, #32]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d106      	bne.n	80102ce <err_tcp+0x126>
 80102c0:	4b1e      	ldr	r3, [pc, #120]	@ (801033c <err_tcp+0x194>)
 80102c2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80102c6:	4920      	ldr	r1, [pc, #128]	@ (8010348 <err_tcp+0x1a0>)
 80102c8:	481e      	ldr	r0, [pc, #120]	@ (8010344 <err_tcp+0x19c>)
 80102ca:	f00e f84b 	bl	801e364 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80102ce:	7dfb      	ldrb	r3, [r7, #23]
 80102d0:	2b04      	cmp	r3, #4
 80102d2:	d104      	bne.n	80102de <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	6a1b      	ldr	r3, [r3, #32]
 80102d8:	2200      	movs	r2, #0
 80102da:	711a      	strb	r2, [r3, #4]
 80102dc:	e003      	b.n	80102e6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	6a1b      	ldr	r3, [r3, #32]
 80102e2:	78fa      	ldrb	r2, [r7, #3]
 80102e4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	6a1b      	ldr	r3, [r3, #32]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	330c      	adds	r3, #12
 80102ee:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80102f0:	68b8      	ldr	r0, [r7, #8]
 80102f2:	f00d fa45 	bl	801d780 <sys_sem_valid>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d106      	bne.n	801030a <err_tcp+0x162>
 80102fc:	4b0f      	ldr	r3, [pc, #60]	@ (801033c <err_tcp+0x194>)
 80102fe:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8010302:	4912      	ldr	r1, [pc, #72]	@ (801034c <err_tcp+0x1a4>)
 8010304:	480f      	ldr	r0, [pc, #60]	@ (8010344 <err_tcp+0x19c>)
 8010306:	f00e f82d 	bl	801e364 <iprintf>
      conn->current_msg = NULL;
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	2200      	movs	r2, #0
 801030e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010310:	68b8      	ldr	r0, [r7, #8]
 8010312:	f00d fa1b 	bl	801d74c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8010316:	e00b      	b.n	8010330 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	6a1b      	ldr	r3, [r3, #32]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d008      	beq.n	8010332 <err_tcp+0x18a>
 8010320:	4b06      	ldr	r3, [pc, #24]	@ (801033c <err_tcp+0x194>)
 8010322:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8010326:	490a      	ldr	r1, [pc, #40]	@ (8010350 <err_tcp+0x1a8>)
 8010328:	4806      	ldr	r0, [pc, #24]	@ (8010344 <err_tcp+0x19c>)
 801032a:	f00e f81b 	bl	801e364 <iprintf>
  }
}
 801032e:	e000      	b.n	8010332 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010330:	bf00      	nop
}
 8010332:	bf00      	nop
 8010334:	3720      	adds	r7, #32
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	08020d60 	.word	0x08020d60
 8010340:	08020eb8 	.word	0x08020eb8
 8010344:	08020da4 	.word	0x08020da4
 8010348:	08020ec8 	.word	0x08020ec8
 801034c:	08020ee4 	.word	0x08020ee4
 8010350:	08020f00 	.word	0x08020f00

08010354 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8010362:	6879      	ldr	r1, [r7, #4]
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f005 f9eb 	bl	8015740 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801036a:	490a      	ldr	r1, [pc, #40]	@ (8010394 <setup_tcp+0x40>)
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f005 f9f9 	bl	8015764 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8010372:	4909      	ldr	r1, [pc, #36]	@ (8010398 <setup_tcp+0x44>)
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f005 fa17 	bl	80157a8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801037a:	2202      	movs	r2, #2
 801037c:	4907      	ldr	r1, [pc, #28]	@ (801039c <setup_tcp+0x48>)
 801037e:	68f8      	ldr	r0, [r7, #12]
 8010380:	f005 fa6e 	bl	8015860 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010384:	4906      	ldr	r1, [pc, #24]	@ (80103a0 <setup_tcp+0x4c>)
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f005 fa30 	bl	80157ec <tcp_err>
}
 801038c:	bf00      	nop
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	0800ff2d 	.word	0x0800ff2d
 8010398:	08010101 	.word	0x08010101
 801039c:	08010039 	.word	0x08010039
 80103a0:	080101a9 	.word	0x080101a9

080103a4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80103a4:	b590      	push	{r4, r7, lr}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80103ac:	2300      	movs	r3, #0
 80103ae:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d006      	beq.n	80103c8 <pcb_new+0x24>
 80103ba:	4b2b      	ldr	r3, [pc, #172]	@ (8010468 <pcb_new+0xc4>)
 80103bc:	f240 2265 	movw	r2, #613	@ 0x265
 80103c0:	492a      	ldr	r1, [pc, #168]	@ (801046c <pcb_new+0xc8>)
 80103c2:	482b      	ldr	r0, [pc, #172]	@ (8010470 <pcb_new+0xcc>)
 80103c4:	f00d ffce 	bl	801e364 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80103d2:	2b10      	cmp	r3, #16
 80103d4:	d022      	beq.n	801041c <pcb_new+0x78>
 80103d6:	2b20      	cmp	r3, #32
 80103d8:	d133      	bne.n	8010442 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681c      	ldr	r4, [r3, #0]
 80103de:	7bfb      	ldrb	r3, [r7, #15]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f00a fc70 	bl	801acc6 <udp_new_ip_type>
 80103e6:	4603      	mov	r3, r0
 80103e8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d02a      	beq.n	801044a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	2b22      	cmp	r3, #34	@ 0x22
 80103fc:	d104      	bne.n	8010408 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	2201      	movs	r2, #1
 8010406:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	6858      	ldr	r0, [r3, #4]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	461a      	mov	r2, r3
 8010414:	4917      	ldr	r1, [pc, #92]	@ (8010474 <pcb_new+0xd0>)
 8010416:	f00a fbdd 	bl	801abd4 <udp_recv>
      }
      break;
 801041a:	e016      	b.n	801044a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681c      	ldr	r4, [r3, #0]
 8010420:	7bfb      	ldrb	r3, [r7, #15]
 8010422:	4618      	mov	r0, r3
 8010424:	f005 f97e 	bl	8015724 <tcp_new_ip_type>
 8010428:	4603      	mov	r3, r0
 801042a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00b      	beq.n	801044e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff ff8a 	bl	8010354 <setup_tcp>
      }
      break;
 8010440:	e005      	b.n	801044e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	22fa      	movs	r2, #250	@ 0xfa
 8010446:	711a      	strb	r2, [r3, #4]
      return;
 8010448:	e00a      	b.n	8010460 <pcb_new+0xbc>
      break;
 801044a:	bf00      	nop
 801044c:	e000      	b.n	8010450 <pcb_new+0xac>
      break;
 801044e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d102      	bne.n	8010460 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	22ff      	movs	r2, #255	@ 0xff
 801045e:	711a      	strb	r2, [r3, #4]
  }
}
 8010460:	3714      	adds	r7, #20
 8010462:	46bd      	mov	sp, r7
 8010464:	bd90      	pop	{r4, r7, pc}
 8010466:	bf00      	nop
 8010468:	08020d60 	.word	0x08020d60
 801046c:	08020f44 	.word	0x08020f44
 8010470:	08020da4 	.word	0x08020da4
 8010474:	0800fe31 	.word	0x0800fe31

08010478 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2200      	movs	r2, #0
 8010488:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d102      	bne.n	801049a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f7ff ff85 	bl	80103a4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 801049a:	bf00      	nop
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
	...

080104a4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	4603      	mov	r3, r0
 80104ac:	6039      	str	r1, [r7, #0]
 80104ae:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80104b4:	2007      	movs	r0, #7
 80104b6:	f002 fbe7 	bl	8012c88 <memp_malloc>
 80104ba:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d101      	bne.n	80104c6 <netconn_alloc+0x22>
    return NULL;
 80104c2:	2300      	movs	r3, #0
 80104c4:	e052      	b.n	801056c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2200      	movs	r2, #0
 80104ca:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	79fa      	ldrb	r2, [r7, #7]
 80104d0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2200      	movs	r2, #0
 80104d6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80104de:	2b10      	cmp	r3, #16
 80104e0:	d004      	beq.n	80104ec <netconn_alloc+0x48>
 80104e2:	2b20      	cmp	r3, #32
 80104e4:	d105      	bne.n	80104f2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80104e6:	2306      	movs	r3, #6
 80104e8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80104ea:	e00a      	b.n	8010502 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80104ec:	2306      	movs	r3, #6
 80104ee:	617b      	str	r3, [r7, #20]
      break;
 80104f0:	e007      	b.n	8010502 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80104f2:	4b20      	ldr	r3, [pc, #128]	@ (8010574 <netconn_alloc+0xd0>)
 80104f4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80104f8:	491f      	ldr	r1, [pc, #124]	@ (8010578 <netconn_alloc+0xd4>)
 80104fa:	4820      	ldr	r0, [pc, #128]	@ (801057c <netconn_alloc+0xd8>)
 80104fc:	f00d ff32 	bl	801e364 <iprintf>
      goto free_and_return;
 8010500:	e02f      	b.n	8010562 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	3310      	adds	r3, #16
 8010506:	6979      	ldr	r1, [r7, #20]
 8010508:	4618      	mov	r0, r3
 801050a:	f00d f81d 	bl	801d548 <sys_mbox_new>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d125      	bne.n	8010560 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	330c      	adds	r3, #12
 8010518:	2100      	movs	r1, #0
 801051a:	4618      	mov	r0, r3
 801051c:	f00d f8c0 	bl	801d6a0 <sys_sem_new>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d005      	beq.n	8010532 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	3310      	adds	r3, #16
 801052a:	4618      	mov	r0, r3
 801052c:	f00d f826 	bl	801d57c <sys_mbox_free>
    goto free_and_return;
 8010530:	e017      	b.n	8010562 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	3314      	adds	r3, #20
 8010536:	4618      	mov	r0, r3
 8010538:	f00d f8a5 	bl	801d686 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2200      	movs	r2, #0
 8010540:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010548:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2200      	movs	r2, #0
 8010554:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	7cfa      	ldrb	r2, [r7, #19]
 801055a:	771a      	strb	r2, [r3, #28]
  return conn;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	e005      	b.n	801056c <netconn_alloc+0xc8>
    goto free_and_return;
 8010560:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010562:	68f9      	ldr	r1, [r7, #12]
 8010564:	2007      	movs	r0, #7
 8010566:	f002 fc05 	bl	8012d74 <memp_free>
  return NULL;
 801056a:	2300      	movs	r3, #0
}
 801056c:	4618      	mov	r0, r3
 801056e:	3718      	adds	r7, #24
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	08020d60 	.word	0x08020d60
 8010578:	08020f64 	.word	0x08020f64
 801057c:	08020da4 	.word	0x08020da4

08010580 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	685b      	ldr	r3, [r3, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d006      	beq.n	801059e <netconn_free+0x1e>
 8010590:	4b1b      	ldr	r3, [pc, #108]	@ (8010600 <netconn_free+0x80>)
 8010592:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010596:	491b      	ldr	r1, [pc, #108]	@ (8010604 <netconn_free+0x84>)
 8010598:	481b      	ldr	r0, [pc, #108]	@ (8010608 <netconn_free+0x88>)
 801059a:	f00d fee3 	bl	801e364 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	3310      	adds	r3, #16
 80105a2:	4618      	mov	r0, r3
 80105a4:	f00d f85e 	bl	801d664 <sys_mbox_valid>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d006      	beq.n	80105bc <netconn_free+0x3c>
 80105ae:	4b14      	ldr	r3, [pc, #80]	@ (8010600 <netconn_free+0x80>)
 80105b0:	f240 3223 	movw	r2, #803	@ 0x323
 80105b4:	4915      	ldr	r1, [pc, #84]	@ (801060c <netconn_free+0x8c>)
 80105b6:	4814      	ldr	r0, [pc, #80]	@ (8010608 <netconn_free+0x88>)
 80105b8:	f00d fed4 	bl	801e364 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	3314      	adds	r3, #20
 80105c0:	4618      	mov	r0, r3
 80105c2:	f00d f84f 	bl	801d664 <sys_mbox_valid>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d006      	beq.n	80105da <netconn_free+0x5a>
 80105cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010600 <netconn_free+0x80>)
 80105ce:	f240 3226 	movw	r2, #806	@ 0x326
 80105d2:	490f      	ldr	r1, [pc, #60]	@ (8010610 <netconn_free+0x90>)
 80105d4:	480c      	ldr	r0, [pc, #48]	@ (8010608 <netconn_free+0x88>)
 80105d6:	f00d fec5 	bl	801e364 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	330c      	adds	r3, #12
 80105de:	4618      	mov	r0, r3
 80105e0:	f00d f8c1 	bl	801d766 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	330c      	adds	r3, #12
 80105e8:	4618      	mov	r0, r3
 80105ea:	f00d f8da 	bl	801d7a2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80105ee:	6879      	ldr	r1, [r7, #4]
 80105f0:	2007      	movs	r0, #7
 80105f2:	f002 fbbf 	bl	8012d74 <memp_free>
}
 80105f6:	bf00      	nop
 80105f8:	3708      	adds	r7, #8
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	08020d60 	.word	0x08020d60
 8010604:	08020f8c 	.word	0x08020f8c
 8010608:	08020da4 	.word	0x08020da4
 801060c:	08020fbc 	.word	0x08020fbc
 8010610:	08020ff8 	.word	0x08020ff8

08010614 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	3310      	adds	r3, #16
 8010620:	4618      	mov	r0, r3
 8010622:	f00d f81f 	bl	801d664 <sys_mbox_valid>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d02f      	beq.n	801068c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801062c:	e018      	b.n	8010660 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010636:	2b10      	cmp	r3, #16
 8010638:	d10e      	bne.n	8010658 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	f107 020f 	add.w	r2, r7, #15
 8010640:	4611      	mov	r1, r2
 8010642:	4618      	mov	r0, r3
 8010644:	f7ff fbba 	bl	800fdbc <lwip_netconn_is_err_msg>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d108      	bne.n	8010660 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	4618      	mov	r0, r3
 8010652:	f003 fa33 	bl	8013abc <pbuf_free>
 8010656:	e003      	b.n	8010660 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	4618      	mov	r0, r3
 801065c:	f000 fd6a 	bl	8011134 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	3310      	adds	r3, #16
 8010664:	f107 0210 	add.w	r2, r7, #16
 8010668:	4611      	mov	r1, r2
 801066a:	4618      	mov	r0, r3
 801066c:	f00c ffe3 	bl	801d636 <sys_arch_mbox_tryfetch>
 8010670:	4603      	mov	r3, r0
 8010672:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010676:	d1da      	bne.n	801062e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	3310      	adds	r3, #16
 801067c:	4618      	mov	r0, r3
 801067e:	f00c ff7d 	bl	801d57c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	3310      	adds	r3, #16
 8010686:	4618      	mov	r0, r3
 8010688:	f00c fffd 	bl	801d686 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	3314      	adds	r3, #20
 8010690:	4618      	mov	r0, r3
 8010692:	f00c ffe7 	bl	801d664 <sys_mbox_valid>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d034      	beq.n	8010706 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801069c:	e01d      	b.n	80106da <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	f107 020e 	add.w	r2, r7, #14
 80106a4:	4611      	mov	r1, r2
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff fb88 	bl	800fdbc <lwip_netconn_is_err_msg>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d113      	bne.n	80106da <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80106b6:	6978      	ldr	r0, [r7, #20]
 80106b8:	f7ff ffac 	bl	8010614 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d007      	beq.n	80106d4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f004 f951 	bl	8014970 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	2200      	movs	r2, #0
 80106d2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80106d4:	6978      	ldr	r0, [r7, #20]
 80106d6:	f7ff ff53 	bl	8010580 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	3314      	adds	r3, #20
 80106de:	f107 0210 	add.w	r2, r7, #16
 80106e2:	4611      	mov	r1, r2
 80106e4:	4618      	mov	r0, r3
 80106e6:	f00c ffa6 	bl	801d636 <sys_arch_mbox_tryfetch>
 80106ea:	4603      	mov	r3, r0
 80106ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80106f0:	d1d5      	bne.n	801069e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	3314      	adds	r3, #20
 80106f6:	4618      	mov	r0, r3
 80106f8:	f00c ff40 	bl	801d57c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	3314      	adds	r3, #20
 8010700:	4618      	mov	r0, r3
 8010702:	f00c ffc0 	bl	801d686 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8010706:	bf00      	nop
 8010708:	3718      	adds	r7, #24
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
	...

08010710 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	460b      	mov	r3, r1
 801071a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 801071c:	2300      	movs	r3, #0
 801071e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d106      	bne.n	8010734 <lwip_netconn_do_close_internal+0x24>
 8010726:	4b87      	ldr	r3, [pc, #540]	@ (8010944 <lwip_netconn_do_close_internal+0x234>)
 8010728:	f240 32a2 	movw	r2, #930	@ 0x3a2
 801072c:	4986      	ldr	r1, [pc, #536]	@ (8010948 <lwip_netconn_do_close_internal+0x238>)
 801072e:	4887      	ldr	r0, [pc, #540]	@ (801094c <lwip_netconn_do_close_internal+0x23c>)
 8010730:	f00d fe18 	bl	801e364 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801073c:	2b10      	cmp	r3, #16
 801073e:	d006      	beq.n	801074e <lwip_netconn_do_close_internal+0x3e>
 8010740:	4b80      	ldr	r3, [pc, #512]	@ (8010944 <lwip_netconn_do_close_internal+0x234>)
 8010742:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8010746:	4982      	ldr	r1, [pc, #520]	@ (8010950 <lwip_netconn_do_close_internal+0x240>)
 8010748:	4880      	ldr	r0, [pc, #512]	@ (801094c <lwip_netconn_do_close_internal+0x23c>)
 801074a:	f00d fe0b 	bl	801e364 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	785b      	ldrb	r3, [r3, #1]
 8010752:	2b04      	cmp	r3, #4
 8010754:	d006      	beq.n	8010764 <lwip_netconn_do_close_internal+0x54>
 8010756:	4b7b      	ldr	r3, [pc, #492]	@ (8010944 <lwip_netconn_do_close_internal+0x234>)
 8010758:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 801075c:	497d      	ldr	r1, [pc, #500]	@ (8010954 <lwip_netconn_do_close_internal+0x244>)
 801075e:	487b      	ldr	r0, [pc, #492]	@ (801094c <lwip_netconn_do_close_internal+0x23c>)
 8010760:	f00d fe00 	bl	801e364 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d106      	bne.n	801077a <lwip_netconn_do_close_internal+0x6a>
 801076c:	4b75      	ldr	r3, [pc, #468]	@ (8010944 <lwip_netconn_do_close_internal+0x234>)
 801076e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8010772:	4979      	ldr	r1, [pc, #484]	@ (8010958 <lwip_netconn_do_close_internal+0x248>)
 8010774:	4875      	ldr	r0, [pc, #468]	@ (801094c <lwip_netconn_do_close_internal+0x23c>)
 8010776:	f00d fdf5 	bl	801e364 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6a1b      	ldr	r3, [r3, #32]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <lwip_netconn_do_close_internal+0x80>
 8010782:	4b70      	ldr	r3, [pc, #448]	@ (8010944 <lwip_netconn_do_close_internal+0x234>)
 8010784:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010788:	4974      	ldr	r1, [pc, #464]	@ (801095c <lwip_netconn_do_close_internal+0x24c>)
 801078a:	4870      	ldr	r0, [pc, #448]	@ (801094c <lwip_netconn_do_close_internal+0x23c>)
 801078c:	f00d fdea 	bl	801e364 <iprintf>

  tpcb = conn->pcb.tcp;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6a1b      	ldr	r3, [r3, #32]
 801079a:	7a1b      	ldrb	r3, [r3, #8]
 801079c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801079e:	7bfb      	ldrb	r3, [r7, #15]
 80107a0:	f003 0301 	and.w	r3, r3, #1
 80107a4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80107a6:	7bfb      	ldrb	r3, [r7, #15]
 80107a8:	f003 0302 	and.w	r3, r3, #2
 80107ac:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80107ae:	7bfb      	ldrb	r3, [r7, #15]
 80107b0:	2b03      	cmp	r3, #3
 80107b2:	d102      	bne.n	80107ba <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80107b4:	2301      	movs	r3, #1
 80107b6:	75bb      	strb	r3, [r7, #22]
 80107b8:	e01f      	b.n	80107fa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80107ba:	7bbb      	ldrb	r3, [r7, #14]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d00e      	beq.n	80107de <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80107c4:	2b05      	cmp	r3, #5
 80107c6:	d007      	beq.n	80107d8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80107cc:	2b06      	cmp	r3, #6
 80107ce:	d003      	beq.n	80107d8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80107d4:	2b08      	cmp	r3, #8
 80107d6:	d102      	bne.n	80107de <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80107d8:	2301      	movs	r3, #1
 80107da:	75bb      	strb	r3, [r7, #22]
 80107dc:	e00d      	b.n	80107fa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80107de:	7b7b      	ldrb	r3, [r7, #13]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d008      	beq.n	80107f6 <lwip_netconn_do_close_internal+0xe6>
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	8b5b      	ldrh	r3, [r3, #26]
 80107e8:	f003 0310 	and.w	r3, r3, #16
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d002      	beq.n	80107f6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80107f0:	2301      	movs	r3, #1
 80107f2:	75bb      	strb	r3, [r7, #22]
 80107f4:	e001      	b.n	80107fa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80107f6:	2300      	movs	r3, #0
 80107f8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80107fa:	7dbb      	ldrb	r3, [r7, #22]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d003      	beq.n	8010808 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010800:	2100      	movs	r1, #0
 8010802:	6938      	ldr	r0, [r7, #16]
 8010804:	f004 ff9c 	bl	8015740 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	7d1b      	ldrb	r3, [r3, #20]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d104      	bne.n	801081a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010810:	2100      	movs	r1, #0
 8010812:	6938      	ldr	r0, [r7, #16]
 8010814:	f005 f80c 	bl	8015830 <tcp_accept>
 8010818:	e01d      	b.n	8010856 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801081a:	7bbb      	ldrb	r3, [r7, #14]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d007      	beq.n	8010830 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010820:	2100      	movs	r1, #0
 8010822:	6938      	ldr	r0, [r7, #16]
 8010824:	f004 ff9e 	bl	8015764 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8010828:	2100      	movs	r1, #0
 801082a:	6938      	ldr	r0, [r7, #16]
 801082c:	f005 f800 	bl	8015830 <tcp_accept>
    }
    if (shut_tx) {
 8010830:	7b7b      	ldrb	r3, [r7, #13]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d003      	beq.n	801083e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8010836:	2100      	movs	r1, #0
 8010838:	6938      	ldr	r0, [r7, #16]
 801083a:	f004 ffb5 	bl	80157a8 <tcp_sent>
    }
    if (shut_close) {
 801083e:	7dbb      	ldrb	r3, [r7, #22]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d008      	beq.n	8010856 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010844:	2200      	movs	r2, #0
 8010846:	2100      	movs	r1, #0
 8010848:	6938      	ldr	r0, [r7, #16]
 801084a:	f005 f809 	bl	8015860 <tcp_poll>
      tcp_err(tpcb, NULL);
 801084e:	2100      	movs	r1, #0
 8010850:	6938      	ldr	r0, [r7, #16]
 8010852:	f004 ffcb 	bl	80157ec <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8010856:	7dbb      	ldrb	r3, [r7, #22]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d005      	beq.n	8010868 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801085c:	6938      	ldr	r0, [r7, #16]
 801085e:	f003 ff41 	bl	80146e4 <tcp_close>
 8010862:	4603      	mov	r3, r0
 8010864:	75fb      	strb	r3, [r7, #23]
 8010866:	e007      	b.n	8010878 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8010868:	7bbb      	ldrb	r3, [r7, #14]
 801086a:	7b7a      	ldrb	r2, [r7, #13]
 801086c:	4619      	mov	r1, r3
 801086e:	6938      	ldr	r0, [r7, #16]
 8010870:	f003 ff64 	bl	801473c <tcp_shutdown>
 8010874:	4603      	mov	r3, r0
 8010876:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8010878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d102      	bne.n	8010886 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8010880:	2301      	movs	r3, #1
 8010882:	757b      	strb	r3, [r7, #21]
 8010884:	e016      	b.n	80108b4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8010886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801088a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801088e:	d10f      	bne.n	80108b0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6a1b      	ldr	r3, [r3, #32]
 8010894:	7a5b      	ldrb	r3, [r3, #9]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d10c      	bne.n	80108b4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801089a:	2301      	movs	r3, #1
 801089c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801089e:	7dbb      	ldrb	r3, [r7, #22]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d007      	beq.n	80108b4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80108a4:	6938      	ldr	r0, [r7, #16]
 80108a6:	f004 f863 	bl	8014970 <tcp_abort>
          err = ERR_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	75fb      	strb	r3, [r7, #23]
 80108ae:	e001      	b.n	80108b4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80108b0:	2301      	movs	r3, #1
 80108b2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80108b4:	7d7b      	ldrb	r3, [r7, #21]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d052      	beq.n	8010960 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a1b      	ldr	r3, [r3, #32]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	330c      	adds	r3, #12
 80108c2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	7dfa      	ldrb	r2, [r7, #23]
 80108ca:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80108d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d129      	bne.n	8010934 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80108e0:	7dbb      	ldrb	r3, [r7, #22]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00c      	beq.n	8010900 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d005      	beq.n	8010900 <lwip_netconn_do_close_internal+0x1f0>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108f8:	2200      	movs	r2, #0
 80108fa:	2104      	movs	r1, #4
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	4798      	blx	r3
      }
      if (shut_rx) {
 8010900:	7bbb      	ldrb	r3, [r7, #14]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d009      	beq.n	801091a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801090a:	2b00      	cmp	r3, #0
 801090c:	d005      	beq.n	801091a <lwip_netconn_do_close_internal+0x20a>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010912:	2200      	movs	r2, #0
 8010914:	2100      	movs	r1, #0
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	4798      	blx	r3
      }
      if (shut_tx) {
 801091a:	7b7b      	ldrb	r3, [r7, #13]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d009      	beq.n	8010934 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010924:	2b00      	cmp	r3, #0
 8010926:	d005      	beq.n	8010934 <lwip_netconn_do_close_internal+0x224>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801092c:	2200      	movs	r2, #0
 801092e:	2102      	movs	r1, #2
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010934:	78fb      	ldrb	r3, [r7, #3]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d002      	beq.n	8010940 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801093a:	68b8      	ldr	r0, [r7, #8]
 801093c:	f00c ff06 	bl	801d74c <sys_sem_signal>
    }
    return ERR_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	e03c      	b.n	80109be <lwip_netconn_do_close_internal+0x2ae>
 8010944:	08020d60 	.word	0x08020d60
 8010948:	08021034 	.word	0x08021034
 801094c:	08020da4 	.word	0x08020da4
 8010950:	08021044 	.word	0x08021044
 8010954:	08021064 	.word	0x08021064
 8010958:	08021088 	.word	0x08021088
 801095c:	08020ec8 	.word	0x08020ec8
  }
  if (!close_finished) {
 8010960:	7d7b      	ldrb	r3, [r7, #21]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d11e      	bne.n	80109a4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	7d1b      	ldrb	r3, [r3, #20]
 801096a:	2b01      	cmp	r3, #1
 801096c:	d106      	bne.n	801097c <lwip_netconn_do_close_internal+0x26c>
 801096e:	4b16      	ldr	r3, [pc, #88]	@ (80109c8 <lwip_netconn_do_close_internal+0x2b8>)
 8010970:	f240 4241 	movw	r2, #1089	@ 0x441
 8010974:	4915      	ldr	r1, [pc, #84]	@ (80109cc <lwip_netconn_do_close_internal+0x2bc>)
 8010976:	4816      	ldr	r0, [pc, #88]	@ (80109d0 <lwip_netconn_do_close_internal+0x2c0>)
 8010978:	f00d fcf4 	bl	801e364 <iprintf>
    if (shut_tx) {
 801097c:	7b7b      	ldrb	r3, [r7, #13]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d003      	beq.n	801098a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8010982:	4914      	ldr	r1, [pc, #80]	@ (80109d4 <lwip_netconn_do_close_internal+0x2c4>)
 8010984:	6938      	ldr	r0, [r7, #16]
 8010986:	f004 ff0f 	bl	80157a8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801098a:	2201      	movs	r2, #1
 801098c:	4912      	ldr	r1, [pc, #72]	@ (80109d8 <lwip_netconn_do_close_internal+0x2c8>)
 801098e:	6938      	ldr	r0, [r7, #16]
 8010990:	f004 ff66 	bl	8015860 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010994:	4911      	ldr	r1, [pc, #68]	@ (80109dc <lwip_netconn_do_close_internal+0x2cc>)
 8010996:	6938      	ldr	r0, [r7, #16]
 8010998:	f004 ff28 	bl	80157ec <tcp_err>
    tcp_arg(tpcb, conn);
 801099c:	6879      	ldr	r1, [r7, #4]
 801099e:	6938      	ldr	r0, [r7, #16]
 80109a0:	f004 fece 	bl	8015740 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80109a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d106      	bne.n	80109ba <lwip_netconn_do_close_internal+0x2aa>
 80109ac:	4b06      	ldr	r3, [pc, #24]	@ (80109c8 <lwip_netconn_do_close_internal+0x2b8>)
 80109ae:	f240 424d 	movw	r2, #1101	@ 0x44d
 80109b2:	490b      	ldr	r1, [pc, #44]	@ (80109e0 <lwip_netconn_do_close_internal+0x2d0>)
 80109b4:	4806      	ldr	r0, [pc, #24]	@ (80109d0 <lwip_netconn_do_close_internal+0x2c0>)
 80109b6:	f00d fcd5 	bl	801e364 <iprintf>
  return err;
 80109ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3718      	adds	r7, #24
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	08020d60 	.word	0x08020d60
 80109cc:	0802109c 	.word	0x0802109c
 80109d0:	08020da4 	.word	0x08020da4
 80109d4:	08010101 	.word	0x08010101
 80109d8:	08010039 	.word	0x08010039
 80109dc:	080101a9 	.word	0x080101a9
 80109e0:	080210c0 	.word	0x080210c0

080109e4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	785b      	ldrb	r3, [r3, #1]
 80109f6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80109f8:	7afb      	ldrb	r3, [r7, #11]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00d      	beq.n	8010a1a <lwip_netconn_do_delconn+0x36>
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010a08:	2b10      	cmp	r3, #16
 8010a0a:	d006      	beq.n	8010a1a <lwip_netconn_do_delconn+0x36>
 8010a0c:	4b60      	ldr	r3, [pc, #384]	@ (8010b90 <lwip_netconn_do_delconn+0x1ac>)
 8010a0e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8010a12:	4960      	ldr	r1, [pc, #384]	@ (8010b94 <lwip_netconn_do_delconn+0x1b0>)
 8010a14:	4860      	ldr	r0, [pc, #384]	@ (8010b98 <lwip_netconn_do_delconn+0x1b4>)
 8010a16:	f00d fca5 	bl	801e364 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8010a1a:	7afb      	ldrb	r3, [r7, #11]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d005      	beq.n	8010a2c <lwip_netconn_do_delconn+0x48>
 8010a20:	7afb      	ldrb	r3, [r7, #11]
 8010a22:	2b02      	cmp	r3, #2
 8010a24:	d002      	beq.n	8010a2c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8010a26:	7afb      	ldrb	r3, [r7, #11]
 8010a28:	2b03      	cmp	r3, #3
 8010a2a:	d109      	bne.n	8010a40 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010a2c:	7afb      	ldrb	r3, [r7, #11]
 8010a2e:	2b03      	cmp	r3, #3
 8010a30:	d10a      	bne.n	8010a48 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	7f1b      	ldrb	r3, [r3, #28]
 8010a38:	f003 0304 	and.w	r3, r3, #4
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d103      	bne.n	8010a48 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	22fb      	movs	r2, #251	@ 0xfb
 8010a44:	711a      	strb	r2, [r3, #4]
 8010a46:	e097      	b.n	8010b78 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010a48:	7afb      	ldrb	r3, [r7, #11]
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d10d      	bne.n	8010a6a <lwip_netconn_do_delconn+0x86>
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	7f1b      	ldrb	r3, [r3, #28]
 8010a54:	f003 0304 	and.w	r3, r3, #4
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d106      	bne.n	8010a6a <lwip_netconn_do_delconn+0x86>
 8010a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8010b90 <lwip_netconn_do_delconn+0x1ac>)
 8010a5e:	f240 427a 	movw	r2, #1146	@ 0x47a
 8010a62:	494e      	ldr	r1, [pc, #312]	@ (8010b9c <lwip_netconn_do_delconn+0x1b8>)
 8010a64:	484c      	ldr	r0, [pc, #304]	@ (8010b98 <lwip_netconn_do_delconn+0x1b4>)
 8010a66:	f00d fc7d 	bl	801e364 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7ff fdcd 	bl	8010614 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d05f      	beq.n	8010b44 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010a8e:	2b10      	cmp	r3, #16
 8010a90:	d00d      	beq.n	8010aae <lwip_netconn_do_delconn+0xca>
 8010a92:	2b20      	cmp	r3, #32
 8010a94:	d151      	bne.n	8010b3a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f00a f8b4 	bl	801ac14 <udp_remove>
          break;
 8010aac:	e046      	b.n	8010b3c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	6a1b      	ldr	r3, [r3, #32]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d006      	beq.n	8010ac6 <lwip_netconn_do_delconn+0xe2>
 8010ab8:	4b35      	ldr	r3, [pc, #212]	@ (8010b90 <lwip_netconn_do_delconn+0x1ac>)
 8010aba:	f240 4294 	movw	r2, #1172	@ 0x494
 8010abe:	4938      	ldr	r1, [pc, #224]	@ (8010ba0 <lwip_netconn_do_delconn+0x1bc>)
 8010ac0:	4835      	ldr	r0, [pc, #212]	@ (8010b98 <lwip_netconn_do_delconn+0x1b4>)
 8010ac2:	f00d fc4f 	bl	801e364 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2204      	movs	r2, #4
 8010acc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2203      	movs	r2, #3
 8010ad2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	68fa      	ldr	r2, [r7, #12]
 8010ada:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ff fe14 	bl	8010710 <lwip_netconn_do_close_internal>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d04b      	beq.n	8010b86 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	785b      	ldrb	r3, [r3, #1]
 8010af4:	2b04      	cmp	r3, #4
 8010af6:	d006      	beq.n	8010b06 <lwip_netconn_do_delconn+0x122>
 8010af8:	4b25      	ldr	r3, [pc, #148]	@ (8010b90 <lwip_netconn_do_delconn+0x1ac>)
 8010afa:	f240 429a 	movw	r2, #1178	@ 0x49a
 8010afe:	4929      	ldr	r1, [pc, #164]	@ (8010ba4 <lwip_netconn_do_delconn+0x1c0>)
 8010b00:	4825      	ldr	r0, [pc, #148]	@ (8010b98 <lwip_netconn_do_delconn+0x1b4>)
 8010b02:	f00d fc2f 	bl	801e364 <iprintf>
            UNLOCK_TCPIP_CORE();
 8010b06:	4828      	ldr	r0, [pc, #160]	@ (8010ba8 <lwip_netconn_do_delconn+0x1c4>)
 8010b08:	f00c fe89 	bl	801d81e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	330c      	adds	r3, #12
 8010b12:	2100      	movs	r1, #0
 8010b14:	4618      	mov	r0, r3
 8010b16:	f00c fde8 	bl	801d6ea <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8010b1a:	4823      	ldr	r0, [pc, #140]	@ (8010ba8 <lwip_netconn_do_delconn+0x1c4>)
 8010b1c:	f00c fe70 	bl	801d800 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	785b      	ldrb	r3, [r3, #1]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d02d      	beq.n	8010b86 <lwip_netconn_do_delconn+0x1a2>
 8010b2a:	4b19      	ldr	r3, [pc, #100]	@ (8010b90 <lwip_netconn_do_delconn+0x1ac>)
 8010b2c:	f240 429e 	movw	r2, #1182	@ 0x49e
 8010b30:	491c      	ldr	r1, [pc, #112]	@ (8010ba4 <lwip_netconn_do_delconn+0x1c0>)
 8010b32:	4819      	ldr	r0, [pc, #100]	@ (8010b98 <lwip_netconn_do_delconn+0x1b4>)
 8010b34:	f00d fc16 	bl	801e364 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010b38:	e025      	b.n	8010b86 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8010b3a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2200      	movs	r2, #0
 8010b42:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d007      	beq.n	8010b5e <lwip_netconn_do_delconn+0x17a>
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	6810      	ldr	r0, [r2, #0]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d007      	beq.n	8010b78 <lwip_netconn_do_delconn+0x194>
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	6810      	ldr	r0, [r2, #0]
 8010b72:	2200      	movs	r2, #0
 8010b74:	2102      	movs	r1, #2
 8010b76:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	330c      	adds	r3, #12
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f00c fdfe 	bl	801d780 <sys_sem_valid>
 8010b84:	e000      	b.n	8010b88 <lwip_netconn_do_delconn+0x1a4>
          return;
 8010b86:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	08020d60 	.word	0x08020d60
 8010b94:	080210d0 	.word	0x080210d0
 8010b98:	08020da4 	.word	0x08020da4
 8010b9c:	080210e4 	.word	0x080210e4
 8010ba0:	08021104 	.word	0x08021104
 8010ba4:	08021120 	.word	0x08021120
 8010ba8:	20009dd0 	.word	0x20009dd0

08010bac <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7ff f8ab 	bl	800fd18 <netconn_err>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d134      	bne.n	8010c38 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d02d      	beq.n	8010c34 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010be2:	2b20      	cmp	r3, #32
 8010be4:	d123      	bne.n	8010c2e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	689b      	ldr	r3, [r3, #8]
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d10c      	bne.n	8010c0a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	685a      	ldr	r2, [r3, #4]
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	4610      	mov	r0, r2
 8010c00:	f009 fd76 	bl	801a6f0 <udp_send>
 8010c04:	4603      	mov	r3, r0
 8010c06:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8010c08:	e016      	b.n	8010c38 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6858      	ldr	r0, [r3, #4]
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	6819      	ldr	r1, [r3, #0]
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	689b      	ldr	r3, [r3, #8]
 8010c1a:	f103 0208 	add.w	r2, r3, #8
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	689b      	ldr	r3, [r3, #8]
 8010c22:	899b      	ldrh	r3, [r3, #12]
 8010c24:	f009 fd98 	bl	801a758 <udp_sendto>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	73fb      	strb	r3, [r7, #15]
          break;
 8010c2c:	e004      	b.n	8010c38 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8010c2e:	23f5      	movs	r3, #245	@ 0xf5
 8010c30:	73fb      	strb	r3, [r7, #15]
          break;
 8010c32:	e001      	b.n	8010c38 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8010c34:	23f5      	movs	r3, #245	@ 0xf5
 8010c36:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	7bfa      	ldrb	r2, [r7, #15]
 8010c3c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010c3e:	bf00      	nop
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b088      	sub	sp, #32
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	460b      	mov	r3, r1
 8010c52:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010c54:	2300      	movs	r3, #0
 8010c56:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d106      	bne.n	8010c6c <lwip_netconn_do_writemore+0x24>
 8010c5e:	4b96      	ldr	r3, [pc, #600]	@ (8010eb8 <lwip_netconn_do_writemore+0x270>)
 8010c60:	f240 6273 	movw	r2, #1651	@ 0x673
 8010c64:	4995      	ldr	r1, [pc, #596]	@ (8010ebc <lwip_netconn_do_writemore+0x274>)
 8010c66:	4896      	ldr	r0, [pc, #600]	@ (8010ec0 <lwip_netconn_do_writemore+0x278>)
 8010c68:	f00d fb7c 	bl	801e364 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	785b      	ldrb	r3, [r3, #1]
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	d006      	beq.n	8010c82 <lwip_netconn_do_writemore+0x3a>
 8010c74:	4b90      	ldr	r3, [pc, #576]	@ (8010eb8 <lwip_netconn_do_writemore+0x270>)
 8010c76:	f240 6274 	movw	r2, #1652	@ 0x674
 8010c7a:	4992      	ldr	r1, [pc, #584]	@ (8010ec4 <lwip_netconn_do_writemore+0x27c>)
 8010c7c:	4890      	ldr	r0, [pc, #576]	@ (8010ec0 <lwip_netconn_do_writemore+0x278>)
 8010c7e:	f00d fb71 	bl	801e364 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6a1b      	ldr	r3, [r3, #32]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <lwip_netconn_do_writemore+0x50>
 8010c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8010eb8 <lwip_netconn_do_writemore+0x270>)
 8010c8c:	f240 6275 	movw	r2, #1653	@ 0x675
 8010c90:	498d      	ldr	r1, [pc, #564]	@ (8010ec8 <lwip_netconn_do_writemore+0x280>)
 8010c92:	488b      	ldr	r0, [pc, #556]	@ (8010ec0 <lwip_netconn_do_writemore+0x278>)
 8010c94:	f00d fb66 	bl	801e364 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d106      	bne.n	8010cae <lwip_netconn_do_writemore+0x66>
 8010ca0:	4b85      	ldr	r3, [pc, #532]	@ (8010eb8 <lwip_netconn_do_writemore+0x270>)
 8010ca2:	f240 6276 	movw	r2, #1654	@ 0x676
 8010ca6:	4989      	ldr	r1, [pc, #548]	@ (8010ecc <lwip_netconn_do_writemore+0x284>)
 8010ca8:	4885      	ldr	r0, [pc, #532]	@ (8010ec0 <lwip_netconn_do_writemore+0x278>)
 8010caa:	f00d fb5b 	bl	801e364 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a1b      	ldr	r3, [r3, #32]
 8010cb2:	699a      	ldr	r2, [r3, #24]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6a1b      	ldr	r3, [r3, #32]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d306      	bcc.n	8010ccc <lwip_netconn_do_writemore+0x84>
 8010cbe:	4b7e      	ldr	r3, [pc, #504]	@ (8010eb8 <lwip_netconn_do_writemore+0x270>)
 8010cc0:	f240 6277 	movw	r2, #1655	@ 0x677
 8010cc4:	4982      	ldr	r1, [pc, #520]	@ (8010ed0 <lwip_netconn_do_writemore+0x288>)
 8010cc6:	487e      	ldr	r0, [pc, #504]	@ (8010ec0 <lwip_netconn_do_writemore+0x278>)
 8010cc8:	f00d fb4c 	bl	801e364 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6a1b      	ldr	r3, [r3, #32]
 8010cd0:	899b      	ldrh	r3, [r3, #12]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d106      	bne.n	8010ce4 <lwip_netconn_do_writemore+0x9c>
 8010cd6:	4b78      	ldr	r3, [pc, #480]	@ (8010eb8 <lwip_netconn_do_writemore+0x270>)
 8010cd8:	f240 6279 	movw	r2, #1657	@ 0x679
 8010cdc:	497d      	ldr	r1, [pc, #500]	@ (8010ed4 <lwip_netconn_do_writemore+0x28c>)
 8010cde:	4878      	ldr	r0, [pc, #480]	@ (8010ec0 <lwip_netconn_do_writemore+0x278>)
 8010ce0:	f00d fb40 	bl	801e364 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a1b      	ldr	r3, [r3, #32]
 8010ce8:	7f1b      	ldrb	r3, [r3, #28]
 8010cea:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	7f1b      	ldrb	r3, [r3, #28]
 8010cf0:	f003 0302 	and.w	r3, r3, #2
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d104      	bne.n	8010d02 <lwip_netconn_do_writemore+0xba>
 8010cf8:	7ebb      	ldrb	r3, [r7, #26]
 8010cfa:	f003 0304 	and.w	r3, r3, #4
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d001      	beq.n	8010d06 <lwip_netconn_do_writemore+0xbe>
 8010d02:	2301      	movs	r3, #1
 8010d04:	e000      	b.n	8010d08 <lwip_netconn_do_writemore+0xc0>
 8010d06:	2300      	movs	r3, #0
 8010d08:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6a1b      	ldr	r3, [r3, #32]
 8010d0e:	689b      	ldr	r3, [r3, #8]
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a1b      	ldr	r3, [r3, #32]
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	4413      	add	r3, r2
 8010d1a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6a1b      	ldr	r3, [r3, #32]
 8010d20:	689b      	ldr	r3, [r3, #8]
 8010d22:	685a      	ldr	r2, [r3, #4]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a1b      	ldr	r3, [r3, #32]
 8010d28:	691b      	ldr	r3, [r3, #16]
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d34:	d307      	bcc.n	8010d46 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010d3a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010d3c:	7ebb      	ldrb	r3, [r7, #26]
 8010d3e:	f043 0302 	orr.w	r3, r3, #2
 8010d42:	76bb      	strb	r3, [r7, #26]
 8010d44:	e001      	b.n	8010d4a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d52:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010d54:	89fa      	ldrh	r2, [r7, #14]
 8010d56:	8bbb      	ldrh	r3, [r7, #28]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d216      	bcs.n	8010d8a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010d5c:	89fb      	ldrh	r3, [r7, #14]
 8010d5e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010d60:	7e3b      	ldrb	r3, [r7, #24]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00d      	beq.n	8010d82 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010d66:	8bbb      	ldrh	r3, [r7, #28]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d10e      	bne.n	8010d8a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6a1b      	ldr	r3, [r3, #32]
 8010d70:	699b      	ldr	r3, [r3, #24]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d102      	bne.n	8010d7c <lwip_netconn_do_writemore+0x134>
 8010d76:	f06f 0306 	mvn.w	r3, #6
 8010d7a:	e000      	b.n	8010d7e <lwip_netconn_do_writemore+0x136>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010d80:	e07d      	b.n	8010e7e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010d82:	7ebb      	ldrb	r3, [r7, #26]
 8010d84:	f043 0302 	orr.w	r3, r3, #2
 8010d88:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	691a      	ldr	r2, [r3, #16]
 8010d90:	8bbb      	ldrh	r3, [r7, #28]
 8010d92:	441a      	add	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6a1b      	ldr	r3, [r3, #32]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d906      	bls.n	8010dae <lwip_netconn_do_writemore+0x166>
 8010da0:	4b45      	ldr	r3, [pc, #276]	@ (8010eb8 <lwip_netconn_do_writemore+0x270>)
 8010da2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8010da6:	494c      	ldr	r1, [pc, #304]	@ (8010ed8 <lwip_netconn_do_writemore+0x290>)
 8010da8:	4845      	ldr	r0, [pc, #276]	@ (8010ec0 <lwip_netconn_do_writemore+0x278>)
 8010daa:	f00d fadb 	bl	801e364 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010dae:	8bbb      	ldrh	r3, [r7, #28]
 8010db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d103      	bne.n	8010dc0 <lwip_netconn_do_writemore+0x178>
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010dbe:	d209      	bcs.n	8010dd4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010dc4:	8bba      	ldrh	r2, [r7, #28]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d10b      	bne.n	8010de2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a1b      	ldr	r3, [r3, #32]
 8010dce:	899b      	ldrh	r3, [r3, #12]
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	d906      	bls.n	8010de2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010dd8:	7ebb      	ldrb	r3, [r7, #26]
 8010dda:	f043 0302 	orr.w	r3, r3, #2
 8010dde:	76bb      	strb	r3, [r7, #26]
 8010de0:	e001      	b.n	8010de6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8010de2:	2300      	movs	r3, #0
 8010de4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6858      	ldr	r0, [r3, #4]
 8010dea:	7ebb      	ldrb	r3, [r7, #26]
 8010dec:	8bba      	ldrh	r2, [r7, #28]
 8010dee:	6979      	ldr	r1, [r7, #20]
 8010df0:	f007 fbe2 	bl	80185b8 <tcp_write>
 8010df4:	4603      	mov	r3, r0
 8010df6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010df8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d12c      	bne.n	8010e5a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a1b      	ldr	r3, [r3, #32]
 8010e04:	6999      	ldr	r1, [r3, #24]
 8010e06:	8bba      	ldrh	r2, [r7, #28]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6a1b      	ldr	r3, [r3, #32]
 8010e0c:	440a      	add	r2, r1
 8010e0e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6a1b      	ldr	r3, [r3, #32]
 8010e14:	6919      	ldr	r1, [r3, #16]
 8010e16:	8bba      	ldrh	r2, [r7, #28]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6a1b      	ldr	r3, [r3, #32]
 8010e1c:	440a      	add	r2, r1
 8010e1e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6a1b      	ldr	r3, [r3, #32]
 8010e24:	691a      	ldr	r2, [r3, #16]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6a1b      	ldr	r3, [r3, #32]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d113      	bne.n	8010e5a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6a1b      	ldr	r3, [r3, #32]
 8010e36:	899a      	ldrh	r2, [r3, #12]
 8010e38:	3a01      	subs	r2, #1
 8010e3a:	b292      	uxth	r2, r2
 8010e3c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6a1b      	ldr	r3, [r3, #32]
 8010e42:	899b      	ldrh	r3, [r3, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d008      	beq.n	8010e5a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6a1b      	ldr	r3, [r3, #32]
 8010e4c:	689a      	ldr	r2, [r3, #8]
 8010e4e:	3208      	adds	r2, #8
 8010e50:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6a1b      	ldr	r3, [r3, #32]
 8010e56:	2200      	movs	r2, #0
 8010e58:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010e5a:	7e7b      	ldrb	r3, [r7, #25]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d004      	beq.n	8010e6a <lwip_netconn_do_writemore+0x222>
 8010e60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	f43f af50 	beq.w	8010d0a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010e6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d004      	beq.n	8010e7c <lwip_netconn_do_writemore+0x234>
 8010e72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010e7a:	d146      	bne.n	8010f0a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010e7c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010e7e:	7e3b      	ldrb	r3, [r7, #24]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d02b      	beq.n	8010edc <lwip_netconn_do_writemore+0x294>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6a1b      	ldr	r3, [r3, #32]
 8010e88:	699a      	ldr	r2, [r3, #24]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6a1b      	ldr	r3, [r3, #32]
 8010e8e:	695b      	ldr	r3, [r3, #20]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d223      	bcs.n	8010edc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d005      	beq.n	8010ea8 <lwip_netconn_do_writemore+0x260>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	2103      	movs	r1, #3
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	7f1b      	ldrb	r3, [r3, #28]
 8010eac:	f043 0310 	orr.w	r3, r3, #16
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	771a      	strb	r2, [r3, #28]
 8010eb6:	e028      	b.n	8010f0a <lwip_netconn_do_writemore+0x2c2>
 8010eb8:	08020d60 	.word	0x08020d60
 8010ebc:	08020eb8 	.word	0x08020eb8
 8010ec0:	08020da4 	.word	0x08020da4
 8010ec4:	080211c0 	.word	0x080211c0
 8010ec8:	08020ec8 	.word	0x08020ec8
 8010ecc:	080211e0 	.word	0x080211e0
 8010ed0:	080211f8 	.word	0x080211f8
 8010ed4:	08021238 	.word	0x08021238
 8010ed8:	08021260 	.word	0x08021260
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010ee4:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010ee8:	d305      	bcc.n	8010ef6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010ef2:	2b04      	cmp	r3, #4
 8010ef4:	d909      	bls.n	8010f0a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d005      	beq.n	8010f0a <lwip_netconn_do_writemore+0x2c2>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f02:	2200      	movs	r2, #0
 8010f04:	2103      	movs	r1, #3
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010f0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d11d      	bne.n	8010f4e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a1b      	ldr	r3, [r3, #32]
 8010f16:	699a      	ldr	r2, [r3, #24]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6a1b      	ldr	r3, [r3, #32]
 8010f1c:	695b      	ldr	r3, [r3, #20]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d002      	beq.n	8010f28 <lwip_netconn_do_writemore+0x2e0>
 8010f22:	7e3b      	ldrb	r3, [r7, #24]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d001      	beq.n	8010f2c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010f28:	2301      	movs	r3, #1
 8010f2a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	4618      	mov	r0, r3
 8010f32:	f008 f92b 	bl	801918c <tcp_output>
 8010f36:	4603      	mov	r3, r0
 8010f38:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010f3a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010f3e:	f113 0f04 	cmn.w	r3, #4
 8010f42:	d12c      	bne.n	8010f9e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010f44:	7b3b      	ldrb	r3, [r7, #12]
 8010f46:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	76fb      	strb	r3, [r7, #27]
 8010f4c:	e027      	b.n	8010f9e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010f4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f56:	d120      	bne.n	8010f9a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f008 f915 	bl	801918c <tcp_output>
 8010f62:	4603      	mov	r3, r0
 8010f64:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010f66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010f6a:	f113 0f04 	cmn.w	r3, #4
 8010f6e:	d104      	bne.n	8010f7a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010f70:	7b7b      	ldrb	r3, [r7, #13]
 8010f72:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010f74:	2301      	movs	r3, #1
 8010f76:	76fb      	strb	r3, [r7, #27]
 8010f78:	e011      	b.n	8010f9e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010f7a:	7e3b      	ldrb	r3, [r7, #24]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00e      	beq.n	8010f9e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6a1b      	ldr	r3, [r3, #32]
 8010f84:	699b      	ldr	r3, [r3, #24]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d102      	bne.n	8010f90 <lwip_netconn_do_writemore+0x348>
 8010f8a:	f06f 0306 	mvn.w	r3, #6
 8010f8e:	e000      	b.n	8010f92 <lwip_netconn_do_writemore+0x34a>
 8010f90:	2300      	movs	r3, #0
 8010f92:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010f94:	2301      	movs	r3, #1
 8010f96:	76fb      	strb	r3, [r7, #27]
 8010f98:	e001      	b.n	8010f9e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010f9e:	7efb      	ldrb	r3, [r7, #27]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d015      	beq.n	8010fd0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6a1b      	ldr	r3, [r3, #32]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	330c      	adds	r3, #12
 8010fac:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a1b      	ldr	r3, [r3, #32]
 8010fb2:	7ffa      	ldrb	r2, [r7, #31]
 8010fb4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010fc2:	78fb      	ldrb	r3, [r7, #3]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d006      	beq.n	8010fd6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010fc8:	68b8      	ldr	r0, [r7, #8]
 8010fca:	f00c fbbf 	bl	801d74c <sys_sem_signal>
 8010fce:	e002      	b.n	8010fd6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010fd4:	e000      	b.n	8010fd8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010fd6:	2300      	movs	r3, #0
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7fe fe91 	bl	800fd18 <netconn_err>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d166      	bne.n	80110d0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801100c:	2b10      	cmp	r3, #16
 801100e:	d15d      	bne.n	80110cc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	785b      	ldrb	r3, [r3, #1]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d002      	beq.n	8011020 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801101a:	23fb      	movs	r3, #251	@ 0xfb
 801101c:	73fb      	strb	r3, [r7, #15]
 801101e:	e057      	b.n	80110d0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d04d      	beq.n	80110c6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2201      	movs	r2, #1
 8011030:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	6a1b      	ldr	r3, [r3, #32]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d006      	beq.n	801104a <lwip_netconn_do_write+0x6a>
 801103c:	4b28      	ldr	r3, [pc, #160]	@ (80110e0 <lwip_netconn_do_write+0x100>)
 801103e:	f240 7223 	movw	r2, #1827	@ 0x723
 8011042:	4928      	ldr	r1, [pc, #160]	@ (80110e4 <lwip_netconn_do_write+0x104>)
 8011044:	4828      	ldr	r0, [pc, #160]	@ (80110e8 <lwip_netconn_do_write+0x108>)
 8011046:	f00d f98d 	bl	801e364 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	695b      	ldr	r3, [r3, #20]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d106      	bne.n	8011060 <lwip_netconn_do_write+0x80>
 8011052:	4b23      	ldr	r3, [pc, #140]	@ (80110e0 <lwip_netconn_do_write+0x100>)
 8011054:	f240 7224 	movw	r2, #1828	@ 0x724
 8011058:	4924      	ldr	r1, [pc, #144]	@ (80110ec <lwip_netconn_do_write+0x10c>)
 801105a:	4823      	ldr	r0, [pc, #140]	@ (80110e8 <lwip_netconn_do_write+0x108>)
 801105c:	f00d f982 	bl	801e364 <iprintf>
        msg->conn->current_msg = msg;
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	68ba      	ldr	r2, [r7, #8]
 8011066:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2100      	movs	r1, #0
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fdea 	bl	8010c48 <lwip_netconn_do_writemore>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d02e      	beq.n	80110d8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	785b      	ldrb	r3, [r3, #1]
 8011080:	2b01      	cmp	r3, #1
 8011082:	d006      	beq.n	8011092 <lwip_netconn_do_write+0xb2>
 8011084:	4b16      	ldr	r3, [pc, #88]	@ (80110e0 <lwip_netconn_do_write+0x100>)
 8011086:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 801108a:	4919      	ldr	r1, [pc, #100]	@ (80110f0 <lwip_netconn_do_write+0x110>)
 801108c:	4816      	ldr	r0, [pc, #88]	@ (80110e8 <lwip_netconn_do_write+0x108>)
 801108e:	f00d f969 	bl	801e364 <iprintf>
          UNLOCK_TCPIP_CORE();
 8011092:	4818      	ldr	r0, [pc, #96]	@ (80110f4 <lwip_netconn_do_write+0x114>)
 8011094:	f00c fbc3 	bl	801d81e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	330c      	adds	r3, #12
 801109e:	2100      	movs	r1, #0
 80110a0:	4618      	mov	r0, r3
 80110a2:	f00c fb22 	bl	801d6ea <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80110a6:	4813      	ldr	r0, [pc, #76]	@ (80110f4 <lwip_netconn_do_write+0x114>)
 80110a8:	f00c fbaa 	bl	801d800 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	785b      	ldrb	r3, [r3, #1]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d110      	bne.n	80110d8 <lwip_netconn_do_write+0xf8>
 80110b6:	4b0a      	ldr	r3, [pc, #40]	@ (80110e0 <lwip_netconn_do_write+0x100>)
 80110b8:	f240 722c 	movw	r2, #1836	@ 0x72c
 80110bc:	490c      	ldr	r1, [pc, #48]	@ (80110f0 <lwip_netconn_do_write+0x110>)
 80110be:	480a      	ldr	r0, [pc, #40]	@ (80110e8 <lwip_netconn_do_write+0x108>)
 80110c0:	f00d f950 	bl	801e364 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80110c4:	e008      	b.n	80110d8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80110c6:	23f5      	movs	r3, #245	@ 0xf5
 80110c8:	73fb      	strb	r3, [r7, #15]
 80110ca:	e001      	b.n	80110d0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80110cc:	23fa      	movs	r3, #250	@ 0xfa
 80110ce:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	7bfa      	ldrb	r2, [r7, #15]
 80110d4:	711a      	strb	r2, [r3, #4]
 80110d6:	e000      	b.n	80110da <lwip_netconn_do_write+0xfa>
        return;
 80110d8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	08020d60 	.word	0x08020d60
 80110e4:	08021104 	.word	0x08021104
 80110e8:	08020da4 	.word	0x08020da4
 80110ec:	0802128c 	.word	0x0802128c
 80110f0:	08021120 	.word	0x08021120
 80110f4:	20009dd0 	.word	0x20009dd0

080110f8 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	4603      	mov	r3, r0
 8011100:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8011102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011106:	2b00      	cmp	r3, #0
 8011108:	dc04      	bgt.n	8011114 <err_to_errno+0x1c>
 801110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801110e:	f113 0f10 	cmn.w	r3, #16
 8011112:	da01      	bge.n	8011118 <err_to_errno+0x20>
    return EIO;
 8011114:	2305      	movs	r3, #5
 8011116:	e005      	b.n	8011124 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8011118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801111c:	425b      	negs	r3, r3
 801111e:	4a04      	ldr	r2, [pc, #16]	@ (8011130 <err_to_errno+0x38>)
 8011120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8011124:	4618      	mov	r0, r3
 8011126:	370c      	adds	r7, #12
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr
 8011130:	08024558 	.word	0x08024558

08011134 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d013      	beq.n	801116a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d00b      	beq.n	8011162 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	4618      	mov	r0, r3
 8011150:	f002 fcb4 	bl	8013abc <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	605a      	str	r2, [r3, #4]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	685a      	ldr	r2, [r3, #4]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011162:	6879      	ldr	r1, [r7, #4]
 8011164:	2006      	movs	r0, #6
 8011166:	f001 fe05 	bl	8012d74 <memp_free>
  }
}
 801116a:	bf00      	nop
 801116c:	3708      	adds	r7, #8
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
	...

08011174 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d106      	bne.n	8011190 <netbuf_free+0x1c>
 8011182:	4b0d      	ldr	r3, [pc, #52]	@ (80111b8 <netbuf_free+0x44>)
 8011184:	2281      	movs	r2, #129	@ 0x81
 8011186:	490d      	ldr	r1, [pc, #52]	@ (80111bc <netbuf_free+0x48>)
 8011188:	480d      	ldr	r0, [pc, #52]	@ (80111c0 <netbuf_free+0x4c>)
 801118a:	f00d f8eb 	bl	801e364 <iprintf>
 801118e:	e00f      	b.n	80111b0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d004      	beq.n	80111a2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4618      	mov	r0, r3
 801119e:	f002 fc8d 	bl	8013abc <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	605a      	str	r2, [r3, #4]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	685a      	ldr	r2, [r3, #4]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80111b0:	3708      	adds	r7, #8
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	080212e0 	.word	0x080212e0
 80111bc:	0802137c 	.word	0x0802137c
 80111c0:	08021330 	.word	0x08021330

080111c4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	4613      	mov	r3, r2
 80111d0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d108      	bne.n	80111ea <netbuf_ref+0x26>
 80111d8:	4b1c      	ldr	r3, [pc, #112]	@ (801124c <netbuf_ref+0x88>)
 80111da:	2299      	movs	r2, #153	@ 0x99
 80111dc:	491c      	ldr	r1, [pc, #112]	@ (8011250 <netbuf_ref+0x8c>)
 80111de:	481d      	ldr	r0, [pc, #116]	@ (8011254 <netbuf_ref+0x90>)
 80111e0:	f00d f8c0 	bl	801e364 <iprintf>
 80111e4:	f06f 030f 	mvn.w	r3, #15
 80111e8:	e02b      	b.n	8011242 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d004      	beq.n	80111fc <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f002 fc60 	bl	8013abc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80111fc:	2241      	movs	r2, #65	@ 0x41
 80111fe:	2100      	movs	r1, #0
 8011200:	2036      	movs	r0, #54	@ 0x36
 8011202:	f002 f977 	bl	80134f4 <pbuf_alloc>
 8011206:	4602      	mov	r2, r0
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d105      	bne.n	8011220 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2200      	movs	r2, #0
 8011218:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801121a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801121e:	e010      	b.n	8011242 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	88fa      	ldrh	r2, [r7, #6]
 801122e:	811a      	strh	r2, [r3, #8]
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	6812      	ldr	r2, [r2, #0]
 8011234:	891b      	ldrh	r3, [r3, #8]
 8011236:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	080212e0 	.word	0x080212e0
 8011250:	08021398 	.word	0x08021398
 8011254:	08021330 	.word	0x08021330

08011258 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	db02      	blt.n	8011270 <tryget_socket_unconn_nouse+0x18>
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2b03      	cmp	r3, #3
 801126e:	dd01      	ble.n	8011274 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8011270:	2300      	movs	r3, #0
 8011272:	e003      	b.n	801127c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	011b      	lsls	r3, r3, #4
 8011278:	4a03      	ldr	r2, [pc, #12]	@ (8011288 <tryget_socket_unconn_nouse+0x30>)
 801127a:	4413      	add	r3, r2
}
 801127c:	4618      	mov	r0, r3
 801127e:	3714      	adds	r7, #20
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr
 8011288:	20009d80 	.word	0x20009d80

0801128c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f7ff ffdf 	bl	8011258 <tryget_socket_unconn_nouse>
 801129a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 801129c:	68fb      	ldr	r3, [r7, #12]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b084      	sub	sp, #16
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7ff ffec 	bl	801128c <tryget_socket_unconn>
 80112b4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d005      	beq.n	80112c8 <tryget_socket+0x22>
    if (sock->conn) {
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d001      	beq.n	80112c8 <tryget_socket+0x22>
      return sock;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	e000      	b.n	80112ca <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
	...

080112d4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff ffe2 	bl	80112a6 <tryget_socket>
 80112e2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d104      	bne.n	80112f4 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80112ea:	4b05      	ldr	r3, [pc, #20]	@ (8011300 <get_socket+0x2c>)
 80112ec:	2209      	movs	r2, #9
 80112ee:	601a      	str	r2, [r3, #0]
    return NULL;
 80112f0:	2300      	movs	r3, #0
 80112f2:	e000      	b.n	80112f6 <get_socket+0x22>
  }
  return sock;
 80112f4:	68fb      	ldr	r3, [r7, #12]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3710      	adds	r7, #16
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	2000ff58 	.word	0x2000ff58

08011304 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801130e:	2300      	movs	r3, #0
 8011310:	60fb      	str	r3, [r7, #12]
 8011312:	e052      	b.n	80113ba <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8011314:	f00c fab0 	bl	801d878 <sys_arch_protect>
 8011318:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 801131a:	4a2c      	ldr	r2, [pc, #176]	@ (80113cc <alloc_socket+0xc8>)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	011b      	lsls	r3, r3, #4
 8011320:	4413      	add	r3, r2
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d142      	bne.n	80113ae <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8011328:	4a28      	ldr	r2, [pc, #160]	@ (80113cc <alloc_socket+0xc8>)
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	011b      	lsls	r3, r3, #4
 801132e:	4413      	add	r3, r2
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8011334:	68b8      	ldr	r0, [r7, #8]
 8011336:	f00c faad 	bl	801d894 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 801133a:	4a24      	ldr	r2, [pc, #144]	@ (80113cc <alloc_socket+0xc8>)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	011b      	lsls	r3, r3, #4
 8011340:	4413      	add	r3, r2
 8011342:	3304      	adds	r3, #4
 8011344:	2200      	movs	r2, #0
 8011346:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8011348:	4a20      	ldr	r2, [pc, #128]	@ (80113cc <alloc_socket+0xc8>)
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	011b      	lsls	r3, r3, #4
 801134e:	4413      	add	r3, r2
 8011350:	330e      	adds	r3, #14
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d006      	beq.n	8011366 <alloc_socket+0x62>
 8011358:	4b1d      	ldr	r3, [pc, #116]	@ (80113d0 <alloc_socket+0xcc>)
 801135a:	f240 220e 	movw	r2, #526	@ 0x20e
 801135e:	491d      	ldr	r1, [pc, #116]	@ (80113d4 <alloc_socket+0xd0>)
 8011360:	481d      	ldr	r0, [pc, #116]	@ (80113d8 <alloc_socket+0xd4>)
 8011362:	f00c ffff 	bl	801e364 <iprintf>
      sockets[i].rcvevent   = 0;
 8011366:	4a19      	ldr	r2, [pc, #100]	@ (80113cc <alloc_socket+0xc8>)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	011b      	lsls	r3, r3, #4
 801136c:	4413      	add	r3, r2
 801136e:	3308      	adds	r3, #8
 8011370:	2200      	movs	r2, #0
 8011372:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801137c:	2b10      	cmp	r3, #16
 801137e:	d102      	bne.n	8011386 <alloc_socket+0x82>
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d001      	beq.n	801138a <alloc_socket+0x86>
 8011386:	2301      	movs	r3, #1
 8011388:	e000      	b.n	801138c <alloc_socket+0x88>
 801138a:	2300      	movs	r3, #0
 801138c:	b299      	uxth	r1, r3
 801138e:	4a0f      	ldr	r2, [pc, #60]	@ (80113cc <alloc_socket+0xc8>)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	011b      	lsls	r3, r3, #4
 8011394:	4413      	add	r3, r2
 8011396:	330a      	adds	r3, #10
 8011398:	460a      	mov	r2, r1
 801139a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 801139c:	4a0b      	ldr	r2, [pc, #44]	@ (80113cc <alloc_socket+0xc8>)
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	011b      	lsls	r3, r3, #4
 80113a2:	4413      	add	r3, r2
 80113a4:	330c      	adds	r3, #12
 80113a6:	2200      	movs	r2, #0
 80113a8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	e00a      	b.n	80113c4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80113ae:	68b8      	ldr	r0, [r7, #8]
 80113b0:	f00c fa70 	bl	801d894 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	3301      	adds	r3, #1
 80113b8:	60fb      	str	r3, [r7, #12]
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2b03      	cmp	r3, #3
 80113be:	dda9      	ble.n	8011314 <alloc_socket+0x10>
  }
  return -1;
 80113c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3710      	adds	r7, #16
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	20009d80 	.word	0x20009d80
 80113d0:	08021478 	.word	0x08021478
 80113d4:	080214ac 	.word	0x080214ac
 80113d8:	080214cc 	.word	0x080214cc

080113dc <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b08a      	sub	sp, #40	@ 0x28
 80113e0:	af02      	add	r7, sp, #8
 80113e2:	60f8      	str	r0, [r7, #12]
 80113e4:	60b9      	str	r1, [r7, #8]
 80113e6:	607a      	str	r2, [r7, #4]
 80113e8:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7ff ff72 	bl	80112d4 <get_socket>
 80113f0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d102      	bne.n	80113fe <lwip_send+0x22>
    return -1;
 80113f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80113fc:	e046      	b.n	801148c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011408:	2b10      	cmp	r3, #16
 801140a:	d00b      	beq.n	8011424 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 801140c:	2300      	movs	r3, #0
 801140e:	9301      	str	r3, [sp, #4]
 8011410:	2300      	movs	r3, #0
 8011412:	9300      	str	r3, [sp, #0]
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	68b9      	ldr	r1, [r7, #8]
 801141a:	68f8      	ldr	r0, [r7, #12]
 801141c:	f000 f83c 	bl	8011498 <lwip_sendto>
 8011420:	4603      	mov	r3, r0
 8011422:	e033      	b.n	801148c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 801142a:	2b00      	cmp	r3, #0
 801142c:	d001      	beq.n	8011432 <lwip_send+0x56>
 801142e:	2203      	movs	r2, #3
 8011430:	e000      	b.n	8011434 <lwip_send+0x58>
 8011432:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	105b      	asrs	r3, r3, #1
 8011438:	b25b      	sxtb	r3, r3
 801143a:	f003 0304 	and.w	r3, r3, #4
 801143e:	b25b      	sxtb	r3, r3
 8011440:	4313      	orrs	r3, r2
 8011442:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8011444:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	6818      	ldr	r0, [r3, #0]
 801144e:	7efa      	ldrb	r2, [r7, #27]
 8011450:	f107 0310 	add.w	r3, r7, #16
 8011454:	9300      	str	r3, [sp, #0]
 8011456:	4613      	mov	r3, r2
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	68b9      	ldr	r1, [r7, #8]
 801145c:	f7fe fb8a 	bl	800fb74 <netconn_write_partly>
 8011460:	4603      	mov	r3, r0
 8011462:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8011464:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff fe45 	bl	80110f8 <err_to_errno>
 801146e:	6178      	str	r0, [r7, #20]
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d002      	beq.n	801147c <lwip_send+0xa0>
 8011476:	4a07      	ldr	r2, [pc, #28]	@ (8011494 <lwip_send+0xb8>)
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 801147c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d101      	bne.n	8011488 <lwip_send+0xac>
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	e001      	b.n	801148c <lwip_send+0xb0>
 8011488:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801148c:	4618      	mov	r0, r3
 801148e:	3720      	adds	r7, #32
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	2000ff58 	.word	0x2000ff58

08011498 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b08e      	sub	sp, #56	@ 0x38
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]
 80114a4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f7ff ff14 	bl	80112d4 <get_socket>
 80114ac:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 80114ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d102      	bne.n	80114ba <lwip_sendto+0x22>
    return -1;
 80114b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80114b8:	e093      	b.n	80115e2 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80114ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80114c4:	2b10      	cmp	r3, #16
 80114c6:	d107      	bne.n	80114d8 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	68b9      	ldr	r1, [r7, #8]
 80114ce:	68f8      	ldr	r0, [r7, #12]
 80114d0:	f7ff ff84 	bl	80113dc <lwip_send>
 80114d4:	4603      	mov	r3, r0
 80114d6:	e084      	b.n	80115e2 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80114de:	d30a      	bcc.n	80114f6 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 80114e0:	235a      	movs	r3, #90	@ 0x5a
 80114e2:	623b      	str	r3, [r7, #32]
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d002      	beq.n	80114f0 <lwip_sendto+0x58>
 80114ea:	4a40      	ldr	r2, [pc, #256]	@ (80115ec <lwip_sendto+0x154>)
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80114f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80114f4:	e075      	b.n	80115e2 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80114fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d102      	bne.n	8011506 <lwip_sendto+0x6e>
 8011500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011502:	2b00      	cmp	r3, #0
 8011504:	d023      	beq.n	801154e <lwip_sendto+0xb6>
 8011506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011508:	2b10      	cmp	r3, #16
 801150a:	d10b      	bne.n	8011524 <lwip_sendto+0x8c>
 801150c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801150e:	2b00      	cmp	r3, #0
 8011510:	d008      	beq.n	8011524 <lwip_sendto+0x8c>
 8011512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011514:	785b      	ldrb	r3, [r3, #1]
 8011516:	2b02      	cmp	r3, #2
 8011518:	d104      	bne.n	8011524 <lwip_sendto+0x8c>
 801151a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801151c:	f003 0303 	and.w	r3, r3, #3
 8011520:	2b00      	cmp	r3, #0
 8011522:	d014      	beq.n	801154e <lwip_sendto+0xb6>
 8011524:	4b32      	ldr	r3, [pc, #200]	@ (80115f0 <lwip_sendto+0x158>)
 8011526:	f240 6252 	movw	r2, #1618	@ 0x652
 801152a:	4932      	ldr	r1, [pc, #200]	@ (80115f4 <lwip_sendto+0x15c>)
 801152c:	4832      	ldr	r0, [pc, #200]	@ (80115f8 <lwip_sendto+0x160>)
 801152e:	f00c ff19 	bl	801e364 <iprintf>
 8011532:	f06f 000f 	mvn.w	r0, #15
 8011536:	f7ff fddf 	bl	80110f8 <err_to_errno>
 801153a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801153c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801153e:	2b00      	cmp	r3, #0
 8011540:	d002      	beq.n	8011548 <lwip_sendto+0xb0>
 8011542:	4a2a      	ldr	r2, [pc, #168]	@ (80115ec <lwip_sendto+0x154>)
 8011544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011546:	6013      	str	r3, [r2, #0]
 8011548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801154c:	e049      	b.n	80115e2 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 801154e:	2300      	movs	r3, #0
 8011550:	617b      	str	r3, [r7, #20]
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8011556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00a      	beq.n	8011572 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 801155c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	61bb      	str	r3, [r7, #24]
 8011562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011564:	885b      	ldrh	r3, [r3, #2]
 8011566:	4618      	mov	r0, r3
 8011568:	f000 fbec 	bl	8011d44 <lwip_htons>
 801156c:	4603      	mov	r3, r0
 801156e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011570:	e003      	b.n	801157a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8011572:	2300      	movs	r3, #0
 8011574:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8011576:	2300      	movs	r3, #0
 8011578:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 801157a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801157c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 801157e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011580:	f107 0310 	add.w	r3, r7, #16
 8011584:	68b9      	ldr	r1, [r7, #8]
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff fe1c 	bl	80111c4 <netbuf_ref>
 801158c:	4603      	mov	r3, r0
 801158e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8011592:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10a      	bne.n	80115b0 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 801159a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f107 0210 	add.w	r2, r7, #16
 80115a2:	4611      	mov	r1, r2
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fe fab7 	bl	800fb18 <netconn_send>
 80115aa:	4603      	mov	r3, r0
 80115ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 80115b0:	f107 0310 	add.w	r3, r7, #16
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff fddd 	bl	8011174 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 80115ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80115be:	4618      	mov	r0, r3
 80115c0:	f7ff fd9a 	bl	80110f8 <err_to_errno>
 80115c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80115c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d002      	beq.n	80115d2 <lwip_sendto+0x13a>
 80115cc:	4a07      	ldr	r2, [pc, #28]	@ (80115ec <lwip_sendto+0x154>)
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 80115d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d101      	bne.n	80115de <lwip_sendto+0x146>
 80115da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80115dc:	e001      	b.n	80115e2 <lwip_sendto+0x14a>
 80115de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3738      	adds	r7, #56	@ 0x38
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	2000ff58 	.word	0x2000ff58
 80115f0:	08021478 	.word	0x08021478
 80115f4:	08021758 	.word	0x08021758
 80115f8:	080214cc 	.word	0x080214cc

080115fc <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	60f8      	str	r0, [r7, #12]
 8011604:	60b9      	str	r1, [r7, #8]
 8011606:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2b03      	cmp	r3, #3
 801160c:	d009      	beq.n	8011622 <lwip_socket+0x26>
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	2b03      	cmp	r3, #3
 8011612:	dc23      	bgt.n	801165c <lwip_socket+0x60>
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d019      	beq.n	801164e <lwip_socket+0x52>
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	2b02      	cmp	r3, #2
 801161e:	d009      	beq.n	8011634 <lwip_socket+0x38>
 8011620:	e01c      	b.n	801165c <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	b2db      	uxtb	r3, r3
 8011626:	4a22      	ldr	r2, [pc, #136]	@ (80116b0 <lwip_socket+0xb4>)
 8011628:	4619      	mov	r1, r3
 801162a:	2040      	movs	r0, #64	@ 0x40
 801162c:	f7fe f9ba 	bl	800f9a4 <netconn_new_with_proto_and_callback>
 8011630:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8011632:	e019      	b.n	8011668 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2b88      	cmp	r3, #136	@ 0x88
 8011638:	d101      	bne.n	801163e <lwip_socket+0x42>
 801163a:	2321      	movs	r3, #33	@ 0x21
 801163c:	e000      	b.n	8011640 <lwip_socket+0x44>
 801163e:	2320      	movs	r3, #32
 8011640:	4a1b      	ldr	r2, [pc, #108]	@ (80116b0 <lwip_socket+0xb4>)
 8011642:	2100      	movs	r1, #0
 8011644:	4618      	mov	r0, r3
 8011646:	f7fe f9ad 	bl	800f9a4 <netconn_new_with_proto_and_callback>
 801164a:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801164c:	e00c      	b.n	8011668 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 801164e:	4a18      	ldr	r2, [pc, #96]	@ (80116b0 <lwip_socket+0xb4>)
 8011650:	2100      	movs	r1, #0
 8011652:	2010      	movs	r0, #16
 8011654:	f7fe f9a6 	bl	800f9a4 <netconn_new_with_proto_and_callback>
 8011658:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 801165a:	e005      	b.n	8011668 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 801165c:	4b15      	ldr	r3, [pc, #84]	@ (80116b4 <lwip_socket+0xb8>)
 801165e:	2216      	movs	r2, #22
 8011660:	601a      	str	r2, [r3, #0]
      return -1;
 8011662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011666:	e01e      	b.n	80116a6 <lwip_socket+0xaa>
  }

  if (!conn) {
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d105      	bne.n	801167a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 801166e:	4b11      	ldr	r3, [pc, #68]	@ (80116b4 <lwip_socket+0xb8>)
 8011670:	2269      	movs	r2, #105	@ 0x69
 8011672:	601a      	str	r2, [r3, #0]
    return -1;
 8011674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011678:	e015      	b.n	80116a6 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 801167a:	2100      	movs	r1, #0
 801167c:	6978      	ldr	r0, [r7, #20]
 801167e:	f7ff fe41 	bl	8011304 <alloc_socket>
 8011682:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801168a:	d108      	bne.n	801169e <lwip_socket+0xa2>
    netconn_delete(conn);
 801168c:	6978      	ldr	r0, [r7, #20]
 801168e:	f7fe fa27 	bl	800fae0 <netconn_delete>
    set_errno(ENFILE);
 8011692:	4b08      	ldr	r3, [pc, #32]	@ (80116b4 <lwip_socket+0xb8>)
 8011694:	2217      	movs	r2, #23
 8011696:	601a      	str	r2, [r3, #0]
    return -1;
 8011698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801169c:	e003      	b.n	80116a6 <lwip_socket+0xaa>
  }
  conn->socket = i;
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	693a      	ldr	r2, [r7, #16]
 80116a2:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 80116a4:	693b      	ldr	r3, [r7, #16]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3718      	adds	r7, #24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	08011741 	.word	0x08011741
 80116b4:	2000ff58 	.word	0x2000ff58

080116b8 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 80116b8:	b480      	push	{r7}
 80116ba:	b087      	sub	sp, #28
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
 80116c4:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80116c6:	2300      	movs	r3, #0
 80116c8:	617b      	str	r3, [r7, #20]
 80116ca:	e02c      	b.n	8011726 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	695a      	ldr	r2, [r3, #20]
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	00db      	lsls	r3, r3, #3
 80116d4:	4413      	add	r3, r2
 80116d6:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d11e      	bne.n	8011720 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d009      	beq.n	80116fc <lwip_poll_should_wake+0x44>
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d001      	beq.n	80116fc <lwip_poll_should_wake+0x44>
        return 1;
 80116f8:	2301      	movs	r3, #1
 80116fa:	e01a      	b.n	8011732 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d009      	beq.n	8011716 <lwip_poll_should_wake+0x5e>
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011708:	b29b      	uxth	r3, r3
 801170a:	f003 0302 	and.w	r3, r3, #2
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <lwip_poll_should_wake+0x5e>
        return 1;
 8011712:	2301      	movs	r3, #1
 8011714:	e00d      	b.n	8011732 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8011716:	6a3b      	ldr	r3, [r7, #32]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d001      	beq.n	8011720 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 801171c:	2301      	movs	r3, #1
 801171e:	e008      	b.n	8011732 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	3301      	adds	r3, #1
 8011724:	617b      	str	r3, [r7, #20]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	699b      	ldr	r3, [r3, #24]
 801172a:	697a      	ldr	r2, [r7, #20]
 801172c:	429a      	cmp	r2, r3
 801172e:	d3cd      	bcc.n	80116cc <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	371c      	adds	r7, #28
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr
	...

08011740 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b08a      	sub	sp, #40	@ 0x28
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	70fb      	strb	r3, [r7, #3]
 801174c:	4613      	mov	r3, r2
 801174e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 80a4 	beq.w	80118a0 <event_callback+0x160>
    s = conn->socket;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	699b      	ldr	r3, [r3, #24]
 801175c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 801175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011760:	2b00      	cmp	r3, #0
 8011762:	da18      	bge.n	8011796 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8011764:	f00c f888 	bl	801d878 <sys_arch_protect>
 8011768:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	699b      	ldr	r3, [r3, #24]
 801176e:	2b00      	cmp	r3, #0
 8011770:	da0b      	bge.n	801178a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8011772:	78fb      	ldrb	r3, [r7, #3]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d104      	bne.n	8011782 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	699b      	ldr	r3, [r3, #24]
 801177c:	1e5a      	subs	r2, r3, #1
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8011782:	69f8      	ldr	r0, [r7, #28]
 8011784:	f00c f886 	bl	801d894 <sys_arch_unprotect>
        return;
 8011788:	e08d      	b.n	80118a6 <event_callback+0x166>
      }
      s = conn->socket;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	699b      	ldr	r3, [r3, #24]
 801178e:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 8011790:	69f8      	ldr	r0, [r7, #28]
 8011792:	f00c f87f 	bl	801d894 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8011796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011798:	f7ff fd9c 	bl	80112d4 <get_socket>
 801179c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 801179e:	69bb      	ldr	r3, [r7, #24]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d07f      	beq.n	80118a4 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 80117a4:	2301      	movs	r3, #1
 80117a6:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 80117a8:	f00c f866 	bl	801d878 <sys_arch_protect>
 80117ac:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 80117ae:	78fb      	ldrb	r3, [r7, #3]
 80117b0:	2b04      	cmp	r3, #4
 80117b2:	d83e      	bhi.n	8011832 <event_callback+0xf2>
 80117b4:	a201      	add	r2, pc, #4	@ (adr r2, 80117bc <event_callback+0x7c>)
 80117b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117ba:	bf00      	nop
 80117bc:	080117d1 	.word	0x080117d1
 80117c0:	080117f3 	.word	0x080117f3
 80117c4:	0801180b 	.word	0x0801180b
 80117c8:	0801181f 	.word	0x0801181f
 80117cc:	0801182b 	.word	0x0801182b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80117d0:	69bb      	ldr	r3, [r7, #24]
 80117d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	3301      	adds	r3, #1
 80117da:	b29b      	uxth	r3, r3
 80117dc:	b21a      	sxth	r2, r3
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	dd2a      	ble.n	8011842 <event_callback+0x102>
        check_waiters = 0;
 80117ec:	2300      	movs	r3, #0
 80117ee:	623b      	str	r3, [r7, #32]
      }
      break;
 80117f0:	e027      	b.n	8011842 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	3b01      	subs	r3, #1
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	b21a      	sxth	r2, r3
 8011800:	69bb      	ldr	r3, [r7, #24]
 8011802:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8011804:	2300      	movs	r3, #0
 8011806:	623b      	str	r3, [r7, #32]
      break;
 8011808:	e01c      	b.n	8011844 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	895b      	ldrh	r3, [r3, #10]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <event_callback+0xd6>
        check_waiters = 0;
 8011812:	2300      	movs	r3, #0
 8011814:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8011816:	69bb      	ldr	r3, [r7, #24]
 8011818:	2201      	movs	r2, #1
 801181a:	815a      	strh	r2, [r3, #10]
      break;
 801181c:	e012      	b.n	8011844 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	2200      	movs	r2, #0
 8011822:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8011824:	2300      	movs	r3, #0
 8011826:	623b      	str	r3, [r7, #32]
      break;
 8011828:	e00c      	b.n	8011844 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	2201      	movs	r2, #1
 801182e:	819a      	strh	r2, [r3, #12]
      break;
 8011830:	e008      	b.n	8011844 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8011832:	4b1e      	ldr	r3, [pc, #120]	@ (80118ac <event_callback+0x16c>)
 8011834:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8011838:	491d      	ldr	r1, [pc, #116]	@ (80118b0 <event_callback+0x170>)
 801183a:	481e      	ldr	r0, [pc, #120]	@ (80118b4 <event_callback+0x174>)
 801183c:	f00c fd92 	bl	801e364 <iprintf>
      break;
 8011840:	e000      	b.n	8011844 <event_callback+0x104>
      break;
 8011842:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	7b9b      	ldrb	r3, [r3, #14]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d025      	beq.n	8011898 <event_callback+0x158>
 801184c:	6a3b      	ldr	r3, [r7, #32]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d022      	beq.n	8011898 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	bfcc      	ite	gt
 801185c:	2301      	movgt	r3, #1
 801185e:	2300      	movle	r3, #0
 8011860:	b2db      	uxtb	r3, r3
 8011862:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	895b      	ldrh	r3, [r3, #10]
 8011868:	2b00      	cmp	r3, #0
 801186a:	bf14      	ite	ne
 801186c:	2301      	movne	r3, #1
 801186e:	2300      	moveq	r3, #0
 8011870:	b2db      	uxtb	r3, r3
 8011872:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	899b      	ldrh	r3, [r3, #12]
 8011878:	2b00      	cmp	r3, #0
 801187a:	bf14      	ite	ne
 801187c:	2301      	movne	r3, #1
 801187e:	2300      	moveq	r3, #0
 8011880:	b2db      	uxtb	r3, r3
 8011882:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8011884:	69f8      	ldr	r0, [r7, #28]
 8011886:	f00c f805 	bl	801d894 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	693a      	ldr	r2, [r7, #16]
 801188e:	6979      	ldr	r1, [r7, #20]
 8011890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011892:	f000 f811 	bl	80118b8 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8011896:	e006      	b.n	80118a6 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8011898:	69f8      	ldr	r0, [r7, #28]
 801189a:	f00b fffb 	bl	801d894 <sys_arch_unprotect>
 801189e:	e002      	b.n	80118a6 <event_callback+0x166>
    return;
 80118a0:	bf00      	nop
 80118a2:	e000      	b.n	80118a6 <event_callback+0x166>
      return;
 80118a4:	bf00      	nop
  }
  done_socket(sock);
}
 80118a6:	3728      	adds	r7, #40	@ 0x28
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	08021478 	.word	0x08021478
 80118b0:	080217f4 	.word	0x080217f4
 80118b4:	080214cc 	.word	0x080214cc

080118b8 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b088      	sub	sp, #32
 80118bc:	af02      	add	r7, sp, #8
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
 80118c4:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80118c6:	4b42      	ldr	r3, [pc, #264]	@ (80119d0 <select_check_waiters+0x118>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	617b      	str	r3, [r7, #20]
 80118cc:	e078      	b.n	80119c0 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	69db      	ldr	r3, [r3, #28]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d171      	bne.n	80119ba <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80118d6:	2300      	movs	r3, #0
 80118d8:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d009      	beq.n	80118f6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	9300      	str	r3, [sp, #0]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	68ba      	ldr	r2, [r7, #8]
 80118ea:	68f9      	ldr	r1, [r7, #12]
 80118ec:	6978      	ldr	r0, [r7, #20]
 80118ee:	f7ff fee3 	bl	80116b8 <lwip_poll_should_wake>
 80118f2:	6138      	str	r0, [r7, #16]
 80118f4:	e056      	b.n	80119a4 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d017      	beq.n	801192c <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	689b      	ldr	r3, [r3, #8]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d013      	beq.n	801192c <select_check_waiters+0x74>
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	689a      	ldr	r2, [r3, #8]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b00      	cmp	r3, #0
 801190c:	da00      	bge.n	8011910 <select_check_waiters+0x58>
 801190e:	331f      	adds	r3, #31
 8011910:	115b      	asrs	r3, r3, #5
 8011912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	f003 031f 	and.w	r3, r3, #31
 801191c:	fa22 f303 	lsr.w	r3, r2, r3
 8011920:	f003 0301 	and.w	r3, r3, #1
 8011924:	2b00      	cmp	r3, #0
 8011926:	d001      	beq.n	801192c <select_check_waiters+0x74>
            do_signal = 1;
 8011928:	2301      	movs	r3, #1
 801192a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d01a      	beq.n	8011968 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d117      	bne.n	8011968 <select_check_waiters+0xb0>
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d013      	beq.n	8011968 <select_check_waiters+0xb0>
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	68da      	ldr	r2, [r3, #12]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2b00      	cmp	r3, #0
 8011948:	da00      	bge.n	801194c <select_check_waiters+0x94>
 801194a:	331f      	adds	r3, #31
 801194c:	115b      	asrs	r3, r3, #5
 801194e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f003 031f 	and.w	r3, r3, #31
 8011958:	fa22 f303 	lsr.w	r3, r2, r3
 801195c:	f003 0301 	and.w	r3, r3, #1
 8011960:	2b00      	cmp	r3, #0
 8011962:	d001      	beq.n	8011968 <select_check_waiters+0xb0>
            do_signal = 1;
 8011964:	2301      	movs	r3, #1
 8011966:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d01a      	beq.n	80119a4 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d117      	bne.n	80119a4 <select_check_waiters+0xec>
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d013      	beq.n	80119a4 <select_check_waiters+0xec>
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	691a      	ldr	r2, [r3, #16]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2b00      	cmp	r3, #0
 8011984:	da00      	bge.n	8011988 <select_check_waiters+0xd0>
 8011986:	331f      	adds	r3, #31
 8011988:	115b      	asrs	r3, r3, #5
 801198a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f003 031f 	and.w	r3, r3, #31
 8011994:	fa22 f303 	lsr.w	r3, r2, r3
 8011998:	f003 0301 	and.w	r3, r3, #1
 801199c:	2b00      	cmp	r3, #0
 801199e:	d001      	beq.n	80119a4 <select_check_waiters+0xec>
            do_signal = 1;
 80119a0:	2301      	movs	r3, #1
 80119a2:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d007      	beq.n	80119ba <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2201      	movs	r2, #1
 80119ae:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	3320      	adds	r3, #32
 80119b4:	4618      	mov	r0, r3
 80119b6:	f00b fec9 	bl	801d74c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	617b      	str	r3, [r7, #20]
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d183      	bne.n	80118ce <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80119c6:	bf00      	nop
 80119c8:	bf00      	nop
 80119ca:	3718      	adds	r7, #24
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	20009dc0 	.word	0x20009dc0

080119d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80119de:	f008 fc8d 	bl	801a2fc <sys_timeouts_sleeptime>
 80119e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80119ea:	d10b      	bne.n	8011a04 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80119ec:	4813      	ldr	r0, [pc, #76]	@ (8011a3c <tcpip_timeouts_mbox_fetch+0x68>)
 80119ee:	f00b ff16 	bl	801d81e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80119f2:	2200      	movs	r2, #0
 80119f4:	6839      	ldr	r1, [r7, #0]
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f00b fdec 	bl	801d5d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80119fc:	480f      	ldr	r0, [pc, #60]	@ (8011a3c <tcpip_timeouts_mbox_fetch+0x68>)
 80119fe:	f00b feff 	bl	801d800 <sys_mutex_lock>
    return;
 8011a02:	e018      	b.n	8011a36 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d102      	bne.n	8011a10 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011a0a:	f008 fc3d 	bl	801a288 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011a0e:	e7e6      	b.n	80119de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011a10:	480a      	ldr	r0, [pc, #40]	@ (8011a3c <tcpip_timeouts_mbox_fetch+0x68>)
 8011a12:	f00b ff04 	bl	801d81e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	6839      	ldr	r1, [r7, #0]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f00b fdda 	bl	801d5d4 <sys_arch_mbox_fetch>
 8011a20:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011a22:	4806      	ldr	r0, [pc, #24]	@ (8011a3c <tcpip_timeouts_mbox_fetch+0x68>)
 8011a24:	f00b feec 	bl	801d800 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011a2e:	d102      	bne.n	8011a36 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011a30:	f008 fc2a 	bl	801a288 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011a34:	e7d3      	b.n	80119de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	20009dd0 	.word	0x20009dd0

08011a40 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011a48:	4810      	ldr	r0, [pc, #64]	@ (8011a8c <tcpip_thread+0x4c>)
 8011a4a:	f00b fed9 	bl	801d800 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011a4e:	4b10      	ldr	r3, [pc, #64]	@ (8011a90 <tcpip_thread+0x50>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d005      	beq.n	8011a62 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011a56:	4b0e      	ldr	r3, [pc, #56]	@ (8011a90 <tcpip_thread+0x50>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8011a94 <tcpip_thread+0x54>)
 8011a5c:	6812      	ldr	r2, [r2, #0]
 8011a5e:	4610      	mov	r0, r2
 8011a60:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011a62:	f107 030c 	add.w	r3, r7, #12
 8011a66:	4619      	mov	r1, r3
 8011a68:	480b      	ldr	r0, [pc, #44]	@ (8011a98 <tcpip_thread+0x58>)
 8011a6a:	f7ff ffb3 	bl	80119d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d106      	bne.n	8011a82 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011a74:	4b09      	ldr	r3, [pc, #36]	@ (8011a9c <tcpip_thread+0x5c>)
 8011a76:	2291      	movs	r2, #145	@ 0x91
 8011a78:	4909      	ldr	r1, [pc, #36]	@ (8011aa0 <tcpip_thread+0x60>)
 8011a7a:	480a      	ldr	r0, [pc, #40]	@ (8011aa4 <tcpip_thread+0x64>)
 8011a7c:	f00c fc72 	bl	801e364 <iprintf>
      continue;
 8011a80:	e003      	b.n	8011a8a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f000 f80f 	bl	8011aa8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011a8a:	e7ea      	b.n	8011a62 <tcpip_thread+0x22>
 8011a8c:	20009dd0 	.word	0x20009dd0
 8011a90:	20009dc4 	.word	0x20009dc4
 8011a94:	20009dc8 	.word	0x20009dc8
 8011a98:	20009dcc 	.word	0x20009dcc
 8011a9c:	08021848 	.word	0x08021848
 8011aa0:	08021878 	.word	0x08021878
 8011aa4:	08021898 	.word	0x08021898

08011aa8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	2b02      	cmp	r3, #2
 8011ab6:	d026      	beq.n	8011b06 <tcpip_thread_handle_msg+0x5e>
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	dc2b      	bgt.n	8011b14 <tcpip_thread_handle_msg+0x6c>
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d002      	beq.n	8011ac6 <tcpip_thread_handle_msg+0x1e>
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d015      	beq.n	8011af0 <tcpip_thread_handle_msg+0x48>
 8011ac4:	e026      	b.n	8011b14 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	68db      	ldr	r3, [r3, #12]
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	6850      	ldr	r0, [r2, #4]
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	6892      	ldr	r2, [r2, #8]
 8011ad2:	4611      	mov	r1, r2
 8011ad4:	4798      	blx	r3
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d004      	beq.n	8011ae6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f001 ffeb 	bl	8013abc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011ae6:	6879      	ldr	r1, [r7, #4]
 8011ae8:	2009      	movs	r0, #9
 8011aea:	f001 f943 	bl	8012d74 <memp_free>
      break;
 8011aee:	e018      	b.n	8011b22 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	6892      	ldr	r2, [r2, #8]
 8011af8:	4610      	mov	r0, r2
 8011afa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011afc:	6879      	ldr	r1, [r7, #4]
 8011afe:	2008      	movs	r0, #8
 8011b00:	f001 f938 	bl	8012d74 <memp_free>
      break;
 8011b04:	e00d      	b.n	8011b22 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	6892      	ldr	r2, [r2, #8]
 8011b0e:	4610      	mov	r0, r2
 8011b10:	4798      	blx	r3
      break;
 8011b12:	e006      	b.n	8011b22 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011b14:	4b05      	ldr	r3, [pc, #20]	@ (8011b2c <tcpip_thread_handle_msg+0x84>)
 8011b16:	22cf      	movs	r2, #207	@ 0xcf
 8011b18:	4905      	ldr	r1, [pc, #20]	@ (8011b30 <tcpip_thread_handle_msg+0x88>)
 8011b1a:	4806      	ldr	r0, [pc, #24]	@ (8011b34 <tcpip_thread_handle_msg+0x8c>)
 8011b1c:	f00c fc22 	bl	801e364 <iprintf>
      break;
 8011b20:	bf00      	nop
  }
}
 8011b22:	bf00      	nop
 8011b24:	3708      	adds	r7, #8
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	08021848 	.word	0x08021848
 8011b30:	08021878 	.word	0x08021878
 8011b34:	08021898 	.word	0x08021898

08011b38 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b086      	sub	sp, #24
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011b44:	481a      	ldr	r0, [pc, #104]	@ (8011bb0 <tcpip_inpkt+0x78>)
 8011b46:	f00b fd8d 	bl	801d664 <sys_mbox_valid>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d105      	bne.n	8011b5c <tcpip_inpkt+0x24>
 8011b50:	4b18      	ldr	r3, [pc, #96]	@ (8011bb4 <tcpip_inpkt+0x7c>)
 8011b52:	22fc      	movs	r2, #252	@ 0xfc
 8011b54:	4918      	ldr	r1, [pc, #96]	@ (8011bb8 <tcpip_inpkt+0x80>)
 8011b56:	4819      	ldr	r0, [pc, #100]	@ (8011bbc <tcpip_inpkt+0x84>)
 8011b58:	f00c fc04 	bl	801e364 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011b5c:	2009      	movs	r0, #9
 8011b5e:	f001 f893 	bl	8012c88 <memp_malloc>
 8011b62:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d102      	bne.n	8011b70 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b6e:	e01a      	b.n	8011ba6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	2200      	movs	r2, #0
 8011b74:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011b88:	6979      	ldr	r1, [r7, #20]
 8011b8a:	4809      	ldr	r0, [pc, #36]	@ (8011bb0 <tcpip_inpkt+0x78>)
 8011b8c:	f00b fd08 	bl	801d5a0 <sys_mbox_trypost>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d006      	beq.n	8011ba4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011b96:	6979      	ldr	r1, [r7, #20]
 8011b98:	2009      	movs	r0, #9
 8011b9a:	f001 f8eb 	bl	8012d74 <memp_free>
    return ERR_MEM;
 8011b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ba2:	e000      	b.n	8011ba6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011ba4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3718      	adds	r7, #24
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	20009dcc 	.word	0x20009dcc
 8011bb4:	08021848 	.word	0x08021848
 8011bb8:	080218c0 	.word	0x080218c0
 8011bbc:	08021898 	.word	0x08021898

08011bc0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011bd0:	f003 0318 	and.w	r3, r3, #24
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d006      	beq.n	8011be6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011bd8:	4a08      	ldr	r2, [pc, #32]	@ (8011bfc <tcpip_input+0x3c>)
 8011bda:	6839      	ldr	r1, [r7, #0]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f7ff ffab 	bl	8011b38 <tcpip_inpkt>
 8011be2:	4603      	mov	r3, r0
 8011be4:	e005      	b.n	8011bf2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011be6:	4a06      	ldr	r2, [pc, #24]	@ (8011c00 <tcpip_input+0x40>)
 8011be8:	6839      	ldr	r1, [r7, #0]
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f7ff ffa4 	bl	8011b38 <tcpip_inpkt>
 8011bf0:	4603      	mov	r3, r0
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	0801d39d 	.word	0x0801d39d
 8011c00:	0801c029 	.word	0x0801c029

08011c04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011c0e:	4819      	ldr	r0, [pc, #100]	@ (8011c74 <tcpip_try_callback+0x70>)
 8011c10:	f00b fd28 	bl	801d664 <sys_mbox_valid>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d106      	bne.n	8011c28 <tcpip_try_callback+0x24>
 8011c1a:	4b17      	ldr	r3, [pc, #92]	@ (8011c78 <tcpip_try_callback+0x74>)
 8011c1c:	f240 125d 	movw	r2, #349	@ 0x15d
 8011c20:	4916      	ldr	r1, [pc, #88]	@ (8011c7c <tcpip_try_callback+0x78>)
 8011c22:	4817      	ldr	r0, [pc, #92]	@ (8011c80 <tcpip_try_callback+0x7c>)
 8011c24:	f00c fb9e 	bl	801e364 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011c28:	2008      	movs	r0, #8
 8011c2a:	f001 f82d 	bl	8012c88 <memp_malloc>
 8011c2e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d102      	bne.n	8011c3c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c3a:	e017      	b.n	8011c6c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2201      	movs	r2, #1
 8011c40:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	683a      	ldr	r2, [r7, #0]
 8011c4c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011c4e:	68f9      	ldr	r1, [r7, #12]
 8011c50:	4808      	ldr	r0, [pc, #32]	@ (8011c74 <tcpip_try_callback+0x70>)
 8011c52:	f00b fca5 	bl	801d5a0 <sys_mbox_trypost>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d006      	beq.n	8011c6a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011c5c:	68f9      	ldr	r1, [r7, #12]
 8011c5e:	2008      	movs	r0, #8
 8011c60:	f001 f888 	bl	8012d74 <memp_free>
    return ERR_MEM;
 8011c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c68:	e000      	b.n	8011c6c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	20009dcc 	.word	0x20009dcc
 8011c78:	08021848 	.word	0x08021848
 8011c7c:	080218c0 	.word	0x080218c0
 8011c80:	08021898 	.word	0x08021898

08011c84 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011c90:	4806      	ldr	r0, [pc, #24]	@ (8011cac <tcpip_send_msg_wait_sem+0x28>)
 8011c92:	f00b fdb5 	bl	801d800 <sys_mutex_lock>
  fn(apimsg);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	68b8      	ldr	r0, [r7, #8]
 8011c9a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011c9c:	4803      	ldr	r0, [pc, #12]	@ (8011cac <tcpip_send_msg_wait_sem+0x28>)
 8011c9e:	f00b fdbe 	bl	801d81e <sys_mutex_unlock>
  return ERR_OK;
 8011ca2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3710      	adds	r7, #16
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	20009dd0 	.word	0x20009dd0

08011cb0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af02      	add	r7, sp, #8
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011cba:	f000 fb3a 	bl	8012332 <lwip_init>

  tcpip_init_done = initfunc;
 8011cbe:	4a17      	ldr	r2, [pc, #92]	@ (8011d1c <tcpip_init+0x6c>)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011cc4:	4a16      	ldr	r2, [pc, #88]	@ (8011d20 <tcpip_init+0x70>)
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011cca:	2106      	movs	r1, #6
 8011ccc:	4815      	ldr	r0, [pc, #84]	@ (8011d24 <tcpip_init+0x74>)
 8011cce:	f00b fc3b 	bl	801d548 <sys_mbox_new>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d006      	beq.n	8011ce6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011cd8:	4b13      	ldr	r3, [pc, #76]	@ (8011d28 <tcpip_init+0x78>)
 8011cda:	f240 2261 	movw	r2, #609	@ 0x261
 8011cde:	4913      	ldr	r1, [pc, #76]	@ (8011d2c <tcpip_init+0x7c>)
 8011ce0:	4813      	ldr	r0, [pc, #76]	@ (8011d30 <tcpip_init+0x80>)
 8011ce2:	f00c fb3f 	bl	801e364 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011ce6:	4813      	ldr	r0, [pc, #76]	@ (8011d34 <tcpip_init+0x84>)
 8011ce8:	f00b fd74 	bl	801d7d4 <sys_mutex_new>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d006      	beq.n	8011d00 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8011d28 <tcpip_init+0x78>)
 8011cf4:	f240 2265 	movw	r2, #613	@ 0x265
 8011cf8:	490f      	ldr	r1, [pc, #60]	@ (8011d38 <tcpip_init+0x88>)
 8011cfa:	480d      	ldr	r0, [pc, #52]	@ (8011d30 <tcpip_init+0x80>)
 8011cfc:	f00c fb32 	bl	801e364 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011d00:	2318      	movs	r3, #24
 8011d02:	9300      	str	r3, [sp, #0]
 8011d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d08:	2200      	movs	r2, #0
 8011d0a:	490c      	ldr	r1, [pc, #48]	@ (8011d3c <tcpip_init+0x8c>)
 8011d0c:	480c      	ldr	r0, [pc, #48]	@ (8011d40 <tcpip_init+0x90>)
 8011d0e:	f00b fd93 	bl	801d838 <sys_thread_new>
}
 8011d12:	bf00      	nop
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	20009dc4 	.word	0x20009dc4
 8011d20:	20009dc8 	.word	0x20009dc8
 8011d24:	20009dcc 	.word	0x20009dcc
 8011d28:	08021848 	.word	0x08021848
 8011d2c:	080218d0 	.word	0x080218d0
 8011d30:	08021898 	.word	0x08021898
 8011d34:	20009dd0 	.word	0x20009dd0
 8011d38:	080218f4 	.word	0x080218f4
 8011d3c:	08011a41 	.word	0x08011a41
 8011d40:	08021918 	.word	0x08021918

08011d44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011d4e:	88fb      	ldrh	r3, [r7, #6]
 8011d50:	021b      	lsls	r3, r3, #8
 8011d52:	b21a      	sxth	r2, r3
 8011d54:	88fb      	ldrh	r3, [r7, #6]
 8011d56:	0a1b      	lsrs	r3, r3, #8
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	b21b      	sxth	r3, r3
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	b21b      	sxth	r3, r3
 8011d60:	b29b      	uxth	r3, r3
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	370c      	adds	r7, #12
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr

08011d6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011d6e:	b480      	push	{r7}
 8011d70:	b083      	sub	sp, #12
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	061a      	lsls	r2, r3, #24
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	021b      	lsls	r3, r3, #8
 8011d7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011d82:	431a      	orrs	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	0a1b      	lsrs	r3, r3, #8
 8011d88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011d8c:	431a      	orrs	r2, r3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	0e1b      	lsrs	r3, r3, #24
 8011d92:	4313      	orrs	r3, r2
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8011da0:	b480      	push	{r7}
 8011da2:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8011da4:	bf00      	nop
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr

08011dae <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8011dae:	b580      	push	{r7, lr}
 8011db0:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8011db2:	f000 faa9 	bl	8012308 <dns_check_entries>
}
 8011db6:	bf00      	nop
 8011db8:	bd80      	pop	{r7, pc}
	...

08011dbc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b090      	sub	sp, #64	@ 0x40
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8011dc6:	79fa      	ldrb	r2, [r7, #7]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	011b      	lsls	r3, r3, #4
 8011dcc:	4413      	add	r3, r2
 8011dce:	011b      	lsls	r3, r3, #4
 8011dd0:	4a6c      	ldr	r2, [pc, #432]	@ (8011f84 <dns_send+0x1c8>)
 8011dd2:	4413      	add	r3, r2
 8011dd4:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dd8:	7adb      	ldrb	r3, [r3, #11]
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d906      	bls.n	8011dec <dns_send+0x30>
 8011dde:	4b6a      	ldr	r3, [pc, #424]	@ (8011f88 <dns_send+0x1cc>)
 8011de0:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8011de4:	4969      	ldr	r1, [pc, #420]	@ (8011f8c <dns_send+0x1d0>)
 8011de6:	486a      	ldr	r0, [pc, #424]	@ (8011f90 <dns_send+0x1d4>)
 8011de8:	f00c fabc 	bl	801e364 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8011dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dee:	7adb      	ldrb	r3, [r3, #11]
 8011df0:	461a      	mov	r2, r3
 8011df2:	4b68      	ldr	r3, [pc, #416]	@ (8011f94 <dns_send+0x1d8>)
 8011df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d109      	bne.n	8011e10 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8011dfc:	79fb      	ldrb	r3, [r7, #7]
 8011dfe:	2100      	movs	r1, #0
 8011e00:	4618      	mov	r0, r3
 8011e02:	f000 f8cb 	bl	8011f9c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8011e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e08:	2200      	movs	r2, #0
 8011e0a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	e0b4      	b.n	8011f7a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8011e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e12:	3310      	adds	r3, #16
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7ee fa3b 	bl	8000290 <strlen>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	3312      	adds	r3, #18
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011e26:	4619      	mov	r1, r3
 8011e28:	2036      	movs	r0, #54	@ 0x36
 8011e2a:	f001 fb63 	bl	80134f4 <pbuf_alloc>
 8011e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8011e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f000 8095 	beq.w	8011f62 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8011e38:	f107 0310 	add.w	r3, r7, #16
 8011e3c:	220c      	movs	r2, #12
 8011e3e:	2100      	movs	r1, #0
 8011e40:	4618      	mov	r0, r3
 8011e42:	f00c fc21 	bl	801e688 <memset>
    hdr.id = lwip_htons(entry->txid);
 8011e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e48:	891b      	ldrh	r3, [r3, #8]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7ff ff7a 	bl	8011d44 <lwip_htons>
 8011e50:	4603      	mov	r3, r0
 8011e52:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8011e54:	2301      	movs	r3, #1
 8011e56:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8011e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011e5c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8011e5e:	f107 0310 	add.w	r3, r7, #16
 8011e62:	220c      	movs	r2, #12
 8011e64:	4619      	mov	r1, r3
 8011e66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011e68:	f002 f8dc 	bl	8014024 <pbuf_take>
    hostname = entry->name;
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6e:	3310      	adds	r3, #16
 8011e70:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 8011e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e74:	3b01      	subs	r3, #1
 8011e76:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8011e78:	230c      	movs	r3, #12
 8011e7a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 8011e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e7e:	3301      	adds	r3, #1
 8011e80:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 8011e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e84:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8011e86:	2300      	movs	r3, #0
 8011e88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011e8c:	e007      	b.n	8011e9e <dns_send+0xe2>
        ++n;
 8011e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e92:	3301      	adds	r3, #1
 8011e94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8011e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ea4:	d003      	beq.n	8011eae <dns_send+0xf2>
 8011ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1ef      	bne.n	8011e8e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8011eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb2:	1ad3      	subs	r3, r2, r3
 8011eb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8011eb6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8011eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011ebc:	4413      	add	r3, r2
 8011ebe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	dc53      	bgt.n	8011f6e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8011ec6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011eca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ecc:	4619      	mov	r1, r3
 8011ece:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ed0:	f002 f9d6 	bl	8014280 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8011ed4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ee0:	f002 f932 	bl	8014148 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8011ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011eec:	4413      	add	r3, r2
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 8011ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d1bf      	bne.n	8011e7c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8011efc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011efe:	2200      	movs	r2, #0
 8011f00:	4619      	mov	r1, r3
 8011f02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f04:	f002 f9bc 	bl	8014280 <pbuf_put_at>
    query_idx++;
 8011f08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8011f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f12:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8011f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f18:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8011f1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011f1c:	f107 010c 	add.w	r1, r7, #12
 8011f20:	2204      	movs	r2, #4
 8011f22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f24:	f002 f910 	bl	8014148 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8011f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f2a:	7bdb      	ldrb	r3, [r3, #15]
 8011f2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8011f30:	2335      	movs	r3, #53	@ 0x35
 8011f32:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 8011f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f36:	7adb      	ldrb	r3, [r3, #11]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4a16      	ldr	r2, [pc, #88]	@ (8011f94 <dns_send+0x1d8>)
 8011f3c:	4413      	add	r3, r2
 8011f3e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8011f40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011f44:	4a14      	ldr	r2, [pc, #80]	@ (8011f98 <dns_send+0x1dc>)
 8011f46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011f4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f4c:	69fa      	ldr	r2, [r7, #28]
 8011f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011f50:	f008 fc02 	bl	801a758 <udp_sendto>
 8011f54:	4603      	mov	r3, r0
 8011f56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 8011f5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f5c:	f001 fdae 	bl	8013abc <pbuf_free>
 8011f60:	e002      	b.n	8011f68 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8011f62:	23ff      	movs	r3, #255	@ 0xff
 8011f64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 8011f68:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011f6c:	e005      	b.n	8011f7a <dns_send+0x1be>
        goto overflow_return;
 8011f6e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8011f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011f72:	f001 fda3 	bl	8013abc <pbuf_free>
  return ERR_VAL;
 8011f76:	f06f 0305 	mvn.w	r3, #5
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3740      	adds	r7, #64	@ 0x40
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	20009de4 	.word	0x20009de4
 8011f88:	08021928 	.word	0x08021928
 8011f8c:	08021958 	.word	0x08021958
 8011f90:	08021970 	.word	0x08021970
 8011f94:	2000a254 	.word	0x2000a254
 8011f98:	20009dd4 	.word	0x20009dd4

08011f9c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8011f9c:	b590      	push	{r4, r7, lr}
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	6039      	str	r1, [r7, #0]
 8011fa6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8011fa8:	2300      	movs	r3, #0
 8011faa:	73fb      	strb	r3, [r7, #15]
 8011fac:	e03d      	b.n	801202a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8011fae:	7bfa      	ldrb	r2, [r7, #15]
 8011fb0:	4957      	ldr	r1, [pc, #348]	@ (8012110 <dns_call_found+0x174>)
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	005b      	lsls	r3, r3, #1
 8011fb6:	4413      	add	r3, r2
 8011fb8:	009b      	lsls	r3, r3, #2
 8011fba:	440b      	add	r3, r1
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d030      	beq.n	8012024 <dns_call_found+0x88>
 8011fc2:	7bfa      	ldrb	r2, [r7, #15]
 8011fc4:	4952      	ldr	r1, [pc, #328]	@ (8012110 <dns_call_found+0x174>)
 8011fc6:	4613      	mov	r3, r2
 8011fc8:	005b      	lsls	r3, r3, #1
 8011fca:	4413      	add	r3, r2
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	440b      	add	r3, r1
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	79fa      	ldrb	r2, [r7, #7]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d124      	bne.n	8012024 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8011fda:	7bfa      	ldrb	r2, [r7, #15]
 8011fdc:	494c      	ldr	r1, [pc, #304]	@ (8012110 <dns_call_found+0x174>)
 8011fde:	4613      	mov	r3, r2
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	440b      	add	r3, r1
 8011fe8:	681c      	ldr	r4, [r3, #0]
 8011fea:	79fa      	ldrb	r2, [r7, #7]
 8011fec:	4613      	mov	r3, r2
 8011fee:	011b      	lsls	r3, r3, #4
 8011ff0:	4413      	add	r3, r2
 8011ff2:	011b      	lsls	r3, r3, #4
 8011ff4:	3310      	adds	r3, #16
 8011ff6:	4a47      	ldr	r2, [pc, #284]	@ (8012114 <dns_call_found+0x178>)
 8011ff8:	1898      	adds	r0, r3, r2
 8011ffa:	7bfa      	ldrb	r2, [r7, #15]
 8011ffc:	4944      	ldr	r1, [pc, #272]	@ (8012110 <dns_call_found+0x174>)
 8011ffe:	4613      	mov	r3, r2
 8012000:	005b      	lsls	r3, r3, #1
 8012002:	4413      	add	r3, r2
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	440b      	add	r3, r1
 8012008:	3304      	adds	r3, #4
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	461a      	mov	r2, r3
 801200e:	6839      	ldr	r1, [r7, #0]
 8012010:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8012012:	7bfa      	ldrb	r2, [r7, #15]
 8012014:	493e      	ldr	r1, [pc, #248]	@ (8012110 <dns_call_found+0x174>)
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	440b      	add	r3, r1
 8012020:	2200      	movs	r2, #0
 8012022:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012024:	7bfb      	ldrb	r3, [r7, #15]
 8012026:	3301      	adds	r3, #1
 8012028:	73fb      	strb	r3, [r7, #15]
 801202a:	7bfb      	ldrb	r3, [r7, #15]
 801202c:	2b03      	cmp	r3, #3
 801202e:	d9be      	bls.n	8011fae <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012030:	2300      	movs	r3, #0
 8012032:	73fb      	strb	r3, [r7, #15]
 8012034:	e031      	b.n	801209a <dns_call_found+0xfe>
    if (i == idx) {
 8012036:	7bfa      	ldrb	r2, [r7, #15]
 8012038:	79fb      	ldrb	r3, [r7, #7]
 801203a:	429a      	cmp	r2, r3
 801203c:	d029      	beq.n	8012092 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801203e:	7bfa      	ldrb	r2, [r7, #15]
 8012040:	4934      	ldr	r1, [pc, #208]	@ (8012114 <dns_call_found+0x178>)
 8012042:	4613      	mov	r3, r2
 8012044:	011b      	lsls	r3, r3, #4
 8012046:	4413      	add	r3, r2
 8012048:	011b      	lsls	r3, r3, #4
 801204a:	440b      	add	r3, r1
 801204c:	330a      	adds	r3, #10
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	2b02      	cmp	r3, #2
 8012052:	d11f      	bne.n	8012094 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8012054:	7bfa      	ldrb	r2, [r7, #15]
 8012056:	492f      	ldr	r1, [pc, #188]	@ (8012114 <dns_call_found+0x178>)
 8012058:	4613      	mov	r3, r2
 801205a:	011b      	lsls	r3, r3, #4
 801205c:	4413      	add	r3, r2
 801205e:	011b      	lsls	r3, r3, #4
 8012060:	440b      	add	r3, r1
 8012062:	330f      	adds	r3, #15
 8012064:	7819      	ldrb	r1, [r3, #0]
 8012066:	79fa      	ldrb	r2, [r7, #7]
 8012068:	482a      	ldr	r0, [pc, #168]	@ (8012114 <dns_call_found+0x178>)
 801206a:	4613      	mov	r3, r2
 801206c:	011b      	lsls	r3, r3, #4
 801206e:	4413      	add	r3, r2
 8012070:	011b      	lsls	r3, r3, #4
 8012072:	4403      	add	r3, r0
 8012074:	330f      	adds	r3, #15
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	4299      	cmp	r1, r3
 801207a:	d10b      	bne.n	8012094 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801207c:	79fa      	ldrb	r2, [r7, #7]
 801207e:	4925      	ldr	r1, [pc, #148]	@ (8012114 <dns_call_found+0x178>)
 8012080:	4613      	mov	r3, r2
 8012082:	011b      	lsls	r3, r3, #4
 8012084:	4413      	add	r3, r2
 8012086:	011b      	lsls	r3, r3, #4
 8012088:	440b      	add	r3, r1
 801208a:	330f      	adds	r3, #15
 801208c:	2204      	movs	r2, #4
 801208e:	701a      	strb	r2, [r3, #0]
        break;
 8012090:	e006      	b.n	80120a0 <dns_call_found+0x104>
      continue; /* only check other requests */
 8012092:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012094:	7bfb      	ldrb	r3, [r7, #15]
 8012096:	3301      	adds	r3, #1
 8012098:	73fb      	strb	r3, [r7, #15]
 801209a:	7bfb      	ldrb	r3, [r7, #15]
 801209c:	2b03      	cmp	r3, #3
 801209e:	d9ca      	bls.n	8012036 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80120a0:	79fa      	ldrb	r2, [r7, #7]
 80120a2:	491c      	ldr	r1, [pc, #112]	@ (8012114 <dns_call_found+0x178>)
 80120a4:	4613      	mov	r3, r2
 80120a6:	011b      	lsls	r3, r3, #4
 80120a8:	4413      	add	r3, r2
 80120aa:	011b      	lsls	r3, r3, #4
 80120ac:	440b      	add	r3, r1
 80120ae:	330f      	adds	r3, #15
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	2b03      	cmp	r3, #3
 80120b4:	d827      	bhi.n	8012106 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80120b6:	79fa      	ldrb	r2, [r7, #7]
 80120b8:	4916      	ldr	r1, [pc, #88]	@ (8012114 <dns_call_found+0x178>)
 80120ba:	4613      	mov	r3, r2
 80120bc:	011b      	lsls	r3, r3, #4
 80120be:	4413      	add	r3, r2
 80120c0:	011b      	lsls	r3, r3, #4
 80120c2:	440b      	add	r3, r1
 80120c4:	330f      	adds	r3, #15
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	461a      	mov	r2, r3
 80120ca:	4b13      	ldr	r3, [pc, #76]	@ (8012118 <dns_call_found+0x17c>)
 80120cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d0:	4618      	mov	r0, r3
 80120d2:	f008 fd9f 	bl	801ac14 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80120d6:	79fa      	ldrb	r2, [r7, #7]
 80120d8:	490e      	ldr	r1, [pc, #56]	@ (8012114 <dns_call_found+0x178>)
 80120da:	4613      	mov	r3, r2
 80120dc:	011b      	lsls	r3, r3, #4
 80120de:	4413      	add	r3, r2
 80120e0:	011b      	lsls	r3, r3, #4
 80120e2:	440b      	add	r3, r1
 80120e4:	330f      	adds	r3, #15
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	4619      	mov	r1, r3
 80120ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012118 <dns_call_found+0x17c>)
 80120ec:	2200      	movs	r2, #0
 80120ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80120f2:	79fa      	ldrb	r2, [r7, #7]
 80120f4:	4907      	ldr	r1, [pc, #28]	@ (8012114 <dns_call_found+0x178>)
 80120f6:	4613      	mov	r3, r2
 80120f8:	011b      	lsls	r3, r3, #4
 80120fa:	4413      	add	r3, r2
 80120fc:	011b      	lsls	r3, r3, #4
 80120fe:	440b      	add	r3, r1
 8012100:	330f      	adds	r3, #15
 8012102:	2204      	movs	r2, #4
 8012104:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8012106:	bf00      	nop
 8012108:	3714      	adds	r7, #20
 801210a:	46bd      	mov	sp, r7
 801210c:	bd90      	pop	{r4, r7, pc}
 801210e:	bf00      	nop
 8012110:	2000a224 	.word	0x2000a224
 8012114:	20009de4 	.word	0x20009de4
 8012118:	20009dd4 	.word	0x20009dd4

0801211c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8012122:	f00b fbc7 	bl	801d8b4 <rand>
 8012126:	4603      	mov	r3, r0
 8012128:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801212a:	2300      	movs	r3, #0
 801212c:	71fb      	strb	r3, [r7, #7]
 801212e:	e01a      	b.n	8012166 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012130:	79fa      	ldrb	r2, [r7, #7]
 8012132:	4911      	ldr	r1, [pc, #68]	@ (8012178 <dns_create_txid+0x5c>)
 8012134:	4613      	mov	r3, r2
 8012136:	011b      	lsls	r3, r3, #4
 8012138:	4413      	add	r3, r2
 801213a:	011b      	lsls	r3, r3, #4
 801213c:	440b      	add	r3, r1
 801213e:	330a      	adds	r3, #10
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	2b02      	cmp	r3, #2
 8012144:	d10c      	bne.n	8012160 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8012146:	79fa      	ldrb	r2, [r7, #7]
 8012148:	490b      	ldr	r1, [pc, #44]	@ (8012178 <dns_create_txid+0x5c>)
 801214a:	4613      	mov	r3, r2
 801214c:	011b      	lsls	r3, r3, #4
 801214e:	4413      	add	r3, r2
 8012150:	011b      	lsls	r3, r3, #4
 8012152:	440b      	add	r3, r1
 8012154:	3308      	adds	r3, #8
 8012156:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012158:	88ba      	ldrh	r2, [r7, #4]
 801215a:	429a      	cmp	r2, r3
 801215c:	d100      	bne.n	8012160 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 801215e:	e7e0      	b.n	8012122 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012160:	79fb      	ldrb	r3, [r7, #7]
 8012162:	3301      	adds	r3, #1
 8012164:	71fb      	strb	r3, [r7, #7]
 8012166:	79fb      	ldrb	r3, [r7, #7]
 8012168:	2b03      	cmp	r3, #3
 801216a:	d9e1      	bls.n	8012130 <dns_create_txid+0x14>
    }
  }

  return txid;
 801216c:	88bb      	ldrh	r3, [r7, #4]
}
 801216e:	4618      	mov	r0, r3
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	20009de4 	.word	0x20009de4

0801217c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 801217c:	b480      	push	{r7}
 801217e:	b085      	sub	sp, #20
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d00d      	beq.n	80121aa <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	7adb      	ldrb	r3, [r3, #11]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d109      	bne.n	80121aa <dns_backupserver_available+0x2e>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	7adb      	ldrb	r3, [r3, #11]
 801219a:	3301      	adds	r3, #1
 801219c:	4a06      	ldr	r2, [pc, #24]	@ (80121b8 <dns_backupserver_available+0x3c>)
 801219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d001      	beq.n	80121aa <dns_backupserver_available+0x2e>
      ret = 1;
 80121a6:	2301      	movs	r3, #1
 80121a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80121aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3714      	adds	r7, #20
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr
 80121b8:	2000a254 	.word	0x2000a254

080121bc <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80121c6:	79fa      	ldrb	r2, [r7, #7]
 80121c8:	4613      	mov	r3, r2
 80121ca:	011b      	lsls	r3, r3, #4
 80121cc:	4413      	add	r3, r2
 80121ce:	011b      	lsls	r3, r3, #4
 80121d0:	4a48      	ldr	r2, [pc, #288]	@ (80122f4 <dns_check_entry+0x138>)
 80121d2:	4413      	add	r3, r2
 80121d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80121d6:	79fb      	ldrb	r3, [r7, #7]
 80121d8:	2b03      	cmp	r3, #3
 80121da:	d906      	bls.n	80121ea <dns_check_entry+0x2e>
 80121dc:	4b46      	ldr	r3, [pc, #280]	@ (80122f8 <dns_check_entry+0x13c>)
 80121de:	f240 421c 	movw	r2, #1052	@ 0x41c
 80121e2:	4946      	ldr	r1, [pc, #280]	@ (80122fc <dns_check_entry+0x140>)
 80121e4:	4846      	ldr	r0, [pc, #280]	@ (8012300 <dns_check_entry+0x144>)
 80121e6:	f00c f8bd 	bl	801e364 <iprintf>

  switch (entry->state) {
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	7a9b      	ldrb	r3, [r3, #10]
 80121ee:	2b03      	cmp	r3, #3
 80121f0:	d86f      	bhi.n	80122d2 <dns_check_entry+0x116>
 80121f2:	a201      	add	r2, pc, #4	@ (adr r2, 80121f8 <dns_check_entry+0x3c>)
 80121f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121f8:	080122e3 	.word	0x080122e3
 80121fc:	08012209 	.word	0x08012209
 8012200:	0801223b 	.word	0x0801223b
 8012204:	080122b1 	.word	0x080122b1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8012208:	f7ff ff88 	bl	801211c <dns_create_txid>
 801220c:	4603      	mov	r3, r0
 801220e:	461a      	mov	r2, r3
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2202      	movs	r2, #2
 8012218:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2200      	movs	r2, #0
 801221e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2201      	movs	r2, #1
 8012224:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2200      	movs	r2, #0
 801222a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 801222c:	79fb      	ldrb	r3, [r7, #7]
 801222e:	4618      	mov	r0, r3
 8012230:	f7ff fdc4 	bl	8011dbc <dns_send>
 8012234:	4603      	mov	r3, r0
 8012236:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8012238:	e058      	b.n	80122ec <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	7b1b      	ldrb	r3, [r3, #12]
 801223e:	3b01      	subs	r3, #1
 8012240:	b2da      	uxtb	r2, r3
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	731a      	strb	r2, [r3, #12]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	7b1b      	ldrb	r3, [r3, #12]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d14b      	bne.n	80122e6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	7b5b      	ldrb	r3, [r3, #13]
 8012252:	3301      	adds	r3, #1
 8012254:	b2da      	uxtb	r2, r3
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	735a      	strb	r2, [r3, #13]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	7b5b      	ldrb	r3, [r3, #13]
 801225e:	2b04      	cmp	r3, #4
 8012260:	d11b      	bne.n	801229a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f7ff ff8a 	bl	801217c <dns_backupserver_available>
 8012268:	4603      	mov	r3, r0
 801226a:	2b00      	cmp	r3, #0
 801226c:	d00c      	beq.n	8012288 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	7adb      	ldrb	r3, [r3, #11]
 8012272:	3301      	adds	r3, #1
 8012274:	b2da      	uxtb	r2, r3
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2201      	movs	r2, #1
 801227e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	2200      	movs	r2, #0
 8012284:	735a      	strb	r2, [r3, #13]
 8012286:	e00c      	b.n	80122a2 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8012288:	79fb      	ldrb	r3, [r7, #7]
 801228a:	2100      	movs	r1, #0
 801228c:	4618      	mov	r0, r3
 801228e:	f7ff fe85 	bl	8011f9c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2200      	movs	r2, #0
 8012296:	729a      	strb	r2, [r3, #10]
            break;
 8012298:	e028      	b.n	80122ec <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	7b5a      	ldrb	r2, [r3, #13]
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 80122a2:	79fb      	ldrb	r3, [r7, #7]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7ff fd89 	bl	8011dbc <dns_send>
 80122aa:	4603      	mov	r3, r0
 80122ac:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 80122ae:	e01a      	b.n	80122e6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d008      	beq.n	80122ca <dns_check_entry+0x10e>
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	1e5a      	subs	r2, r3, #1
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	601a      	str	r2, [r3, #0]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d10f      	bne.n	80122ea <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2200      	movs	r2, #0
 80122ce:	729a      	strb	r2, [r3, #10]
      }
      break;
 80122d0:	e00b      	b.n	80122ea <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80122d2:	4b09      	ldr	r3, [pc, #36]	@ (80122f8 <dns_check_entry+0x13c>)
 80122d4:	f240 425b 	movw	r2, #1115	@ 0x45b
 80122d8:	490a      	ldr	r1, [pc, #40]	@ (8012304 <dns_check_entry+0x148>)
 80122da:	4809      	ldr	r0, [pc, #36]	@ (8012300 <dns_check_entry+0x144>)
 80122dc:	f00c f842 	bl	801e364 <iprintf>
      break;
 80122e0:	e004      	b.n	80122ec <dns_check_entry+0x130>
      break;
 80122e2:	bf00      	nop
 80122e4:	e002      	b.n	80122ec <dns_check_entry+0x130>
      break;
 80122e6:	bf00      	nop
 80122e8:	e000      	b.n	80122ec <dns_check_entry+0x130>
      break;
 80122ea:	bf00      	nop
  }
}
 80122ec:	bf00      	nop
 80122ee:	3710      	adds	r7, #16
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}
 80122f4:	20009de4 	.word	0x20009de4
 80122f8:	08021928 	.word	0x08021928
 80122fc:	08021998 	.word	0x08021998
 8012300:	08021970 	.word	0x08021970
 8012304:	080219b4 	.word	0x080219b4

08012308 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801230e:	2300      	movs	r3, #0
 8012310:	71fb      	strb	r3, [r7, #7]
 8012312:	e006      	b.n	8012322 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8012314:	79fb      	ldrb	r3, [r7, #7]
 8012316:	4618      	mov	r0, r3
 8012318:	f7ff ff50 	bl	80121bc <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801231c:	79fb      	ldrb	r3, [r7, #7]
 801231e:	3301      	adds	r3, #1
 8012320:	71fb      	strb	r3, [r7, #7]
 8012322:	79fb      	ldrb	r3, [r7, #7]
 8012324:	2b03      	cmp	r3, #3
 8012326:	d9f5      	bls.n	8012314 <dns_check_entries+0xc>
  }
}
 8012328:	bf00      	nop
 801232a:	bf00      	nop
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b082      	sub	sp, #8
 8012336:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012338:	2300      	movs	r3, #0
 801233a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801233c:	f00b fa3e 	bl	801d7bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012340:	f000 f8d6 	bl	80124f0 <mem_init>
  memp_init();
 8012344:	f000 fc32 	bl	8012bac <memp_init>
  pbuf_init();
  netif_init();
 8012348:	f000 fd3e 	bl	8012dc8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801234c:	f008 f80e 	bl	801a36c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012350:	f001 ffb8 	bl	80142c4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8012354:	f7ff fd24 	bl	8011da0 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012358:	f007 ff4e 	bl	801a1f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801235c:	bf00      	nop
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
 801236a:	4603      	mov	r3, r0
 801236c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801236e:	4b05      	ldr	r3, [pc, #20]	@ (8012384 <ptr_to_mem+0x20>)
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	88fb      	ldrh	r3, [r7, #6]
 8012374:	4413      	add	r3, r2
}
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr
 8012382:	bf00      	nop
 8012384:	2000ca88 	.word	0x2000ca88

08012388 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012388:	b480      	push	{r7}
 801238a:	b083      	sub	sp, #12
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012390:	4b05      	ldr	r3, [pc, #20]	@ (80123a8 <mem_to_ptr+0x20>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	1ad3      	subs	r3, r2, r3
 8012398:	b29b      	uxth	r3, r3
}
 801239a:	4618      	mov	r0, r3
 801239c:	370c      	adds	r7, #12
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr
 80123a6:	bf00      	nop
 80123a8:	2000ca88 	.word	0x2000ca88

080123ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80123ac:	b590      	push	{r4, r7, lr}
 80123ae:	b085      	sub	sp, #20
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80123b4:	4b45      	ldr	r3, [pc, #276]	@ (80124cc <plug_holes+0x120>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d206      	bcs.n	80123cc <plug_holes+0x20>
 80123be:	4b44      	ldr	r3, [pc, #272]	@ (80124d0 <plug_holes+0x124>)
 80123c0:	f240 12df 	movw	r2, #479	@ 0x1df
 80123c4:	4943      	ldr	r1, [pc, #268]	@ (80124d4 <plug_holes+0x128>)
 80123c6:	4844      	ldr	r0, [pc, #272]	@ (80124d8 <plug_holes+0x12c>)
 80123c8:	f00b ffcc 	bl	801e364 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80123cc:	4b43      	ldr	r3, [pc, #268]	@ (80124dc <plug_holes+0x130>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d306      	bcc.n	80123e4 <plug_holes+0x38>
 80123d6:	4b3e      	ldr	r3, [pc, #248]	@ (80124d0 <plug_holes+0x124>)
 80123d8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80123dc:	4940      	ldr	r1, [pc, #256]	@ (80124e0 <plug_holes+0x134>)
 80123de:	483e      	ldr	r0, [pc, #248]	@ (80124d8 <plug_holes+0x12c>)
 80123e0:	f00b ffc0 	bl	801e364 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	791b      	ldrb	r3, [r3, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d006      	beq.n	80123fa <plug_holes+0x4e>
 80123ec:	4b38      	ldr	r3, [pc, #224]	@ (80124d0 <plug_holes+0x124>)
 80123ee:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80123f2:	493c      	ldr	r1, [pc, #240]	@ (80124e4 <plug_holes+0x138>)
 80123f4:	4838      	ldr	r0, [pc, #224]	@ (80124d8 <plug_holes+0x12c>)
 80123f6:	f00b ffb5 	bl	801e364 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	881b      	ldrh	r3, [r3, #0]
 80123fe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012402:	d906      	bls.n	8012412 <plug_holes+0x66>
 8012404:	4b32      	ldr	r3, [pc, #200]	@ (80124d0 <plug_holes+0x124>)
 8012406:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801240a:	4937      	ldr	r1, [pc, #220]	@ (80124e8 <plug_holes+0x13c>)
 801240c:	4832      	ldr	r0, [pc, #200]	@ (80124d8 <plug_holes+0x12c>)
 801240e:	f00b ffa9 	bl	801e364 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	4618      	mov	r0, r3
 8012418:	f7ff ffa4 	bl	8012364 <ptr_to_mem>
 801241c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	429a      	cmp	r2, r3
 8012424:	d024      	beq.n	8012470 <plug_holes+0xc4>
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	791b      	ldrb	r3, [r3, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d120      	bne.n	8012470 <plug_holes+0xc4>
 801242e:	4b2b      	ldr	r3, [pc, #172]	@ (80124dc <plug_holes+0x130>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	68fa      	ldr	r2, [r7, #12]
 8012434:	429a      	cmp	r2, r3
 8012436:	d01b      	beq.n	8012470 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012438:	4b2c      	ldr	r3, [pc, #176]	@ (80124ec <plug_holes+0x140>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	429a      	cmp	r2, r3
 8012440:	d102      	bne.n	8012448 <plug_holes+0x9c>
      lfree = mem;
 8012442:	4a2a      	ldr	r2, [pc, #168]	@ (80124ec <plug_holes+0x140>)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	881a      	ldrh	r2, [r3, #0]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	881b      	ldrh	r3, [r3, #0]
 8012454:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012458:	d00a      	beq.n	8012470 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	881b      	ldrh	r3, [r3, #0]
 801245e:	4618      	mov	r0, r3
 8012460:	f7ff ff80 	bl	8012364 <ptr_to_mem>
 8012464:	4604      	mov	r4, r0
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f7ff ff8e 	bl	8012388 <mem_to_ptr>
 801246c:	4603      	mov	r3, r0
 801246e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	885b      	ldrh	r3, [r3, #2]
 8012474:	4618      	mov	r0, r3
 8012476:	f7ff ff75 	bl	8012364 <ptr_to_mem>
 801247a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801247c:	68ba      	ldr	r2, [r7, #8]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	429a      	cmp	r2, r3
 8012482:	d01f      	beq.n	80124c4 <plug_holes+0x118>
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	791b      	ldrb	r3, [r3, #4]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d11b      	bne.n	80124c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801248c:	4b17      	ldr	r3, [pc, #92]	@ (80124ec <plug_holes+0x140>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	429a      	cmp	r2, r3
 8012494:	d102      	bne.n	801249c <plug_holes+0xf0>
      lfree = pmem;
 8012496:	4a15      	ldr	r2, [pc, #84]	@ (80124ec <plug_holes+0x140>)
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	881a      	ldrh	r2, [r3, #0]
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80124ac:	d00a      	beq.n	80124c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7ff ff56 	bl	8012364 <ptr_to_mem>
 80124b8:	4604      	mov	r4, r0
 80124ba:	68b8      	ldr	r0, [r7, #8]
 80124bc:	f7ff ff64 	bl	8012388 <mem_to_ptr>
 80124c0:	4603      	mov	r3, r0
 80124c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80124c4:	bf00      	nop
 80124c6:	3714      	adds	r7, #20
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd90      	pop	{r4, r7, pc}
 80124cc:	2000ca88 	.word	0x2000ca88
 80124d0:	080219d4 	.word	0x080219d4
 80124d4:	08021a04 	.word	0x08021a04
 80124d8:	08021a1c 	.word	0x08021a1c
 80124dc:	2000ca8c 	.word	0x2000ca8c
 80124e0:	08021a44 	.word	0x08021a44
 80124e4:	08021a60 	.word	0x08021a60
 80124e8:	08021a7c 	.word	0x08021a7c
 80124ec:	2000ca94 	.word	0x2000ca94

080124f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80124f6:	4b1f      	ldr	r3, [pc, #124]	@ (8012574 <mem_init+0x84>)
 80124f8:	3303      	adds	r3, #3
 80124fa:	f023 0303 	bic.w	r3, r3, #3
 80124fe:	461a      	mov	r2, r3
 8012500:	4b1d      	ldr	r3, [pc, #116]	@ (8012578 <mem_init+0x88>)
 8012502:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012504:	4b1c      	ldr	r3, [pc, #112]	@ (8012578 <mem_init+0x88>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012510:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801251e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8012522:	f7ff ff1f 	bl	8012364 <ptr_to_mem>
 8012526:	4603      	mov	r3, r0
 8012528:	4a14      	ldr	r2, [pc, #80]	@ (801257c <mem_init+0x8c>)
 801252a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801252c:	4b13      	ldr	r3, [pc, #76]	@ (801257c <mem_init+0x8c>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2201      	movs	r2, #1
 8012532:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012534:	4b11      	ldr	r3, [pc, #68]	@ (801257c <mem_init+0x8c>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 801253c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801253e:	4b0f      	ldr	r3, [pc, #60]	@ (801257c <mem_init+0x8c>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012546:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012548:	4b0b      	ldr	r3, [pc, #44]	@ (8012578 <mem_init+0x88>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	4a0c      	ldr	r2, [pc, #48]	@ (8012580 <mem_init+0x90>)
 801254e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012550:	480c      	ldr	r0, [pc, #48]	@ (8012584 <mem_init+0x94>)
 8012552:	f00b f93f 	bl	801d7d4 <sys_mutex_new>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	d006      	beq.n	801256a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801255c:	4b0a      	ldr	r3, [pc, #40]	@ (8012588 <mem_init+0x98>)
 801255e:	f240 221f 	movw	r2, #543	@ 0x21f
 8012562:	490a      	ldr	r1, [pc, #40]	@ (801258c <mem_init+0x9c>)
 8012564:	480a      	ldr	r0, [pc, #40]	@ (8012590 <mem_init+0xa0>)
 8012566:	f00b fefd 	bl	801e364 <iprintf>
  }
}
 801256a:	bf00      	nop
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	2000a274 	.word	0x2000a274
 8012578:	2000ca88 	.word	0x2000ca88
 801257c:	2000ca8c 	.word	0x2000ca8c
 8012580:	2000ca94 	.word	0x2000ca94
 8012584:	2000ca90 	.word	0x2000ca90
 8012588:	080219d4 	.word	0x080219d4
 801258c:	08021aa8 	.word	0x08021aa8
 8012590:	08021a1c 	.word	0x08021a1c

08012594 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff fef3 	bl	8012388 <mem_to_ptr>
 80125a2:	4603      	mov	r3, r0
 80125a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7ff feda 	bl	8012364 <ptr_to_mem>
 80125b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	885b      	ldrh	r3, [r3, #2]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7ff fed4 	bl	8012364 <ptr_to_mem>
 80125bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80125c6:	d818      	bhi.n	80125fa <mem_link_valid+0x66>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	885b      	ldrh	r3, [r3, #2]
 80125cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80125d0:	d813      	bhi.n	80125fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80125d6:	8afa      	ldrh	r2, [r7, #22]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d004      	beq.n	80125e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	881b      	ldrh	r3, [r3, #0]
 80125e0:	8afa      	ldrh	r2, [r7, #22]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d109      	bne.n	80125fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80125e6:	4b08      	ldr	r3, [pc, #32]	@ (8012608 <mem_link_valid+0x74>)
 80125e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80125ea:	693a      	ldr	r2, [r7, #16]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d006      	beq.n	80125fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	885b      	ldrh	r3, [r3, #2]
 80125f4:	8afa      	ldrh	r2, [r7, #22]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d001      	beq.n	80125fe <mem_link_valid+0x6a>
    return 0;
 80125fa:	2300      	movs	r3, #0
 80125fc:	e000      	b.n	8012600 <mem_link_valid+0x6c>
  }
  return 1;
 80125fe:	2301      	movs	r3, #1
}
 8012600:	4618      	mov	r0, r3
 8012602:	3718      	adds	r7, #24
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	2000ca8c 	.word	0x2000ca8c

0801260c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b088      	sub	sp, #32
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d070      	beq.n	80126fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f003 0303 	and.w	r3, r3, #3
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00d      	beq.n	8012640 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012624:	4b37      	ldr	r3, [pc, #220]	@ (8012704 <mem_free+0xf8>)
 8012626:	f240 2273 	movw	r2, #627	@ 0x273
 801262a:	4937      	ldr	r1, [pc, #220]	@ (8012708 <mem_free+0xfc>)
 801262c:	4837      	ldr	r0, [pc, #220]	@ (801270c <mem_free+0x100>)
 801262e:	f00b fe99 	bl	801e364 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012632:	f00b f921 	bl	801d878 <sys_arch_protect>
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	68f8      	ldr	r0, [r7, #12]
 801263a:	f00b f92b 	bl	801d894 <sys_arch_unprotect>
    return;
 801263e:	e05e      	b.n	80126fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	3b08      	subs	r3, #8
 8012644:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012646:	4b32      	ldr	r3, [pc, #200]	@ (8012710 <mem_free+0x104>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	69fa      	ldr	r2, [r7, #28]
 801264c:	429a      	cmp	r2, r3
 801264e:	d306      	bcc.n	801265e <mem_free+0x52>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f103 020c 	add.w	r2, r3, #12
 8012656:	4b2f      	ldr	r3, [pc, #188]	@ (8012714 <mem_free+0x108>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	429a      	cmp	r2, r3
 801265c:	d90d      	bls.n	801267a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801265e:	4b29      	ldr	r3, [pc, #164]	@ (8012704 <mem_free+0xf8>)
 8012660:	f240 227f 	movw	r2, #639	@ 0x27f
 8012664:	492c      	ldr	r1, [pc, #176]	@ (8012718 <mem_free+0x10c>)
 8012666:	4829      	ldr	r0, [pc, #164]	@ (801270c <mem_free+0x100>)
 8012668:	f00b fe7c 	bl	801e364 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801266c:	f00b f904 	bl	801d878 <sys_arch_protect>
 8012670:	6138      	str	r0, [r7, #16]
 8012672:	6938      	ldr	r0, [r7, #16]
 8012674:	f00b f90e 	bl	801d894 <sys_arch_unprotect>
    return;
 8012678:	e041      	b.n	80126fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801267a:	4828      	ldr	r0, [pc, #160]	@ (801271c <mem_free+0x110>)
 801267c:	f00b f8c0 	bl	801d800 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	791b      	ldrb	r3, [r3, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d110      	bne.n	80126aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012688:	4b1e      	ldr	r3, [pc, #120]	@ (8012704 <mem_free+0xf8>)
 801268a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801268e:	4924      	ldr	r1, [pc, #144]	@ (8012720 <mem_free+0x114>)
 8012690:	481e      	ldr	r0, [pc, #120]	@ (801270c <mem_free+0x100>)
 8012692:	f00b fe67 	bl	801e364 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012696:	4821      	ldr	r0, [pc, #132]	@ (801271c <mem_free+0x110>)
 8012698:	f00b f8c1 	bl	801d81e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801269c:	f00b f8ec 	bl	801d878 <sys_arch_protect>
 80126a0:	6178      	str	r0, [r7, #20]
 80126a2:	6978      	ldr	r0, [r7, #20]
 80126a4:	f00b f8f6 	bl	801d894 <sys_arch_unprotect>
    return;
 80126a8:	e029      	b.n	80126fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80126aa:	69f8      	ldr	r0, [r7, #28]
 80126ac:	f7ff ff72 	bl	8012594 <mem_link_valid>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d110      	bne.n	80126d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80126b6:	4b13      	ldr	r3, [pc, #76]	@ (8012704 <mem_free+0xf8>)
 80126b8:	f240 2295 	movw	r2, #661	@ 0x295
 80126bc:	4919      	ldr	r1, [pc, #100]	@ (8012724 <mem_free+0x118>)
 80126be:	4813      	ldr	r0, [pc, #76]	@ (801270c <mem_free+0x100>)
 80126c0:	f00b fe50 	bl	801e364 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80126c4:	4815      	ldr	r0, [pc, #84]	@ (801271c <mem_free+0x110>)
 80126c6:	f00b f8aa 	bl	801d81e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80126ca:	f00b f8d5 	bl	801d878 <sys_arch_protect>
 80126ce:	61b8      	str	r0, [r7, #24]
 80126d0:	69b8      	ldr	r0, [r7, #24]
 80126d2:	f00b f8df 	bl	801d894 <sys_arch_unprotect>
    return;
 80126d6:	e012      	b.n	80126fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	2200      	movs	r2, #0
 80126dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80126de:	4b12      	ldr	r3, [pc, #72]	@ (8012728 <mem_free+0x11c>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	69fa      	ldr	r2, [r7, #28]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d202      	bcs.n	80126ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80126e8:	4a0f      	ldr	r2, [pc, #60]	@ (8012728 <mem_free+0x11c>)
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80126ee:	69f8      	ldr	r0, [r7, #28]
 80126f0:	f7ff fe5c 	bl	80123ac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80126f4:	4809      	ldr	r0, [pc, #36]	@ (801271c <mem_free+0x110>)
 80126f6:	f00b f892 	bl	801d81e <sys_mutex_unlock>
 80126fa:	e000      	b.n	80126fe <mem_free+0xf2>
    return;
 80126fc:	bf00      	nop
}
 80126fe:	3720      	adds	r7, #32
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	080219d4 	.word	0x080219d4
 8012708:	08021ac4 	.word	0x08021ac4
 801270c:	08021a1c 	.word	0x08021a1c
 8012710:	2000ca88 	.word	0x2000ca88
 8012714:	2000ca8c 	.word	0x2000ca8c
 8012718:	08021ae8 	.word	0x08021ae8
 801271c:	2000ca90 	.word	0x2000ca90
 8012720:	08021b04 	.word	0x08021b04
 8012724:	08021b2c 	.word	0x08021b2c
 8012728:	2000ca94 	.word	0x2000ca94

0801272c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b088      	sub	sp, #32
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	460b      	mov	r3, r1
 8012736:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012738:	887b      	ldrh	r3, [r7, #2]
 801273a:	3303      	adds	r3, #3
 801273c:	b29b      	uxth	r3, r3
 801273e:	f023 0303 	bic.w	r3, r3, #3
 8012742:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012744:	8bfb      	ldrh	r3, [r7, #30]
 8012746:	2b0b      	cmp	r3, #11
 8012748:	d801      	bhi.n	801274e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801274a:	230c      	movs	r3, #12
 801274c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801274e:	8bfb      	ldrh	r3, [r7, #30]
 8012750:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012754:	d803      	bhi.n	801275e <mem_trim+0x32>
 8012756:	8bfa      	ldrh	r2, [r7, #30]
 8012758:	887b      	ldrh	r3, [r7, #2]
 801275a:	429a      	cmp	r2, r3
 801275c:	d201      	bcs.n	8012762 <mem_trim+0x36>
    return NULL;
 801275e:	2300      	movs	r3, #0
 8012760:	e0d8      	b.n	8012914 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012762:	4b6e      	ldr	r3, [pc, #440]	@ (801291c <mem_trim+0x1f0>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	429a      	cmp	r2, r3
 801276a:	d304      	bcc.n	8012776 <mem_trim+0x4a>
 801276c:	4b6c      	ldr	r3, [pc, #432]	@ (8012920 <mem_trim+0x1f4>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	429a      	cmp	r2, r3
 8012774:	d306      	bcc.n	8012784 <mem_trim+0x58>
 8012776:	4b6b      	ldr	r3, [pc, #428]	@ (8012924 <mem_trim+0x1f8>)
 8012778:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801277c:	496a      	ldr	r1, [pc, #424]	@ (8012928 <mem_trim+0x1fc>)
 801277e:	486b      	ldr	r0, [pc, #428]	@ (801292c <mem_trim+0x200>)
 8012780:	f00b fdf0 	bl	801e364 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012784:	4b65      	ldr	r3, [pc, #404]	@ (801291c <mem_trim+0x1f0>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	429a      	cmp	r2, r3
 801278c:	d304      	bcc.n	8012798 <mem_trim+0x6c>
 801278e:	4b64      	ldr	r3, [pc, #400]	@ (8012920 <mem_trim+0x1f4>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	429a      	cmp	r2, r3
 8012796:	d307      	bcc.n	80127a8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012798:	f00b f86e 	bl	801d878 <sys_arch_protect>
 801279c:	60b8      	str	r0, [r7, #8]
 801279e:	68b8      	ldr	r0, [r7, #8]
 80127a0:	f00b f878 	bl	801d894 <sys_arch_unprotect>
    return rmem;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	e0b5      	b.n	8012914 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	3b08      	subs	r3, #8
 80127ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80127ae:	69b8      	ldr	r0, [r7, #24]
 80127b0:	f7ff fdea 	bl	8012388 <mem_to_ptr>
 80127b4:	4603      	mov	r3, r0
 80127b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	881a      	ldrh	r2, [r3, #0]
 80127bc:	8afb      	ldrh	r3, [r7, #22]
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	3b08      	subs	r3, #8
 80127c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80127c6:	8bfa      	ldrh	r2, [r7, #30]
 80127c8:	8abb      	ldrh	r3, [r7, #20]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d906      	bls.n	80127dc <mem_trim+0xb0>
 80127ce:	4b55      	ldr	r3, [pc, #340]	@ (8012924 <mem_trim+0x1f8>)
 80127d0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80127d4:	4956      	ldr	r1, [pc, #344]	@ (8012930 <mem_trim+0x204>)
 80127d6:	4855      	ldr	r0, [pc, #340]	@ (801292c <mem_trim+0x200>)
 80127d8:	f00b fdc4 	bl	801e364 <iprintf>
  if (newsize > size) {
 80127dc:	8bfa      	ldrh	r2, [r7, #30]
 80127de:	8abb      	ldrh	r3, [r7, #20]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d901      	bls.n	80127e8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80127e4:	2300      	movs	r3, #0
 80127e6:	e095      	b.n	8012914 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80127e8:	8bfa      	ldrh	r2, [r7, #30]
 80127ea:	8abb      	ldrh	r3, [r7, #20]
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d101      	bne.n	80127f4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	e08f      	b.n	8012914 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80127f4:	484f      	ldr	r0, [pc, #316]	@ (8012934 <mem_trim+0x208>)
 80127f6:	f00b f803 	bl	801d800 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80127fa:	69bb      	ldr	r3, [r7, #24]
 80127fc:	881b      	ldrh	r3, [r3, #0]
 80127fe:	4618      	mov	r0, r3
 8012800:	f7ff fdb0 	bl	8012364 <ptr_to_mem>
 8012804:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	791b      	ldrb	r3, [r3, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d13f      	bne.n	801288e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	881b      	ldrh	r3, [r3, #0]
 8012812:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012816:	d106      	bne.n	8012826 <mem_trim+0xfa>
 8012818:	4b42      	ldr	r3, [pc, #264]	@ (8012924 <mem_trim+0x1f8>)
 801281a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801281e:	4946      	ldr	r1, [pc, #280]	@ (8012938 <mem_trim+0x20c>)
 8012820:	4842      	ldr	r0, [pc, #264]	@ (801292c <mem_trim+0x200>)
 8012822:	f00b fd9f 	bl	801e364 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	881b      	ldrh	r3, [r3, #0]
 801282a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801282c:	8afa      	ldrh	r2, [r7, #22]
 801282e:	8bfb      	ldrh	r3, [r7, #30]
 8012830:	4413      	add	r3, r2
 8012832:	b29b      	uxth	r3, r3
 8012834:	3308      	adds	r3, #8
 8012836:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012838:	4b40      	ldr	r3, [pc, #256]	@ (801293c <mem_trim+0x210>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	693a      	ldr	r2, [r7, #16]
 801283e:	429a      	cmp	r2, r3
 8012840:	d106      	bne.n	8012850 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012842:	89fb      	ldrh	r3, [r7, #14]
 8012844:	4618      	mov	r0, r3
 8012846:	f7ff fd8d 	bl	8012364 <ptr_to_mem>
 801284a:	4603      	mov	r3, r0
 801284c:	4a3b      	ldr	r2, [pc, #236]	@ (801293c <mem_trim+0x210>)
 801284e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012850:	89fb      	ldrh	r3, [r7, #14]
 8012852:	4618      	mov	r0, r3
 8012854:	f7ff fd86 	bl	8012364 <ptr_to_mem>
 8012858:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	2200      	movs	r2, #0
 801285e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	89ba      	ldrh	r2, [r7, #12]
 8012864:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	8afa      	ldrh	r2, [r7, #22]
 801286a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	89fa      	ldrh	r2, [r7, #14]
 8012870:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	881b      	ldrh	r3, [r3, #0]
 8012876:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801287a:	d047      	beq.n	801290c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	881b      	ldrh	r3, [r3, #0]
 8012880:	4618      	mov	r0, r3
 8012882:	f7ff fd6f 	bl	8012364 <ptr_to_mem>
 8012886:	4602      	mov	r2, r0
 8012888:	89fb      	ldrh	r3, [r7, #14]
 801288a:	8053      	strh	r3, [r2, #2]
 801288c:	e03e      	b.n	801290c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801288e:	8bfb      	ldrh	r3, [r7, #30]
 8012890:	f103 0214 	add.w	r2, r3, #20
 8012894:	8abb      	ldrh	r3, [r7, #20]
 8012896:	429a      	cmp	r2, r3
 8012898:	d838      	bhi.n	801290c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801289a:	8afa      	ldrh	r2, [r7, #22]
 801289c:	8bfb      	ldrh	r3, [r7, #30]
 801289e:	4413      	add	r3, r2
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	3308      	adds	r3, #8
 80128a4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	881b      	ldrh	r3, [r3, #0]
 80128aa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80128ae:	d106      	bne.n	80128be <mem_trim+0x192>
 80128b0:	4b1c      	ldr	r3, [pc, #112]	@ (8012924 <mem_trim+0x1f8>)
 80128b2:	f240 3216 	movw	r2, #790	@ 0x316
 80128b6:	4920      	ldr	r1, [pc, #128]	@ (8012938 <mem_trim+0x20c>)
 80128b8:	481c      	ldr	r0, [pc, #112]	@ (801292c <mem_trim+0x200>)
 80128ba:	f00b fd53 	bl	801e364 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80128be:	89fb      	ldrh	r3, [r7, #14]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff fd4f 	bl	8012364 <ptr_to_mem>
 80128c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80128c8:	4b1c      	ldr	r3, [pc, #112]	@ (801293c <mem_trim+0x210>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	693a      	ldr	r2, [r7, #16]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d202      	bcs.n	80128d8 <mem_trim+0x1ac>
      lfree = mem2;
 80128d2:	4a1a      	ldr	r2, [pc, #104]	@ (801293c <mem_trim+0x210>)
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	2200      	movs	r2, #0
 80128dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	881a      	ldrh	r2, [r3, #0]
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	8afa      	ldrh	r2, [r7, #22]
 80128ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	89fa      	ldrh	r2, [r7, #14]
 80128f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80128fa:	d007      	beq.n	801290c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	881b      	ldrh	r3, [r3, #0]
 8012900:	4618      	mov	r0, r3
 8012902:	f7ff fd2f 	bl	8012364 <ptr_to_mem>
 8012906:	4602      	mov	r2, r0
 8012908:	89fb      	ldrh	r3, [r7, #14]
 801290a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801290c:	4809      	ldr	r0, [pc, #36]	@ (8012934 <mem_trim+0x208>)
 801290e:	f00a ff86 	bl	801d81e <sys_mutex_unlock>
  return rmem;
 8012912:	687b      	ldr	r3, [r7, #4]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3720      	adds	r7, #32
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	2000ca88 	.word	0x2000ca88
 8012920:	2000ca8c 	.word	0x2000ca8c
 8012924:	080219d4 	.word	0x080219d4
 8012928:	08021b60 	.word	0x08021b60
 801292c:	08021a1c 	.word	0x08021a1c
 8012930:	08021b78 	.word	0x08021b78
 8012934:	2000ca90 	.word	0x2000ca90
 8012938:	08021b98 	.word	0x08021b98
 801293c:	2000ca94 	.word	0x2000ca94

08012940 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b088      	sub	sp, #32
 8012944:	af00      	add	r7, sp, #0
 8012946:	4603      	mov	r3, r0
 8012948:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801294a:	88fb      	ldrh	r3, [r7, #6]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d101      	bne.n	8012954 <mem_malloc+0x14>
    return NULL;
 8012950:	2300      	movs	r3, #0
 8012952:	e0e2      	b.n	8012b1a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012954:	88fb      	ldrh	r3, [r7, #6]
 8012956:	3303      	adds	r3, #3
 8012958:	b29b      	uxth	r3, r3
 801295a:	f023 0303 	bic.w	r3, r3, #3
 801295e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012960:	8bbb      	ldrh	r3, [r7, #28]
 8012962:	2b0b      	cmp	r3, #11
 8012964:	d801      	bhi.n	801296a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012966:	230c      	movs	r3, #12
 8012968:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801296a:	8bbb      	ldrh	r3, [r7, #28]
 801296c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012970:	d803      	bhi.n	801297a <mem_malloc+0x3a>
 8012972:	8bba      	ldrh	r2, [r7, #28]
 8012974:	88fb      	ldrh	r3, [r7, #6]
 8012976:	429a      	cmp	r2, r3
 8012978:	d201      	bcs.n	801297e <mem_malloc+0x3e>
    return NULL;
 801297a:	2300      	movs	r3, #0
 801297c:	e0cd      	b.n	8012b1a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801297e:	4869      	ldr	r0, [pc, #420]	@ (8012b24 <mem_malloc+0x1e4>)
 8012980:	f00a ff3e 	bl	801d800 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012984:	4b68      	ldr	r3, [pc, #416]	@ (8012b28 <mem_malloc+0x1e8>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4618      	mov	r0, r3
 801298a:	f7ff fcfd 	bl	8012388 <mem_to_ptr>
 801298e:	4603      	mov	r3, r0
 8012990:	83fb      	strh	r3, [r7, #30]
 8012992:	e0b7      	b.n	8012b04 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012994:	8bfb      	ldrh	r3, [r7, #30]
 8012996:	4618      	mov	r0, r3
 8012998:	f7ff fce4 	bl	8012364 <ptr_to_mem>
 801299c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	791b      	ldrb	r3, [r3, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	f040 80a7 	bne.w	8012af6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	881b      	ldrh	r3, [r3, #0]
 80129ac:	461a      	mov	r2, r3
 80129ae:	8bfb      	ldrh	r3, [r7, #30]
 80129b0:	1ad3      	subs	r3, r2, r3
 80129b2:	f1a3 0208 	sub.w	r2, r3, #8
 80129b6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80129b8:	429a      	cmp	r2, r3
 80129ba:	f0c0 809c 	bcc.w	8012af6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	461a      	mov	r2, r3
 80129c4:	8bfb      	ldrh	r3, [r7, #30]
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	f1a3 0208 	sub.w	r2, r3, #8
 80129cc:	8bbb      	ldrh	r3, [r7, #28]
 80129ce:	3314      	adds	r3, #20
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d333      	bcc.n	8012a3c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80129d4:	8bfa      	ldrh	r2, [r7, #30]
 80129d6:	8bbb      	ldrh	r3, [r7, #28]
 80129d8:	4413      	add	r3, r2
 80129da:	b29b      	uxth	r3, r3
 80129dc:	3308      	adds	r3, #8
 80129de:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80129e0:	8a7b      	ldrh	r3, [r7, #18]
 80129e2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80129e6:	d106      	bne.n	80129f6 <mem_malloc+0xb6>
 80129e8:	4b50      	ldr	r3, [pc, #320]	@ (8012b2c <mem_malloc+0x1ec>)
 80129ea:	f240 3287 	movw	r2, #903	@ 0x387
 80129ee:	4950      	ldr	r1, [pc, #320]	@ (8012b30 <mem_malloc+0x1f0>)
 80129f0:	4850      	ldr	r0, [pc, #320]	@ (8012b34 <mem_malloc+0x1f4>)
 80129f2:	f00b fcb7 	bl	801e364 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80129f6:	8a7b      	ldrh	r3, [r7, #18]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7ff fcb3 	bl	8012364 <ptr_to_mem>
 80129fe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	2200      	movs	r2, #0
 8012a04:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	881a      	ldrh	r2, [r3, #0]
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	8bfa      	ldrh	r2, [r7, #30]
 8012a12:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	8a7a      	ldrh	r2, [r7, #18]
 8012a18:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	881b      	ldrh	r3, [r3, #0]
 8012a24:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012a28:	d00b      	beq.n	8012a42 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7ff fc98 	bl	8012364 <ptr_to_mem>
 8012a34:	4602      	mov	r2, r0
 8012a36:	8a7b      	ldrh	r3, [r7, #18]
 8012a38:	8053      	strh	r3, [r2, #2]
 8012a3a:	e002      	b.n	8012a42 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012a42:	4b39      	ldr	r3, [pc, #228]	@ (8012b28 <mem_malloc+0x1e8>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	697a      	ldr	r2, [r7, #20]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d127      	bne.n	8012a9c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012a4c:	4b36      	ldr	r3, [pc, #216]	@ (8012b28 <mem_malloc+0x1e8>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012a52:	e005      	b.n	8012a60 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	881b      	ldrh	r3, [r3, #0]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7ff fc83 	bl	8012364 <ptr_to_mem>
 8012a5e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	791b      	ldrb	r3, [r3, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d004      	beq.n	8012a72 <mem_malloc+0x132>
 8012a68:	4b33      	ldr	r3, [pc, #204]	@ (8012b38 <mem_malloc+0x1f8>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	69ba      	ldr	r2, [r7, #24]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d1f0      	bne.n	8012a54 <mem_malloc+0x114>
          }
          lfree = cur;
 8012a72:	4a2d      	ldr	r2, [pc, #180]	@ (8012b28 <mem_malloc+0x1e8>)
 8012a74:	69bb      	ldr	r3, [r7, #24]
 8012a76:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012a78:	4b2b      	ldr	r3, [pc, #172]	@ (8012b28 <mem_malloc+0x1e8>)
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8012b38 <mem_malloc+0x1f8>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d00b      	beq.n	8012a9c <mem_malloc+0x15c>
 8012a84:	4b28      	ldr	r3, [pc, #160]	@ (8012b28 <mem_malloc+0x1e8>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	791b      	ldrb	r3, [r3, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d006      	beq.n	8012a9c <mem_malloc+0x15c>
 8012a8e:	4b27      	ldr	r3, [pc, #156]	@ (8012b2c <mem_malloc+0x1ec>)
 8012a90:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8012a94:	4929      	ldr	r1, [pc, #164]	@ (8012b3c <mem_malloc+0x1fc>)
 8012a96:	4827      	ldr	r0, [pc, #156]	@ (8012b34 <mem_malloc+0x1f4>)
 8012a98:	f00b fc64 	bl	801e364 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012a9c:	4821      	ldr	r0, [pc, #132]	@ (8012b24 <mem_malloc+0x1e4>)
 8012a9e:	f00a febe 	bl	801d81e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012aa2:	8bba      	ldrh	r2, [r7, #28]
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	3308      	adds	r3, #8
 8012aaa:	4a23      	ldr	r2, [pc, #140]	@ (8012b38 <mem_malloc+0x1f8>)
 8012aac:	6812      	ldr	r2, [r2, #0]
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d906      	bls.n	8012ac0 <mem_malloc+0x180>
 8012ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8012b2c <mem_malloc+0x1ec>)
 8012ab4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8012ab8:	4921      	ldr	r1, [pc, #132]	@ (8012b40 <mem_malloc+0x200>)
 8012aba:	481e      	ldr	r0, [pc, #120]	@ (8012b34 <mem_malloc+0x1f4>)
 8012abc:	f00b fc52 	bl	801e364 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	f003 0303 	and.w	r3, r3, #3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d006      	beq.n	8012ad8 <mem_malloc+0x198>
 8012aca:	4b18      	ldr	r3, [pc, #96]	@ (8012b2c <mem_malloc+0x1ec>)
 8012acc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8012ad0:	491c      	ldr	r1, [pc, #112]	@ (8012b44 <mem_malloc+0x204>)
 8012ad2:	4818      	ldr	r0, [pc, #96]	@ (8012b34 <mem_malloc+0x1f4>)
 8012ad4:	f00b fc46 	bl	801e364 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	f003 0303 	and.w	r3, r3, #3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d006      	beq.n	8012af0 <mem_malloc+0x1b0>
 8012ae2:	4b12      	ldr	r3, [pc, #72]	@ (8012b2c <mem_malloc+0x1ec>)
 8012ae4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8012ae8:	4917      	ldr	r1, [pc, #92]	@ (8012b48 <mem_malloc+0x208>)
 8012aea:	4812      	ldr	r0, [pc, #72]	@ (8012b34 <mem_malloc+0x1f4>)
 8012aec:	f00b fc3a 	bl	801e364 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	3308      	adds	r3, #8
 8012af4:	e011      	b.n	8012b1a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012af6:	8bfb      	ldrh	r3, [r7, #30]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff fc33 	bl	8012364 <ptr_to_mem>
 8012afe:	4603      	mov	r3, r0
 8012b00:	881b      	ldrh	r3, [r3, #0]
 8012b02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012b04:	8bfa      	ldrh	r2, [r7, #30]
 8012b06:	8bbb      	ldrh	r3, [r7, #28]
 8012b08:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	f4ff af41 	bcc.w	8012994 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012b12:	4804      	ldr	r0, [pc, #16]	@ (8012b24 <mem_malloc+0x1e4>)
 8012b14:	f00a fe83 	bl	801d81e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012b18:	2300      	movs	r3, #0
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3720      	adds	r7, #32
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	2000ca90 	.word	0x2000ca90
 8012b28:	2000ca94 	.word	0x2000ca94
 8012b2c:	080219d4 	.word	0x080219d4
 8012b30:	08021b98 	.word	0x08021b98
 8012b34:	08021a1c 	.word	0x08021a1c
 8012b38:	2000ca8c 	.word	0x2000ca8c
 8012b3c:	08021bac 	.word	0x08021bac
 8012b40:	08021bc8 	.word	0x08021bc8
 8012b44:	08021bf8 	.word	0x08021bf8
 8012b48:	08021c28 	.word	0x08021c28

08012b4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b085      	sub	sp, #20
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	3303      	adds	r3, #3
 8012b62:	f023 0303 	bic.w	r3, r3, #3
 8012b66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012b68:	2300      	movs	r3, #0
 8012b6a:	60fb      	str	r3, [r7, #12]
 8012b6c:	e011      	b.n	8012b92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	681a      	ldr	r2, [r3, #0]
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	68ba      	ldr	r2, [r7, #8]
 8012b7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	881b      	ldrh	r3, [r3, #0]
 8012b84:	461a      	mov	r2, r3
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	4413      	add	r3, r2
 8012b8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	60fb      	str	r3, [r7, #12]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	885b      	ldrh	r3, [r3, #2]
 8012b96:	461a      	mov	r2, r3
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	4293      	cmp	r3, r2
 8012b9c:	dbe7      	blt.n	8012b6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012b9e:	bf00      	nop
 8012ba0:	bf00      	nop
 8012ba2:	3714      	adds	r7, #20
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b082      	sub	sp, #8
 8012bb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	80fb      	strh	r3, [r7, #6]
 8012bb6:	e009      	b.n	8012bcc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012bb8:	88fb      	ldrh	r3, [r7, #6]
 8012bba:	4a08      	ldr	r2, [pc, #32]	@ (8012bdc <memp_init+0x30>)
 8012bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7ff ffc3 	bl	8012b4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012bc6:	88fb      	ldrh	r3, [r7, #6]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	80fb      	strh	r3, [r7, #6]
 8012bcc:	88fb      	ldrh	r3, [r7, #6]
 8012bce:	2b0d      	cmp	r3, #13
 8012bd0:	d9f2      	bls.n	8012bb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012bd2:	bf00      	nop
 8012bd4:	bf00      	nop
 8012bd6:	3708      	adds	r7, #8
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	08024644 	.word	0x08024644

08012be0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012be8:	f00a fe46 	bl	801d878 <sys_arch_protect>
 8012bec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d015      	beq.n	8012c28 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	68ba      	ldr	r2, [r7, #8]
 8012c02:	6812      	ldr	r2, [r2, #0]
 8012c04:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	f003 0303 	and.w	r3, r3, #3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d006      	beq.n	8012c1e <do_memp_malloc_pool+0x3e>
 8012c10:	4b09      	ldr	r3, [pc, #36]	@ (8012c38 <do_memp_malloc_pool+0x58>)
 8012c12:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012c16:	4909      	ldr	r1, [pc, #36]	@ (8012c3c <do_memp_malloc_pool+0x5c>)
 8012c18:	4809      	ldr	r0, [pc, #36]	@ (8012c40 <do_memp_malloc_pool+0x60>)
 8012c1a:	f00b fba3 	bl	801e364 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012c1e:	68f8      	ldr	r0, [r7, #12]
 8012c20:	f00a fe38 	bl	801d894 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	e003      	b.n	8012c30 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012c28:	68f8      	ldr	r0, [r7, #12]
 8012c2a:	f00a fe33 	bl	801d894 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012c2e:	2300      	movs	r3, #0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	08021c4c 	.word	0x08021c4c
 8012c3c:	08021c7c 	.word	0x08021c7c
 8012c40:	08021ca0 	.word	0x08021ca0

08012c44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d106      	bne.n	8012c60 <memp_malloc_pool+0x1c>
 8012c52:	4b0a      	ldr	r3, [pc, #40]	@ (8012c7c <memp_malloc_pool+0x38>)
 8012c54:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8012c58:	4909      	ldr	r1, [pc, #36]	@ (8012c80 <memp_malloc_pool+0x3c>)
 8012c5a:	480a      	ldr	r0, [pc, #40]	@ (8012c84 <memp_malloc_pool+0x40>)
 8012c5c:	f00b fb82 	bl	801e364 <iprintf>
  if (desc == NULL) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d101      	bne.n	8012c6a <memp_malloc_pool+0x26>
    return NULL;
 8012c66:	2300      	movs	r3, #0
 8012c68:	e003      	b.n	8012c72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f7ff ffb8 	bl	8012be0 <do_memp_malloc_pool>
 8012c70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	08021c4c 	.word	0x08021c4c
 8012c80:	08021cc8 	.word	0x08021cc8
 8012c84:	08021ca0 	.word	0x08021ca0

08012c88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	4603      	mov	r3, r0
 8012c90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012c92:	79fb      	ldrb	r3, [r7, #7]
 8012c94:	2b0d      	cmp	r3, #13
 8012c96:	d908      	bls.n	8012caa <memp_malloc+0x22>
 8012c98:	4b0a      	ldr	r3, [pc, #40]	@ (8012cc4 <memp_malloc+0x3c>)
 8012c9a:	f240 1257 	movw	r2, #343	@ 0x157
 8012c9e:	490a      	ldr	r1, [pc, #40]	@ (8012cc8 <memp_malloc+0x40>)
 8012ca0:	480a      	ldr	r0, [pc, #40]	@ (8012ccc <memp_malloc+0x44>)
 8012ca2:	f00b fb5f 	bl	801e364 <iprintf>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	e008      	b.n	8012cbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012caa:	79fb      	ldrb	r3, [r7, #7]
 8012cac:	4a08      	ldr	r2, [pc, #32]	@ (8012cd0 <memp_malloc+0x48>)
 8012cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7ff ff94 	bl	8012be0 <do_memp_malloc_pool>
 8012cb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012cba:	68fb      	ldr	r3, [r7, #12]
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3710      	adds	r7, #16
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	08021c4c 	.word	0x08021c4c
 8012cc8:	08021cdc 	.word	0x08021cdc
 8012ccc:	08021ca0 	.word	0x08021ca0
 8012cd0:	08024644 	.word	0x08024644

08012cd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	f003 0303 	and.w	r3, r3, #3
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d006      	beq.n	8012cf6 <do_memp_free_pool+0x22>
 8012ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8012d20 <do_memp_free_pool+0x4c>)
 8012cea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8012cee:	490d      	ldr	r1, [pc, #52]	@ (8012d24 <do_memp_free_pool+0x50>)
 8012cf0:	480d      	ldr	r0, [pc, #52]	@ (8012d28 <do_memp_free_pool+0x54>)
 8012cf2:	f00b fb37 	bl	801e364 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012cfa:	f00a fdbd 	bl	801d878 <sys_arch_protect>
 8012cfe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	689b      	ldr	r3, [r3, #8]
 8012d04:	681a      	ldr	r2, [r3, #0]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012d12:	68b8      	ldr	r0, [r7, #8]
 8012d14:	f00a fdbe 	bl	801d894 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012d18:	bf00      	nop
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	08021c4c 	.word	0x08021c4c
 8012d24:	08021cfc 	.word	0x08021cfc
 8012d28:	08021ca0 	.word	0x08021ca0

08012d2c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d106      	bne.n	8012d4a <memp_free_pool+0x1e>
 8012d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8012d68 <memp_free_pool+0x3c>)
 8012d3e:	f240 1295 	movw	r2, #405	@ 0x195
 8012d42:	490a      	ldr	r1, [pc, #40]	@ (8012d6c <memp_free_pool+0x40>)
 8012d44:	480a      	ldr	r0, [pc, #40]	@ (8012d70 <memp_free_pool+0x44>)
 8012d46:	f00b fb0d 	bl	801e364 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d007      	beq.n	8012d60 <memp_free_pool+0x34>
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d004      	beq.n	8012d60 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012d56:	6839      	ldr	r1, [r7, #0]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff ffbb 	bl	8012cd4 <do_memp_free_pool>
 8012d5e:	e000      	b.n	8012d62 <memp_free_pool+0x36>
    return;
 8012d60:	bf00      	nop
}
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	08021c4c 	.word	0x08021c4c
 8012d6c:	08021cc8 	.word	0x08021cc8
 8012d70:	08021ca0 	.word	0x08021ca0

08012d74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	6039      	str	r1, [r7, #0]
 8012d7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012d80:	79fb      	ldrb	r3, [r7, #7]
 8012d82:	2b0d      	cmp	r3, #13
 8012d84:	d907      	bls.n	8012d96 <memp_free+0x22>
 8012d86:	4b0c      	ldr	r3, [pc, #48]	@ (8012db8 <memp_free+0x44>)
 8012d88:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8012d8c:	490b      	ldr	r1, [pc, #44]	@ (8012dbc <memp_free+0x48>)
 8012d8e:	480c      	ldr	r0, [pc, #48]	@ (8012dc0 <memp_free+0x4c>)
 8012d90:	f00b fae8 	bl	801e364 <iprintf>
 8012d94:	e00c      	b.n	8012db0 <memp_free+0x3c>

  if (mem == NULL) {
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d008      	beq.n	8012dae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012d9c:	79fb      	ldrb	r3, [r7, #7]
 8012d9e:	4a09      	ldr	r2, [pc, #36]	@ (8012dc4 <memp_free+0x50>)
 8012da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012da4:	6839      	ldr	r1, [r7, #0]
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff ff94 	bl	8012cd4 <do_memp_free_pool>
 8012dac:	e000      	b.n	8012db0 <memp_free+0x3c>
    return;
 8012dae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012db0:	3708      	adds	r7, #8
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
 8012db6:	bf00      	nop
 8012db8:	08021c4c 	.word	0x08021c4c
 8012dbc:	08021d1c 	.word	0x08021d1c
 8012dc0:	08021ca0 	.word	0x08021ca0
 8012dc4:	08024644 	.word	0x08024644

08012dc8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012dc8:	b480      	push	{r7}
 8012dca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012dcc:	bf00      	nop
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd4:	4770      	bx	lr
	...

08012dd8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	607a      	str	r2, [r7, #4]
 8012de4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d108      	bne.n	8012dfe <netif_add+0x26>
 8012dec:	4b57      	ldr	r3, [pc, #348]	@ (8012f4c <netif_add+0x174>)
 8012dee:	f240 1227 	movw	r2, #295	@ 0x127
 8012df2:	4957      	ldr	r1, [pc, #348]	@ (8012f50 <netif_add+0x178>)
 8012df4:	4857      	ldr	r0, [pc, #348]	@ (8012f54 <netif_add+0x17c>)
 8012df6:	f00b fab5 	bl	801e364 <iprintf>
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e0a2      	b.n	8012f44 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d108      	bne.n	8012e16 <netif_add+0x3e>
 8012e04:	4b51      	ldr	r3, [pc, #324]	@ (8012f4c <netif_add+0x174>)
 8012e06:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8012e0a:	4953      	ldr	r1, [pc, #332]	@ (8012f58 <netif_add+0x180>)
 8012e0c:	4851      	ldr	r0, [pc, #324]	@ (8012f54 <netif_add+0x17c>)
 8012e0e:	f00b faa9 	bl	801e364 <iprintf>
 8012e12:	2300      	movs	r3, #0
 8012e14:	e096      	b.n	8012f44 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d101      	bne.n	8012e20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8012f5c <netif_add+0x184>)
 8012e1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d101      	bne.n	8012e2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012e26:	4b4d      	ldr	r3, [pc, #308]	@ (8012f5c <netif_add+0x184>)
 8012e28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d101      	bne.n	8012e34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012e30:	4b4a      	ldr	r3, [pc, #296]	@ (8012f5c <netif_add+0x184>)
 8012e32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2200      	movs	r2, #0
 8012e38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2200      	movs	r2, #0
 8012e44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	4a45      	ldr	r2, [pc, #276]	@ (8012f60 <netif_add+0x188>)
 8012e4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2200      	movs	r2, #0
 8012e56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	6a3a      	ldr	r2, [r7, #32]
 8012e64:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012e66:	4b3f      	ldr	r3, [pc, #252]	@ (8012f64 <netif_add+0x18c>)
 8012e68:	781a      	ldrb	r2, [r3, #0]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e74:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	68b9      	ldr	r1, [r7, #8]
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f000 f913 	bl	80130a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	4798      	blx	r3
 8012e88:	4603      	mov	r3, r0
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d001      	beq.n	8012e92 <netif_add+0xba>
    return NULL;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e058      	b.n	8012f44 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012e98:	2bff      	cmp	r3, #255	@ 0xff
 8012e9a:	d103      	bne.n	8012ea4 <netif_add+0xcc>
        netif->num = 0;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8012f68 <netif_add+0x190>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	617b      	str	r3, [r7, #20]
 8012eae:	e02b      	b.n	8012f08 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012eb0:	697a      	ldr	r2, [r7, #20]
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d106      	bne.n	8012ec6 <netif_add+0xee>
 8012eb8:	4b24      	ldr	r3, [pc, #144]	@ (8012f4c <netif_add+0x174>)
 8012eba:	f240 128b 	movw	r2, #395	@ 0x18b
 8012ebe:	492b      	ldr	r1, [pc, #172]	@ (8012f6c <netif_add+0x194>)
 8012ec0:	4824      	ldr	r0, [pc, #144]	@ (8012f54 <netif_add+0x17c>)
 8012ec2:	f00b fa4f 	bl	801e364 <iprintf>
        num_netifs++;
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	2bff      	cmp	r3, #255	@ 0xff
 8012ed0:	dd06      	ble.n	8012ee0 <netif_add+0x108>
 8012ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8012f4c <netif_add+0x174>)
 8012ed4:	f240 128d 	movw	r2, #397	@ 0x18d
 8012ed8:	4925      	ldr	r1, [pc, #148]	@ (8012f70 <netif_add+0x198>)
 8012eda:	481e      	ldr	r0, [pc, #120]	@ (8012f54 <netif_add+0x17c>)
 8012edc:	f00b fa42 	bl	801e364 <iprintf>
        if (netif2->num == netif->num) {
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d108      	bne.n	8012f02 <netif_add+0x12a>
          netif->num++;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8012f00:	e005      	b.n	8012f0e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	617b      	str	r3, [r7, #20]
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d1d0      	bne.n	8012eb0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d1be      	bne.n	8012e92 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012f1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8012f1c:	d103      	bne.n	8012f26 <netif_add+0x14e>
    netif_num = 0;
 8012f1e:	4b11      	ldr	r3, [pc, #68]	@ (8012f64 <netif_add+0x18c>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	701a      	strb	r2, [r3, #0]
 8012f24:	e006      	b.n	8012f34 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	b2da      	uxtb	r2, r3
 8012f30:	4b0c      	ldr	r3, [pc, #48]	@ (8012f64 <netif_add+0x18c>)
 8012f32:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012f34:	4b0c      	ldr	r3, [pc, #48]	@ (8012f68 <netif_add+0x190>)
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8012f68 <netif_add+0x190>)
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012f42:	68fb      	ldr	r3, [r7, #12]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3718      	adds	r7, #24
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	08021d38 	.word	0x08021d38
 8012f50:	08021dcc 	.word	0x08021dcc
 8012f54:	08021d88 	.word	0x08021d88
 8012f58:	08021de8 	.word	0x08021de8
 8012f5c:	080246c4 	.word	0x080246c4
 8012f60:	08013383 	.word	0x08013383
 8012f64:	2000fcb8 	.word	0x2000fcb8
 8012f68:	2000fcb0 	.word	0x2000fcb0
 8012f6c:	08021e0c 	.word	0x08021e0c
 8012f70:	08021e20 	.word	0x08021e20

08012f74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012f7e:	6839      	ldr	r1, [r7, #0]
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f002 fe13 	bl	8015bac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f007 fea9 	bl	801ace0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012f8e:	bf00      	nop
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
	...

08012f98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b086      	sub	sp, #24
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d106      	bne.n	8012fb8 <netif_do_set_ipaddr+0x20>
 8012faa:	4b1d      	ldr	r3, [pc, #116]	@ (8013020 <netif_do_set_ipaddr+0x88>)
 8012fac:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8012fb0:	491c      	ldr	r1, [pc, #112]	@ (8013024 <netif_do_set_ipaddr+0x8c>)
 8012fb2:	481d      	ldr	r0, [pc, #116]	@ (8013028 <netif_do_set_ipaddr+0x90>)
 8012fb4:	f00b f9d6 	bl	801e364 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d106      	bne.n	8012fcc <netif_do_set_ipaddr+0x34>
 8012fbe:	4b18      	ldr	r3, [pc, #96]	@ (8013020 <netif_do_set_ipaddr+0x88>)
 8012fc0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8012fc4:	4917      	ldr	r1, [pc, #92]	@ (8013024 <netif_do_set_ipaddr+0x8c>)
 8012fc6:	4818      	ldr	r0, [pc, #96]	@ (8013028 <netif_do_set_ipaddr+0x90>)
 8012fc8:	f00b f9cc 	bl	801e364 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	3304      	adds	r3, #4
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d01c      	beq.n	8013014 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012fea:	f107 0314 	add.w	r3, r7, #20
 8012fee:	4619      	mov	r1, r3
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7ff ffbf 	bl	8012f74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d002      	beq.n	8013002 <netif_do_set_ipaddr+0x6a>
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	e000      	b.n	8013004 <netif_do_set_ipaddr+0x6c>
 8013002:	2300      	movs	r3, #0
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013008:	2101      	movs	r1, #1
 801300a:	68f8      	ldr	r0, [r7, #12]
 801300c:	f000 f8d2 	bl	80131b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013010:	2301      	movs	r3, #1
 8013012:	e000      	b.n	8013016 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	3718      	adds	r7, #24
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	08021d38 	.word	0x08021d38
 8013024:	08021e50 	.word	0x08021e50
 8013028:	08021d88 	.word	0x08021d88

0801302c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801302c:	b480      	push	{r7}
 801302e:	b085      	sub	sp, #20
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	3308      	adds	r3, #8
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	429a      	cmp	r2, r3
 8013044:	d00a      	beq.n	801305c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d002      	beq.n	8013052 <netif_do_set_netmask+0x26>
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	e000      	b.n	8013054 <netif_do_set_netmask+0x28>
 8013052:	2300      	movs	r3, #0
 8013054:	68fa      	ldr	r2, [r7, #12]
 8013056:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013058:	2301      	movs	r3, #1
 801305a:	e000      	b.n	801305e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	3714      	adds	r7, #20
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr

0801306a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801306a:	b480      	push	{r7}
 801306c:	b085      	sub	sp, #20
 801306e:	af00      	add	r7, sp, #0
 8013070:	60f8      	str	r0, [r7, #12]
 8013072:	60b9      	str	r1, [r7, #8]
 8013074:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	681a      	ldr	r2, [r3, #0]
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	330c      	adds	r3, #12
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	429a      	cmp	r2, r3
 8013082:	d00a      	beq.n	801309a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d002      	beq.n	8013090 <netif_do_set_gw+0x26>
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	e000      	b.n	8013092 <netif_do_set_gw+0x28>
 8013090:	2300      	movs	r3, #0
 8013092:	68fa      	ldr	r2, [r7, #12]
 8013094:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013096:	2301      	movs	r3, #1
 8013098:	e000      	b.n	801309c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801309a:	2300      	movs	r3, #0
}
 801309c:	4618      	mov	r0, r3
 801309e:	3714      	adds	r7, #20
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr

080130a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b088      	sub	sp, #32
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	60f8      	str	r0, [r7, #12]
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
 80130b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80130b6:	2300      	movs	r3, #0
 80130b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80130ba:	2300      	movs	r3, #0
 80130bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d101      	bne.n	80130c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80130c4:	4b1c      	ldr	r3, [pc, #112]	@ (8013138 <netif_set_addr+0x90>)
 80130c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d101      	bne.n	80130d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80130ce:	4b1a      	ldr	r3, [pc, #104]	@ (8013138 <netif_set_addr+0x90>)
 80130d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d101      	bne.n	80130dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80130d8:	4b17      	ldr	r3, [pc, #92]	@ (8013138 <netif_set_addr+0x90>)
 80130da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d003      	beq.n	80130ea <netif_set_addr+0x42>
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <netif_set_addr+0x46>
 80130ea:	2301      	movs	r3, #1
 80130ec:	e000      	b.n	80130f0 <netif_set_addr+0x48>
 80130ee:	2300      	movs	r3, #0
 80130f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d006      	beq.n	8013106 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80130f8:	f107 0310 	add.w	r3, r7, #16
 80130fc:	461a      	mov	r2, r3
 80130fe:	68b9      	ldr	r1, [r7, #8]
 8013100:	68f8      	ldr	r0, [r7, #12]
 8013102:	f7ff ff49 	bl	8012f98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013106:	69fa      	ldr	r2, [r7, #28]
 8013108:	6879      	ldr	r1, [r7, #4]
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f7ff ff8e 	bl	801302c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013110:	69ba      	ldr	r2, [r7, #24]
 8013112:	6839      	ldr	r1, [r7, #0]
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f7ff ffa8 	bl	801306a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d106      	bne.n	801312e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013120:	f107 0310 	add.w	r3, r7, #16
 8013124:	461a      	mov	r2, r3
 8013126:	68b9      	ldr	r1, [r7, #8]
 8013128:	68f8      	ldr	r0, [r7, #12]
 801312a:	f7ff ff35 	bl	8012f98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801312e:	bf00      	nop
 8013130:	3720      	adds	r7, #32
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	080246c4 	.word	0x080246c4

0801313c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801313c:	b480      	push	{r7}
 801313e:	b083      	sub	sp, #12
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013144:	4a04      	ldr	r2, [pc, #16]	@ (8013158 <netif_set_default+0x1c>)
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801314a:	bf00      	nop
 801314c:	370c      	adds	r7, #12
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop
 8013158:	2000fcb4 	.word	0x2000fcb4

0801315c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d107      	bne.n	801317a <netif_set_up+0x1e>
 801316a:	4b0f      	ldr	r3, [pc, #60]	@ (80131a8 <netif_set_up+0x4c>)
 801316c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013170:	490e      	ldr	r1, [pc, #56]	@ (80131ac <netif_set_up+0x50>)
 8013172:	480f      	ldr	r0, [pc, #60]	@ (80131b0 <netif_set_up+0x54>)
 8013174:	f00b f8f6 	bl	801e364 <iprintf>
 8013178:	e013      	b.n	80131a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013180:	f003 0301 	and.w	r3, r3, #1
 8013184:	2b00      	cmp	r3, #0
 8013186:	d10c      	bne.n	80131a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801318e:	f043 0301 	orr.w	r3, r3, #1
 8013192:	b2da      	uxtb	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801319a:	2103      	movs	r1, #3
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 f809 	bl	80131b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	08021d38 	.word	0x08021d38
 80131ac:	08021ec0 	.word	0x08021ec0
 80131b0:	08021d88 	.word	0x08021d88

080131b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	460b      	mov	r3, r1
 80131be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <netif_issue_reports+0x20>
 80131c6:	4b18      	ldr	r3, [pc, #96]	@ (8013228 <netif_issue_reports+0x74>)
 80131c8:	f240 326d 	movw	r2, #877	@ 0x36d
 80131cc:	4917      	ldr	r1, [pc, #92]	@ (801322c <netif_issue_reports+0x78>)
 80131ce:	4818      	ldr	r0, [pc, #96]	@ (8013230 <netif_issue_reports+0x7c>)
 80131d0:	f00b f8c8 	bl	801e364 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80131da:	f003 0304 	and.w	r3, r3, #4
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d01e      	beq.n	8013220 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80131e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d017      	beq.n	8013220 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80131f0:	78fb      	ldrb	r3, [r7, #3]
 80131f2:	f003 0301 	and.w	r3, r3, #1
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d013      	beq.n	8013222 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	3304      	adds	r3, #4
 80131fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00e      	beq.n	8013222 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801320a:	f003 0308 	and.w	r3, r3, #8
 801320e:	2b00      	cmp	r3, #0
 8013210:	d007      	beq.n	8013222 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	3304      	adds	r3, #4
 8013216:	4619      	mov	r1, r3
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f008 fccb 	bl	801bbb4 <etharp_request>
 801321e:	e000      	b.n	8013222 <netif_issue_reports+0x6e>
    return;
 8013220:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	08021d38 	.word	0x08021d38
 801322c:	08021edc 	.word	0x08021edc
 8013230:	08021d88 	.word	0x08021d88

08013234 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d107      	bne.n	8013252 <netif_set_down+0x1e>
 8013242:	4b12      	ldr	r3, [pc, #72]	@ (801328c <netif_set_down+0x58>)
 8013244:	f240 329b 	movw	r2, #923	@ 0x39b
 8013248:	4911      	ldr	r1, [pc, #68]	@ (8013290 <netif_set_down+0x5c>)
 801324a:	4812      	ldr	r0, [pc, #72]	@ (8013294 <netif_set_down+0x60>)
 801324c:	f00b f88a 	bl	801e364 <iprintf>
 8013250:	e019      	b.n	8013286 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013258:	f003 0301 	and.w	r3, r3, #1
 801325c:	2b00      	cmp	r3, #0
 801325e:	d012      	beq.n	8013286 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013266:	f023 0301 	bic.w	r3, r3, #1
 801326a:	b2da      	uxtb	r2, r3
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013278:	f003 0308 	and.w	r3, r3, #8
 801327c:	2b00      	cmp	r3, #0
 801327e:	d002      	beq.n	8013286 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f008 f855 	bl	801b330 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013286:	3708      	adds	r7, #8
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}
 801328c:	08021d38 	.word	0x08021d38
 8013290:	08021f00 	.word	0x08021f00
 8013294:	08021d88 	.word	0x08021d88

08013298 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d107      	bne.n	80132b6 <netif_set_link_up+0x1e>
 80132a6:	4b13      	ldr	r3, [pc, #76]	@ (80132f4 <netif_set_link_up+0x5c>)
 80132a8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80132ac:	4912      	ldr	r1, [pc, #72]	@ (80132f8 <netif_set_link_up+0x60>)
 80132ae:	4813      	ldr	r0, [pc, #76]	@ (80132fc <netif_set_link_up+0x64>)
 80132b0:	f00b f858 	bl	801e364 <iprintf>
 80132b4:	e01b      	b.n	80132ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80132bc:	f003 0304 	and.w	r3, r3, #4
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d114      	bne.n	80132ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80132ca:	f043 0304 	orr.w	r3, r3, #4
 80132ce:	b2da      	uxtb	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80132d6:	2103      	movs	r1, #3
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7ff ff6b 	bl	80131b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	69db      	ldr	r3, [r3, #28]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d003      	beq.n	80132ee <netif_set_link_up+0x56>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	69db      	ldr	r3, [r3, #28]
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80132ee:	3708      	adds	r7, #8
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	08021d38 	.word	0x08021d38
 80132f8:	08021f20 	.word	0x08021f20
 80132fc:	08021d88 	.word	0x08021d88

08013300 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d107      	bne.n	801331e <netif_set_link_down+0x1e>
 801330e:	4b11      	ldr	r3, [pc, #68]	@ (8013354 <netif_set_link_down+0x54>)
 8013310:	f240 4206 	movw	r2, #1030	@ 0x406
 8013314:	4910      	ldr	r1, [pc, #64]	@ (8013358 <netif_set_link_down+0x58>)
 8013316:	4811      	ldr	r0, [pc, #68]	@ (801335c <netif_set_link_down+0x5c>)
 8013318:	f00b f824 	bl	801e364 <iprintf>
 801331c:	e017      	b.n	801334e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013324:	f003 0304 	and.w	r3, r3, #4
 8013328:	2b00      	cmp	r3, #0
 801332a:	d010      	beq.n	801334e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013332:	f023 0304 	bic.w	r3, r3, #4
 8013336:	b2da      	uxtb	r2, r3
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	69db      	ldr	r3, [r3, #28]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d003      	beq.n	801334e <netif_set_link_down+0x4e>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	69db      	ldr	r3, [r3, #28]
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	08021d38 	.word	0x08021d38
 8013358:	08021f44 	.word	0x08021f44
 801335c:	08021d88 	.word	0x08021d88

08013360 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013360:	b480      	push	{r7}
 8013362:	b083      	sub	sp, #12
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d002      	beq.n	8013376 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	683a      	ldr	r2, [r7, #0]
 8013374:	61da      	str	r2, [r3, #28]
  }
}
 8013376:	bf00      	nop
 8013378:	370c      	adds	r7, #12
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013382:	b480      	push	{r7}
 8013384:	b085      	sub	sp, #20
 8013386:	af00      	add	r7, sp, #0
 8013388:	60f8      	str	r0, [r7, #12]
 801338a:	60b9      	str	r1, [r7, #8]
 801338c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801338e:	f06f 030b 	mvn.w	r3, #11
}
 8013392:	4618      	mov	r0, r3
 8013394:	3714      	adds	r7, #20
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr
	...

080133a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	4603      	mov	r3, r0
 80133a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80133aa:	79fb      	ldrb	r3, [r7, #7]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d013      	beq.n	80133d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80133b0:	4b0d      	ldr	r3, [pc, #52]	@ (80133e8 <netif_get_by_index+0x48>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	60fb      	str	r3, [r7, #12]
 80133b6:	e00c      	b.n	80133d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80133be:	3301      	adds	r3, #1
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	79fa      	ldrb	r2, [r7, #7]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d101      	bne.n	80133cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	e006      	b.n	80133da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	60fb      	str	r3, [r7, #12]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d1ef      	bne.n	80133b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80133d8:	2300      	movs	r3, #0
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3714      	adds	r7, #20
 80133de:	46bd      	mov	sp, r7
 80133e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e4:	4770      	bx	lr
 80133e6:	bf00      	nop
 80133e8:	2000fcb0 	.word	0x2000fcb0

080133ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80133f2:	f00a fa41 	bl	801d878 <sys_arch_protect>
 80133f6:	6038      	str	r0, [r7, #0]
 80133f8:	4b0d      	ldr	r3, [pc, #52]	@ (8013430 <pbuf_free_ooseq+0x44>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	701a      	strb	r2, [r3, #0]
 80133fe:	6838      	ldr	r0, [r7, #0]
 8013400:	f00a fa48 	bl	801d894 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013404:	4b0b      	ldr	r3, [pc, #44]	@ (8013434 <pbuf_free_ooseq+0x48>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	607b      	str	r3, [r7, #4]
 801340a:	e00a      	b.n	8013422 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013410:	2b00      	cmp	r3, #0
 8013412:	d003      	beq.n	801341c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f002 fc07 	bl	8015c28 <tcp_free_ooseq>
      return;
 801341a:	e005      	b.n	8013428 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	607b      	str	r3, [r7, #4]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d1f1      	bne.n	801340c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013428:	3708      	adds	r7, #8
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	2000fcb9 	.word	0x2000fcb9
 8013434:	2000fcc8 	.word	0x2000fcc8

08013438 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013440:	f7ff ffd4 	bl	80133ec <pbuf_free_ooseq>
}
 8013444:	bf00      	nop
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013452:	f00a fa11 	bl	801d878 <sys_arch_protect>
 8013456:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013458:	4b0f      	ldr	r3, [pc, #60]	@ (8013498 <pbuf_pool_is_empty+0x4c>)
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801345e:	4b0e      	ldr	r3, [pc, #56]	@ (8013498 <pbuf_pool_is_empty+0x4c>)
 8013460:	2201      	movs	r2, #1
 8013462:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f00a fa15 	bl	801d894 <sys_arch_unprotect>

  if (!queued) {
 801346a:	78fb      	ldrb	r3, [r7, #3]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d10f      	bne.n	8013490 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013470:	2100      	movs	r1, #0
 8013472:	480a      	ldr	r0, [pc, #40]	@ (801349c <pbuf_pool_is_empty+0x50>)
 8013474:	f7fe fbc6 	bl	8011c04 <tcpip_try_callback>
 8013478:	4603      	mov	r3, r0
 801347a:	2b00      	cmp	r3, #0
 801347c:	d008      	beq.n	8013490 <pbuf_pool_is_empty+0x44>
 801347e:	f00a f9fb 	bl	801d878 <sys_arch_protect>
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	4b04      	ldr	r3, [pc, #16]	@ (8013498 <pbuf_pool_is_empty+0x4c>)
 8013486:	2200      	movs	r2, #0
 8013488:	701a      	strb	r2, [r3, #0]
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f00a fa02 	bl	801d894 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013490:	bf00      	nop
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	2000fcb9 	.word	0x2000fcb9
 801349c:	08013439 	.word	0x08013439

080134a0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	4611      	mov	r1, r2
 80134ac:	461a      	mov	r2, r3
 80134ae:	460b      	mov	r3, r1
 80134b0:	80fb      	strh	r3, [r7, #6]
 80134b2:	4613      	mov	r3, r2
 80134b4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2200      	movs	r2, #0
 80134ba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	68ba      	ldr	r2, [r7, #8]
 80134c0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	88fa      	ldrh	r2, [r7, #6]
 80134c6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	88ba      	ldrh	r2, [r7, #4]
 80134cc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80134ce:	8b3b      	ldrh	r3, [r7, #24]
 80134d0:	b2da      	uxtb	r2, r3
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	7f3a      	ldrb	r2, [r7, #28]
 80134da:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2201      	movs	r2, #1
 80134e0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2200      	movs	r2, #0
 80134e6:	73da      	strb	r2, [r3, #15]
}
 80134e8:	bf00      	nop
 80134ea:	3714      	adds	r7, #20
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr

080134f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08c      	sub	sp, #48	@ 0x30
 80134f8:	af02      	add	r7, sp, #8
 80134fa:	4603      	mov	r3, r0
 80134fc:	71fb      	strb	r3, [r7, #7]
 80134fe:	460b      	mov	r3, r1
 8013500:	80bb      	strh	r3, [r7, #4]
 8013502:	4613      	mov	r3, r2
 8013504:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013506:	79fb      	ldrb	r3, [r7, #7]
 8013508:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801350a:	887b      	ldrh	r3, [r7, #2]
 801350c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013510:	d07f      	beq.n	8013612 <pbuf_alloc+0x11e>
 8013512:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013516:	f300 80c8 	bgt.w	80136aa <pbuf_alloc+0x1b6>
 801351a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801351e:	d010      	beq.n	8013542 <pbuf_alloc+0x4e>
 8013520:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013524:	f300 80c1 	bgt.w	80136aa <pbuf_alloc+0x1b6>
 8013528:	2b01      	cmp	r3, #1
 801352a:	d002      	beq.n	8013532 <pbuf_alloc+0x3e>
 801352c:	2b41      	cmp	r3, #65	@ 0x41
 801352e:	f040 80bc 	bne.w	80136aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013532:	887a      	ldrh	r2, [r7, #2]
 8013534:	88bb      	ldrh	r3, [r7, #4]
 8013536:	4619      	mov	r1, r3
 8013538:	2000      	movs	r0, #0
 801353a:	f000 f8d1 	bl	80136e0 <pbuf_alloc_reference>
 801353e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013540:	e0bd      	b.n	80136be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013542:	2300      	movs	r3, #0
 8013544:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013546:	2300      	movs	r3, #0
 8013548:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801354a:	88bb      	ldrh	r3, [r7, #4]
 801354c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801354e:	200d      	movs	r0, #13
 8013550:	f7ff fb9a 	bl	8012c88 <memp_malloc>
 8013554:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d109      	bne.n	8013570 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801355c:	f7ff ff76 	bl	801344c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013562:	2b00      	cmp	r3, #0
 8013564:	d002      	beq.n	801356c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013568:	f000 faa8 	bl	8013abc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801356c:	2300      	movs	r3, #0
 801356e:	e0a7      	b.n	80136c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013570:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013572:	3303      	adds	r3, #3
 8013574:	b29b      	uxth	r3, r3
 8013576:	f023 0303 	bic.w	r3, r3, #3
 801357a:	b29b      	uxth	r3, r3
 801357c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013580:	b29b      	uxth	r3, r3
 8013582:	8b7a      	ldrh	r2, [r7, #26]
 8013584:	4293      	cmp	r3, r2
 8013586:	bf28      	it	cs
 8013588:	4613      	movcs	r3, r2
 801358a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801358c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801358e:	3310      	adds	r3, #16
 8013590:	693a      	ldr	r2, [r7, #16]
 8013592:	4413      	add	r3, r2
 8013594:	3303      	adds	r3, #3
 8013596:	f023 0303 	bic.w	r3, r3, #3
 801359a:	4618      	mov	r0, r3
 801359c:	89f9      	ldrh	r1, [r7, #14]
 801359e:	8b7a      	ldrh	r2, [r7, #26]
 80135a0:	2300      	movs	r3, #0
 80135a2:	9301      	str	r3, [sp, #4]
 80135a4:	887b      	ldrh	r3, [r7, #2]
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	460b      	mov	r3, r1
 80135aa:	4601      	mov	r1, r0
 80135ac:	6938      	ldr	r0, [r7, #16]
 80135ae:	f7ff ff77 	bl	80134a0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	f003 0303 	and.w	r3, r3, #3
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d006      	beq.n	80135cc <pbuf_alloc+0xd8>
 80135be:	4b42      	ldr	r3, [pc, #264]	@ (80136c8 <pbuf_alloc+0x1d4>)
 80135c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80135c4:	4941      	ldr	r1, [pc, #260]	@ (80136cc <pbuf_alloc+0x1d8>)
 80135c6:	4842      	ldr	r0, [pc, #264]	@ (80136d0 <pbuf_alloc+0x1dc>)
 80135c8:	f00a fecc 	bl	801e364 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80135cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135ce:	3303      	adds	r3, #3
 80135d0:	f023 0303 	bic.w	r3, r3, #3
 80135d4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80135d8:	d106      	bne.n	80135e8 <pbuf_alloc+0xf4>
 80135da:	4b3b      	ldr	r3, [pc, #236]	@ (80136c8 <pbuf_alloc+0x1d4>)
 80135dc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80135e0:	493c      	ldr	r1, [pc, #240]	@ (80136d4 <pbuf_alloc+0x1e0>)
 80135e2:	483b      	ldr	r0, [pc, #236]	@ (80136d0 <pbuf_alloc+0x1dc>)
 80135e4:	f00a febe 	bl	801e364 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80135e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d102      	bne.n	80135f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80135f2:	e002      	b.n	80135fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80135f4:	69fb      	ldr	r3, [r7, #28]
 80135f6:	693a      	ldr	r2, [r7, #16]
 80135f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80135fe:	8b7a      	ldrh	r2, [r7, #26]
 8013600:	89fb      	ldrh	r3, [r7, #14]
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013606:	2300      	movs	r3, #0
 8013608:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801360a:	8b7b      	ldrh	r3, [r7, #26]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d19e      	bne.n	801354e <pbuf_alloc+0x5a>
      break;
 8013610:	e055      	b.n	80136be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013612:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013614:	3303      	adds	r3, #3
 8013616:	b29b      	uxth	r3, r3
 8013618:	f023 0303 	bic.w	r3, r3, #3
 801361c:	b29a      	uxth	r2, r3
 801361e:	88bb      	ldrh	r3, [r7, #4]
 8013620:	3303      	adds	r3, #3
 8013622:	b29b      	uxth	r3, r3
 8013624:	f023 0303 	bic.w	r3, r3, #3
 8013628:	b29b      	uxth	r3, r3
 801362a:	4413      	add	r3, r2
 801362c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801362e:	8b3b      	ldrh	r3, [r7, #24]
 8013630:	3310      	adds	r3, #16
 8013632:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013634:	8b3a      	ldrh	r2, [r7, #24]
 8013636:	88bb      	ldrh	r3, [r7, #4]
 8013638:	3303      	adds	r3, #3
 801363a:	f023 0303 	bic.w	r3, r3, #3
 801363e:	429a      	cmp	r2, r3
 8013640:	d306      	bcc.n	8013650 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013642:	8afa      	ldrh	r2, [r7, #22]
 8013644:	88bb      	ldrh	r3, [r7, #4]
 8013646:	3303      	adds	r3, #3
 8013648:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801364c:	429a      	cmp	r2, r3
 801364e:	d201      	bcs.n	8013654 <pbuf_alloc+0x160>
        return NULL;
 8013650:	2300      	movs	r3, #0
 8013652:	e035      	b.n	80136c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013654:	8afb      	ldrh	r3, [r7, #22]
 8013656:	4618      	mov	r0, r3
 8013658:	f7ff f972 	bl	8012940 <mem_malloc>
 801365c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013660:	2b00      	cmp	r3, #0
 8013662:	d101      	bne.n	8013668 <pbuf_alloc+0x174>
        return NULL;
 8013664:	2300      	movs	r3, #0
 8013666:	e02b      	b.n	80136c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013668:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801366a:	3310      	adds	r3, #16
 801366c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801366e:	4413      	add	r3, r2
 8013670:	3303      	adds	r3, #3
 8013672:	f023 0303 	bic.w	r3, r3, #3
 8013676:	4618      	mov	r0, r3
 8013678:	88b9      	ldrh	r1, [r7, #4]
 801367a:	88ba      	ldrh	r2, [r7, #4]
 801367c:	2300      	movs	r3, #0
 801367e:	9301      	str	r3, [sp, #4]
 8013680:	887b      	ldrh	r3, [r7, #2]
 8013682:	9300      	str	r3, [sp, #0]
 8013684:	460b      	mov	r3, r1
 8013686:	4601      	mov	r1, r0
 8013688:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801368a:	f7ff ff09 	bl	80134a0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	f003 0303 	and.w	r3, r3, #3
 8013696:	2b00      	cmp	r3, #0
 8013698:	d010      	beq.n	80136bc <pbuf_alloc+0x1c8>
 801369a:	4b0b      	ldr	r3, [pc, #44]	@ (80136c8 <pbuf_alloc+0x1d4>)
 801369c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80136a0:	490d      	ldr	r1, [pc, #52]	@ (80136d8 <pbuf_alloc+0x1e4>)
 80136a2:	480b      	ldr	r0, [pc, #44]	@ (80136d0 <pbuf_alloc+0x1dc>)
 80136a4:	f00a fe5e 	bl	801e364 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80136a8:	e008      	b.n	80136bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80136aa:	4b07      	ldr	r3, [pc, #28]	@ (80136c8 <pbuf_alloc+0x1d4>)
 80136ac:	f240 1227 	movw	r2, #295	@ 0x127
 80136b0:	490a      	ldr	r1, [pc, #40]	@ (80136dc <pbuf_alloc+0x1e8>)
 80136b2:	4807      	ldr	r0, [pc, #28]	@ (80136d0 <pbuf_alloc+0x1dc>)
 80136b4:	f00a fe56 	bl	801e364 <iprintf>
      return NULL;
 80136b8:	2300      	movs	r3, #0
 80136ba:	e001      	b.n	80136c0 <pbuf_alloc+0x1cc>
      break;
 80136bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80136be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3728      	adds	r7, #40	@ 0x28
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	08021f68 	.word	0x08021f68
 80136cc:	08021f98 	.word	0x08021f98
 80136d0:	08021fc8 	.word	0x08021fc8
 80136d4:	08021ff0 	.word	0x08021ff0
 80136d8:	08022024 	.word	0x08022024
 80136dc:	08022050 	.word	0x08022050

080136e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af02      	add	r7, sp, #8
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	460b      	mov	r3, r1
 80136ea:	807b      	strh	r3, [r7, #2]
 80136ec:	4613      	mov	r3, r2
 80136ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80136f0:	883b      	ldrh	r3, [r7, #0]
 80136f2:	2b41      	cmp	r3, #65	@ 0x41
 80136f4:	d009      	beq.n	801370a <pbuf_alloc_reference+0x2a>
 80136f6:	883b      	ldrh	r3, [r7, #0]
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d006      	beq.n	801370a <pbuf_alloc_reference+0x2a>
 80136fc:	4b0f      	ldr	r3, [pc, #60]	@ (801373c <pbuf_alloc_reference+0x5c>)
 80136fe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013702:	490f      	ldr	r1, [pc, #60]	@ (8013740 <pbuf_alloc_reference+0x60>)
 8013704:	480f      	ldr	r0, [pc, #60]	@ (8013744 <pbuf_alloc_reference+0x64>)
 8013706:	f00a fe2d 	bl	801e364 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801370a:	200c      	movs	r0, #12
 801370c:	f7ff fabc 	bl	8012c88 <memp_malloc>
 8013710:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d101      	bne.n	801371c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013718:	2300      	movs	r3, #0
 801371a:	e00b      	b.n	8013734 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801371c:	8879      	ldrh	r1, [r7, #2]
 801371e:	887a      	ldrh	r2, [r7, #2]
 8013720:	2300      	movs	r3, #0
 8013722:	9301      	str	r3, [sp, #4]
 8013724:	883b      	ldrh	r3, [r7, #0]
 8013726:	9300      	str	r3, [sp, #0]
 8013728:	460b      	mov	r3, r1
 801372a:	6879      	ldr	r1, [r7, #4]
 801372c:	68f8      	ldr	r0, [r7, #12]
 801372e:	f7ff feb7 	bl	80134a0 <pbuf_init_alloced_pbuf>
  return p;
 8013732:	68fb      	ldr	r3, [r7, #12]
}
 8013734:	4618      	mov	r0, r3
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}
 801373c:	08021f68 	.word	0x08021f68
 8013740:	0802206c 	.word	0x0802206c
 8013744:	08021fc8 	.word	0x08021fc8

08013748 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b088      	sub	sp, #32
 801374c:	af02      	add	r7, sp, #8
 801374e:	607b      	str	r3, [r7, #4]
 8013750:	4603      	mov	r3, r0
 8013752:	73fb      	strb	r3, [r7, #15]
 8013754:	460b      	mov	r3, r1
 8013756:	81bb      	strh	r3, [r7, #12]
 8013758:	4613      	mov	r3, r2
 801375a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801375c:	7bfb      	ldrb	r3, [r7, #15]
 801375e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013760:	8a7b      	ldrh	r3, [r7, #18]
 8013762:	3303      	adds	r3, #3
 8013764:	f023 0203 	bic.w	r2, r3, #3
 8013768:	89bb      	ldrh	r3, [r7, #12]
 801376a:	441a      	add	r2, r3
 801376c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801376e:	429a      	cmp	r2, r3
 8013770:	d901      	bls.n	8013776 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013772:	2300      	movs	r3, #0
 8013774:	e018      	b.n	80137a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013776:	6a3b      	ldr	r3, [r7, #32]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d007      	beq.n	801378c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801377c:	8a7b      	ldrh	r3, [r7, #18]
 801377e:	3303      	adds	r3, #3
 8013780:	f023 0303 	bic.w	r3, r3, #3
 8013784:	6a3a      	ldr	r2, [r7, #32]
 8013786:	4413      	add	r3, r2
 8013788:	617b      	str	r3, [r7, #20]
 801378a:	e001      	b.n	8013790 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801378c:	2300      	movs	r3, #0
 801378e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	89b9      	ldrh	r1, [r7, #12]
 8013794:	89ba      	ldrh	r2, [r7, #12]
 8013796:	2302      	movs	r3, #2
 8013798:	9301      	str	r3, [sp, #4]
 801379a:	897b      	ldrh	r3, [r7, #10]
 801379c:	9300      	str	r3, [sp, #0]
 801379e:	460b      	mov	r3, r1
 80137a0:	6979      	ldr	r1, [r7, #20]
 80137a2:	f7ff fe7d 	bl	80134a0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80137a6:	687b      	ldr	r3, [r7, #4]
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3718      	adds	r7, #24
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b084      	sub	sp, #16
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	460b      	mov	r3, r1
 80137ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d106      	bne.n	80137d0 <pbuf_realloc+0x20>
 80137c2:	4b3a      	ldr	r3, [pc, #232]	@ (80138ac <pbuf_realloc+0xfc>)
 80137c4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80137c8:	4939      	ldr	r1, [pc, #228]	@ (80138b0 <pbuf_realloc+0x100>)
 80137ca:	483a      	ldr	r0, [pc, #232]	@ (80138b4 <pbuf_realloc+0x104>)
 80137cc:	f00a fdca 	bl	801e364 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	891b      	ldrh	r3, [r3, #8]
 80137d4:	887a      	ldrh	r2, [r7, #2]
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d263      	bcs.n	80138a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	891a      	ldrh	r2, [r3, #8]
 80137de:	887b      	ldrh	r3, [r7, #2]
 80137e0:	1ad3      	subs	r3, r2, r3
 80137e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80137e4:	887b      	ldrh	r3, [r7, #2]
 80137e6:	817b      	strh	r3, [r7, #10]
  q = p;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80137ec:	e018      	b.n	8013820 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	895b      	ldrh	r3, [r3, #10]
 80137f2:	897a      	ldrh	r2, [r7, #10]
 80137f4:	1ad3      	subs	r3, r2, r3
 80137f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	891a      	ldrh	r2, [r3, #8]
 80137fc:	893b      	ldrh	r3, [r7, #8]
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	b29a      	uxth	r2, r3
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <pbuf_realloc+0x70>
 8013812:	4b26      	ldr	r3, [pc, #152]	@ (80138ac <pbuf_realloc+0xfc>)
 8013814:	f240 12af 	movw	r2, #431	@ 0x1af
 8013818:	4927      	ldr	r1, [pc, #156]	@ (80138b8 <pbuf_realloc+0x108>)
 801381a:	4826      	ldr	r0, [pc, #152]	@ (80138b4 <pbuf_realloc+0x104>)
 801381c:	f00a fda2 	bl	801e364 <iprintf>
  while (rem_len > q->len) {
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	895b      	ldrh	r3, [r3, #10]
 8013824:	897a      	ldrh	r2, [r7, #10]
 8013826:	429a      	cmp	r2, r3
 8013828:	d8e1      	bhi.n	80137ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	7b1b      	ldrb	r3, [r3, #12]
 801382e:	f003 030f 	and.w	r3, r3, #15
 8013832:	2b00      	cmp	r3, #0
 8013834:	d121      	bne.n	801387a <pbuf_realloc+0xca>
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	895b      	ldrh	r3, [r3, #10]
 801383a:	897a      	ldrh	r2, [r7, #10]
 801383c:	429a      	cmp	r2, r3
 801383e:	d01c      	beq.n	801387a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	7b5b      	ldrb	r3, [r3, #13]
 8013844:	f003 0302 	and.w	r3, r3, #2
 8013848:	2b00      	cmp	r3, #0
 801384a:	d116      	bne.n	801387a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	685a      	ldr	r2, [r3, #4]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	b29a      	uxth	r2, r3
 8013856:	897b      	ldrh	r3, [r7, #10]
 8013858:	4413      	add	r3, r2
 801385a:	b29b      	uxth	r3, r3
 801385c:	4619      	mov	r1, r3
 801385e:	68f8      	ldr	r0, [r7, #12]
 8013860:	f7fe ff64 	bl	801272c <mem_trim>
 8013864:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d106      	bne.n	801387a <pbuf_realloc+0xca>
 801386c:	4b0f      	ldr	r3, [pc, #60]	@ (80138ac <pbuf_realloc+0xfc>)
 801386e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013872:	4912      	ldr	r1, [pc, #72]	@ (80138bc <pbuf_realloc+0x10c>)
 8013874:	480f      	ldr	r0, [pc, #60]	@ (80138b4 <pbuf_realloc+0x104>)
 8013876:	f00a fd75 	bl	801e364 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	897a      	ldrh	r2, [r7, #10]
 801387e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	895a      	ldrh	r2, [r3, #10]
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d004      	beq.n	801389a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	4618      	mov	r0, r3
 8013896:	f000 f911 	bl	8013abc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	2200      	movs	r2, #0
 801389e:	601a      	str	r2, [r3, #0]
 80138a0:	e000      	b.n	80138a4 <pbuf_realloc+0xf4>
    return;
 80138a2:	bf00      	nop

}
 80138a4:	3710      	adds	r7, #16
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	08021f68 	.word	0x08021f68
 80138b0:	08022080 	.word	0x08022080
 80138b4:	08021fc8 	.word	0x08021fc8
 80138b8:	08022098 	.word	0x08022098
 80138bc:	080220b0 	.word	0x080220b0

080138c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b086      	sub	sp, #24
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	4613      	mov	r3, r2
 80138cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d106      	bne.n	80138e2 <pbuf_add_header_impl+0x22>
 80138d4:	4b2b      	ldr	r3, [pc, #172]	@ (8013984 <pbuf_add_header_impl+0xc4>)
 80138d6:	f240 12df 	movw	r2, #479	@ 0x1df
 80138da:	492b      	ldr	r1, [pc, #172]	@ (8013988 <pbuf_add_header_impl+0xc8>)
 80138dc:	482b      	ldr	r0, [pc, #172]	@ (801398c <pbuf_add_header_impl+0xcc>)
 80138de:	f00a fd41 	bl	801e364 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d003      	beq.n	80138f0 <pbuf_add_header_impl+0x30>
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138ee:	d301      	bcc.n	80138f4 <pbuf_add_header_impl+0x34>
    return 1;
 80138f0:	2301      	movs	r3, #1
 80138f2:	e043      	b.n	801397c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <pbuf_add_header_impl+0x3e>
    return 0;
 80138fa:	2300      	movs	r3, #0
 80138fc:	e03e      	b.n	801397c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	891a      	ldrh	r2, [r3, #8]
 8013906:	8a7b      	ldrh	r3, [r7, #18]
 8013908:	4413      	add	r3, r2
 801390a:	b29b      	uxth	r3, r3
 801390c:	8a7a      	ldrh	r2, [r7, #18]
 801390e:	429a      	cmp	r2, r3
 8013910:	d901      	bls.n	8013916 <pbuf_add_header_impl+0x56>
    return 1;
 8013912:	2301      	movs	r3, #1
 8013914:	e032      	b.n	801397c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	7b1b      	ldrb	r3, [r3, #12]
 801391a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801391c:	8a3b      	ldrh	r3, [r7, #16]
 801391e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00c      	beq.n	8013940 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	425b      	negs	r3, r3
 801392e:	4413      	add	r3, r2
 8013930:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	3310      	adds	r3, #16
 8013936:	697a      	ldr	r2, [r7, #20]
 8013938:	429a      	cmp	r2, r3
 801393a:	d20d      	bcs.n	8013958 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801393c:	2301      	movs	r3, #1
 801393e:	e01d      	b.n	801397c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013940:	79fb      	ldrb	r3, [r7, #7]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d006      	beq.n	8013954 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	685a      	ldr	r2, [r3, #4]
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	425b      	negs	r3, r3
 801394e:	4413      	add	r3, r2
 8013950:	617b      	str	r3, [r7, #20]
 8013952:	e001      	b.n	8013958 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013954:	2301      	movs	r3, #1
 8013956:	e011      	b.n	801397c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	697a      	ldr	r2, [r7, #20]
 801395c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	895a      	ldrh	r2, [r3, #10]
 8013962:	8a7b      	ldrh	r3, [r7, #18]
 8013964:	4413      	add	r3, r2
 8013966:	b29a      	uxth	r2, r3
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	891a      	ldrh	r2, [r3, #8]
 8013970:	8a7b      	ldrh	r3, [r7, #18]
 8013972:	4413      	add	r3, r2
 8013974:	b29a      	uxth	r2, r3
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	811a      	strh	r2, [r3, #8]


  return 0;
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	3718      	adds	r7, #24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}
 8013984:	08021f68 	.word	0x08021f68
 8013988:	080220cc 	.word	0x080220cc
 801398c:	08021fc8 	.word	0x08021fc8

08013990 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801399a:	2200      	movs	r2, #0
 801399c:	6839      	ldr	r1, [r7, #0]
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f7ff ff8e 	bl	80138c0 <pbuf_add_header_impl>
 80139a4:	4603      	mov	r3, r0
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3708      	adds	r7, #8
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
	...

080139b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d106      	bne.n	80139ce <pbuf_remove_header+0x1e>
 80139c0:	4b20      	ldr	r3, [pc, #128]	@ (8013a44 <pbuf_remove_header+0x94>)
 80139c2:	f240 224b 	movw	r2, #587	@ 0x24b
 80139c6:	4920      	ldr	r1, [pc, #128]	@ (8013a48 <pbuf_remove_header+0x98>)
 80139c8:	4820      	ldr	r0, [pc, #128]	@ (8013a4c <pbuf_remove_header+0x9c>)
 80139ca:	f00a fccb 	bl	801e364 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d003      	beq.n	80139dc <pbuf_remove_header+0x2c>
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139da:	d301      	bcc.n	80139e0 <pbuf_remove_header+0x30>
    return 1;
 80139dc:	2301      	movs	r3, #1
 80139de:	e02c      	b.n	8013a3a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d101      	bne.n	80139ea <pbuf_remove_header+0x3a>
    return 0;
 80139e6:	2300      	movs	r3, #0
 80139e8:	e027      	b.n	8013a3a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	895b      	ldrh	r3, [r3, #10]
 80139f2:	89fa      	ldrh	r2, [r7, #14]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d908      	bls.n	8013a0a <pbuf_remove_header+0x5a>
 80139f8:	4b12      	ldr	r3, [pc, #72]	@ (8013a44 <pbuf_remove_header+0x94>)
 80139fa:	f240 2255 	movw	r2, #597	@ 0x255
 80139fe:	4914      	ldr	r1, [pc, #80]	@ (8013a50 <pbuf_remove_header+0xa0>)
 8013a00:	4812      	ldr	r0, [pc, #72]	@ (8013a4c <pbuf_remove_header+0x9c>)
 8013a02:	f00a fcaf 	bl	801e364 <iprintf>
 8013a06:	2301      	movs	r3, #1
 8013a08:	e017      	b.n	8013a3a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	685a      	ldr	r2, [r3, #4]
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	441a      	add	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	895a      	ldrh	r2, [r3, #10]
 8013a20:	89fb      	ldrh	r3, [r7, #14]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	891a      	ldrh	r2, [r3, #8]
 8013a2e:	89fb      	ldrh	r3, [r7, #14]
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3710      	adds	r7, #16
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	08021f68 	.word	0x08021f68
 8013a48:	080220cc 	.word	0x080220cc
 8013a4c:	08021fc8 	.word	0x08021fc8
 8013a50:	080220d8 	.word	0x080220d8

08013a54 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	807b      	strh	r3, [r7, #2]
 8013a60:	4613      	mov	r3, r2
 8013a62:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	da08      	bge.n	8013a7e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013a70:	425b      	negs	r3, r3
 8013a72:	4619      	mov	r1, r3
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7ff ff9b 	bl	80139b0 <pbuf_remove_header>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	e007      	b.n	8013a8e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013a7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013a82:	787a      	ldrb	r2, [r7, #1]
 8013a84:	4619      	mov	r1, r3
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7ff ff1a 	bl	80138c0 <pbuf_add_header_impl>
 8013a8c:	4603      	mov	r3, r0
  }
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3708      	adds	r7, #8
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}

08013a96 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013a96:	b580      	push	{r7, lr}
 8013a98:	b082      	sub	sp, #8
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013aa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f7ff ffd2 	bl	8013a54 <pbuf_header_impl>
 8013ab0:	4603      	mov	r3, r0
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
	...

08013abc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b088      	sub	sp, #32
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d10b      	bne.n	8013ae2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d106      	bne.n	8013ade <pbuf_free+0x22>
 8013ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8013bc0 <pbuf_free+0x104>)
 8013ad2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8013ad6:	493b      	ldr	r1, [pc, #236]	@ (8013bc4 <pbuf_free+0x108>)
 8013ad8:	483b      	ldr	r0, [pc, #236]	@ (8013bc8 <pbuf_free+0x10c>)
 8013ada:	f00a fc43 	bl	801e364 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e069      	b.n	8013bb6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013ae6:	e062      	b.n	8013bae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013ae8:	f009 fec6 	bl	801d878 <sys_arch_protect>
 8013aec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	7b9b      	ldrb	r3, [r3, #14]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d106      	bne.n	8013b04 <pbuf_free+0x48>
 8013af6:	4b32      	ldr	r3, [pc, #200]	@ (8013bc0 <pbuf_free+0x104>)
 8013af8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8013afc:	4933      	ldr	r1, [pc, #204]	@ (8013bcc <pbuf_free+0x110>)
 8013afe:	4832      	ldr	r0, [pc, #200]	@ (8013bc8 <pbuf_free+0x10c>)
 8013b00:	f00a fc30 	bl	801e364 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	7b9b      	ldrb	r3, [r3, #14]
 8013b08:	3b01      	subs	r3, #1
 8013b0a:	b2da      	uxtb	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	739a      	strb	r2, [r3, #14]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	7b9b      	ldrb	r3, [r3, #14]
 8013b14:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013b16:	69b8      	ldr	r0, [r7, #24]
 8013b18:	f009 febc 	bl	801d894 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013b1c:	7dfb      	ldrb	r3, [r7, #23]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d143      	bne.n	8013baa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	7b1b      	ldrb	r3, [r3, #12]
 8013b2c:	f003 030f 	and.w	r3, r3, #15
 8013b30:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	7b5b      	ldrb	r3, [r3, #13]
 8013b36:	f003 0302 	and.w	r3, r3, #2
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d011      	beq.n	8013b62 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	691b      	ldr	r3, [r3, #16]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d106      	bne.n	8013b58 <pbuf_free+0x9c>
 8013b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8013bc0 <pbuf_free+0x104>)
 8013b4c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013b50:	491f      	ldr	r1, [pc, #124]	@ (8013bd0 <pbuf_free+0x114>)
 8013b52:	481d      	ldr	r0, [pc, #116]	@ (8013bc8 <pbuf_free+0x10c>)
 8013b54:	f00a fc06 	bl	801e364 <iprintf>
        pc->custom_free_function(p);
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	691b      	ldr	r3, [r3, #16]
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	4798      	blx	r3
 8013b60:	e01d      	b.n	8013b9e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013b62:	7bfb      	ldrb	r3, [r7, #15]
 8013b64:	2b02      	cmp	r3, #2
 8013b66:	d104      	bne.n	8013b72 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013b68:	6879      	ldr	r1, [r7, #4]
 8013b6a:	200d      	movs	r0, #13
 8013b6c:	f7ff f902 	bl	8012d74 <memp_free>
 8013b70:	e015      	b.n	8013b9e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d104      	bne.n	8013b82 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013b78:	6879      	ldr	r1, [r7, #4]
 8013b7a:	200c      	movs	r0, #12
 8013b7c:	f7ff f8fa 	bl	8012d74 <memp_free>
 8013b80:	e00d      	b.n	8013b9e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013b82:	7bfb      	ldrb	r3, [r7, #15]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d103      	bne.n	8013b90 <pbuf_free+0xd4>
          mem_free(p);
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f7fe fd3f 	bl	801260c <mem_free>
 8013b8e:	e006      	b.n	8013b9e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013b90:	4b0b      	ldr	r3, [pc, #44]	@ (8013bc0 <pbuf_free+0x104>)
 8013b92:	f240 320f 	movw	r2, #783	@ 0x30f
 8013b96:	490f      	ldr	r1, [pc, #60]	@ (8013bd4 <pbuf_free+0x118>)
 8013b98:	480b      	ldr	r0, [pc, #44]	@ (8013bc8 <pbuf_free+0x10c>)
 8013b9a:	f00a fbe3 	bl	801e364 <iprintf>
        }
      }
      count++;
 8013b9e:	7ffb      	ldrb	r3, [r7, #31]
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	607b      	str	r3, [r7, #4]
 8013ba8:	e001      	b.n	8013bae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013baa:	2300      	movs	r3, #0
 8013bac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d199      	bne.n	8013ae8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013bb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3720      	adds	r7, #32
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	08021f68 	.word	0x08021f68
 8013bc4:	080220cc 	.word	0x080220cc
 8013bc8:	08021fc8 	.word	0x08021fc8
 8013bcc:	080220f8 	.word	0x080220f8
 8013bd0:	08022110 	.word	0x08022110
 8013bd4:	08022134 	.word	0x08022134

08013bd8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b085      	sub	sp, #20
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013be0:	2300      	movs	r3, #0
 8013be2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013be4:	e005      	b.n	8013bf2 <pbuf_clen+0x1a>
    ++len;
 8013be6:	89fb      	ldrh	r3, [r7, #14]
 8013be8:	3301      	adds	r3, #1
 8013bea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d1f6      	bne.n	8013be6 <pbuf_clen+0xe>
  }
  return len;
 8013bf8:	89fb      	ldrh	r3, [r7, #14]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3714      	adds	r7, #20
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr
	...

08013c08 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d016      	beq.n	8013c44 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013c16:	f009 fe2f 	bl	801d878 <sys_arch_protect>
 8013c1a:	60f8      	str	r0, [r7, #12]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	7b9b      	ldrb	r3, [r3, #14]
 8013c20:	3301      	adds	r3, #1
 8013c22:	b2da      	uxtb	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	739a      	strb	r2, [r3, #14]
 8013c28:	68f8      	ldr	r0, [r7, #12]
 8013c2a:	f009 fe33 	bl	801d894 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	7b9b      	ldrb	r3, [r3, #14]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d106      	bne.n	8013c44 <pbuf_ref+0x3c>
 8013c36:	4b05      	ldr	r3, [pc, #20]	@ (8013c4c <pbuf_ref+0x44>)
 8013c38:	f240 3242 	movw	r2, #834	@ 0x342
 8013c3c:	4904      	ldr	r1, [pc, #16]	@ (8013c50 <pbuf_ref+0x48>)
 8013c3e:	4805      	ldr	r0, [pc, #20]	@ (8013c54 <pbuf_ref+0x4c>)
 8013c40:	f00a fb90 	bl	801e364 <iprintf>
  }
}
 8013c44:	bf00      	nop
 8013c46:	3710      	adds	r7, #16
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	08021f68 	.word	0x08021f68
 8013c50:	08022148 	.word	0x08022148
 8013c54:	08021fc8 	.word	0x08021fc8

08013c58 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d002      	beq.n	8013c6e <pbuf_cat+0x16>
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d107      	bne.n	8013c7e <pbuf_cat+0x26>
 8013c6e:	4b20      	ldr	r3, [pc, #128]	@ (8013cf0 <pbuf_cat+0x98>)
 8013c70:	f240 3259 	movw	r2, #857	@ 0x359
 8013c74:	491f      	ldr	r1, [pc, #124]	@ (8013cf4 <pbuf_cat+0x9c>)
 8013c76:	4820      	ldr	r0, [pc, #128]	@ (8013cf8 <pbuf_cat+0xa0>)
 8013c78:	f00a fb74 	bl	801e364 <iprintf>
 8013c7c:	e034      	b.n	8013ce8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	60fb      	str	r3, [r7, #12]
 8013c82:	e00a      	b.n	8013c9a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	891a      	ldrh	r2, [r3, #8]
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	891b      	ldrh	r3, [r3, #8]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	60fb      	str	r3, [r7, #12]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d1f0      	bne.n	8013c84 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	891a      	ldrh	r2, [r3, #8]
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	895b      	ldrh	r3, [r3, #10]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d006      	beq.n	8013cbc <pbuf_cat+0x64>
 8013cae:	4b10      	ldr	r3, [pc, #64]	@ (8013cf0 <pbuf_cat+0x98>)
 8013cb0:	f240 3262 	movw	r2, #866	@ 0x362
 8013cb4:	4911      	ldr	r1, [pc, #68]	@ (8013cfc <pbuf_cat+0xa4>)
 8013cb6:	4810      	ldr	r0, [pc, #64]	@ (8013cf8 <pbuf_cat+0xa0>)
 8013cb8:	f00a fb54 	bl	801e364 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d006      	beq.n	8013cd2 <pbuf_cat+0x7a>
 8013cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8013cf0 <pbuf_cat+0x98>)
 8013cc6:	f240 3263 	movw	r2, #867	@ 0x363
 8013cca:	490d      	ldr	r1, [pc, #52]	@ (8013d00 <pbuf_cat+0xa8>)
 8013ccc:	480a      	ldr	r0, [pc, #40]	@ (8013cf8 <pbuf_cat+0xa0>)
 8013cce:	f00a fb49 	bl	801e364 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	891a      	ldrh	r2, [r3, #8]
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	891b      	ldrh	r3, [r3, #8]
 8013cda:	4413      	add	r3, r2
 8013cdc:	b29a      	uxth	r2, r3
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	683a      	ldr	r2, [r7, #0]
 8013ce6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013ce8:	3710      	adds	r7, #16
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	08021f68 	.word	0x08021f68
 8013cf4:	0802215c 	.word	0x0802215c
 8013cf8:	08021fc8 	.word	0x08021fc8
 8013cfc:	08022194 	.word	0x08022194
 8013d00:	080221c4 	.word	0x080221c4

08013d04 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013d0e:	6839      	ldr	r1, [r7, #0]
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7ff ffa1 	bl	8013c58 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013d16:	6838      	ldr	r0, [r7, #0]
 8013d18:	f7ff ff76 	bl	8013c08 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013d1c:	bf00      	nop
 8013d1e:	3708      	adds	r7, #8
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b086      	sub	sp, #24
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	617b      	str	r3, [r7, #20]
 8013d32:	2300      	movs	r3, #0
 8013d34:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d008      	beq.n	8013d4e <pbuf_copy+0x2a>
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d005      	beq.n	8013d4e <pbuf_copy+0x2a>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	891a      	ldrh	r2, [r3, #8]
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	891b      	ldrh	r3, [r3, #8]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d209      	bcs.n	8013d62 <pbuf_copy+0x3e>
 8013d4e:	4b57      	ldr	r3, [pc, #348]	@ (8013eac <pbuf_copy+0x188>)
 8013d50:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013d54:	4956      	ldr	r1, [pc, #344]	@ (8013eb0 <pbuf_copy+0x18c>)
 8013d56:	4857      	ldr	r0, [pc, #348]	@ (8013eb4 <pbuf_copy+0x190>)
 8013d58:	f00a fb04 	bl	801e364 <iprintf>
 8013d5c:	f06f 030f 	mvn.w	r3, #15
 8013d60:	e09f      	b.n	8013ea2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	895b      	ldrh	r3, [r3, #10]
 8013d66:	461a      	mov	r2, r3
 8013d68:	697b      	ldr	r3, [r7, #20]
 8013d6a:	1ad2      	subs	r2, r2, r3
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	895b      	ldrh	r3, [r3, #10]
 8013d70:	4619      	mov	r1, r3
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	1acb      	subs	r3, r1, r3
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d306      	bcc.n	8013d88 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	895b      	ldrh	r3, [r3, #10]
 8013d7e:	461a      	mov	r2, r3
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	1ad3      	subs	r3, r2, r3
 8013d84:	60fb      	str	r3, [r7, #12]
 8013d86:	e005      	b.n	8013d94 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	895b      	ldrh	r3, [r3, #10]
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	1ad3      	subs	r3, r2, r3
 8013d92:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	685a      	ldr	r2, [r3, #4]
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	18d0      	adds	r0, r2, r3
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	685a      	ldr	r2, [r3, #4]
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	4413      	add	r3, r2
 8013da4:	68fa      	ldr	r2, [r7, #12]
 8013da6:	4619      	mov	r1, r3
 8013da8:	f00a fd3d 	bl	801e826 <memcpy>
    offset_to += len;
 8013dac:	697a      	ldr	r2, [r7, #20]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	4413      	add	r3, r2
 8013db2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013db4:	693a      	ldr	r2, [r7, #16]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	4413      	add	r3, r2
 8013dba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	895b      	ldrh	r3, [r3, #10]
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d906      	bls.n	8013dd6 <pbuf_copy+0xb2>
 8013dc8:	4b38      	ldr	r3, [pc, #224]	@ (8013eac <pbuf_copy+0x188>)
 8013dca:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8013dce:	493a      	ldr	r1, [pc, #232]	@ (8013eb8 <pbuf_copy+0x194>)
 8013dd0:	4838      	ldr	r0, [pc, #224]	@ (8013eb4 <pbuf_copy+0x190>)
 8013dd2:	f00a fac7 	bl	801e364 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013dd6:	683b      	ldr	r3, [r7, #0]
 8013dd8:	895b      	ldrh	r3, [r3, #10]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d906      	bls.n	8013df0 <pbuf_copy+0xcc>
 8013de2:	4b32      	ldr	r3, [pc, #200]	@ (8013eac <pbuf_copy+0x188>)
 8013de4:	f240 32da 	movw	r2, #986	@ 0x3da
 8013de8:	4934      	ldr	r1, [pc, #208]	@ (8013ebc <pbuf_copy+0x198>)
 8013dea:	4832      	ldr	r0, [pc, #200]	@ (8013eb4 <pbuf_copy+0x190>)
 8013dec:	f00a faba 	bl	801e364 <iprintf>
    if (offset_from >= p_from->len) {
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	895b      	ldrh	r3, [r3, #10]
 8013df4:	461a      	mov	r2, r3
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d304      	bcc.n	8013e06 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	895b      	ldrh	r3, [r3, #10]
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	4293      	cmp	r3, r2
 8013e10:	d114      	bne.n	8013e3c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8013e12:	2300      	movs	r3, #0
 8013e14:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d10c      	bne.n	8013e3c <pbuf_copy+0x118>
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d009      	beq.n	8013e3c <pbuf_copy+0x118>
 8013e28:	4b20      	ldr	r3, [pc, #128]	@ (8013eac <pbuf_copy+0x188>)
 8013e2a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8013e2e:	4924      	ldr	r1, [pc, #144]	@ (8013ec0 <pbuf_copy+0x19c>)
 8013e30:	4820      	ldr	r0, [pc, #128]	@ (8013eb4 <pbuf_copy+0x190>)
 8013e32:	f00a fa97 	bl	801e364 <iprintf>
 8013e36:	f06f 030f 	mvn.w	r3, #15
 8013e3a:	e032      	b.n	8013ea2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d013      	beq.n	8013e6a <pbuf_copy+0x146>
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	895a      	ldrh	r2, [r3, #10]
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	891b      	ldrh	r3, [r3, #8]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d10d      	bne.n	8013e6a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d009      	beq.n	8013e6a <pbuf_copy+0x146>
 8013e56:	4b15      	ldr	r3, [pc, #84]	@ (8013eac <pbuf_copy+0x188>)
 8013e58:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8013e5c:	4919      	ldr	r1, [pc, #100]	@ (8013ec4 <pbuf_copy+0x1a0>)
 8013e5e:	4815      	ldr	r0, [pc, #84]	@ (8013eb4 <pbuf_copy+0x190>)
 8013e60:	f00a fa80 	bl	801e364 <iprintf>
 8013e64:	f06f 0305 	mvn.w	r3, #5
 8013e68:	e01b      	b.n	8013ea2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d013      	beq.n	8013e98 <pbuf_copy+0x174>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	895a      	ldrh	r2, [r3, #10]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	891b      	ldrh	r3, [r3, #8]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d10d      	bne.n	8013e98 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d009      	beq.n	8013e98 <pbuf_copy+0x174>
 8013e84:	4b09      	ldr	r3, [pc, #36]	@ (8013eac <pbuf_copy+0x188>)
 8013e86:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8013e8a:	490e      	ldr	r1, [pc, #56]	@ (8013ec4 <pbuf_copy+0x1a0>)
 8013e8c:	4809      	ldr	r0, [pc, #36]	@ (8013eb4 <pbuf_copy+0x190>)
 8013e8e:	f00a fa69 	bl	801e364 <iprintf>
 8013e92:	f06f 0305 	mvn.w	r3, #5
 8013e96:	e004      	b.n	8013ea2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	f47f af61 	bne.w	8013d62 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013ea0:	2300      	movs	r3, #0
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3718      	adds	r7, #24
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	08021f68 	.word	0x08021f68
 8013eb0:	08022210 	.word	0x08022210
 8013eb4:	08021fc8 	.word	0x08021fc8
 8013eb8:	08022240 	.word	0x08022240
 8013ebc:	08022258 	.word	0x08022258
 8013ec0:	08022274 	.word	0x08022274
 8013ec4:	08022284 	.word	0x08022284

08013ec8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b088      	sub	sp, #32
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	60b9      	str	r1, [r7, #8]
 8013ed2:	4611      	mov	r1, r2
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	80fb      	strh	r3, [r7, #6]
 8013eda:	4613      	mov	r3, r2
 8013edc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d108      	bne.n	8013efe <pbuf_copy_partial+0x36>
 8013eec:	4b2b      	ldr	r3, [pc, #172]	@ (8013f9c <pbuf_copy_partial+0xd4>)
 8013eee:	f240 420a 	movw	r2, #1034	@ 0x40a
 8013ef2:	492b      	ldr	r1, [pc, #172]	@ (8013fa0 <pbuf_copy_partial+0xd8>)
 8013ef4:	482b      	ldr	r0, [pc, #172]	@ (8013fa4 <pbuf_copy_partial+0xdc>)
 8013ef6:	f00a fa35 	bl	801e364 <iprintf>
 8013efa:	2300      	movs	r3, #0
 8013efc:	e04a      	b.n	8013f94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d108      	bne.n	8013f16 <pbuf_copy_partial+0x4e>
 8013f04:	4b25      	ldr	r3, [pc, #148]	@ (8013f9c <pbuf_copy_partial+0xd4>)
 8013f06:	f240 420b 	movw	r2, #1035	@ 0x40b
 8013f0a:	4927      	ldr	r1, [pc, #156]	@ (8013fa8 <pbuf_copy_partial+0xe0>)
 8013f0c:	4825      	ldr	r0, [pc, #148]	@ (8013fa4 <pbuf_copy_partial+0xdc>)
 8013f0e:	f00a fa29 	bl	801e364 <iprintf>
 8013f12:	2300      	movs	r3, #0
 8013f14:	e03e      	b.n	8013f94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	61fb      	str	r3, [r7, #28]
 8013f1a:	e034      	b.n	8013f86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013f1c:	88bb      	ldrh	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d00a      	beq.n	8013f38 <pbuf_copy_partial+0x70>
 8013f22:	69fb      	ldr	r3, [r7, #28]
 8013f24:	895b      	ldrh	r3, [r3, #10]
 8013f26:	88ba      	ldrh	r2, [r7, #4]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d305      	bcc.n	8013f38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	895b      	ldrh	r3, [r3, #10]
 8013f30:	88ba      	ldrh	r2, [r7, #4]
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	80bb      	strh	r3, [r7, #4]
 8013f36:	e023      	b.n	8013f80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	895a      	ldrh	r2, [r3, #10]
 8013f3c:	88bb      	ldrh	r3, [r7, #4]
 8013f3e:	1ad3      	subs	r3, r2, r3
 8013f40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013f42:	8b3a      	ldrh	r2, [r7, #24]
 8013f44:	88fb      	ldrh	r3, [r7, #6]
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d901      	bls.n	8013f4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013f4a:	88fb      	ldrh	r3, [r7, #6]
 8013f4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8013f4e:	8b7b      	ldrh	r3, [r7, #26]
 8013f50:	68ba      	ldr	r2, [r7, #8]
 8013f52:	18d0      	adds	r0, r2, r3
 8013f54:	69fb      	ldr	r3, [r7, #28]
 8013f56:	685a      	ldr	r2, [r3, #4]
 8013f58:	88bb      	ldrh	r3, [r7, #4]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	8b3a      	ldrh	r2, [r7, #24]
 8013f5e:	4619      	mov	r1, r3
 8013f60:	f00a fc61 	bl	801e826 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013f64:	8afa      	ldrh	r2, [r7, #22]
 8013f66:	8b3b      	ldrh	r3, [r7, #24]
 8013f68:	4413      	add	r3, r2
 8013f6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013f6c:	8b7a      	ldrh	r2, [r7, #26]
 8013f6e:	8b3b      	ldrh	r3, [r7, #24]
 8013f70:	4413      	add	r3, r2
 8013f72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013f74:	88fa      	ldrh	r2, [r7, #6]
 8013f76:	8b3b      	ldrh	r3, [r7, #24]
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	61fb      	str	r3, [r7, #28]
 8013f86:	88fb      	ldrh	r3, [r7, #6]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d002      	beq.n	8013f92 <pbuf_copy_partial+0xca>
 8013f8c:	69fb      	ldr	r3, [r7, #28]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d1c4      	bne.n	8013f1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013f92:	8afb      	ldrh	r3, [r7, #22]
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3720      	adds	r7, #32
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}
 8013f9c:	08021f68 	.word	0x08021f68
 8013fa0:	080222b0 	.word	0x080222b0
 8013fa4:	08021fc8 	.word	0x08021fc8
 8013fa8:	080222d0 	.word	0x080222d0

08013fac <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8013fac:	b480      	push	{r7}
 8013fae:	b087      	sub	sp, #28
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	460b      	mov	r3, r1
 8013fb6:	607a      	str	r2, [r7, #4]
 8013fb8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8013fba:	897b      	ldrh	r3, [r7, #10]
 8013fbc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8013fc2:	e007      	b.n	8013fd4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	895b      	ldrh	r3, [r3, #10]
 8013fc8:	8afa      	ldrh	r2, [r7, #22]
 8013fca:	1ad3      	subs	r3, r2, r3
 8013fcc:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d004      	beq.n	8013fe4 <pbuf_skip_const+0x38>
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	895b      	ldrh	r3, [r3, #10]
 8013fde:	8afa      	ldrh	r2, [r7, #22]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d2ef      	bcs.n	8013fc4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d002      	beq.n	8013ff0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	8afa      	ldrh	r2, [r7, #22]
 8013fee:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8013ff0:	693b      	ldr	r3, [r7, #16]
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	371c      	adds	r7, #28
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffc:	4770      	bx	lr

08013ffe <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8013ffe:	b580      	push	{r7, lr}
 8014000:	b086      	sub	sp, #24
 8014002:	af00      	add	r7, sp, #0
 8014004:	60f8      	str	r0, [r7, #12]
 8014006:	460b      	mov	r3, r1
 8014008:	607a      	str	r2, [r7, #4]
 801400a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 801400c:	897b      	ldrh	r3, [r7, #10]
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	4619      	mov	r1, r3
 8014012:	68f8      	ldr	r0, [r7, #12]
 8014014:	f7ff ffca 	bl	8013fac <pbuf_skip_const>
 8014018:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 801401a:	697b      	ldr	r3, [r7, #20]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3718      	adds	r7, #24
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b088      	sub	sp, #32
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	4613      	mov	r3, r2
 8014030:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8014032:	88fb      	ldrh	r3, [r7, #6]
 8014034:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8014036:	2300      	movs	r3, #0
 8014038:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d109      	bne.n	8014054 <pbuf_take+0x30>
 8014040:	4b3a      	ldr	r3, [pc, #232]	@ (801412c <pbuf_take+0x108>)
 8014042:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8014046:	493a      	ldr	r1, [pc, #232]	@ (8014130 <pbuf_take+0x10c>)
 8014048:	483a      	ldr	r0, [pc, #232]	@ (8014134 <pbuf_take+0x110>)
 801404a:	f00a f98b 	bl	801e364 <iprintf>
 801404e:	f06f 030f 	mvn.w	r3, #15
 8014052:	e067      	b.n	8014124 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d109      	bne.n	801406e <pbuf_take+0x4a>
 801405a:	4b34      	ldr	r3, [pc, #208]	@ (801412c <pbuf_take+0x108>)
 801405c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8014060:	4935      	ldr	r1, [pc, #212]	@ (8014138 <pbuf_take+0x114>)
 8014062:	4834      	ldr	r0, [pc, #208]	@ (8014134 <pbuf_take+0x110>)
 8014064:	f00a f97e 	bl	801e364 <iprintf>
 8014068:	f06f 030f 	mvn.w	r3, #15
 801406c:	e05a      	b.n	8014124 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	891b      	ldrh	r3, [r3, #8]
 8014072:	88fa      	ldrh	r2, [r7, #6]
 8014074:	429a      	cmp	r2, r3
 8014076:	d909      	bls.n	801408c <pbuf_take+0x68>
 8014078:	4b2c      	ldr	r3, [pc, #176]	@ (801412c <pbuf_take+0x108>)
 801407a:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 801407e:	492f      	ldr	r1, [pc, #188]	@ (801413c <pbuf_take+0x118>)
 8014080:	482c      	ldr	r0, [pc, #176]	@ (8014134 <pbuf_take+0x110>)
 8014082:	f00a f96f 	bl	801e364 <iprintf>
 8014086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801408a:	e04b      	b.n	8014124 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d007      	beq.n	80140a2 <pbuf_take+0x7e>
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d004      	beq.n	80140a2 <pbuf_take+0x7e>
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	891b      	ldrh	r3, [r3, #8]
 801409c:	88fa      	ldrh	r2, [r7, #6]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d902      	bls.n	80140a8 <pbuf_take+0x84>
    return ERR_ARG;
 80140a2:	f06f 030f 	mvn.w	r3, #15
 80140a6:	e03d      	b.n	8014124 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	61fb      	str	r3, [r7, #28]
 80140ac:	e028      	b.n	8014100 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d106      	bne.n	80140c2 <pbuf_take+0x9e>
 80140b4:	4b1d      	ldr	r3, [pc, #116]	@ (801412c <pbuf_take+0x108>)
 80140b6:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80140ba:	4921      	ldr	r1, [pc, #132]	@ (8014140 <pbuf_take+0x11c>)
 80140bc:	481d      	ldr	r0, [pc, #116]	@ (8014134 <pbuf_take+0x110>)
 80140be:	f00a f951 	bl	801e364 <iprintf>
    buf_copy_len = total_copy_len;
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	895b      	ldrh	r3, [r3, #10]
 80140ca:	461a      	mov	r2, r3
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d902      	bls.n	80140d8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	895b      	ldrh	r3, [r3, #10]
 80140d6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80140d8:	69fb      	ldr	r3, [r7, #28]
 80140da:	6858      	ldr	r0, [r3, #4]
 80140dc:	68ba      	ldr	r2, [r7, #8]
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	4413      	add	r3, r2
 80140e2:	69ba      	ldr	r2, [r7, #24]
 80140e4:	4619      	mov	r1, r3
 80140e6:	f00a fb9e 	bl	801e826 <memcpy>
    total_copy_len -= buf_copy_len;
 80140ea:	697a      	ldr	r2, [r7, #20]
 80140ec:	69bb      	ldr	r3, [r7, #24]
 80140ee:	1ad3      	subs	r3, r2, r3
 80140f0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80140f2:	693a      	ldr	r2, [r7, #16]
 80140f4:	69bb      	ldr	r3, [r7, #24]
 80140f6:	4413      	add	r3, r2
 80140f8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	61fb      	str	r3, [r7, #28]
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d1d3      	bne.n	80140ae <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d103      	bne.n	8014114 <pbuf_take+0xf0>
 801410c:	88fb      	ldrh	r3, [r7, #6]
 801410e:	693a      	ldr	r2, [r7, #16]
 8014110:	429a      	cmp	r2, r3
 8014112:	d006      	beq.n	8014122 <pbuf_take+0xfe>
 8014114:	4b05      	ldr	r3, [pc, #20]	@ (801412c <pbuf_take+0x108>)
 8014116:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 801411a:	490a      	ldr	r1, [pc, #40]	@ (8014144 <pbuf_take+0x120>)
 801411c:	4805      	ldr	r0, [pc, #20]	@ (8014134 <pbuf_take+0x110>)
 801411e:	f00a f921 	bl	801e364 <iprintf>
  return ERR_OK;
 8014122:	2300      	movs	r3, #0
}
 8014124:	4618      	mov	r0, r3
 8014126:	3720      	adds	r7, #32
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	08021f68 	.word	0x08021f68
 8014130:	08022340 	.word	0x08022340
 8014134:	08021fc8 	.word	0x08021fc8
 8014138:	08022358 	.word	0x08022358
 801413c:	08022374 	.word	0x08022374
 8014140:	08022394 	.word	0x08022394
 8014144:	080223ac 	.word	0x080223ac

08014148 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b088      	sub	sp, #32
 801414c:	af00      	add	r7, sp, #0
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	4611      	mov	r1, r2
 8014154:	461a      	mov	r2, r3
 8014156:	460b      	mov	r3, r1
 8014158:	80fb      	strh	r3, [r7, #6]
 801415a:	4613      	mov	r3, r2
 801415c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801415e:	f107 0210 	add.w	r2, r7, #16
 8014162:	88bb      	ldrh	r3, [r7, #4]
 8014164:	4619      	mov	r1, r3
 8014166:	68f8      	ldr	r0, [r7, #12]
 8014168:	f7ff ff49 	bl	8013ffe <pbuf_skip>
 801416c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d047      	beq.n	8014204 <pbuf_take_at+0xbc>
 8014174:	69fb      	ldr	r3, [r7, #28]
 8014176:	891b      	ldrh	r3, [r3, #8]
 8014178:	461a      	mov	r2, r3
 801417a:	8a3b      	ldrh	r3, [r7, #16]
 801417c:	4619      	mov	r1, r3
 801417e:	88fb      	ldrh	r3, [r7, #6]
 8014180:	440b      	add	r3, r1
 8014182:	429a      	cmp	r2, r3
 8014184:	db3e      	blt.n	8014204 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8014186:	88fb      	ldrh	r3, [r7, #6]
 8014188:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	895a      	ldrh	r2, [r3, #10]
 8014192:	8a3b      	ldrh	r3, [r7, #16]
 8014194:	429a      	cmp	r2, r3
 8014196:	d806      	bhi.n	80141a6 <pbuf_take_at+0x5e>
 8014198:	4b1d      	ldr	r3, [pc, #116]	@ (8014210 <pbuf_take_at+0xc8>)
 801419a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801419e:	491d      	ldr	r1, [pc, #116]	@ (8014214 <pbuf_take_at+0xcc>)
 80141a0:	481d      	ldr	r0, [pc, #116]	@ (8014218 <pbuf_take_at+0xd0>)
 80141a2:	f00a f8df 	bl	801e364 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80141a6:	69fb      	ldr	r3, [r7, #28]
 80141a8:	895b      	ldrh	r3, [r3, #10]
 80141aa:	461a      	mov	r2, r3
 80141ac:	8a3b      	ldrh	r3, [r7, #16]
 80141ae:	1ad2      	subs	r2, r2, r3
 80141b0:	88fb      	ldrh	r3, [r7, #6]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	da05      	bge.n	80141c2 <pbuf_take_at+0x7a>
 80141b6:	69fb      	ldr	r3, [r7, #28]
 80141b8:	895a      	ldrh	r2, [r3, #10]
 80141ba:	8a3b      	ldrh	r3, [r7, #16]
 80141bc:	1ad3      	subs	r3, r2, r3
 80141be:	b29b      	uxth	r3, r3
 80141c0:	e000      	b.n	80141c4 <pbuf_take_at+0x7c>
 80141c2:	88fb      	ldrh	r3, [r7, #6]
 80141c4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	8a3a      	ldrh	r2, [r7, #16]
 80141cc:	4413      	add	r3, r2
 80141ce:	8a7a      	ldrh	r2, [r7, #18]
 80141d0:	68b9      	ldr	r1, [r7, #8]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f00a fb27 	bl	801e826 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 80141d8:	8b7a      	ldrh	r2, [r7, #26]
 80141da:	8a7b      	ldrh	r3, [r7, #18]
 80141dc:	1ad3      	subs	r3, r2, r3
 80141de:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 80141e0:	8a7b      	ldrh	r3, [r7, #18]
 80141e2:	697a      	ldr	r2, [r7, #20]
 80141e4:	4413      	add	r3, r2
 80141e6:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80141e8:	8b7b      	ldrh	r3, [r7, #26]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d008      	beq.n	8014200 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	8b7a      	ldrh	r2, [r7, #26]
 80141f4:	6979      	ldr	r1, [r7, #20]
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7ff ff14 	bl	8014024 <pbuf_take>
 80141fc:	4603      	mov	r3, r0
 80141fe:	e003      	b.n	8014208 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8014200:	2300      	movs	r3, #0
 8014202:	e001      	b.n	8014208 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8014204:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8014208:	4618      	mov	r0, r3
 801420a:	3720      	adds	r7, #32
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	08021f68 	.word	0x08021f68
 8014214:	080223c4 	.word	0x080223c4
 8014218:	08021fc8 	.word	0x08021fc8

0801421c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	4603      	mov	r3, r0
 8014224:	603a      	str	r2, [r7, #0]
 8014226:	71fb      	strb	r3, [r7, #7]
 8014228:	460b      	mov	r3, r1
 801422a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	8919      	ldrh	r1, [r3, #8]
 8014230:	88ba      	ldrh	r2, [r7, #4]
 8014232:	79fb      	ldrb	r3, [r7, #7]
 8014234:	4618      	mov	r0, r3
 8014236:	f7ff f95d 	bl	80134f4 <pbuf_alloc>
 801423a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d101      	bne.n	8014246 <pbuf_clone+0x2a>
    return NULL;
 8014242:	2300      	movs	r3, #0
 8014244:	e011      	b.n	801426a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014246:	6839      	ldr	r1, [r7, #0]
 8014248:	68f8      	ldr	r0, [r7, #12]
 801424a:	f7ff fd6b 	bl	8013d24 <pbuf_copy>
 801424e:	4603      	mov	r3, r0
 8014250:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014252:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d006      	beq.n	8014268 <pbuf_clone+0x4c>
 801425a:	4b06      	ldr	r3, [pc, #24]	@ (8014274 <pbuf_clone+0x58>)
 801425c:	f240 5224 	movw	r2, #1316	@ 0x524
 8014260:	4905      	ldr	r1, [pc, #20]	@ (8014278 <pbuf_clone+0x5c>)
 8014262:	4806      	ldr	r0, [pc, #24]	@ (801427c <pbuf_clone+0x60>)
 8014264:	f00a f87e 	bl	801e364 <iprintf>
  return q;
 8014268:	68fb      	ldr	r3, [r7, #12]
}
 801426a:	4618      	mov	r0, r3
 801426c:	3710      	adds	r7, #16
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop
 8014274:	08021f68 	.word	0x08021f68
 8014278:	080223dc 	.word	0x080223dc
 801427c:	08021fc8 	.word	0x08021fc8

08014280 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	460b      	mov	r3, r1
 801428a:	807b      	strh	r3, [r7, #2]
 801428c:	4613      	mov	r3, r2
 801428e:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8014290:	f107 020a 	add.w	r2, r7, #10
 8014294:	887b      	ldrh	r3, [r7, #2]
 8014296:	4619      	mov	r1, r3
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff feb0 	bl	8013ffe <pbuf_skip>
 801429e:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d00a      	beq.n	80142bc <pbuf_put_at+0x3c>
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	895a      	ldrh	r2, [r3, #10]
 80142aa:	897b      	ldrh	r3, [r7, #10]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d905      	bls.n	80142bc <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	897a      	ldrh	r2, [r7, #10]
 80142b6:	4413      	add	r3, r2
 80142b8:	787a      	ldrb	r2, [r7, #1]
 80142ba:	701a      	strb	r2, [r3, #0]
  }
}
 80142bc:	bf00      	nop
 80142be:	3710      	adds	r7, #16
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80142c8:	f009 faf4 	bl	801d8b4 <rand>
 80142cc:	4603      	mov	r3, r0
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80142da:	b29a      	uxth	r2, r3
 80142dc:	4b01      	ldr	r3, [pc, #4]	@ (80142e4 <tcp_init+0x20>)
 80142de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80142e0:	bf00      	nop
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	20000024 	.word	0x20000024

080142e8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	7d1b      	ldrb	r3, [r3, #20]
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d105      	bne.n	8014304 <tcp_free+0x1c>
 80142f8:	4b06      	ldr	r3, [pc, #24]	@ (8014314 <tcp_free+0x2c>)
 80142fa:	22d4      	movs	r2, #212	@ 0xd4
 80142fc:	4906      	ldr	r1, [pc, #24]	@ (8014318 <tcp_free+0x30>)
 80142fe:	4807      	ldr	r0, [pc, #28]	@ (801431c <tcp_free+0x34>)
 8014300:	f00a f830 	bl	801e364 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014304:	6879      	ldr	r1, [r7, #4]
 8014306:	2001      	movs	r0, #1
 8014308:	f7fe fd34 	bl	8012d74 <memp_free>
}
 801430c:	bf00      	nop
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}
 8014314:	08022468 	.word	0x08022468
 8014318:	08022498 	.word	0x08022498
 801431c:	080224ac 	.word	0x080224ac

08014320 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	7d1b      	ldrb	r3, [r3, #20]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d105      	bne.n	801433c <tcp_free_listen+0x1c>
 8014330:	4b06      	ldr	r3, [pc, #24]	@ (801434c <tcp_free_listen+0x2c>)
 8014332:	22df      	movs	r2, #223	@ 0xdf
 8014334:	4906      	ldr	r1, [pc, #24]	@ (8014350 <tcp_free_listen+0x30>)
 8014336:	4807      	ldr	r0, [pc, #28]	@ (8014354 <tcp_free_listen+0x34>)
 8014338:	f00a f814 	bl	801e364 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801433c:	6879      	ldr	r1, [r7, #4]
 801433e:	2002      	movs	r0, #2
 8014340:	f7fe fd18 	bl	8012d74 <memp_free>
}
 8014344:	bf00      	nop
 8014346:	3708      	adds	r7, #8
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}
 801434c:	08022468 	.word	0x08022468
 8014350:	080224d4 	.word	0x080224d4
 8014354:	080224ac 	.word	0x080224ac

08014358 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801435c:	f000 ff00 	bl	8015160 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014360:	4b07      	ldr	r3, [pc, #28]	@ (8014380 <tcp_tmr+0x28>)
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	3301      	adds	r3, #1
 8014366:	b2da      	uxtb	r2, r3
 8014368:	4b05      	ldr	r3, [pc, #20]	@ (8014380 <tcp_tmr+0x28>)
 801436a:	701a      	strb	r2, [r3, #0]
 801436c:	4b04      	ldr	r3, [pc, #16]	@ (8014380 <tcp_tmr+0x28>)
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	f003 0301 	and.w	r3, r3, #1
 8014374:	2b00      	cmp	r3, #0
 8014376:	d001      	beq.n	801437c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014378:	f000 fbb0 	bl	8014adc <tcp_slowtmr>
  }
}
 801437c:	bf00      	nop
 801437e:	bd80      	pop	{r7, pc}
 8014380:	2000fcd1 	.word	0x2000fcd1

08014384 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b084      	sub	sp, #16
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d105      	bne.n	80143a0 <tcp_remove_listener+0x1c>
 8014394:	4b0d      	ldr	r3, [pc, #52]	@ (80143cc <tcp_remove_listener+0x48>)
 8014396:	22ff      	movs	r2, #255	@ 0xff
 8014398:	490d      	ldr	r1, [pc, #52]	@ (80143d0 <tcp_remove_listener+0x4c>)
 801439a:	480e      	ldr	r0, [pc, #56]	@ (80143d4 <tcp_remove_listener+0x50>)
 801439c:	f009 ffe2 	bl	801e364 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	60fb      	str	r3, [r7, #12]
 80143a4:	e00a      	b.n	80143bc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80143aa:	683a      	ldr	r2, [r7, #0]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d102      	bne.n	80143b6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	2200      	movs	r2, #0
 80143b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	60fb      	str	r3, [r7, #12]
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d1f1      	bne.n	80143a6 <tcp_remove_listener+0x22>
    }
  }
}
 80143c2:	bf00      	nop
 80143c4:	bf00      	nop
 80143c6:	3710      	adds	r7, #16
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	08022468 	.word	0x08022468
 80143d0:	080224f0 	.word	0x080224f0
 80143d4:	080224ac 	.word	0x080224ac

080143d8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d106      	bne.n	80143f4 <tcp_listen_closed+0x1c>
 80143e6:	4b14      	ldr	r3, [pc, #80]	@ (8014438 <tcp_listen_closed+0x60>)
 80143e8:	f240 1211 	movw	r2, #273	@ 0x111
 80143ec:	4913      	ldr	r1, [pc, #76]	@ (801443c <tcp_listen_closed+0x64>)
 80143ee:	4814      	ldr	r0, [pc, #80]	@ (8014440 <tcp_listen_closed+0x68>)
 80143f0:	f009 ffb8 	bl	801e364 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	7d1b      	ldrb	r3, [r3, #20]
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	d006      	beq.n	801440a <tcp_listen_closed+0x32>
 80143fc:	4b0e      	ldr	r3, [pc, #56]	@ (8014438 <tcp_listen_closed+0x60>)
 80143fe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8014402:	4910      	ldr	r1, [pc, #64]	@ (8014444 <tcp_listen_closed+0x6c>)
 8014404:	480e      	ldr	r0, [pc, #56]	@ (8014440 <tcp_listen_closed+0x68>)
 8014406:	f009 ffad 	bl	801e364 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801440a:	2301      	movs	r3, #1
 801440c:	60fb      	str	r3, [r7, #12]
 801440e:	e00b      	b.n	8014428 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014410:	4a0d      	ldr	r2, [pc, #52]	@ (8014448 <tcp_listen_closed+0x70>)
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	6879      	ldr	r1, [r7, #4]
 801441c:	4618      	mov	r0, r3
 801441e:	f7ff ffb1 	bl	8014384 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	3301      	adds	r3, #1
 8014426:	60fb      	str	r3, [r7, #12]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	2b03      	cmp	r3, #3
 801442c:	d9f0      	bls.n	8014410 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801442e:	bf00      	nop
 8014430:	bf00      	nop
 8014432:	3710      	adds	r7, #16
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}
 8014438:	08022468 	.word	0x08022468
 801443c:	08022518 	.word	0x08022518
 8014440:	080224ac 	.word	0x080224ac
 8014444:	08022524 	.word	0x08022524
 8014448:	08024694 	.word	0x08024694

0801444c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801444c:	b5b0      	push	{r4, r5, r7, lr}
 801444e:	b088      	sub	sp, #32
 8014450:	af04      	add	r7, sp, #16
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d106      	bne.n	801446c <tcp_close_shutdown+0x20>
 801445e:	4b63      	ldr	r3, [pc, #396]	@ (80145ec <tcp_close_shutdown+0x1a0>)
 8014460:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014464:	4962      	ldr	r1, [pc, #392]	@ (80145f0 <tcp_close_shutdown+0x1a4>)
 8014466:	4863      	ldr	r0, [pc, #396]	@ (80145f4 <tcp_close_shutdown+0x1a8>)
 8014468:	f009 ff7c 	bl	801e364 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801446c:	78fb      	ldrb	r3, [r7, #3]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d066      	beq.n	8014540 <tcp_close_shutdown+0xf4>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	7d1b      	ldrb	r3, [r3, #20]
 8014476:	2b04      	cmp	r3, #4
 8014478:	d003      	beq.n	8014482 <tcp_close_shutdown+0x36>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	7d1b      	ldrb	r3, [r3, #20]
 801447e:	2b07      	cmp	r3, #7
 8014480:	d15e      	bne.n	8014540 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014486:	2b00      	cmp	r3, #0
 8014488:	d104      	bne.n	8014494 <tcp_close_shutdown+0x48>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801448e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014492:	d055      	beq.n	8014540 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	8b5b      	ldrh	r3, [r3, #26]
 8014498:	f003 0310 	and.w	r3, r3, #16
 801449c:	2b00      	cmp	r3, #0
 801449e:	d106      	bne.n	80144ae <tcp_close_shutdown+0x62>
 80144a0:	4b52      	ldr	r3, [pc, #328]	@ (80145ec <tcp_close_shutdown+0x1a0>)
 80144a2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80144a6:	4954      	ldr	r1, [pc, #336]	@ (80145f8 <tcp_close_shutdown+0x1ac>)
 80144a8:	4852      	ldr	r0, [pc, #328]	@ (80145f4 <tcp_close_shutdown+0x1a8>)
 80144aa:	f009 ff5b 	bl	801e364 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80144b6:	687d      	ldr	r5, [r7, #4]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	3304      	adds	r3, #4
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	8ad2      	ldrh	r2, [r2, #22]
 80144c0:	6879      	ldr	r1, [r7, #4]
 80144c2:	8b09      	ldrh	r1, [r1, #24]
 80144c4:	9102      	str	r1, [sp, #8]
 80144c6:	9201      	str	r2, [sp, #4]
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	462b      	mov	r3, r5
 80144cc:	4622      	mov	r2, r4
 80144ce:	4601      	mov	r1, r0
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f005 fc0f 	bl	8019cf4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f001 f9f2 	bl	80158c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80144dc:	4b47      	ldr	r3, [pc, #284]	@ (80145fc <tcp_close_shutdown+0x1b0>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	687a      	ldr	r2, [r7, #4]
 80144e2:	429a      	cmp	r2, r3
 80144e4:	d105      	bne.n	80144f2 <tcp_close_shutdown+0xa6>
 80144e6:	4b45      	ldr	r3, [pc, #276]	@ (80145fc <tcp_close_shutdown+0x1b0>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	4a43      	ldr	r2, [pc, #268]	@ (80145fc <tcp_close_shutdown+0x1b0>)
 80144ee:	6013      	str	r3, [r2, #0]
 80144f0:	e013      	b.n	801451a <tcp_close_shutdown+0xce>
 80144f2:	4b42      	ldr	r3, [pc, #264]	@ (80145fc <tcp_close_shutdown+0x1b0>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	60fb      	str	r3, [r7, #12]
 80144f8:	e00c      	b.n	8014514 <tcp_close_shutdown+0xc8>
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	429a      	cmp	r2, r3
 8014502:	d104      	bne.n	801450e <tcp_close_shutdown+0xc2>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	68da      	ldr	r2, [r3, #12]
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	60da      	str	r2, [r3, #12]
 801450c:	e005      	b.n	801451a <tcp_close_shutdown+0xce>
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	60fb      	str	r3, [r7, #12]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d1ef      	bne.n	80144fa <tcp_close_shutdown+0xae>
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2200      	movs	r2, #0
 801451e:	60da      	str	r2, [r3, #12]
 8014520:	4b37      	ldr	r3, [pc, #220]	@ (8014600 <tcp_close_shutdown+0x1b4>)
 8014522:	2201      	movs	r2, #1
 8014524:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014526:	4b37      	ldr	r3, [pc, #220]	@ (8014604 <tcp_close_shutdown+0x1b8>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	429a      	cmp	r2, r3
 801452e:	d102      	bne.n	8014536 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014530:	f003 fe86 	bl	8018240 <tcp_trigger_input_pcb_close>
 8014534:	e002      	b.n	801453c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f7ff fed6 	bl	80142e8 <tcp_free>
      }
      return ERR_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	e050      	b.n	80145e2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	7d1b      	ldrb	r3, [r3, #20]
 8014544:	2b02      	cmp	r3, #2
 8014546:	d03b      	beq.n	80145c0 <tcp_close_shutdown+0x174>
 8014548:	2b02      	cmp	r3, #2
 801454a:	dc44      	bgt.n	80145d6 <tcp_close_shutdown+0x18a>
 801454c:	2b00      	cmp	r3, #0
 801454e:	d002      	beq.n	8014556 <tcp_close_shutdown+0x10a>
 8014550:	2b01      	cmp	r3, #1
 8014552:	d02a      	beq.n	80145aa <tcp_close_shutdown+0x15e>
 8014554:	e03f      	b.n	80145d6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	8adb      	ldrh	r3, [r3, #22]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d021      	beq.n	80145a2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801455e:	4b2a      	ldr	r3, [pc, #168]	@ (8014608 <tcp_close_shutdown+0x1bc>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	429a      	cmp	r2, r3
 8014566:	d105      	bne.n	8014574 <tcp_close_shutdown+0x128>
 8014568:	4b27      	ldr	r3, [pc, #156]	@ (8014608 <tcp_close_shutdown+0x1bc>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	4a26      	ldr	r2, [pc, #152]	@ (8014608 <tcp_close_shutdown+0x1bc>)
 8014570:	6013      	str	r3, [r2, #0]
 8014572:	e013      	b.n	801459c <tcp_close_shutdown+0x150>
 8014574:	4b24      	ldr	r3, [pc, #144]	@ (8014608 <tcp_close_shutdown+0x1bc>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	60bb      	str	r3, [r7, #8]
 801457a:	e00c      	b.n	8014596 <tcp_close_shutdown+0x14a>
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	68db      	ldr	r3, [r3, #12]
 8014580:	687a      	ldr	r2, [r7, #4]
 8014582:	429a      	cmp	r2, r3
 8014584:	d104      	bne.n	8014590 <tcp_close_shutdown+0x144>
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	68da      	ldr	r2, [r3, #12]
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	60da      	str	r2, [r3, #12]
 801458e:	e005      	b.n	801459c <tcp_close_shutdown+0x150>
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	68db      	ldr	r3, [r3, #12]
 8014594:	60bb      	str	r3, [r7, #8]
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d1ef      	bne.n	801457c <tcp_close_shutdown+0x130>
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2200      	movs	r2, #0
 80145a0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f7ff fea0 	bl	80142e8 <tcp_free>
      break;
 80145a8:	e01a      	b.n	80145e0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f7ff ff14 	bl	80143d8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80145b0:	6879      	ldr	r1, [r7, #4]
 80145b2:	4816      	ldr	r0, [pc, #88]	@ (801460c <tcp_close_shutdown+0x1c0>)
 80145b4:	f001 f9d4 	bl	8015960 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7ff feb1 	bl	8014320 <tcp_free_listen>
      break;
 80145be:	e00f      	b.n	80145e0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80145c0:	6879      	ldr	r1, [r7, #4]
 80145c2:	480e      	ldr	r0, [pc, #56]	@ (80145fc <tcp_close_shutdown+0x1b0>)
 80145c4:	f001 f9cc 	bl	8015960 <tcp_pcb_remove>
 80145c8:	4b0d      	ldr	r3, [pc, #52]	@ (8014600 <tcp_close_shutdown+0x1b4>)
 80145ca:	2201      	movs	r2, #1
 80145cc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f7ff fe8a 	bl	80142e8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80145d4:	e004      	b.n	80145e0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f000 f81a 	bl	8014610 <tcp_close_shutdown_fin>
 80145dc:	4603      	mov	r3, r0
 80145de:	e000      	b.n	80145e2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80145e0:	2300      	movs	r3, #0
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3710      	adds	r7, #16
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bdb0      	pop	{r4, r5, r7, pc}
 80145ea:	bf00      	nop
 80145ec:	08022468 	.word	0x08022468
 80145f0:	0802253c 	.word	0x0802253c
 80145f4:	080224ac 	.word	0x080224ac
 80145f8:	0802255c 	.word	0x0802255c
 80145fc:	2000fcc8 	.word	0x2000fcc8
 8014600:	2000fcd0 	.word	0x2000fcd0
 8014604:	2000fd08 	.word	0x2000fd08
 8014608:	2000fcc0 	.word	0x2000fcc0
 801460c:	2000fcc4 	.word	0x2000fcc4

08014610 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d106      	bne.n	801462c <tcp_close_shutdown_fin+0x1c>
 801461e:	4b2e      	ldr	r3, [pc, #184]	@ (80146d8 <tcp_close_shutdown_fin+0xc8>)
 8014620:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014624:	492d      	ldr	r1, [pc, #180]	@ (80146dc <tcp_close_shutdown_fin+0xcc>)
 8014626:	482e      	ldr	r0, [pc, #184]	@ (80146e0 <tcp_close_shutdown_fin+0xd0>)
 8014628:	f009 fe9c 	bl	801e364 <iprintf>

  switch (pcb->state) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	7d1b      	ldrb	r3, [r3, #20]
 8014630:	2b07      	cmp	r3, #7
 8014632:	d020      	beq.n	8014676 <tcp_close_shutdown_fin+0x66>
 8014634:	2b07      	cmp	r3, #7
 8014636:	dc2b      	bgt.n	8014690 <tcp_close_shutdown_fin+0x80>
 8014638:	2b03      	cmp	r3, #3
 801463a:	d002      	beq.n	8014642 <tcp_close_shutdown_fin+0x32>
 801463c:	2b04      	cmp	r3, #4
 801463e:	d00d      	beq.n	801465c <tcp_close_shutdown_fin+0x4c>
 8014640:	e026      	b.n	8014690 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f004 fc64 	bl	8018f10 <tcp_send_fin>
 8014648:	4603      	mov	r3, r0
 801464a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801464c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d11f      	bne.n	8014694 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2205      	movs	r2, #5
 8014658:	751a      	strb	r2, [r3, #20]
      }
      break;
 801465a:	e01b      	b.n	8014694 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f004 fc57 	bl	8018f10 <tcp_send_fin>
 8014662:	4603      	mov	r3, r0
 8014664:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d114      	bne.n	8014698 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2205      	movs	r2, #5
 8014672:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014674:	e010      	b.n	8014698 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f004 fc4a 	bl	8018f10 <tcp_send_fin>
 801467c:	4603      	mov	r3, r0
 801467e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d109      	bne.n	801469c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2209      	movs	r2, #9
 801468c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801468e:	e005      	b.n	801469c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014690:	2300      	movs	r3, #0
 8014692:	e01c      	b.n	80146ce <tcp_close_shutdown_fin+0xbe>
      break;
 8014694:	bf00      	nop
 8014696:	e002      	b.n	801469e <tcp_close_shutdown_fin+0x8e>
      break;
 8014698:	bf00      	nop
 801469a:	e000      	b.n	801469e <tcp_close_shutdown_fin+0x8e>
      break;
 801469c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801469e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d103      	bne.n	80146ae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f004 fd70 	bl	801918c <tcp_output>
 80146ac:	e00d      	b.n	80146ca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80146ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80146b6:	d108      	bne.n	80146ca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	8b5b      	ldrh	r3, [r3, #26]
 80146bc:	f043 0308 	orr.w	r3, r3, #8
 80146c0:	b29a      	uxth	r2, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80146c6:	2300      	movs	r3, #0
 80146c8:	e001      	b.n	80146ce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80146ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3710      	adds	r7, #16
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	08022468 	.word	0x08022468
 80146dc:	08022518 	.word	0x08022518
 80146e0:	080224ac 	.word	0x080224ac

080146e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d109      	bne.n	8014706 <tcp_close+0x22>
 80146f2:	4b0f      	ldr	r3, [pc, #60]	@ (8014730 <tcp_close+0x4c>)
 80146f4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80146f8:	490e      	ldr	r1, [pc, #56]	@ (8014734 <tcp_close+0x50>)
 80146fa:	480f      	ldr	r0, [pc, #60]	@ (8014738 <tcp_close+0x54>)
 80146fc:	f009 fe32 	bl	801e364 <iprintf>
 8014700:	f06f 030f 	mvn.w	r3, #15
 8014704:	e00f      	b.n	8014726 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	7d1b      	ldrb	r3, [r3, #20]
 801470a:	2b01      	cmp	r3, #1
 801470c:	d006      	beq.n	801471c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	8b5b      	ldrh	r3, [r3, #26]
 8014712:	f043 0310 	orr.w	r3, r3, #16
 8014716:	b29a      	uxth	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801471c:	2101      	movs	r1, #1
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f7ff fe94 	bl	801444c <tcp_close_shutdown>
 8014724:	4603      	mov	r3, r0
}
 8014726:	4618      	mov	r0, r3
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	08022468 	.word	0x08022468
 8014734:	08022578 	.word	0x08022578
 8014738:	080224ac 	.word	0x080224ac

0801473c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d109      	bne.n	8014762 <tcp_shutdown+0x26>
 801474e:	4b26      	ldr	r3, [pc, #152]	@ (80147e8 <tcp_shutdown+0xac>)
 8014750:	f240 2207 	movw	r2, #519	@ 0x207
 8014754:	4925      	ldr	r1, [pc, #148]	@ (80147ec <tcp_shutdown+0xb0>)
 8014756:	4826      	ldr	r0, [pc, #152]	@ (80147f0 <tcp_shutdown+0xb4>)
 8014758:	f009 fe04 	bl	801e364 <iprintf>
 801475c:	f06f 030f 	mvn.w	r3, #15
 8014760:	e03d      	b.n	80147de <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	7d1b      	ldrb	r3, [r3, #20]
 8014766:	2b01      	cmp	r3, #1
 8014768:	d102      	bne.n	8014770 <tcp_shutdown+0x34>
    return ERR_CONN;
 801476a:	f06f 030a 	mvn.w	r3, #10
 801476e:	e036      	b.n	80147de <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d01b      	beq.n	80147ae <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	8b5b      	ldrh	r3, [r3, #26]
 801477a:	f043 0310 	orr.w	r3, r3, #16
 801477e:	b29a      	uxth	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d005      	beq.n	8014796 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801478a:	2101      	movs	r1, #1
 801478c:	68f8      	ldr	r0, [r7, #12]
 801478e:	f7ff fe5d 	bl	801444c <tcp_close_shutdown>
 8014792:	4603      	mov	r3, r0
 8014794:	e023      	b.n	80147de <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801479a:	2b00      	cmp	r3, #0
 801479c:	d007      	beq.n	80147ae <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7ff f98a 	bl	8013abc <pbuf_free>
      pcb->refused_data = NULL;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2200      	movs	r2, #0
 80147ac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d013      	beq.n	80147dc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	7d1b      	ldrb	r3, [r3, #20]
 80147b8:	2b04      	cmp	r3, #4
 80147ba:	dc02      	bgt.n	80147c2 <tcp_shutdown+0x86>
 80147bc:	2b03      	cmp	r3, #3
 80147be:	da02      	bge.n	80147c6 <tcp_shutdown+0x8a>
 80147c0:	e009      	b.n	80147d6 <tcp_shutdown+0x9a>
 80147c2:	2b07      	cmp	r3, #7
 80147c4:	d107      	bne.n	80147d6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	4619      	mov	r1, r3
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f7ff fe3d 	bl	801444c <tcp_close_shutdown>
 80147d2:	4603      	mov	r3, r0
 80147d4:	e003      	b.n	80147de <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80147d6:	f06f 030a 	mvn.w	r3, #10
 80147da:	e000      	b.n	80147de <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80147dc:	2300      	movs	r3, #0
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3710      	adds	r7, #16
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	08022468 	.word	0x08022468
 80147ec:	08022590 	.word	0x08022590
 80147f0:	080224ac 	.word	0x080224ac

080147f4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b08e      	sub	sp, #56	@ 0x38
 80147f8:	af04      	add	r7, sp, #16
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d107      	bne.n	8014814 <tcp_abandon+0x20>
 8014804:	4b52      	ldr	r3, [pc, #328]	@ (8014950 <tcp_abandon+0x15c>)
 8014806:	f240 223d 	movw	r2, #573	@ 0x23d
 801480a:	4952      	ldr	r1, [pc, #328]	@ (8014954 <tcp_abandon+0x160>)
 801480c:	4852      	ldr	r0, [pc, #328]	@ (8014958 <tcp_abandon+0x164>)
 801480e:	f009 fda9 	bl	801e364 <iprintf>
 8014812:	e099      	b.n	8014948 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	7d1b      	ldrb	r3, [r3, #20]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d106      	bne.n	801482a <tcp_abandon+0x36>
 801481c:	4b4c      	ldr	r3, [pc, #304]	@ (8014950 <tcp_abandon+0x15c>)
 801481e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014822:	494e      	ldr	r1, [pc, #312]	@ (801495c <tcp_abandon+0x168>)
 8014824:	484c      	ldr	r0, [pc, #304]	@ (8014958 <tcp_abandon+0x164>)
 8014826:	f009 fd9d 	bl	801e364 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	7d1b      	ldrb	r3, [r3, #20]
 801482e:	2b0a      	cmp	r3, #10
 8014830:	d107      	bne.n	8014842 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014832:	6879      	ldr	r1, [r7, #4]
 8014834:	484a      	ldr	r0, [pc, #296]	@ (8014960 <tcp_abandon+0x16c>)
 8014836:	f001 f893 	bl	8015960 <tcp_pcb_remove>
    tcp_free(pcb);
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f7ff fd54 	bl	80142e8 <tcp_free>
 8014840:	e082      	b.n	8014948 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014842:	2300      	movs	r3, #0
 8014844:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014846:	2300      	movs	r3, #0
 8014848:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801484e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014854:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801485c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	691b      	ldr	r3, [r3, #16]
 8014862:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	7d1b      	ldrb	r3, [r3, #20]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d126      	bne.n	80148ba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	8adb      	ldrh	r3, [r3, #22]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d02e      	beq.n	80148d2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014874:	4b3b      	ldr	r3, [pc, #236]	@ (8014964 <tcp_abandon+0x170>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	687a      	ldr	r2, [r7, #4]
 801487a:	429a      	cmp	r2, r3
 801487c:	d105      	bne.n	801488a <tcp_abandon+0x96>
 801487e:	4b39      	ldr	r3, [pc, #228]	@ (8014964 <tcp_abandon+0x170>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	68db      	ldr	r3, [r3, #12]
 8014884:	4a37      	ldr	r2, [pc, #220]	@ (8014964 <tcp_abandon+0x170>)
 8014886:	6013      	str	r3, [r2, #0]
 8014888:	e013      	b.n	80148b2 <tcp_abandon+0xbe>
 801488a:	4b36      	ldr	r3, [pc, #216]	@ (8014964 <tcp_abandon+0x170>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	61fb      	str	r3, [r7, #28]
 8014890:	e00c      	b.n	80148ac <tcp_abandon+0xb8>
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	429a      	cmp	r2, r3
 801489a:	d104      	bne.n	80148a6 <tcp_abandon+0xb2>
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	68da      	ldr	r2, [r3, #12]
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	60da      	str	r2, [r3, #12]
 80148a4:	e005      	b.n	80148b2 <tcp_abandon+0xbe>
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	68db      	ldr	r3, [r3, #12]
 80148aa:	61fb      	str	r3, [r7, #28]
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d1ef      	bne.n	8014892 <tcp_abandon+0x9e>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2200      	movs	r2, #0
 80148b6:	60da      	str	r2, [r3, #12]
 80148b8:	e00b      	b.n	80148d2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	8adb      	ldrh	r3, [r3, #22]
 80148c2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80148c4:	6879      	ldr	r1, [r7, #4]
 80148c6:	4828      	ldr	r0, [pc, #160]	@ (8014968 <tcp_abandon+0x174>)
 80148c8:	f001 f84a 	bl	8015960 <tcp_pcb_remove>
 80148cc:	4b27      	ldr	r3, [pc, #156]	@ (801496c <tcp_abandon+0x178>)
 80148ce:	2201      	movs	r2, #1
 80148d0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d004      	beq.n	80148e4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80148de:	4618      	mov	r0, r3
 80148e0:	f000 fd1e 	bl	8015320 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d004      	beq.n	80148f6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148f0:	4618      	mov	r0, r3
 80148f2:	f000 fd15 	bl	8015320 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d004      	beq.n	8014908 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014902:	4618      	mov	r0, r3
 8014904:	f000 fd0c 	bl	8015320 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801490a:	2b00      	cmp	r3, #0
 801490c:	d00e      	beq.n	801492c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801490e:	6879      	ldr	r1, [r7, #4]
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	3304      	adds	r3, #4
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	8b12      	ldrh	r2, [r2, #24]
 8014918:	9202      	str	r2, [sp, #8]
 801491a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801491c:	9201      	str	r2, [sp, #4]
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	460b      	mov	r3, r1
 8014922:	697a      	ldr	r2, [r7, #20]
 8014924:	69b9      	ldr	r1, [r7, #24]
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f005 f9e4 	bl	8019cf4 <tcp_rst>
    }
    last_state = pcb->state;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	7d1b      	ldrb	r3, [r3, #20]
 8014930:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f7ff fcd8 	bl	80142e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d004      	beq.n	8014948 <tcp_abandon+0x154>
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	f06f 010c 	mvn.w	r1, #12
 8014944:	68f8      	ldr	r0, [r7, #12]
 8014946:	4798      	blx	r3
  }
}
 8014948:	3728      	adds	r7, #40	@ 0x28
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop
 8014950:	08022468 	.word	0x08022468
 8014954:	080225ac 	.word	0x080225ac
 8014958:	080224ac 	.word	0x080224ac
 801495c:	080225c8 	.word	0x080225c8
 8014960:	2000fccc 	.word	0x2000fccc
 8014964:	2000fcc0 	.word	0x2000fcc0
 8014968:	2000fcc8 	.word	0x2000fcc8
 801496c:	2000fcd0 	.word	0x2000fcd0

08014970 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014978:	2101      	movs	r1, #1
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f7ff ff3a 	bl	80147f4 <tcp_abandon>
}
 8014980:	bf00      	nop
 8014982:	3708      	adds	r7, #8
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d106      	bne.n	80149a4 <tcp_update_rcv_ann_wnd+0x1c>
 8014996:	4b25      	ldr	r3, [pc, #148]	@ (8014a2c <tcp_update_rcv_ann_wnd+0xa4>)
 8014998:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801499c:	4924      	ldr	r1, [pc, #144]	@ (8014a30 <tcp_update_rcv_ann_wnd+0xa8>)
 801499e:	4825      	ldr	r0, [pc, #148]	@ (8014a34 <tcp_update_rcv_ann_wnd+0xac>)
 80149a0:	f009 fce0 	bl	801e364 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80149ac:	4413      	add	r3, r2
 80149ae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80149b8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80149bc:	bf28      	it	cs
 80149be:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80149c2:	b292      	uxth	r2, r2
 80149c4:	4413      	add	r3, r2
 80149c6:	68fa      	ldr	r2, [r7, #12]
 80149c8:	1ad3      	subs	r3, r2, r3
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	db08      	blt.n	80149e0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149da:	68fa      	ldr	r2, [r7, #12]
 80149dc:	1ad3      	subs	r3, r2, r3
 80149de:	e020      	b.n	8014a22 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	dd03      	ble.n	80149f6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2200      	movs	r2, #0
 80149f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80149f4:	e014      	b.n	8014a20 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149fe:	1ad3      	subs	r3, r2, r3
 8014a00:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014a08:	d306      	bcc.n	8014a18 <tcp_update_rcv_ann_wnd+0x90>
 8014a0a:	4b08      	ldr	r3, [pc, #32]	@ (8014a2c <tcp_update_rcv_ann_wnd+0xa4>)
 8014a0c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014a10:	4909      	ldr	r1, [pc, #36]	@ (8014a38 <tcp_update_rcv_ann_wnd+0xb0>)
 8014a12:	4808      	ldr	r0, [pc, #32]	@ (8014a34 <tcp_update_rcv_ann_wnd+0xac>)
 8014a14:	f009 fca6 	bl	801e364 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	b29a      	uxth	r2, r3
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014a20:	2300      	movs	r3, #0
  }
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3710      	adds	r7, #16
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	08022468 	.word	0x08022468
 8014a30:	080226c4 	.word	0x080226c4
 8014a34:	080224ac 	.word	0x080224ac
 8014a38:	080226e8 	.word	0x080226e8

08014a3c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	460b      	mov	r3, r1
 8014a46:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d107      	bne.n	8014a5e <tcp_recved+0x22>
 8014a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8014acc <tcp_recved+0x90>)
 8014a50:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014a54:	491e      	ldr	r1, [pc, #120]	@ (8014ad0 <tcp_recved+0x94>)
 8014a56:	481f      	ldr	r0, [pc, #124]	@ (8014ad4 <tcp_recved+0x98>)
 8014a58:	f009 fc84 	bl	801e364 <iprintf>
 8014a5c:	e032      	b.n	8014ac4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	7d1b      	ldrb	r3, [r3, #20]
 8014a62:	2b01      	cmp	r3, #1
 8014a64:	d106      	bne.n	8014a74 <tcp_recved+0x38>
 8014a66:	4b19      	ldr	r3, [pc, #100]	@ (8014acc <tcp_recved+0x90>)
 8014a68:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014a6c:	491a      	ldr	r1, [pc, #104]	@ (8014ad8 <tcp_recved+0x9c>)
 8014a6e:	4819      	ldr	r0, [pc, #100]	@ (8014ad4 <tcp_recved+0x98>)
 8014a70:	f009 fc78 	bl	801e364 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014a78:	887b      	ldrh	r3, [r7, #2]
 8014a7a:	4413      	add	r3, r2
 8014a7c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014a7e:	89fb      	ldrh	r3, [r7, #14]
 8014a80:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014a84:	d804      	bhi.n	8014a90 <tcp_recved+0x54>
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a8a:	89fa      	ldrh	r2, [r7, #14]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d204      	bcs.n	8014a9a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014a96:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014a98:	e002      	b.n	8014aa0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	89fa      	ldrh	r2, [r7, #14]
 8014a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f7ff ff71 	bl	8014988 <tcp_update_rcv_ann_wnd>
 8014aa6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014aae:	d309      	bcc.n	8014ac4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	8b5b      	ldrh	r3, [r3, #26]
 8014ab4:	f043 0302 	orr.w	r3, r3, #2
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f004 fb64 	bl	801918c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014ac4:	3710      	adds	r7, #16
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	08022468 	.word	0x08022468
 8014ad0:	08022704 	.word	0x08022704
 8014ad4:	080224ac 	.word	0x080224ac
 8014ad8:	0802271c 	.word	0x0802271c

08014adc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014adc:	b5b0      	push	{r4, r5, r7, lr}
 8014ade:	b090      	sub	sp, #64	@ 0x40
 8014ae0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8014ae8:	4b95      	ldr	r3, [pc, #596]	@ (8014d40 <tcp_slowtmr+0x264>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	3301      	adds	r3, #1
 8014aee:	4a94      	ldr	r2, [pc, #592]	@ (8014d40 <tcp_slowtmr+0x264>)
 8014af0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014af2:	4b94      	ldr	r3, [pc, #592]	@ (8014d44 <tcp_slowtmr+0x268>)
 8014af4:	781b      	ldrb	r3, [r3, #0]
 8014af6:	3301      	adds	r3, #1
 8014af8:	b2da      	uxtb	r2, r3
 8014afa:	4b92      	ldr	r3, [pc, #584]	@ (8014d44 <tcp_slowtmr+0x268>)
 8014afc:	701a      	strb	r2, [r3, #0]
 8014afe:	e000      	b.n	8014b02 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8014b00:	bf00      	nop
  prev = NULL;
 8014b02:	2300      	movs	r3, #0
 8014b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8014b06:	4b90      	ldr	r3, [pc, #576]	@ (8014d48 <tcp_slowtmr+0x26c>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014b0c:	e29f      	b.n	801504e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b10:	7d1b      	ldrb	r3, [r3, #20]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d106      	bne.n	8014b24 <tcp_slowtmr+0x48>
 8014b16:	4b8d      	ldr	r3, [pc, #564]	@ (8014d4c <tcp_slowtmr+0x270>)
 8014b18:	f240 42be 	movw	r2, #1214	@ 0x4be
 8014b1c:	498c      	ldr	r1, [pc, #560]	@ (8014d50 <tcp_slowtmr+0x274>)
 8014b1e:	488d      	ldr	r0, [pc, #564]	@ (8014d54 <tcp_slowtmr+0x278>)
 8014b20:	f009 fc20 	bl	801e364 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b26:	7d1b      	ldrb	r3, [r3, #20]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d106      	bne.n	8014b3a <tcp_slowtmr+0x5e>
 8014b2c:	4b87      	ldr	r3, [pc, #540]	@ (8014d4c <tcp_slowtmr+0x270>)
 8014b2e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8014b32:	4989      	ldr	r1, [pc, #548]	@ (8014d58 <tcp_slowtmr+0x27c>)
 8014b34:	4887      	ldr	r0, [pc, #540]	@ (8014d54 <tcp_slowtmr+0x278>)
 8014b36:	f009 fc15 	bl	801e364 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b3c:	7d1b      	ldrb	r3, [r3, #20]
 8014b3e:	2b0a      	cmp	r3, #10
 8014b40:	d106      	bne.n	8014b50 <tcp_slowtmr+0x74>
 8014b42:	4b82      	ldr	r3, [pc, #520]	@ (8014d4c <tcp_slowtmr+0x270>)
 8014b44:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014b48:	4984      	ldr	r1, [pc, #528]	@ (8014d5c <tcp_slowtmr+0x280>)
 8014b4a:	4882      	ldr	r0, [pc, #520]	@ (8014d54 <tcp_slowtmr+0x278>)
 8014b4c:	f009 fc0a 	bl	801e364 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b52:	7f9a      	ldrb	r2, [r3, #30]
 8014b54:	4b7b      	ldr	r3, [pc, #492]	@ (8014d44 <tcp_slowtmr+0x268>)
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d105      	bne.n	8014b68 <tcp_slowtmr+0x8c>
      prev = pcb;
 8014b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8014b66:	e272      	b.n	801504e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8014b68:	4b76      	ldr	r3, [pc, #472]	@ (8014d44 <tcp_slowtmr+0x268>)
 8014b6a:	781a      	ldrb	r2, [r3, #0]
 8014b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014b70:	2300      	movs	r3, #0
 8014b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b7e:	7d1b      	ldrb	r3, [r3, #20]
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	d10a      	bne.n	8014b9a <tcp_slowtmr+0xbe>
 8014b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014b8a:	2b05      	cmp	r3, #5
 8014b8c:	d905      	bls.n	8014b9a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b92:	3301      	adds	r3, #1
 8014b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b98:	e11e      	b.n	8014dd8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014ba0:	2b0b      	cmp	r3, #11
 8014ba2:	d905      	bls.n	8014bb0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8014ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ba8:	3301      	adds	r3, #1
 8014baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014bae:	e113      	b.n	8014dd8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8014bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bb2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d075      	beq.n	8014ca6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d006      	beq.n	8014bd0 <tcp_slowtmr+0xf4>
 8014bc2:	4b62      	ldr	r3, [pc, #392]	@ (8014d4c <tcp_slowtmr+0x270>)
 8014bc4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8014bc8:	4965      	ldr	r1, [pc, #404]	@ (8014d60 <tcp_slowtmr+0x284>)
 8014bca:	4862      	ldr	r0, [pc, #392]	@ (8014d54 <tcp_slowtmr+0x278>)
 8014bcc:	f009 fbca 	bl	801e364 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d106      	bne.n	8014be6 <tcp_slowtmr+0x10a>
 8014bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8014d4c <tcp_slowtmr+0x270>)
 8014bda:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8014bde:	4961      	ldr	r1, [pc, #388]	@ (8014d64 <tcp_slowtmr+0x288>)
 8014be0:	485c      	ldr	r0, [pc, #368]	@ (8014d54 <tcp_slowtmr+0x278>)
 8014be2:	f009 fbbf 	bl	801e364 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8014be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014be8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014bec:	2b0b      	cmp	r3, #11
 8014bee:	d905      	bls.n	8014bfc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8014bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014bf4:	3301      	adds	r3, #1
 8014bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014bfa:	e0ed      	b.n	8014dd8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bfe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014c02:	3b01      	subs	r3, #1
 8014c04:	4a58      	ldr	r2, [pc, #352]	@ (8014d68 <tcp_slowtmr+0x28c>)
 8014c06:	5cd3      	ldrb	r3, [r2, r3]
 8014c08:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014c10:	7c7a      	ldrb	r2, [r7, #17]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d907      	bls.n	8014c26 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8014c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	b2da      	uxtb	r2, r3
 8014c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c22:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8014c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c28:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014c2c:	7c7a      	ldrb	r2, [r7, #17]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	f200 80d2 	bhi.w	8014dd8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8014c34:	2301      	movs	r3, #1
 8014c36:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8014c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d108      	bne.n	8014c54 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014c42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014c44:	f005 f94a 	bl	8019edc <tcp_zero_window_probe>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d014      	beq.n	8014c78 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8014c4e:	2300      	movs	r3, #0
 8014c50:	623b      	str	r3, [r7, #32]
 8014c52:	e011      	b.n	8014c78 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014c5e:	f004 f80f 	bl	8018c80 <tcp_split_unsent_seg>
 8014c62:	4603      	mov	r3, r0
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d107      	bne.n	8014c78 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8014c68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014c6a:	f004 fa8f 	bl	801918c <tcp_output>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d101      	bne.n	8014c78 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8014c74:	2300      	movs	r3, #0
 8014c76:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8014c78:	6a3b      	ldr	r3, [r7, #32]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	f000 80ac 	beq.w	8014dd8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8014c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c8a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014c8e:	2b06      	cmp	r3, #6
 8014c90:	f200 80a2 	bhi.w	8014dd8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8014c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c96:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	b2da      	uxtb	r2, r3
 8014c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ca0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8014ca4:	e098      	b.n	8014dd8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ca8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	db0f      	blt.n	8014cd0 <tcp_slowtmr+0x1f4>
 8014cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014cb6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014cba:	4293      	cmp	r3, r2
 8014cbc:	d008      	beq.n	8014cd0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8014cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	b21a      	sxth	r2, r3
 8014ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cce:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8014cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8014cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	db7b      	blt.n	8014dd8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014ce0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ce2:	f004 fd47 	bl	8019774 <tcp_rexmit_rto_prepare>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d007      	beq.n	8014cfc <tcp_slowtmr+0x220>
 8014cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d171      	bne.n	8014dd8 <tcp_slowtmr+0x2fc>
 8014cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d06d      	beq.n	8014dd8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8014cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cfe:	7d1b      	ldrb	r3, [r3, #20]
 8014d00:	2b02      	cmp	r3, #2
 8014d02:	d03a      	beq.n	8014d7a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014d0a:	2b0c      	cmp	r3, #12
 8014d0c:	bf28      	it	cs
 8014d0e:	230c      	movcs	r3, #12
 8014d10:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8014d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014d18:	10db      	asrs	r3, r3, #3
 8014d1a:	b21b      	sxth	r3, r3
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014d24:	4413      	add	r3, r2
 8014d26:	7efa      	ldrb	r2, [r7, #27]
 8014d28:	4910      	ldr	r1, [pc, #64]	@ (8014d6c <tcp_slowtmr+0x290>)
 8014d2a:	5c8a      	ldrb	r2, [r1, r2]
 8014d2c:	4093      	lsls	r3, r2
 8014d2e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8014d36:	4293      	cmp	r3, r2
 8014d38:	dc1a      	bgt.n	8014d70 <tcp_slowtmr+0x294>
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	b21a      	sxth	r2, r3
 8014d3e:	e019      	b.n	8014d74 <tcp_slowtmr+0x298>
 8014d40:	2000fcbc 	.word	0x2000fcbc
 8014d44:	2000fcd2 	.word	0x2000fcd2
 8014d48:	2000fcc8 	.word	0x2000fcc8
 8014d4c:	08022468 	.word	0x08022468
 8014d50:	080227ac 	.word	0x080227ac
 8014d54:	080224ac 	.word	0x080224ac
 8014d58:	080227d8 	.word	0x080227d8
 8014d5c:	08022804 	.word	0x08022804
 8014d60:	08022834 	.word	0x08022834
 8014d64:	08022868 	.word	0x08022868
 8014d68:	0802468c 	.word	0x0802468c
 8014d6c:	0802467c 	.word	0x0802467c
 8014d70:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8014d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	bf28      	it	cs
 8014d90:	4613      	movcs	r3, r2
 8014d92:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014d94:	8a7b      	ldrh	r3, [r7, #18]
 8014d96:	085b      	lsrs	r3, r3, #1
 8014d98:	b29a      	uxth	r2, r3
 8014d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014da2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014da8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014daa:	005b      	lsls	r3, r3, #1
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d206      	bcs.n	8014dc0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014db6:	005b      	lsls	r3, r3, #1
 8014db8:	b29a      	uxth	r2, r3
 8014dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8014dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dc2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8014dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8014dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dcc:	2200      	movs	r2, #0
 8014dce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8014dd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014dd4:	f004 fd3e 	bl	8019854 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8014dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dda:	7d1b      	ldrb	r3, [r3, #20]
 8014ddc:	2b06      	cmp	r3, #6
 8014dde:	d111      	bne.n	8014e04 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8014de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014de2:	8b5b      	ldrh	r3, [r3, #26]
 8014de4:	f003 0310 	and.w	r3, r3, #16
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d00b      	beq.n	8014e04 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014dec:	4b9d      	ldr	r3, [pc, #628]	@ (8015064 <tcp_slowtmr+0x588>)
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014df2:	6a1b      	ldr	r3, [r3, #32]
 8014df4:	1ad3      	subs	r3, r2, r3
 8014df6:	2b28      	cmp	r3, #40	@ 0x28
 8014df8:	d904      	bls.n	8014e04 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8014dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014dfe:	3301      	adds	r3, #1
 8014e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e06:	7a5b      	ldrb	r3, [r3, #9]
 8014e08:	f003 0308 	and.w	r3, r3, #8
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d04c      	beq.n	8014eaa <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8014e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e12:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014e14:	2b04      	cmp	r3, #4
 8014e16:	d003      	beq.n	8014e20 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e1a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014e1c:	2b07      	cmp	r3, #7
 8014e1e:	d144      	bne.n	8014eaa <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e20:	4b90      	ldr	r3, [pc, #576]	@ (8015064 <tcp_slowtmr+0x588>)
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e26:	6a1b      	ldr	r3, [r3, #32]
 8014e28:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014e30:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8014e34:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8014e38:	498b      	ldr	r1, [pc, #556]	@ (8015068 <tcp_slowtmr+0x58c>)
 8014e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8014e3e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d90a      	bls.n	8014e5a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8014e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e48:	3301      	adds	r3, #1
 8014e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e52:	3301      	adds	r3, #1
 8014e54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014e58:	e027      	b.n	8014eaa <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e5a:	4b82      	ldr	r3, [pc, #520]	@ (8015064 <tcp_slowtmr+0x588>)
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e60:	6a1b      	ldr	r3, [r3, #32]
 8014e62:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e66:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e6c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014e70:	4618      	mov	r0, r3
 8014e72:	4b7e      	ldr	r3, [pc, #504]	@ (801506c <tcp_slowtmr+0x590>)
 8014e74:	fb00 f303 	mul.w	r3, r0, r3
 8014e78:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014e7a:	497b      	ldr	r1, [pc, #492]	@ (8015068 <tcp_slowtmr+0x58c>)
 8014e7c:	fba1 1303 	umull	r1, r3, r1, r3
 8014e80:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d911      	bls.n	8014eaa <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8014e86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e88:	f004 ffe8 	bl	8019e5c <tcp_keepalive>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8014e92:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d107      	bne.n	8014eaa <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8014e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e9c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	b2da      	uxtb	r2, r3
 8014ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ea6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8014eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d011      	beq.n	8014ed6 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8015064 <tcp_slowtmr+0x588>)
 8014eb4:	681a      	ldr	r2, [r3, #0]
 8014eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eb8:	6a1b      	ldr	r3, [r3, #32]
 8014eba:	1ad2      	subs	r2, r2, r3
 8014ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ebe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	460b      	mov	r3, r1
 8014ec6:	005b      	lsls	r3, r3, #1
 8014ec8:	440b      	add	r3, r1
 8014eca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d302      	bcc.n	8014ed6 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8014ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ed2:	f000 fea9 	bl	8015c28 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8014ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ed8:	7d1b      	ldrb	r3, [r3, #20]
 8014eda:	2b03      	cmp	r3, #3
 8014edc:	d10b      	bne.n	8014ef6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014ede:	4b61      	ldr	r3, [pc, #388]	@ (8015064 <tcp_slowtmr+0x588>)
 8014ee0:	681a      	ldr	r2, [r3, #0]
 8014ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee4:	6a1b      	ldr	r3, [r3, #32]
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	2b28      	cmp	r3, #40	@ 0x28
 8014eea:	d904      	bls.n	8014ef6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8014eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8014ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ef8:	7d1b      	ldrb	r3, [r3, #20]
 8014efa:	2b09      	cmp	r3, #9
 8014efc:	d10b      	bne.n	8014f16 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014efe:	4b59      	ldr	r3, [pc, #356]	@ (8015064 <tcp_slowtmr+0x588>)
 8014f00:	681a      	ldr	r2, [r3, #0]
 8014f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f04:	6a1b      	ldr	r3, [r3, #32]
 8014f06:	1ad3      	subs	r3, r2, r3
 8014f08:	2bf0      	cmp	r3, #240	@ 0xf0
 8014f0a:	d904      	bls.n	8014f16 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8014f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f10:	3301      	adds	r3, #1
 8014f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8014f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d060      	beq.n	8014fe0 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8014f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f24:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8014f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f28:	f000 fcca 	bl	80158c0 <tcp_pcb_purge>
      if (prev != NULL) {
 8014f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d010      	beq.n	8014f54 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014f32:	4b4f      	ldr	r3, [pc, #316]	@ (8015070 <tcp_slowtmr+0x594>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d106      	bne.n	8014f4a <tcp_slowtmr+0x46e>
 8014f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8015074 <tcp_slowtmr+0x598>)
 8014f3e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8014f42:	494d      	ldr	r1, [pc, #308]	@ (8015078 <tcp_slowtmr+0x59c>)
 8014f44:	484d      	ldr	r0, [pc, #308]	@ (801507c <tcp_slowtmr+0x5a0>)
 8014f46:	f009 fa0d 	bl	801e364 <iprintf>
        prev->next = pcb->next;
 8014f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f4c:	68da      	ldr	r2, [r3, #12]
 8014f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f50:	60da      	str	r2, [r3, #12]
 8014f52:	e00f      	b.n	8014f74 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014f54:	4b46      	ldr	r3, [pc, #280]	@ (8015070 <tcp_slowtmr+0x594>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d006      	beq.n	8014f6c <tcp_slowtmr+0x490>
 8014f5e:	4b45      	ldr	r3, [pc, #276]	@ (8015074 <tcp_slowtmr+0x598>)
 8014f60:	f240 5271 	movw	r2, #1393	@ 0x571
 8014f64:	4946      	ldr	r1, [pc, #280]	@ (8015080 <tcp_slowtmr+0x5a4>)
 8014f66:	4845      	ldr	r0, [pc, #276]	@ (801507c <tcp_slowtmr+0x5a0>)
 8014f68:	f009 f9fc 	bl	801e364 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f6e:	68db      	ldr	r3, [r3, #12]
 8014f70:	4a3f      	ldr	r2, [pc, #252]	@ (8015070 <tcp_slowtmr+0x594>)
 8014f72:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8014f74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d013      	beq.n	8014fa4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f7e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f82:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014f84:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8014f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f88:	3304      	adds	r3, #4
 8014f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f8c:	8ad2      	ldrh	r2, [r2, #22]
 8014f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014f90:	8b09      	ldrh	r1, [r1, #24]
 8014f92:	9102      	str	r1, [sp, #8]
 8014f94:	9201      	str	r2, [sp, #4]
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	462b      	mov	r3, r5
 8014f9a:	4622      	mov	r2, r4
 8014f9c:	4601      	mov	r1, r0
 8014f9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014fa0:	f004 fea8 	bl	8019cf4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8014fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fa6:	691b      	ldr	r3, [r3, #16]
 8014fa8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fac:	7d1b      	ldrb	r3, [r3, #20]
 8014fae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014fba:	6838      	ldr	r0, [r7, #0]
 8014fbc:	f7ff f994 	bl	80142e8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014fc0:	4b30      	ldr	r3, [pc, #192]	@ (8015084 <tcp_slowtmr+0x5a8>)
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d004      	beq.n	8014fd6 <tcp_slowtmr+0x4fa>
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	f06f 010c 	mvn.w	r1, #12
 8014fd2:	68b8      	ldr	r0, [r7, #8]
 8014fd4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8015084 <tcp_slowtmr+0x5a8>)
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d037      	beq.n	801504e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8014fde:	e590      	b.n	8014b02 <tcp_slowtmr+0x26>
      prev = pcb;
 8014fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fe6:	68db      	ldr	r3, [r3, #12]
 8014fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8014fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fec:	7f1b      	ldrb	r3, [r3, #28]
 8014fee:	3301      	adds	r3, #1
 8014ff0:	b2da      	uxtb	r2, r3
 8014ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ff4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ff8:	7f1a      	ldrb	r2, [r3, #28]
 8014ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ffc:	7f5b      	ldrb	r3, [r3, #29]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d325      	bcc.n	801504e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8015002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015004:	2200      	movs	r2, #0
 8015006:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015008:	4b1e      	ldr	r3, [pc, #120]	@ (8015084 <tcp_slowtmr+0x5a8>)
 801500a:	2200      	movs	r2, #0
 801500c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801500e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015014:	2b00      	cmp	r3, #0
 8015016:	d00b      	beq.n	8015030 <tcp_slowtmr+0x554>
 8015018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801501a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801501e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015020:	6912      	ldr	r2, [r2, #16]
 8015022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015024:	4610      	mov	r0, r2
 8015026:	4798      	blx	r3
 8015028:	4603      	mov	r3, r0
 801502a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801502e:	e002      	b.n	8015036 <tcp_slowtmr+0x55a>
 8015030:	2300      	movs	r3, #0
 8015032:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015036:	4b13      	ldr	r3, [pc, #76]	@ (8015084 <tcp_slowtmr+0x5a8>)
 8015038:	781b      	ldrb	r3, [r3, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	f47f ad60 	bne.w	8014b00 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015040:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015044:	2b00      	cmp	r3, #0
 8015046:	d102      	bne.n	801504e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8015048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801504a:	f004 f89f 	bl	801918c <tcp_output>
  while (pcb != NULL) {
 801504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015050:	2b00      	cmp	r3, #0
 8015052:	f47f ad5c 	bne.w	8014b0e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015056:	2300      	movs	r3, #0
 8015058:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801505a:	4b0b      	ldr	r3, [pc, #44]	@ (8015088 <tcp_slowtmr+0x5ac>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015060:	e067      	b.n	8015132 <tcp_slowtmr+0x656>
 8015062:	bf00      	nop
 8015064:	2000fcbc 	.word	0x2000fcbc
 8015068:	10624dd3 	.word	0x10624dd3
 801506c:	000124f8 	.word	0x000124f8
 8015070:	2000fcc8 	.word	0x2000fcc8
 8015074:	08022468 	.word	0x08022468
 8015078:	080228a0 	.word	0x080228a0
 801507c:	080224ac 	.word	0x080224ac
 8015080:	080228cc 	.word	0x080228cc
 8015084:	2000fcd0 	.word	0x2000fcd0
 8015088:	2000fccc 	.word	0x2000fccc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801508e:	7d1b      	ldrb	r3, [r3, #20]
 8015090:	2b0a      	cmp	r3, #10
 8015092:	d006      	beq.n	80150a2 <tcp_slowtmr+0x5c6>
 8015094:	4b2b      	ldr	r3, [pc, #172]	@ (8015144 <tcp_slowtmr+0x668>)
 8015096:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801509a:	492b      	ldr	r1, [pc, #172]	@ (8015148 <tcp_slowtmr+0x66c>)
 801509c:	482b      	ldr	r0, [pc, #172]	@ (801514c <tcp_slowtmr+0x670>)
 801509e:	f009 f961 	bl	801e364 <iprintf>
    pcb_remove = 0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80150a8:	4b29      	ldr	r3, [pc, #164]	@ (8015150 <tcp_slowtmr+0x674>)
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ae:	6a1b      	ldr	r3, [r3, #32]
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80150b4:	d904      	bls.n	80150c0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80150b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150ba:	3301      	adds	r3, #1
 80150bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80150c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d02f      	beq.n	8015128 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80150c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150ca:	f000 fbf9 	bl	80158c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80150ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d010      	beq.n	80150f6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80150d4:	4b1f      	ldr	r3, [pc, #124]	@ (8015154 <tcp_slowtmr+0x678>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80150da:	429a      	cmp	r2, r3
 80150dc:	d106      	bne.n	80150ec <tcp_slowtmr+0x610>
 80150de:	4b19      	ldr	r3, [pc, #100]	@ (8015144 <tcp_slowtmr+0x668>)
 80150e0:	f240 52af 	movw	r2, #1455	@ 0x5af
 80150e4:	491c      	ldr	r1, [pc, #112]	@ (8015158 <tcp_slowtmr+0x67c>)
 80150e6:	4819      	ldr	r0, [pc, #100]	@ (801514c <tcp_slowtmr+0x670>)
 80150e8:	f009 f93c 	bl	801e364 <iprintf>
        prev->next = pcb->next;
 80150ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ee:	68da      	ldr	r2, [r3, #12]
 80150f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150f2:	60da      	str	r2, [r3, #12]
 80150f4:	e00f      	b.n	8015116 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80150f6:	4b17      	ldr	r3, [pc, #92]	@ (8015154 <tcp_slowtmr+0x678>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d006      	beq.n	801510e <tcp_slowtmr+0x632>
 8015100:	4b10      	ldr	r3, [pc, #64]	@ (8015144 <tcp_slowtmr+0x668>)
 8015102:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8015106:	4915      	ldr	r1, [pc, #84]	@ (801515c <tcp_slowtmr+0x680>)
 8015108:	4810      	ldr	r0, [pc, #64]	@ (801514c <tcp_slowtmr+0x670>)
 801510a:	f009 f92b 	bl	801e364 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801510e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	4a10      	ldr	r2, [pc, #64]	@ (8015154 <tcp_slowtmr+0x678>)
 8015114:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015118:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511c:	68db      	ldr	r3, [r3, #12]
 801511e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015120:	69f8      	ldr	r0, [r7, #28]
 8015122:	f7ff f8e1 	bl	80142e8 <tcp_free>
 8015126:	e004      	b.n	8015132 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801512a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015134:	2b00      	cmp	r3, #0
 8015136:	d1a9      	bne.n	801508c <tcp_slowtmr+0x5b0>
    }
  }
}
 8015138:	bf00      	nop
 801513a:	bf00      	nop
 801513c:	3730      	adds	r7, #48	@ 0x30
 801513e:	46bd      	mov	sp, r7
 8015140:	bdb0      	pop	{r4, r5, r7, pc}
 8015142:	bf00      	nop
 8015144:	08022468 	.word	0x08022468
 8015148:	080228f8 	.word	0x080228f8
 801514c:	080224ac 	.word	0x080224ac
 8015150:	2000fcbc 	.word	0x2000fcbc
 8015154:	2000fccc 	.word	0x2000fccc
 8015158:	08022928 	.word	0x08022928
 801515c:	08022950 	.word	0x08022950

08015160 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015166:	4b2d      	ldr	r3, [pc, #180]	@ (801521c <tcp_fasttmr+0xbc>)
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	3301      	adds	r3, #1
 801516c:	b2da      	uxtb	r2, r3
 801516e:	4b2b      	ldr	r3, [pc, #172]	@ (801521c <tcp_fasttmr+0xbc>)
 8015170:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015172:	4b2b      	ldr	r3, [pc, #172]	@ (8015220 <tcp_fasttmr+0xc0>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015178:	e048      	b.n	801520c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	7f9a      	ldrb	r2, [r3, #30]
 801517e:	4b27      	ldr	r3, [pc, #156]	@ (801521c <tcp_fasttmr+0xbc>)
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	429a      	cmp	r2, r3
 8015184:	d03f      	beq.n	8015206 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015186:	4b25      	ldr	r3, [pc, #148]	@ (801521c <tcp_fasttmr+0xbc>)
 8015188:	781a      	ldrb	r2, [r3, #0]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	8b5b      	ldrh	r3, [r3, #26]
 8015192:	f003 0301 	and.w	r3, r3, #1
 8015196:	2b00      	cmp	r3, #0
 8015198:	d010      	beq.n	80151bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	8b5b      	ldrh	r3, [r3, #26]
 801519e:	f043 0302 	orr.w	r3, r3, #2
 80151a2:	b29a      	uxth	r2, r3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f003 ffef 	bl	801918c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	8b5b      	ldrh	r3, [r3, #26]
 80151b2:	f023 0303 	bic.w	r3, r3, #3
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	8b5b      	ldrh	r3, [r3, #26]
 80151c0:	f003 0308 	and.w	r3, r3, #8
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d009      	beq.n	80151dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	8b5b      	ldrh	r3, [r3, #26]
 80151cc:	f023 0308 	bic.w	r3, r3, #8
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f7ff fa1a 	bl	8014610 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d00a      	beq.n	8015200 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80151ea:	4b0e      	ldr	r3, [pc, #56]	@ (8015224 <tcp_fasttmr+0xc4>)
 80151ec:	2200      	movs	r2, #0
 80151ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f000 f819 	bl	8015228 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80151f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015224 <tcp_fasttmr+0xc4>)
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d000      	beq.n	8015200 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80151fe:	e7b8      	b.n	8015172 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	607b      	str	r3, [r7, #4]
 8015204:	e002      	b.n	801520c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	68db      	ldr	r3, [r3, #12]
 801520a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d1b3      	bne.n	801517a <tcp_fasttmr+0x1a>
    }
  }
}
 8015212:	bf00      	nop
 8015214:	bf00      	nop
 8015216:	3708      	adds	r7, #8
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}
 801521c:	2000fcd2 	.word	0x2000fcd2
 8015220:	2000fcc8 	.word	0x2000fcc8
 8015224:	2000fcd0 	.word	0x2000fcd0

08015228 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015228:	b590      	push	{r4, r7, lr}
 801522a:	b085      	sub	sp, #20
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d109      	bne.n	801524a <tcp_process_refused_data+0x22>
 8015236:	4b37      	ldr	r3, [pc, #220]	@ (8015314 <tcp_process_refused_data+0xec>)
 8015238:	f240 6209 	movw	r2, #1545	@ 0x609
 801523c:	4936      	ldr	r1, [pc, #216]	@ (8015318 <tcp_process_refused_data+0xf0>)
 801523e:	4837      	ldr	r0, [pc, #220]	@ (801531c <tcp_process_refused_data+0xf4>)
 8015240:	f009 f890 	bl	801e364 <iprintf>
 8015244:	f06f 030f 	mvn.w	r3, #15
 8015248:	e060      	b.n	801530c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801524e:	7b5b      	ldrb	r3, [r3, #13]
 8015250:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015256:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2200      	movs	r2, #0
 801525c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015264:	2b00      	cmp	r3, #0
 8015266:	d00b      	beq.n	8015280 <tcp_process_refused_data+0x58>
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6918      	ldr	r0, [r3, #16]
 8015272:	2300      	movs	r3, #0
 8015274:	68ba      	ldr	r2, [r7, #8]
 8015276:	6879      	ldr	r1, [r7, #4]
 8015278:	47a0      	blx	r4
 801527a:	4603      	mov	r3, r0
 801527c:	73fb      	strb	r3, [r7, #15]
 801527e:	e007      	b.n	8015290 <tcp_process_refused_data+0x68>
 8015280:	2300      	movs	r3, #0
 8015282:	68ba      	ldr	r2, [r7, #8]
 8015284:	6879      	ldr	r1, [r7, #4]
 8015286:	2000      	movs	r0, #0
 8015288:	f000 f8a4 	bl	80153d4 <tcp_recv_null>
 801528c:	4603      	mov	r3, r0
 801528e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d12a      	bne.n	80152ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015298:	7bbb      	ldrb	r3, [r7, #14]
 801529a:	f003 0320 	and.w	r3, r3, #32
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d033      	beq.n	801530a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80152aa:	d005      	beq.n	80152b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152b0:	3301      	adds	r3, #1
 80152b2:	b29a      	uxth	r2, r3
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d00b      	beq.n	80152da <tcp_process_refused_data+0xb2>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6918      	ldr	r0, [r3, #16]
 80152cc:	2300      	movs	r3, #0
 80152ce:	2200      	movs	r2, #0
 80152d0:	6879      	ldr	r1, [r7, #4]
 80152d2:	47a0      	blx	r4
 80152d4:	4603      	mov	r3, r0
 80152d6:	73fb      	strb	r3, [r7, #15]
 80152d8:	e001      	b.n	80152de <tcp_process_refused_data+0xb6>
 80152da:	2300      	movs	r3, #0
 80152dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80152de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152e2:	f113 0f0d 	cmn.w	r3, #13
 80152e6:	d110      	bne.n	801530a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80152e8:	f06f 030c 	mvn.w	r3, #12
 80152ec:	e00e      	b.n	801530c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80152ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152f2:	f113 0f0d 	cmn.w	r3, #13
 80152f6:	d102      	bne.n	80152fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80152f8:	f06f 030c 	mvn.w	r3, #12
 80152fc:	e006      	b.n	801530c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	68ba      	ldr	r2, [r7, #8]
 8015302:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8015304:	f06f 0304 	mvn.w	r3, #4
 8015308:	e000      	b.n	801530c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801530a:	2300      	movs	r3, #0
}
 801530c:	4618      	mov	r0, r3
 801530e:	3714      	adds	r7, #20
 8015310:	46bd      	mov	sp, r7
 8015312:	bd90      	pop	{r4, r7, pc}
 8015314:	08022468 	.word	0x08022468
 8015318:	08022978 	.word	0x08022978
 801531c:	080224ac 	.word	0x080224ac

08015320 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015328:	e007      	b.n	801533a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f000 f80a 	bl	801534a <tcp_seg_free>
    seg = next;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d1f4      	bne.n	801532a <tcp_segs_free+0xa>
  }
}
 8015340:	bf00      	nop
 8015342:	bf00      	nop
 8015344:	3710      	adds	r7, #16
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}

0801534a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b082      	sub	sp, #8
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d00c      	beq.n	8015372 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d004      	beq.n	801536a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	4618      	mov	r0, r3
 8015366:	f7fe fba9 	bl	8013abc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801536a:	6879      	ldr	r1, [r7, #4]
 801536c:	2003      	movs	r0, #3
 801536e:	f7fd fd01 	bl	8012d74 <memp_free>
  }
}
 8015372:	bf00      	nop
 8015374:	3708      	adds	r7, #8
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}
	...

0801537c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <tcp_seg_copy+0x1c>
 801538a:	4b0f      	ldr	r3, [pc, #60]	@ (80153c8 <tcp_seg_copy+0x4c>)
 801538c:	f240 6282 	movw	r2, #1666	@ 0x682
 8015390:	490e      	ldr	r1, [pc, #56]	@ (80153cc <tcp_seg_copy+0x50>)
 8015392:	480f      	ldr	r0, [pc, #60]	@ (80153d0 <tcp_seg_copy+0x54>)
 8015394:	f008 ffe6 	bl	801e364 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015398:	2003      	movs	r0, #3
 801539a:	f7fd fc75 	bl	8012c88 <memp_malloc>
 801539e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d101      	bne.n	80153aa <tcp_seg_copy+0x2e>
    return NULL;
 80153a6:	2300      	movs	r3, #0
 80153a8:	e00a      	b.n	80153c0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80153aa:	2210      	movs	r2, #16
 80153ac:	6879      	ldr	r1, [r7, #4]
 80153ae:	68f8      	ldr	r0, [r7, #12]
 80153b0:	f009 fa39 	bl	801e826 <memcpy>
  pbuf_ref(cseg->p);
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	685b      	ldr	r3, [r3, #4]
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7fe fc25 	bl	8013c08 <pbuf_ref>
  return cseg;
 80153be:	68fb      	ldr	r3, [r7, #12]
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3710      	adds	r7, #16
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	08022468 	.word	0x08022468
 80153cc:	080229bc 	.word	0x080229bc
 80153d0:	080224ac 	.word	0x080224ac

080153d4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b084      	sub	sp, #16
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	607a      	str	r2, [r7, #4]
 80153e0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d109      	bne.n	80153fc <tcp_recv_null+0x28>
 80153e8:	4b12      	ldr	r3, [pc, #72]	@ (8015434 <tcp_recv_null+0x60>)
 80153ea:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80153ee:	4912      	ldr	r1, [pc, #72]	@ (8015438 <tcp_recv_null+0x64>)
 80153f0:	4812      	ldr	r0, [pc, #72]	@ (801543c <tcp_recv_null+0x68>)
 80153f2:	f008 ffb7 	bl	801e364 <iprintf>
 80153f6:	f06f 030f 	mvn.w	r3, #15
 80153fa:	e016      	b.n	801542a <tcp_recv_null+0x56>

  if (p != NULL) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d009      	beq.n	8015416 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	891b      	ldrh	r3, [r3, #8]
 8015406:	4619      	mov	r1, r3
 8015408:	68b8      	ldr	r0, [r7, #8]
 801540a:	f7ff fb17 	bl	8014a3c <tcp_recved>
    pbuf_free(p);
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7fe fb54 	bl	8013abc <pbuf_free>
 8015414:	e008      	b.n	8015428 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d104      	bne.n	8015428 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801541e:	68b8      	ldr	r0, [r7, #8]
 8015420:	f7ff f960 	bl	80146e4 <tcp_close>
 8015424:	4603      	mov	r3, r0
 8015426:	e000      	b.n	801542a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015428:	2300      	movs	r3, #0
}
 801542a:	4618      	mov	r0, r3
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	08022468 	.word	0x08022468
 8015438:	080229d8 	.word	0x080229d8
 801543c:	080224ac 	.word	0x080224ac

08015440 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b086      	sub	sp, #24
 8015444:	af00      	add	r7, sp, #0
 8015446:	4603      	mov	r3, r0
 8015448:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801544a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801544e:	2b00      	cmp	r3, #0
 8015450:	db01      	blt.n	8015456 <tcp_kill_prio+0x16>
 8015452:	79fb      	ldrb	r3, [r7, #7]
 8015454:	e000      	b.n	8015458 <tcp_kill_prio+0x18>
 8015456:	237f      	movs	r3, #127	@ 0x7f
 8015458:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801545a:	7afb      	ldrb	r3, [r7, #11]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d034      	beq.n	80154ca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015460:	7afb      	ldrb	r3, [r7, #11]
 8015462:	3b01      	subs	r3, #1
 8015464:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015466:	2300      	movs	r3, #0
 8015468:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801546a:	2300      	movs	r3, #0
 801546c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801546e:	4b19      	ldr	r3, [pc, #100]	@ (80154d4 <tcp_kill_prio+0x94>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	617b      	str	r3, [r7, #20]
 8015474:	e01f      	b.n	80154b6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	7d5b      	ldrb	r3, [r3, #21]
 801547a:	7afa      	ldrb	r2, [r7, #11]
 801547c:	429a      	cmp	r2, r3
 801547e:	d80c      	bhi.n	801549a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015484:	7afa      	ldrb	r2, [r7, #11]
 8015486:	429a      	cmp	r2, r3
 8015488:	d112      	bne.n	80154b0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801548a:	4b13      	ldr	r3, [pc, #76]	@ (80154d8 <tcp_kill_prio+0x98>)
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	6a1b      	ldr	r3, [r3, #32]
 8015492:	1ad3      	subs	r3, r2, r3
 8015494:	68fa      	ldr	r2, [r7, #12]
 8015496:	429a      	cmp	r2, r3
 8015498:	d80a      	bhi.n	80154b0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801549a:	4b0f      	ldr	r3, [pc, #60]	@ (80154d8 <tcp_kill_prio+0x98>)
 801549c:	681a      	ldr	r2, [r3, #0]
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	6a1b      	ldr	r3, [r3, #32]
 80154a2:	1ad3      	subs	r3, r2, r3
 80154a4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	7d5b      	ldrb	r3, [r3, #21]
 80154ae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	617b      	str	r3, [r7, #20]
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d1dc      	bne.n	8015476 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d004      	beq.n	80154cc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80154c2:	6938      	ldr	r0, [r7, #16]
 80154c4:	f7ff fa54 	bl	8014970 <tcp_abort>
 80154c8:	e000      	b.n	80154cc <tcp_kill_prio+0x8c>
    return;
 80154ca:	bf00      	nop
  }
}
 80154cc:	3718      	adds	r7, #24
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	2000fcc8 	.word	0x2000fcc8
 80154d8:	2000fcbc 	.word	0x2000fcbc

080154dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b086      	sub	sp, #24
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	4603      	mov	r3, r0
 80154e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80154e6:	79fb      	ldrb	r3, [r7, #7]
 80154e8:	2b08      	cmp	r3, #8
 80154ea:	d009      	beq.n	8015500 <tcp_kill_state+0x24>
 80154ec:	79fb      	ldrb	r3, [r7, #7]
 80154ee:	2b09      	cmp	r3, #9
 80154f0:	d006      	beq.n	8015500 <tcp_kill_state+0x24>
 80154f2:	4b1a      	ldr	r3, [pc, #104]	@ (801555c <tcp_kill_state+0x80>)
 80154f4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80154f8:	4919      	ldr	r1, [pc, #100]	@ (8015560 <tcp_kill_state+0x84>)
 80154fa:	481a      	ldr	r0, [pc, #104]	@ (8015564 <tcp_kill_state+0x88>)
 80154fc:	f008 ff32 	bl	801e364 <iprintf>

  inactivity = 0;
 8015500:	2300      	movs	r3, #0
 8015502:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015504:	2300      	movs	r3, #0
 8015506:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015508:	4b17      	ldr	r3, [pc, #92]	@ (8015568 <tcp_kill_state+0x8c>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	617b      	str	r3, [r7, #20]
 801550e:	e017      	b.n	8015540 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	7d1b      	ldrb	r3, [r3, #20]
 8015514:	79fa      	ldrb	r2, [r7, #7]
 8015516:	429a      	cmp	r2, r3
 8015518:	d10f      	bne.n	801553a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801551a:	4b14      	ldr	r3, [pc, #80]	@ (801556c <tcp_kill_state+0x90>)
 801551c:	681a      	ldr	r2, [r3, #0]
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	6a1b      	ldr	r3, [r3, #32]
 8015522:	1ad3      	subs	r3, r2, r3
 8015524:	68fa      	ldr	r2, [r7, #12]
 8015526:	429a      	cmp	r2, r3
 8015528:	d807      	bhi.n	801553a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801552a:	4b10      	ldr	r3, [pc, #64]	@ (801556c <tcp_kill_state+0x90>)
 801552c:	681a      	ldr	r2, [r3, #0]
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	6a1b      	ldr	r3, [r3, #32]
 8015532:	1ad3      	subs	r3, r2, r3
 8015534:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	617b      	str	r3, [r7, #20]
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d1e4      	bne.n	8015510 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d003      	beq.n	8015554 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801554c:	2100      	movs	r1, #0
 801554e:	6938      	ldr	r0, [r7, #16]
 8015550:	f7ff f950 	bl	80147f4 <tcp_abandon>
  }
}
 8015554:	bf00      	nop
 8015556:	3718      	adds	r7, #24
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	08022468 	.word	0x08022468
 8015560:	080229f4 	.word	0x080229f4
 8015564:	080224ac 	.word	0x080224ac
 8015568:	2000fcc8 	.word	0x2000fcc8
 801556c:	2000fcbc 	.word	0x2000fcbc

08015570 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b084      	sub	sp, #16
 8015574:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015576:	2300      	movs	r3, #0
 8015578:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801557a:	2300      	movs	r3, #0
 801557c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801557e:	4b12      	ldr	r3, [pc, #72]	@ (80155c8 <tcp_kill_timewait+0x58>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	60fb      	str	r3, [r7, #12]
 8015584:	e012      	b.n	80155ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015586:	4b11      	ldr	r3, [pc, #68]	@ (80155cc <tcp_kill_timewait+0x5c>)
 8015588:	681a      	ldr	r2, [r3, #0]
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	6a1b      	ldr	r3, [r3, #32]
 801558e:	1ad3      	subs	r3, r2, r3
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	429a      	cmp	r2, r3
 8015594:	d807      	bhi.n	80155a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015596:	4b0d      	ldr	r3, [pc, #52]	@ (80155cc <tcp_kill_timewait+0x5c>)
 8015598:	681a      	ldr	r2, [r3, #0]
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	6a1b      	ldr	r3, [r3, #32]
 801559e:	1ad3      	subs	r3, r2, r3
 80155a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	68db      	ldr	r3, [r3, #12]
 80155aa:	60fb      	str	r3, [r7, #12]
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d1e9      	bne.n	8015586 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d002      	beq.n	80155be <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80155b8:	68b8      	ldr	r0, [r7, #8]
 80155ba:	f7ff f9d9 	bl	8014970 <tcp_abort>
  }
}
 80155be:	bf00      	nop
 80155c0:	3710      	adds	r7, #16
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	2000fccc 	.word	0x2000fccc
 80155cc:	2000fcbc 	.word	0x2000fcbc

080155d0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80155d6:	4b10      	ldr	r3, [pc, #64]	@ (8015618 <tcp_handle_closepend+0x48>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80155dc:	e014      	b.n	8015608 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	8b5b      	ldrh	r3, [r3, #26]
 80155e8:	f003 0308 	and.w	r3, r3, #8
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d009      	beq.n	8015604 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	8b5b      	ldrh	r3, [r3, #26]
 80155f4:	f023 0308 	bic.w	r3, r3, #8
 80155f8:	b29a      	uxth	r2, r3
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7ff f806 	bl	8014610 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d1e7      	bne.n	80155de <tcp_handle_closepend+0xe>
  }
}
 801560e:	bf00      	nop
 8015610:	bf00      	nop
 8015612:	3708      	adds	r7, #8
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	2000fcc8 	.word	0x2000fcc8

0801561c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	4603      	mov	r3, r0
 8015624:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015626:	2001      	movs	r0, #1
 8015628:	f7fd fb2e 	bl	8012c88 <memp_malloc>
 801562c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d126      	bne.n	8015682 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015634:	f7ff ffcc 	bl	80155d0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015638:	f7ff ff9a 	bl	8015570 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801563c:	2001      	movs	r0, #1
 801563e:	f7fd fb23 	bl	8012c88 <memp_malloc>
 8015642:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d11b      	bne.n	8015682 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801564a:	2009      	movs	r0, #9
 801564c:	f7ff ff46 	bl	80154dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015650:	2001      	movs	r0, #1
 8015652:	f7fd fb19 	bl	8012c88 <memp_malloc>
 8015656:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d111      	bne.n	8015682 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801565e:	2008      	movs	r0, #8
 8015660:	f7ff ff3c 	bl	80154dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015664:	2001      	movs	r0, #1
 8015666:	f7fd fb0f 	bl	8012c88 <memp_malloc>
 801566a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d107      	bne.n	8015682 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015672:	79fb      	ldrb	r3, [r7, #7]
 8015674:	4618      	mov	r0, r3
 8015676:	f7ff fee3 	bl	8015440 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801567a:	2001      	movs	r0, #1
 801567c:	f7fd fb04 	bl	8012c88 <memp_malloc>
 8015680:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d03f      	beq.n	8015708 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015688:	229c      	movs	r2, #156	@ 0x9c
 801568a:	2100      	movs	r1, #0
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f008 fffb 	bl	801e688 <memset>
    pcb->prio = prio;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	79fa      	ldrb	r2, [r7, #7]
 8015696:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801569e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80156a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	22ff      	movs	r2, #255	@ 0xff
 80156b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80156be:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	2206      	movs	r2, #6
 80156c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2206      	movs	r2, #6
 80156cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80156d4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2201      	movs	r2, #1
 80156da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80156de:	4b0d      	ldr	r3, [pc, #52]	@ (8015714 <tcp_alloc+0xf8>)
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80156e6:	4b0c      	ldr	r3, [pc, #48]	@ (8015718 <tcp_alloc+0xfc>)
 80156e8:	781a      	ldrb	r2, [r3, #0]
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80156f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	4a08      	ldr	r2, [pc, #32]	@ (801571c <tcp_alloc+0x100>)
 80156fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	4a07      	ldr	r2, [pc, #28]	@ (8015720 <tcp_alloc+0x104>)
 8015704:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015708:	68fb      	ldr	r3, [r7, #12]
}
 801570a:	4618      	mov	r0, r3
 801570c:	3710      	adds	r7, #16
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
 8015712:	bf00      	nop
 8015714:	2000fcbc 	.word	0x2000fcbc
 8015718:	2000fcd2 	.word	0x2000fcd2
 801571c:	080153d5 	.word	0x080153d5
 8015720:	006ddd00 	.word	0x006ddd00

08015724 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b084      	sub	sp, #16
 8015728:	af00      	add	r7, sp, #0
 801572a:	4603      	mov	r3, r0
 801572c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801572e:	2040      	movs	r0, #64	@ 0x40
 8015730:	f7ff ff74 	bl	801561c <tcp_alloc>
 8015734:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015736:	68fb      	ldr	r3, [r7, #12]
}
 8015738:	4618      	mov	r0, r3
 801573a:	3710      	adds	r7, #16
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}

08015740 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015740:	b480      	push	{r7}
 8015742:	b083      	sub	sp, #12
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d002      	beq.n	8015756 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	683a      	ldr	r2, [r7, #0]
 8015754:	611a      	str	r2, [r3, #16]
  }
}
 8015756:	bf00      	nop
 8015758:	370c      	adds	r7, #12
 801575a:	46bd      	mov	sp, r7
 801575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015760:	4770      	bx	lr
	...

08015764 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d00e      	beq.n	8015792 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	7d1b      	ldrb	r3, [r3, #20]
 8015778:	2b01      	cmp	r3, #1
 801577a:	d106      	bne.n	801578a <tcp_recv+0x26>
 801577c:	4b07      	ldr	r3, [pc, #28]	@ (801579c <tcp_recv+0x38>)
 801577e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015782:	4907      	ldr	r1, [pc, #28]	@ (80157a0 <tcp_recv+0x3c>)
 8015784:	4807      	ldr	r0, [pc, #28]	@ (80157a4 <tcp_recv+0x40>)
 8015786:	f008 fded 	bl	801e364 <iprintf>
    pcb->recv = recv;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	683a      	ldr	r2, [r7, #0]
 801578e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015792:	bf00      	nop
 8015794:	3708      	adds	r7, #8
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	08022468 	.word	0x08022468
 80157a0:	08022a04 	.word	0x08022a04
 80157a4:	080224ac 	.word	0x080224ac

080157a8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d00e      	beq.n	80157d6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	7d1b      	ldrb	r3, [r3, #20]
 80157bc:	2b01      	cmp	r3, #1
 80157be:	d106      	bne.n	80157ce <tcp_sent+0x26>
 80157c0:	4b07      	ldr	r3, [pc, #28]	@ (80157e0 <tcp_sent+0x38>)
 80157c2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80157c6:	4907      	ldr	r1, [pc, #28]	@ (80157e4 <tcp_sent+0x3c>)
 80157c8:	4807      	ldr	r0, [pc, #28]	@ (80157e8 <tcp_sent+0x40>)
 80157ca:	f008 fdcb 	bl	801e364 <iprintf>
    pcb->sent = sent;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	683a      	ldr	r2, [r7, #0]
 80157d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80157d6:	bf00      	nop
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	08022468 	.word	0x08022468
 80157e4:	08022a2c 	.word	0x08022a2c
 80157e8:	080224ac 	.word	0x080224ac

080157ec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d00e      	beq.n	801581a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	7d1b      	ldrb	r3, [r3, #20]
 8015800:	2b01      	cmp	r3, #1
 8015802:	d106      	bne.n	8015812 <tcp_err+0x26>
 8015804:	4b07      	ldr	r3, [pc, #28]	@ (8015824 <tcp_err+0x38>)
 8015806:	f640 020d 	movw	r2, #2061	@ 0x80d
 801580a:	4907      	ldr	r1, [pc, #28]	@ (8015828 <tcp_err+0x3c>)
 801580c:	4807      	ldr	r0, [pc, #28]	@ (801582c <tcp_err+0x40>)
 801580e:	f008 fda9 	bl	801e364 <iprintf>
    pcb->errf = err;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	683a      	ldr	r2, [r7, #0]
 8015816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801581a:	bf00      	nop
 801581c:	3708      	adds	r7, #8
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	08022468 	.word	0x08022468
 8015828:	08022a54 	.word	0x08022a54
 801582c:	080224ac 	.word	0x080224ac

08015830 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015830:	b480      	push	{r7}
 8015832:	b085      	sub	sp, #20
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d008      	beq.n	8015852 <tcp_accept+0x22>
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	7d1b      	ldrb	r3, [r3, #20]
 8015844:	2b01      	cmp	r3, #1
 8015846:	d104      	bne.n	8015852 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	619a      	str	r2, [r3, #24]
  }
}
 8015852:	bf00      	nop
 8015854:	3714      	adds	r7, #20
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr
	...

08015860 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	60b9      	str	r1, [r7, #8]
 801586a:	4613      	mov	r3, r2
 801586c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d107      	bne.n	8015884 <tcp_poll+0x24>
 8015874:	4b0e      	ldr	r3, [pc, #56]	@ (80158b0 <tcp_poll+0x50>)
 8015876:	f640 023d 	movw	r2, #2109	@ 0x83d
 801587a:	490e      	ldr	r1, [pc, #56]	@ (80158b4 <tcp_poll+0x54>)
 801587c:	480e      	ldr	r0, [pc, #56]	@ (80158b8 <tcp_poll+0x58>)
 801587e:	f008 fd71 	bl	801e364 <iprintf>
 8015882:	e011      	b.n	80158a8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	7d1b      	ldrb	r3, [r3, #20]
 8015888:	2b01      	cmp	r3, #1
 801588a:	d106      	bne.n	801589a <tcp_poll+0x3a>
 801588c:	4b08      	ldr	r3, [pc, #32]	@ (80158b0 <tcp_poll+0x50>)
 801588e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8015892:	490a      	ldr	r1, [pc, #40]	@ (80158bc <tcp_poll+0x5c>)
 8015894:	4808      	ldr	r0, [pc, #32]	@ (80158b8 <tcp_poll+0x58>)
 8015896:	f008 fd65 	bl	801e364 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	68ba      	ldr	r2, [r7, #8]
 801589e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	79fa      	ldrb	r2, [r7, #7]
 80158a6:	775a      	strb	r2, [r3, #29]
}
 80158a8:	3710      	adds	r7, #16
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	08022468 	.word	0x08022468
 80158b4:	08022a7c 	.word	0x08022a7c
 80158b8:	080224ac 	.word	0x080224ac
 80158bc:	08022a94 	.word	0x08022a94

080158c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d107      	bne.n	80158de <tcp_pcb_purge+0x1e>
 80158ce:	4b21      	ldr	r3, [pc, #132]	@ (8015954 <tcp_pcb_purge+0x94>)
 80158d0:	f640 0251 	movw	r2, #2129	@ 0x851
 80158d4:	4920      	ldr	r1, [pc, #128]	@ (8015958 <tcp_pcb_purge+0x98>)
 80158d6:	4821      	ldr	r0, [pc, #132]	@ (801595c <tcp_pcb_purge+0x9c>)
 80158d8:	f008 fd44 	bl	801e364 <iprintf>
 80158dc:	e037      	b.n	801594e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	7d1b      	ldrb	r3, [r3, #20]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d033      	beq.n	801594e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80158ea:	2b0a      	cmp	r3, #10
 80158ec:	d02f      	beq.n	801594e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	d02b      	beq.n	801594e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d007      	beq.n	801590e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015902:	4618      	mov	r0, r3
 8015904:	f7fe f8da 	bl	8013abc <pbuf_free>
      pcb->refused_data = NULL;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2200      	movs	r2, #0
 801590c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015912:	2b00      	cmp	r3, #0
 8015914:	d002      	beq.n	801591c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f000 f986 	bl	8015c28 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015922:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015928:	4618      	mov	r0, r3
 801592a:	f7ff fcf9 	bl	8015320 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015932:	4618      	mov	r0, r3
 8015934:	f7ff fcf4 	bl	8015320 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2200      	movs	r2, #0
 801593c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2200      	movs	r2, #0
 801594a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801594e:	3708      	adds	r7, #8
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}
 8015954:	08022468 	.word	0x08022468
 8015958:	08022ab4 	.word	0x08022ab4
 801595c:	080224ac 	.word	0x080224ac

08015960 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801596a:	683b      	ldr	r3, [r7, #0]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d106      	bne.n	801597e <tcp_pcb_remove+0x1e>
 8015970:	4b3e      	ldr	r3, [pc, #248]	@ (8015a6c <tcp_pcb_remove+0x10c>)
 8015972:	f640 0283 	movw	r2, #2179	@ 0x883
 8015976:	493e      	ldr	r1, [pc, #248]	@ (8015a70 <tcp_pcb_remove+0x110>)
 8015978:	483e      	ldr	r0, [pc, #248]	@ (8015a74 <tcp_pcb_remove+0x114>)
 801597a:	f008 fcf3 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d106      	bne.n	8015992 <tcp_pcb_remove+0x32>
 8015984:	4b39      	ldr	r3, [pc, #228]	@ (8015a6c <tcp_pcb_remove+0x10c>)
 8015986:	f640 0284 	movw	r2, #2180	@ 0x884
 801598a:	493b      	ldr	r1, [pc, #236]	@ (8015a78 <tcp_pcb_remove+0x118>)
 801598c:	4839      	ldr	r0, [pc, #228]	@ (8015a74 <tcp_pcb_remove+0x114>)
 801598e:	f008 fce9 	bl	801e364 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	683a      	ldr	r2, [r7, #0]
 8015998:	429a      	cmp	r2, r3
 801599a:	d105      	bne.n	80159a8 <tcp_pcb_remove+0x48>
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	68da      	ldr	r2, [r3, #12]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	601a      	str	r2, [r3, #0]
 80159a6:	e013      	b.n	80159d0 <tcp_pcb_remove+0x70>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	60fb      	str	r3, [r7, #12]
 80159ae:	e00c      	b.n	80159ca <tcp_pcb_remove+0x6a>
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	68db      	ldr	r3, [r3, #12]
 80159b4:	683a      	ldr	r2, [r7, #0]
 80159b6:	429a      	cmp	r2, r3
 80159b8:	d104      	bne.n	80159c4 <tcp_pcb_remove+0x64>
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	68da      	ldr	r2, [r3, #12]
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	60da      	str	r2, [r3, #12]
 80159c2:	e005      	b.n	80159d0 <tcp_pcb_remove+0x70>
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	68db      	ldr	r3, [r3, #12]
 80159c8:	60fb      	str	r3, [r7, #12]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d1ef      	bne.n	80159b0 <tcp_pcb_remove+0x50>
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	2200      	movs	r2, #0
 80159d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80159d6:	6838      	ldr	r0, [r7, #0]
 80159d8:	f7ff ff72 	bl	80158c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	7d1b      	ldrb	r3, [r3, #20]
 80159e0:	2b0a      	cmp	r3, #10
 80159e2:	d013      	beq.n	8015a0c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80159e8:	2b01      	cmp	r3, #1
 80159ea:	d00f      	beq.n	8015a0c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	8b5b      	ldrh	r3, [r3, #26]
 80159f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d009      	beq.n	8015a0c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	8b5b      	ldrh	r3, [r3, #26]
 80159fc:	f043 0302 	orr.w	r3, r3, #2
 8015a00:	b29a      	uxth	r2, r3
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015a06:	6838      	ldr	r0, [r7, #0]
 8015a08:	f003 fbc0 	bl	801918c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	7d1b      	ldrb	r3, [r3, #20]
 8015a10:	2b01      	cmp	r3, #1
 8015a12:	d020      	beq.n	8015a56 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015a14:	683b      	ldr	r3, [r7, #0]
 8015a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d006      	beq.n	8015a2a <tcp_pcb_remove+0xca>
 8015a1c:	4b13      	ldr	r3, [pc, #76]	@ (8015a6c <tcp_pcb_remove+0x10c>)
 8015a1e:	f640 0293 	movw	r2, #2195	@ 0x893
 8015a22:	4916      	ldr	r1, [pc, #88]	@ (8015a7c <tcp_pcb_remove+0x11c>)
 8015a24:	4813      	ldr	r0, [pc, #76]	@ (8015a74 <tcp_pcb_remove+0x114>)
 8015a26:	f008 fc9d 	bl	801e364 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d006      	beq.n	8015a40 <tcp_pcb_remove+0xe0>
 8015a32:	4b0e      	ldr	r3, [pc, #56]	@ (8015a6c <tcp_pcb_remove+0x10c>)
 8015a34:	f640 0294 	movw	r2, #2196	@ 0x894
 8015a38:	4911      	ldr	r1, [pc, #68]	@ (8015a80 <tcp_pcb_remove+0x120>)
 8015a3a:	480e      	ldr	r0, [pc, #56]	@ (8015a74 <tcp_pcb_remove+0x114>)
 8015a3c:	f008 fc92 	bl	801e364 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d006      	beq.n	8015a56 <tcp_pcb_remove+0xf6>
 8015a48:	4b08      	ldr	r3, [pc, #32]	@ (8015a6c <tcp_pcb_remove+0x10c>)
 8015a4a:	f640 0296 	movw	r2, #2198	@ 0x896
 8015a4e:	490d      	ldr	r1, [pc, #52]	@ (8015a84 <tcp_pcb_remove+0x124>)
 8015a50:	4808      	ldr	r0, [pc, #32]	@ (8015a74 <tcp_pcb_remove+0x114>)
 8015a52:	f008 fc87 	bl	801e364 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015a62:	bf00      	nop
 8015a64:	3710      	adds	r7, #16
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	08022468 	.word	0x08022468
 8015a70:	08022ad0 	.word	0x08022ad0
 8015a74:	080224ac 	.word	0x080224ac
 8015a78:	08022aec 	.word	0x08022aec
 8015a7c:	08022b0c 	.word	0x08022b0c
 8015a80:	08022b24 	.word	0x08022b24
 8015a84:	08022b40 	.word	0x08022b40

08015a88 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d106      	bne.n	8015aa4 <tcp_next_iss+0x1c>
 8015a96:	4b0a      	ldr	r3, [pc, #40]	@ (8015ac0 <tcp_next_iss+0x38>)
 8015a98:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015a9c:	4909      	ldr	r1, [pc, #36]	@ (8015ac4 <tcp_next_iss+0x3c>)
 8015a9e:	480a      	ldr	r0, [pc, #40]	@ (8015ac8 <tcp_next_iss+0x40>)
 8015aa0:	f008 fc60 	bl	801e364 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015aa4:	4b09      	ldr	r3, [pc, #36]	@ (8015acc <tcp_next_iss+0x44>)
 8015aa6:	681a      	ldr	r2, [r3, #0]
 8015aa8:	4b09      	ldr	r3, [pc, #36]	@ (8015ad0 <tcp_next_iss+0x48>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4413      	add	r3, r2
 8015aae:	4a07      	ldr	r2, [pc, #28]	@ (8015acc <tcp_next_iss+0x44>)
 8015ab0:	6013      	str	r3, [r2, #0]
  return iss;
 8015ab2:	4b06      	ldr	r3, [pc, #24]	@ (8015acc <tcp_next_iss+0x44>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3708      	adds	r7, #8
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	08022468 	.word	0x08022468
 8015ac4:	08022b58 	.word	0x08022b58
 8015ac8:	080224ac 	.word	0x080224ac
 8015acc:	20000028 	.word	0x20000028
 8015ad0:	2000fcbc 	.word	0x2000fcbc

08015ad4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b086      	sub	sp, #24
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	4603      	mov	r3, r0
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	607a      	str	r2, [r7, #4]
 8015ae0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d106      	bne.n	8015af6 <tcp_eff_send_mss_netif+0x22>
 8015ae8:	4b14      	ldr	r3, [pc, #80]	@ (8015b3c <tcp_eff_send_mss_netif+0x68>)
 8015aea:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015aee:	4914      	ldr	r1, [pc, #80]	@ (8015b40 <tcp_eff_send_mss_netif+0x6c>)
 8015af0:	4814      	ldr	r0, [pc, #80]	@ (8015b44 <tcp_eff_send_mss_netif+0x70>)
 8015af2:	f008 fc37 	bl	801e364 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d101      	bne.n	8015b00 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015afc:	89fb      	ldrh	r3, [r7, #14]
 8015afe:	e019      	b.n	8015b34 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015b04:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015b06:	8afb      	ldrh	r3, [r7, #22]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d012      	beq.n	8015b32 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015b0c:	2328      	movs	r3, #40	@ 0x28
 8015b0e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015b10:	8afa      	ldrh	r2, [r7, #22]
 8015b12:	8abb      	ldrh	r3, [r7, #20]
 8015b14:	429a      	cmp	r2, r3
 8015b16:	d904      	bls.n	8015b22 <tcp_eff_send_mss_netif+0x4e>
 8015b18:	8afa      	ldrh	r2, [r7, #22]
 8015b1a:	8abb      	ldrh	r3, [r7, #20]
 8015b1c:	1ad3      	subs	r3, r2, r3
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	e000      	b.n	8015b24 <tcp_eff_send_mss_netif+0x50>
 8015b22:	2300      	movs	r3, #0
 8015b24:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015b26:	8a7a      	ldrh	r2, [r7, #18]
 8015b28:	89fb      	ldrh	r3, [r7, #14]
 8015b2a:	4293      	cmp	r3, r2
 8015b2c:	bf28      	it	cs
 8015b2e:	4613      	movcs	r3, r2
 8015b30:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015b32:	89fb      	ldrh	r3, [r7, #14]
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3718      	adds	r7, #24
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}
 8015b3c:	08022468 	.word	0x08022468
 8015b40:	08022b74 	.word	0x08022b74
 8015b44:	080224ac 	.word	0x080224ac

08015b48 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d119      	bne.n	8015b90 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015b5c:	4b10      	ldr	r3, [pc, #64]	@ (8015ba0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015b5e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8015b62:	4910      	ldr	r1, [pc, #64]	@ (8015ba4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015b64:	4810      	ldr	r0, [pc, #64]	@ (8015ba8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015b66:	f008 fbfd 	bl	801e364 <iprintf>

  while (pcb != NULL) {
 8015b6a:	e011      	b.n	8015b90 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d108      	bne.n	8015b8a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015b7e:	68f8      	ldr	r0, [r7, #12]
 8015b80:	f7fe fef6 	bl	8014970 <tcp_abort>
      pcb = next;
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	60fb      	str	r3, [r7, #12]
 8015b88:	e002      	b.n	8015b90 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	68db      	ldr	r3, [r3, #12]
 8015b8e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d1ea      	bne.n	8015b6c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015b96:	bf00      	nop
 8015b98:	bf00      	nop
 8015b9a:	3710      	adds	r7, #16
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}
 8015ba0:	08022468 	.word	0x08022468
 8015ba4:	08022b9c 	.word	0x08022b9c
 8015ba8:	080224ac 	.word	0x080224ac

08015bac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d02a      	beq.n	8015c12 <tcp_netif_ip_addr_changed+0x66>
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d026      	beq.n	8015c12 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015bc4:	4b15      	ldr	r3, [pc, #84]	@ (8015c1c <tcp_netif_ip_addr_changed+0x70>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	4619      	mov	r1, r3
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f7ff ffbc 	bl	8015b48 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015bd0:	4b13      	ldr	r3, [pc, #76]	@ (8015c20 <tcp_netif_ip_addr_changed+0x74>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f7ff ffb6 	bl	8015b48 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d017      	beq.n	8015c12 <tcp_netif_ip_addr_changed+0x66>
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d013      	beq.n	8015c12 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015bea:	4b0e      	ldr	r3, [pc, #56]	@ (8015c24 <tcp_netif_ip_addr_changed+0x78>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	60fb      	str	r3, [r7, #12]
 8015bf0:	e00c      	b.n	8015c0c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	429a      	cmp	r2, r3
 8015bfc:	d103      	bne.n	8015c06 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015bfe:	683b      	ldr	r3, [r7, #0]
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	68db      	ldr	r3, [r3, #12]
 8015c0a:	60fb      	str	r3, [r7, #12]
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d1ef      	bne.n	8015bf2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015c12:	bf00      	nop
 8015c14:	3710      	adds	r7, #16
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	2000fcc8 	.word	0x2000fcc8
 8015c20:	2000fcc0 	.word	0x2000fcc0
 8015c24:	2000fcc4 	.word	0x2000fcc4

08015c28 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b082      	sub	sp, #8
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d007      	beq.n	8015c48 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7ff fb6f 	bl	8015320 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2200      	movs	r2, #0
 8015c46:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015c48:	bf00      	nop
 8015c4a:	3708      	adds	r7, #8
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015c50:	b590      	push	{r4, r7, lr}
 8015c52:	b08d      	sub	sp, #52	@ 0x34
 8015c54:	af04      	add	r7, sp, #16
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d105      	bne.n	8015c6c <tcp_input+0x1c>
 8015c60:	4b9b      	ldr	r3, [pc, #620]	@ (8015ed0 <tcp_input+0x280>)
 8015c62:	2283      	movs	r2, #131	@ 0x83
 8015c64:	499b      	ldr	r1, [pc, #620]	@ (8015ed4 <tcp_input+0x284>)
 8015c66:	489c      	ldr	r0, [pc, #624]	@ (8015ed8 <tcp_input+0x288>)
 8015c68:	f008 fb7c 	bl	801e364 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	4a9a      	ldr	r2, [pc, #616]	@ (8015edc <tcp_input+0x28c>)
 8015c72:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	895b      	ldrh	r3, [r3, #10]
 8015c78:	2b13      	cmp	r3, #19
 8015c7a:	f240 83d1 	bls.w	8016420 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015c7e:	4b98      	ldr	r3, [pc, #608]	@ (8015ee0 <tcp_input+0x290>)
 8015c80:	695b      	ldr	r3, [r3, #20]
 8015c82:	4a97      	ldr	r2, [pc, #604]	@ (8015ee0 <tcp_input+0x290>)
 8015c84:	6812      	ldr	r2, [r2, #0]
 8015c86:	4611      	mov	r1, r2
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f006 fbc9 	bl	801c420 <ip4_addr_isbroadcast_u32>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f040 83c7 	bne.w	8016424 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015c96:	4b92      	ldr	r3, [pc, #584]	@ (8015ee0 <tcp_input+0x290>)
 8015c98:	695b      	ldr	r3, [r3, #20]
 8015c9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015c9e:	2be0      	cmp	r3, #224	@ 0xe0
 8015ca0:	f000 83c0 	beq.w	8016424 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015ca4:	4b8d      	ldr	r3, [pc, #564]	@ (8015edc <tcp_input+0x28c>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	899b      	ldrh	r3, [r3, #12]
 8015caa:	b29b      	uxth	r3, r3
 8015cac:	4618      	mov	r0, r3
 8015cae:	f7fc f849 	bl	8011d44 <lwip_htons>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	0b1b      	lsrs	r3, r3, #12
 8015cb6:	b29b      	uxth	r3, r3
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015cbe:	7cbb      	ldrb	r3, [r7, #18]
 8015cc0:	2b13      	cmp	r3, #19
 8015cc2:	f240 83b1 	bls.w	8016428 <tcp_input+0x7d8>
 8015cc6:	7cbb      	ldrb	r3, [r7, #18]
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	891b      	ldrh	r3, [r3, #8]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	f200 83aa 	bhi.w	8016428 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015cd4:	7cbb      	ldrb	r3, [r7, #18]
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	3b14      	subs	r3, #20
 8015cda:	b29a      	uxth	r2, r3
 8015cdc:	4b81      	ldr	r3, [pc, #516]	@ (8015ee4 <tcp_input+0x294>)
 8015cde:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015ce0:	4b81      	ldr	r3, [pc, #516]	@ (8015ee8 <tcp_input+0x298>)
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	895a      	ldrh	r2, [r3, #10]
 8015cea:	7cbb      	ldrb	r3, [r7, #18]
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d309      	bcc.n	8015d06 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8015ee4 <tcp_input+0x294>)
 8015cf4:	881a      	ldrh	r2, [r3, #0]
 8015cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8015eec <tcp_input+0x29c>)
 8015cf8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015cfa:	7cbb      	ldrb	r3, [r7, #18]
 8015cfc:	4619      	mov	r1, r3
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7fd fe56 	bl	80139b0 <pbuf_remove_header>
 8015d04:	e04e      	b.n	8015da4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d105      	bne.n	8015d1a <tcp_input+0xca>
 8015d0e:	4b70      	ldr	r3, [pc, #448]	@ (8015ed0 <tcp_input+0x280>)
 8015d10:	22c2      	movs	r2, #194	@ 0xc2
 8015d12:	4977      	ldr	r1, [pc, #476]	@ (8015ef0 <tcp_input+0x2a0>)
 8015d14:	4870      	ldr	r0, [pc, #448]	@ (8015ed8 <tcp_input+0x288>)
 8015d16:	f008 fb25 	bl	801e364 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015d1a:	2114      	movs	r1, #20
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f7fd fe47 	bl	80139b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	895a      	ldrh	r2, [r3, #10]
 8015d26:	4b71      	ldr	r3, [pc, #452]	@ (8015eec <tcp_input+0x29c>)
 8015d28:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8015ee4 <tcp_input+0x294>)
 8015d2c:	881a      	ldrh	r2, [r3, #0]
 8015d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8015eec <tcp_input+0x29c>)
 8015d30:	881b      	ldrh	r3, [r3, #0]
 8015d32:	1ad3      	subs	r3, r2, r3
 8015d34:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8015d36:	4b6d      	ldr	r3, [pc, #436]	@ (8015eec <tcp_input+0x29c>)
 8015d38:	881b      	ldrh	r3, [r3, #0]
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f7fd fe37 	bl	80139b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	895b      	ldrh	r3, [r3, #10]
 8015d48:	8a3a      	ldrh	r2, [r7, #16]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	f200 836e 	bhi.w	801642c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	4a64      	ldr	r2, [pc, #400]	@ (8015ee8 <tcp_input+0x298>)
 8015d58:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	8a3a      	ldrh	r2, [r7, #16]
 8015d60:	4611      	mov	r1, r2
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7fd fe24 	bl	80139b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	891a      	ldrh	r2, [r3, #8]
 8015d6c:	8a3b      	ldrh	r3, [r7, #16]
 8015d6e:	1ad3      	subs	r3, r2, r3
 8015d70:	b29a      	uxth	r2, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	895b      	ldrh	r3, [r3, #10]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d005      	beq.n	8015d8a <tcp_input+0x13a>
 8015d7e:	4b54      	ldr	r3, [pc, #336]	@ (8015ed0 <tcp_input+0x280>)
 8015d80:	22df      	movs	r2, #223	@ 0xdf
 8015d82:	495c      	ldr	r1, [pc, #368]	@ (8015ef4 <tcp_input+0x2a4>)
 8015d84:	4854      	ldr	r0, [pc, #336]	@ (8015ed8 <tcp_input+0x288>)
 8015d86:	f008 faed 	bl	801e364 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	891a      	ldrh	r2, [r3, #8]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	891b      	ldrh	r3, [r3, #8]
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d005      	beq.n	8015da4 <tcp_input+0x154>
 8015d98:	4b4d      	ldr	r3, [pc, #308]	@ (8015ed0 <tcp_input+0x280>)
 8015d9a:	22e0      	movs	r2, #224	@ 0xe0
 8015d9c:	4956      	ldr	r1, [pc, #344]	@ (8015ef8 <tcp_input+0x2a8>)
 8015d9e:	484e      	ldr	r0, [pc, #312]	@ (8015ed8 <tcp_input+0x288>)
 8015da0:	f008 fae0 	bl	801e364 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015da4:	4b4d      	ldr	r3, [pc, #308]	@ (8015edc <tcp_input+0x28c>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	881b      	ldrh	r3, [r3, #0]
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	4a4b      	ldr	r2, [pc, #300]	@ (8015edc <tcp_input+0x28c>)
 8015dae:	6814      	ldr	r4, [r2, #0]
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7fb ffc7 	bl	8011d44 <lwip_htons>
 8015db6:	4603      	mov	r3, r0
 8015db8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015dba:	4b48      	ldr	r3, [pc, #288]	@ (8015edc <tcp_input+0x28c>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	885b      	ldrh	r3, [r3, #2]
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	4a46      	ldr	r2, [pc, #280]	@ (8015edc <tcp_input+0x28c>)
 8015dc4:	6814      	ldr	r4, [r2, #0]
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7fb ffbc 	bl	8011d44 <lwip_htons>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015dd0:	4b42      	ldr	r3, [pc, #264]	@ (8015edc <tcp_input+0x28c>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	4a41      	ldr	r2, [pc, #260]	@ (8015edc <tcp_input+0x28c>)
 8015dd8:	6814      	ldr	r4, [r2, #0]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7fb ffc7 	bl	8011d6e <lwip_htonl>
 8015de0:	4603      	mov	r3, r0
 8015de2:	6063      	str	r3, [r4, #4]
 8015de4:	6863      	ldr	r3, [r4, #4]
 8015de6:	4a45      	ldr	r2, [pc, #276]	@ (8015efc <tcp_input+0x2ac>)
 8015de8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015dea:	4b3c      	ldr	r3, [pc, #240]	@ (8015edc <tcp_input+0x28c>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	689b      	ldr	r3, [r3, #8]
 8015df0:	4a3a      	ldr	r2, [pc, #232]	@ (8015edc <tcp_input+0x28c>)
 8015df2:	6814      	ldr	r4, [r2, #0]
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fb ffba 	bl	8011d6e <lwip_htonl>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	60a3      	str	r3, [r4, #8]
 8015dfe:	68a3      	ldr	r3, [r4, #8]
 8015e00:	4a3f      	ldr	r2, [pc, #252]	@ (8015f00 <tcp_input+0x2b0>)
 8015e02:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015e04:	4b35      	ldr	r3, [pc, #212]	@ (8015edc <tcp_input+0x28c>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	89db      	ldrh	r3, [r3, #14]
 8015e0a:	b29b      	uxth	r3, r3
 8015e0c:	4a33      	ldr	r2, [pc, #204]	@ (8015edc <tcp_input+0x28c>)
 8015e0e:	6814      	ldr	r4, [r2, #0]
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7fb ff97 	bl	8011d44 <lwip_htons>
 8015e16:	4603      	mov	r3, r0
 8015e18:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015e1a:	4b30      	ldr	r3, [pc, #192]	@ (8015edc <tcp_input+0x28c>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	899b      	ldrh	r3, [r3, #12]
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7fb ff8e 	bl	8011d44 <lwip_htons>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	b2db      	uxtb	r3, r3
 8015e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015e30:	b2da      	uxtb	r2, r3
 8015e32:	4b34      	ldr	r3, [pc, #208]	@ (8015f04 <tcp_input+0x2b4>)
 8015e34:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	891a      	ldrh	r2, [r3, #8]
 8015e3a:	4b33      	ldr	r3, [pc, #204]	@ (8015f08 <tcp_input+0x2b8>)
 8015e3c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015e3e:	4b31      	ldr	r3, [pc, #196]	@ (8015f04 <tcp_input+0x2b4>)
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	f003 0303 	and.w	r3, r3, #3
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d00c      	beq.n	8015e64 <tcp_input+0x214>
    tcplen++;
 8015e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8015f08 <tcp_input+0x2b8>)
 8015e4c:	881b      	ldrh	r3, [r3, #0]
 8015e4e:	3301      	adds	r3, #1
 8015e50:	b29a      	uxth	r2, r3
 8015e52:	4b2d      	ldr	r3, [pc, #180]	@ (8015f08 <tcp_input+0x2b8>)
 8015e54:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	891a      	ldrh	r2, [r3, #8]
 8015e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8015f08 <tcp_input+0x2b8>)
 8015e5c:	881b      	ldrh	r3, [r3, #0]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	f200 82e6 	bhi.w	8016430 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015e64:	2300      	movs	r3, #0
 8015e66:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e68:	4b28      	ldr	r3, [pc, #160]	@ (8015f0c <tcp_input+0x2bc>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	61fb      	str	r3, [r7, #28]
 8015e6e:	e09d      	b.n	8015fac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	7d1b      	ldrb	r3, [r3, #20]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d105      	bne.n	8015e84 <tcp_input+0x234>
 8015e78:	4b15      	ldr	r3, [pc, #84]	@ (8015ed0 <tcp_input+0x280>)
 8015e7a:	22fb      	movs	r2, #251	@ 0xfb
 8015e7c:	4924      	ldr	r1, [pc, #144]	@ (8015f10 <tcp_input+0x2c0>)
 8015e7e:	4816      	ldr	r0, [pc, #88]	@ (8015ed8 <tcp_input+0x288>)
 8015e80:	f008 fa70 	bl	801e364 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	7d1b      	ldrb	r3, [r3, #20]
 8015e88:	2b0a      	cmp	r3, #10
 8015e8a:	d105      	bne.n	8015e98 <tcp_input+0x248>
 8015e8c:	4b10      	ldr	r3, [pc, #64]	@ (8015ed0 <tcp_input+0x280>)
 8015e8e:	22fc      	movs	r2, #252	@ 0xfc
 8015e90:	4920      	ldr	r1, [pc, #128]	@ (8015f14 <tcp_input+0x2c4>)
 8015e92:	4811      	ldr	r0, [pc, #68]	@ (8015ed8 <tcp_input+0x288>)
 8015e94:	f008 fa66 	bl	801e364 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	7d1b      	ldrb	r3, [r3, #20]
 8015e9c:	2b01      	cmp	r3, #1
 8015e9e:	d105      	bne.n	8015eac <tcp_input+0x25c>
 8015ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8015ed0 <tcp_input+0x280>)
 8015ea2:	22fd      	movs	r2, #253	@ 0xfd
 8015ea4:	491c      	ldr	r1, [pc, #112]	@ (8015f18 <tcp_input+0x2c8>)
 8015ea6:	480c      	ldr	r0, [pc, #48]	@ (8015ed8 <tcp_input+0x288>)
 8015ea8:	f008 fa5c 	bl	801e364 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	7a1b      	ldrb	r3, [r3, #8]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d033      	beq.n	8015f1c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	7a1a      	ldrb	r2, [r3, #8]
 8015eb8:	4b09      	ldr	r3, [pc, #36]	@ (8015ee0 <tcp_input+0x290>)
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015ec0:	3301      	adds	r3, #1
 8015ec2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d029      	beq.n	8015f1c <tcp_input+0x2cc>
      prev = pcb;
 8015ec8:	69fb      	ldr	r3, [r7, #28]
 8015eca:	61bb      	str	r3, [r7, #24]
      continue;
 8015ecc:	e06b      	b.n	8015fa6 <tcp_input+0x356>
 8015ece:	bf00      	nop
 8015ed0:	08022bd0 	.word	0x08022bd0
 8015ed4:	08022c04 	.word	0x08022c04
 8015ed8:	08022c1c 	.word	0x08022c1c
 8015edc:	2000fce4 	.word	0x2000fce4
 8015ee0:	2000a25c 	.word	0x2000a25c
 8015ee4:	2000fce8 	.word	0x2000fce8
 8015ee8:	2000fcec 	.word	0x2000fcec
 8015eec:	2000fcea 	.word	0x2000fcea
 8015ef0:	08022c44 	.word	0x08022c44
 8015ef4:	08022c54 	.word	0x08022c54
 8015ef8:	08022c60 	.word	0x08022c60
 8015efc:	2000fcf4 	.word	0x2000fcf4
 8015f00:	2000fcf8 	.word	0x2000fcf8
 8015f04:	2000fd00 	.word	0x2000fd00
 8015f08:	2000fcfe 	.word	0x2000fcfe
 8015f0c:	2000fcc8 	.word	0x2000fcc8
 8015f10:	08022c80 	.word	0x08022c80
 8015f14:	08022ca8 	.word	0x08022ca8
 8015f18:	08022cd4 	.word	0x08022cd4
    }

    if (pcb->remote_port == tcphdr->src &&
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	8b1a      	ldrh	r2, [r3, #24]
 8015f20:	4b72      	ldr	r3, [pc, #456]	@ (80160ec <tcp_input+0x49c>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	881b      	ldrh	r3, [r3, #0]
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d13a      	bne.n	8015fa2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015f2c:	69fb      	ldr	r3, [r7, #28]
 8015f2e:	8ada      	ldrh	r2, [r3, #22]
 8015f30:	4b6e      	ldr	r3, [pc, #440]	@ (80160ec <tcp_input+0x49c>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	885b      	ldrh	r3, [r3, #2]
 8015f36:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d132      	bne.n	8015fa2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	685a      	ldr	r2, [r3, #4]
 8015f40:	4b6b      	ldr	r3, [pc, #428]	@ (80160f0 <tcp_input+0x4a0>)
 8015f42:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d12c      	bne.n	8015fa2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	681a      	ldr	r2, [r3, #0]
 8015f4c:	4b68      	ldr	r3, [pc, #416]	@ (80160f0 <tcp_input+0x4a0>)
 8015f4e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d126      	bne.n	8015fa2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015f54:	69fb      	ldr	r3, [r7, #28]
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	69fa      	ldr	r2, [r7, #28]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d106      	bne.n	8015f6c <tcp_input+0x31c>
 8015f5e:	4b65      	ldr	r3, [pc, #404]	@ (80160f4 <tcp_input+0x4a4>)
 8015f60:	f240 120d 	movw	r2, #269	@ 0x10d
 8015f64:	4964      	ldr	r1, [pc, #400]	@ (80160f8 <tcp_input+0x4a8>)
 8015f66:	4865      	ldr	r0, [pc, #404]	@ (80160fc <tcp_input+0x4ac>)
 8015f68:	f008 f9fc 	bl	801e364 <iprintf>
      if (prev != NULL) {
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d00a      	beq.n	8015f88 <tcp_input+0x338>
        prev->next = pcb->next;
 8015f72:	69fb      	ldr	r3, [r7, #28]
 8015f74:	68da      	ldr	r2, [r3, #12]
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015f7a:	4b61      	ldr	r3, [pc, #388]	@ (8016100 <tcp_input+0x4b0>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	69fb      	ldr	r3, [r7, #28]
 8015f80:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015f82:	4a5f      	ldr	r2, [pc, #380]	@ (8016100 <tcp_input+0x4b0>)
 8015f84:	69fb      	ldr	r3, [r7, #28]
 8015f86:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	69fa      	ldr	r2, [r7, #28]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d111      	bne.n	8015fb6 <tcp_input+0x366>
 8015f92:	4b58      	ldr	r3, [pc, #352]	@ (80160f4 <tcp_input+0x4a4>)
 8015f94:	f240 1215 	movw	r2, #277	@ 0x115
 8015f98:	495a      	ldr	r1, [pc, #360]	@ (8016104 <tcp_input+0x4b4>)
 8015f9a:	4858      	ldr	r0, [pc, #352]	@ (80160fc <tcp_input+0x4ac>)
 8015f9c:	f008 f9e2 	bl	801e364 <iprintf>
      break;
 8015fa0:	e009      	b.n	8015fb6 <tcp_input+0x366>
    }
    prev = pcb;
 8015fa2:	69fb      	ldr	r3, [r7, #28]
 8015fa4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fa6:	69fb      	ldr	r3, [r7, #28]
 8015fa8:	68db      	ldr	r3, [r3, #12]
 8015faa:	61fb      	str	r3, [r7, #28]
 8015fac:	69fb      	ldr	r3, [r7, #28]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	f47f af5e 	bne.w	8015e70 <tcp_input+0x220>
 8015fb4:	e000      	b.n	8015fb8 <tcp_input+0x368>
      break;
 8015fb6:	bf00      	nop
  }

  if (pcb == NULL) {
 8015fb8:	69fb      	ldr	r3, [r7, #28]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	f040 80aa 	bne.w	8016114 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fc0:	4b51      	ldr	r3, [pc, #324]	@ (8016108 <tcp_input+0x4b8>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	61fb      	str	r3, [r7, #28]
 8015fc6:	e03f      	b.n	8016048 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015fc8:	69fb      	ldr	r3, [r7, #28]
 8015fca:	7d1b      	ldrb	r3, [r3, #20]
 8015fcc:	2b0a      	cmp	r3, #10
 8015fce:	d006      	beq.n	8015fde <tcp_input+0x38e>
 8015fd0:	4b48      	ldr	r3, [pc, #288]	@ (80160f4 <tcp_input+0x4a4>)
 8015fd2:	f240 121f 	movw	r2, #287	@ 0x11f
 8015fd6:	494d      	ldr	r1, [pc, #308]	@ (801610c <tcp_input+0x4bc>)
 8015fd8:	4848      	ldr	r0, [pc, #288]	@ (80160fc <tcp_input+0x4ac>)
 8015fda:	f008 f9c3 	bl	801e364 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015fde:	69fb      	ldr	r3, [r7, #28]
 8015fe0:	7a1b      	ldrb	r3, [r3, #8]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d009      	beq.n	8015ffa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015fe6:	69fb      	ldr	r3, [r7, #28]
 8015fe8:	7a1a      	ldrb	r2, [r3, #8]
 8015fea:	4b41      	ldr	r3, [pc, #260]	@ (80160f0 <tcp_input+0x4a0>)
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d122      	bne.n	8016040 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015ffa:	69fb      	ldr	r3, [r7, #28]
 8015ffc:	8b1a      	ldrh	r2, [r3, #24]
 8015ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80160ec <tcp_input+0x49c>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	881b      	ldrh	r3, [r3, #0]
 8016004:	b29b      	uxth	r3, r3
 8016006:	429a      	cmp	r2, r3
 8016008:	d11b      	bne.n	8016042 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801600a:	69fb      	ldr	r3, [r7, #28]
 801600c:	8ada      	ldrh	r2, [r3, #22]
 801600e:	4b37      	ldr	r3, [pc, #220]	@ (80160ec <tcp_input+0x49c>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	885b      	ldrh	r3, [r3, #2]
 8016014:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016016:	429a      	cmp	r2, r3
 8016018:	d113      	bne.n	8016042 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801601a:	69fb      	ldr	r3, [r7, #28]
 801601c:	685a      	ldr	r2, [r3, #4]
 801601e:	4b34      	ldr	r3, [pc, #208]	@ (80160f0 <tcp_input+0x4a0>)
 8016020:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016022:	429a      	cmp	r2, r3
 8016024:	d10d      	bne.n	8016042 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016026:	69fb      	ldr	r3, [r7, #28]
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	4b31      	ldr	r3, [pc, #196]	@ (80160f0 <tcp_input+0x4a0>)
 801602c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801602e:	429a      	cmp	r2, r3
 8016030:	d107      	bne.n	8016042 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016032:	69f8      	ldr	r0, [r7, #28]
 8016034:	f000 fb56 	bl	80166e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f7fd fd3f 	bl	8013abc <pbuf_free>
        return;
 801603e:	e1fd      	b.n	801643c <tcp_input+0x7ec>
        continue;
 8016040:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016042:	69fb      	ldr	r3, [r7, #28]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	61fb      	str	r3, [r7, #28]
 8016048:	69fb      	ldr	r3, [r7, #28]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d1bc      	bne.n	8015fc8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801604e:	2300      	movs	r3, #0
 8016050:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016052:	4b2f      	ldr	r3, [pc, #188]	@ (8016110 <tcp_input+0x4c0>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	617b      	str	r3, [r7, #20]
 8016058:	e02a      	b.n	80160b0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	7a1b      	ldrb	r3, [r3, #8]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00c      	beq.n	801607c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016062:	697b      	ldr	r3, [r7, #20]
 8016064:	7a1a      	ldrb	r2, [r3, #8]
 8016066:	4b22      	ldr	r3, [pc, #136]	@ (80160f0 <tcp_input+0x4a0>)
 8016068:	685b      	ldr	r3, [r3, #4]
 801606a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801606e:	3301      	adds	r3, #1
 8016070:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016072:	429a      	cmp	r2, r3
 8016074:	d002      	beq.n	801607c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016076:	697b      	ldr	r3, [r7, #20]
 8016078:	61bb      	str	r3, [r7, #24]
        continue;
 801607a:	e016      	b.n	80160aa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	8ada      	ldrh	r2, [r3, #22]
 8016080:	4b1a      	ldr	r3, [pc, #104]	@ (80160ec <tcp_input+0x49c>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	885b      	ldrh	r3, [r3, #2]
 8016086:	b29b      	uxth	r3, r3
 8016088:	429a      	cmp	r2, r3
 801608a:	d10c      	bne.n	80160a6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	681a      	ldr	r2, [r3, #0]
 8016090:	4b17      	ldr	r3, [pc, #92]	@ (80160f0 <tcp_input+0x4a0>)
 8016092:	695b      	ldr	r3, [r3, #20]
 8016094:	429a      	cmp	r2, r3
 8016096:	d00f      	beq.n	80160b8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00d      	beq.n	80160ba <tcp_input+0x46a>
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d009      	beq.n	80160ba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	68db      	ldr	r3, [r3, #12]
 80160ae:	617b      	str	r3, [r7, #20]
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d1d1      	bne.n	801605a <tcp_input+0x40a>
 80160b6:	e000      	b.n	80160ba <tcp_input+0x46a>
            break;
 80160b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d029      	beq.n	8016114 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d00a      	beq.n	80160dc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	68da      	ldr	r2, [r3, #12]
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80160ce:	4b10      	ldr	r3, [pc, #64]	@ (8016110 <tcp_input+0x4c0>)
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80160d6:	4a0e      	ldr	r2, [pc, #56]	@ (8016110 <tcp_input+0x4c0>)
 80160d8:	697b      	ldr	r3, [r7, #20]
 80160da:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80160dc:	6978      	ldr	r0, [r7, #20]
 80160de:	f000 fa03 	bl	80164e8 <tcp_listen_input>
      }
      pbuf_free(p);
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f7fd fcea 	bl	8013abc <pbuf_free>
      return;
 80160e8:	e1a8      	b.n	801643c <tcp_input+0x7ec>
 80160ea:	bf00      	nop
 80160ec:	2000fce4 	.word	0x2000fce4
 80160f0:	2000a25c 	.word	0x2000a25c
 80160f4:	08022bd0 	.word	0x08022bd0
 80160f8:	08022cfc 	.word	0x08022cfc
 80160fc:	08022c1c 	.word	0x08022c1c
 8016100:	2000fcc8 	.word	0x2000fcc8
 8016104:	08022d28 	.word	0x08022d28
 8016108:	2000fccc 	.word	0x2000fccc
 801610c:	08022d54 	.word	0x08022d54
 8016110:	2000fcc4 	.word	0x2000fcc4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	2b00      	cmp	r3, #0
 8016118:	f000 8158 	beq.w	80163cc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801611c:	4b95      	ldr	r3, [pc, #596]	@ (8016374 <tcp_input+0x724>)
 801611e:	2200      	movs	r2, #0
 8016120:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	891a      	ldrh	r2, [r3, #8]
 8016126:	4b93      	ldr	r3, [pc, #588]	@ (8016374 <tcp_input+0x724>)
 8016128:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801612a:	4a92      	ldr	r2, [pc, #584]	@ (8016374 <tcp_input+0x724>)
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016130:	4b91      	ldr	r3, [pc, #580]	@ (8016378 <tcp_input+0x728>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	4a8f      	ldr	r2, [pc, #572]	@ (8016374 <tcp_input+0x724>)
 8016136:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016138:	4b90      	ldr	r3, [pc, #576]	@ (801637c <tcp_input+0x72c>)
 801613a:	2200      	movs	r2, #0
 801613c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801613e:	4b90      	ldr	r3, [pc, #576]	@ (8016380 <tcp_input+0x730>)
 8016140:	2200      	movs	r2, #0
 8016142:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016144:	4b8f      	ldr	r3, [pc, #572]	@ (8016384 <tcp_input+0x734>)
 8016146:	2200      	movs	r2, #0
 8016148:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801614a:	4b8f      	ldr	r3, [pc, #572]	@ (8016388 <tcp_input+0x738>)
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	f003 0308 	and.w	r3, r3, #8
 8016152:	2b00      	cmp	r3, #0
 8016154:	d006      	beq.n	8016164 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	7b5b      	ldrb	r3, [r3, #13]
 801615a:	f043 0301 	orr.w	r3, r3, #1
 801615e:	b2da      	uxtb	r2, r3
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016168:	2b00      	cmp	r3, #0
 801616a:	d017      	beq.n	801619c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801616c:	69f8      	ldr	r0, [r7, #28]
 801616e:	f7ff f85b 	bl	8015228 <tcp_process_refused_data>
 8016172:	4603      	mov	r3, r0
 8016174:	f113 0f0d 	cmn.w	r3, #13
 8016178:	d007      	beq.n	801618a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801617a:	69fb      	ldr	r3, [r7, #28]
 801617c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801617e:	2b00      	cmp	r3, #0
 8016180:	d00c      	beq.n	801619c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016182:	4b82      	ldr	r3, [pc, #520]	@ (801638c <tcp_input+0x73c>)
 8016184:	881b      	ldrh	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d008      	beq.n	801619c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801618a:	69fb      	ldr	r3, [r7, #28]
 801618c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801618e:	2b00      	cmp	r3, #0
 8016190:	f040 80e3 	bne.w	801635a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016194:	69f8      	ldr	r0, [r7, #28]
 8016196:	f003 fdff 	bl	8019d98 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801619a:	e0de      	b.n	801635a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801619c:	4a7c      	ldr	r2, [pc, #496]	@ (8016390 <tcp_input+0x740>)
 801619e:	69fb      	ldr	r3, [r7, #28]
 80161a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80161a2:	69f8      	ldr	r0, [r7, #28]
 80161a4:	f000 fb18 	bl	80167d8 <tcp_process>
 80161a8:	4603      	mov	r3, r0
 80161aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80161ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80161b0:	f113 0f0d 	cmn.w	r3, #13
 80161b4:	f000 80d3 	beq.w	801635e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80161b8:	4b71      	ldr	r3, [pc, #452]	@ (8016380 <tcp_input+0x730>)
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	f003 0308 	and.w	r3, r3, #8
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d015      	beq.n	80161f0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80161c4:	69fb      	ldr	r3, [r7, #28]
 80161c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d008      	beq.n	80161e0 <tcp_input+0x590>
 80161ce:	69fb      	ldr	r3, [r7, #28]
 80161d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80161d4:	69fa      	ldr	r2, [r7, #28]
 80161d6:	6912      	ldr	r2, [r2, #16]
 80161d8:	f06f 010d 	mvn.w	r1, #13
 80161dc:	4610      	mov	r0, r2
 80161de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80161e0:	69f9      	ldr	r1, [r7, #28]
 80161e2:	486c      	ldr	r0, [pc, #432]	@ (8016394 <tcp_input+0x744>)
 80161e4:	f7ff fbbc 	bl	8015960 <tcp_pcb_remove>
        tcp_free(pcb);
 80161e8:	69f8      	ldr	r0, [r7, #28]
 80161ea:	f7fe f87d 	bl	80142e8 <tcp_free>
 80161ee:	e0da      	b.n	80163a6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80161f0:	2300      	movs	r3, #0
 80161f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80161f4:	4b63      	ldr	r3, [pc, #396]	@ (8016384 <tcp_input+0x734>)
 80161f6:	881b      	ldrh	r3, [r3, #0]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d01d      	beq.n	8016238 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80161fc:	4b61      	ldr	r3, [pc, #388]	@ (8016384 <tcp_input+0x734>)
 80161fe:	881b      	ldrh	r3, [r3, #0]
 8016200:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016202:	69fb      	ldr	r3, [r7, #28]
 8016204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016208:	2b00      	cmp	r3, #0
 801620a:	d00a      	beq.n	8016222 <tcp_input+0x5d2>
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016212:	69fa      	ldr	r2, [r7, #28]
 8016214:	6910      	ldr	r0, [r2, #16]
 8016216:	89fa      	ldrh	r2, [r7, #14]
 8016218:	69f9      	ldr	r1, [r7, #28]
 801621a:	4798      	blx	r3
 801621c:	4603      	mov	r3, r0
 801621e:	74fb      	strb	r3, [r7, #19]
 8016220:	e001      	b.n	8016226 <tcp_input+0x5d6>
 8016222:	2300      	movs	r3, #0
 8016224:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016226:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801622a:	f113 0f0d 	cmn.w	r3, #13
 801622e:	f000 8098 	beq.w	8016362 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016232:	4b54      	ldr	r3, [pc, #336]	@ (8016384 <tcp_input+0x734>)
 8016234:	2200      	movs	r2, #0
 8016236:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016238:	69f8      	ldr	r0, [r7, #28]
 801623a:	f000 f915 	bl	8016468 <tcp_input_delayed_close>
 801623e:	4603      	mov	r3, r0
 8016240:	2b00      	cmp	r3, #0
 8016242:	f040 8090 	bne.w	8016366 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016246:	4b4d      	ldr	r3, [pc, #308]	@ (801637c <tcp_input+0x72c>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d041      	beq.n	80162d2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016252:	2b00      	cmp	r3, #0
 8016254:	d006      	beq.n	8016264 <tcp_input+0x614>
 8016256:	4b50      	ldr	r3, [pc, #320]	@ (8016398 <tcp_input+0x748>)
 8016258:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801625c:	494f      	ldr	r1, [pc, #316]	@ (801639c <tcp_input+0x74c>)
 801625e:	4850      	ldr	r0, [pc, #320]	@ (80163a0 <tcp_input+0x750>)
 8016260:	f008 f880 	bl	801e364 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	8b5b      	ldrh	r3, [r3, #26]
 8016268:	f003 0310 	and.w	r3, r3, #16
 801626c:	2b00      	cmp	r3, #0
 801626e:	d008      	beq.n	8016282 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016270:	4b42      	ldr	r3, [pc, #264]	@ (801637c <tcp_input+0x72c>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	4618      	mov	r0, r3
 8016276:	f7fd fc21 	bl	8013abc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801627a:	69f8      	ldr	r0, [r7, #28]
 801627c:	f7fe fb78 	bl	8014970 <tcp_abort>
            goto aborted;
 8016280:	e091      	b.n	80163a6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016288:	2b00      	cmp	r3, #0
 801628a:	d00c      	beq.n	80162a6 <tcp_input+0x656>
 801628c:	69fb      	ldr	r3, [r7, #28]
 801628e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016292:	69fb      	ldr	r3, [r7, #28]
 8016294:	6918      	ldr	r0, [r3, #16]
 8016296:	4b39      	ldr	r3, [pc, #228]	@ (801637c <tcp_input+0x72c>)
 8016298:	681a      	ldr	r2, [r3, #0]
 801629a:	2300      	movs	r3, #0
 801629c:	69f9      	ldr	r1, [r7, #28]
 801629e:	47a0      	blx	r4
 80162a0:	4603      	mov	r3, r0
 80162a2:	74fb      	strb	r3, [r7, #19]
 80162a4:	e008      	b.n	80162b8 <tcp_input+0x668>
 80162a6:	4b35      	ldr	r3, [pc, #212]	@ (801637c <tcp_input+0x72c>)
 80162a8:	681a      	ldr	r2, [r3, #0]
 80162aa:	2300      	movs	r3, #0
 80162ac:	69f9      	ldr	r1, [r7, #28]
 80162ae:	2000      	movs	r0, #0
 80162b0:	f7ff f890 	bl	80153d4 <tcp_recv_null>
 80162b4:	4603      	mov	r3, r0
 80162b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80162b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80162bc:	f113 0f0d 	cmn.w	r3, #13
 80162c0:	d053      	beq.n	801636a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80162c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d003      	beq.n	80162d2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80162ca:	4b2c      	ldr	r3, [pc, #176]	@ (801637c <tcp_input+0x72c>)
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80162d2:	4b2b      	ldr	r3, [pc, #172]	@ (8016380 <tcp_input+0x730>)
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	f003 0320 	and.w	r3, r3, #32
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d030      	beq.n	8016340 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80162de:	69fb      	ldr	r3, [r7, #28]
 80162e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d009      	beq.n	80162fa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80162e6:	69fb      	ldr	r3, [r7, #28]
 80162e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80162ea:	7b5a      	ldrb	r2, [r3, #13]
 80162ec:	69fb      	ldr	r3, [r7, #28]
 80162ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80162f0:	f042 0220 	orr.w	r2, r2, #32
 80162f4:	b2d2      	uxtb	r2, r2
 80162f6:	735a      	strb	r2, [r3, #13]
 80162f8:	e022      	b.n	8016340 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80162fa:	69fb      	ldr	r3, [r7, #28]
 80162fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016302:	d005      	beq.n	8016310 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8016304:	69fb      	ldr	r3, [r7, #28]
 8016306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016308:	3301      	adds	r3, #1
 801630a:	b29a      	uxth	r2, r3
 801630c:	69fb      	ldr	r3, [r7, #28]
 801630e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016316:	2b00      	cmp	r3, #0
 8016318:	d00b      	beq.n	8016332 <tcp_input+0x6e2>
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	6918      	ldr	r0, [r3, #16]
 8016324:	2300      	movs	r3, #0
 8016326:	2200      	movs	r2, #0
 8016328:	69f9      	ldr	r1, [r7, #28]
 801632a:	47a0      	blx	r4
 801632c:	4603      	mov	r3, r0
 801632e:	74fb      	strb	r3, [r7, #19]
 8016330:	e001      	b.n	8016336 <tcp_input+0x6e6>
 8016332:	2300      	movs	r3, #0
 8016334:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801633a:	f113 0f0d 	cmn.w	r3, #13
 801633e:	d016      	beq.n	801636e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016340:	4b13      	ldr	r3, [pc, #76]	@ (8016390 <tcp_input+0x740>)
 8016342:	2200      	movs	r2, #0
 8016344:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016346:	69f8      	ldr	r0, [r7, #28]
 8016348:	f000 f88e 	bl	8016468 <tcp_input_delayed_close>
 801634c:	4603      	mov	r3, r0
 801634e:	2b00      	cmp	r3, #0
 8016350:	d128      	bne.n	80163a4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016352:	69f8      	ldr	r0, [r7, #28]
 8016354:	f002 ff1a 	bl	801918c <tcp_output>
 8016358:	e025      	b.n	80163a6 <tcp_input+0x756>
        goto aborted;
 801635a:	bf00      	nop
 801635c:	e023      	b.n	80163a6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801635e:	bf00      	nop
 8016360:	e021      	b.n	80163a6 <tcp_input+0x756>
              goto aborted;
 8016362:	bf00      	nop
 8016364:	e01f      	b.n	80163a6 <tcp_input+0x756>
          goto aborted;
 8016366:	bf00      	nop
 8016368:	e01d      	b.n	80163a6 <tcp_input+0x756>
            goto aborted;
 801636a:	bf00      	nop
 801636c:	e01b      	b.n	80163a6 <tcp_input+0x756>
              goto aborted;
 801636e:	bf00      	nop
 8016370:	e019      	b.n	80163a6 <tcp_input+0x756>
 8016372:	bf00      	nop
 8016374:	2000fcd4 	.word	0x2000fcd4
 8016378:	2000fce4 	.word	0x2000fce4
 801637c:	2000fd04 	.word	0x2000fd04
 8016380:	2000fd01 	.word	0x2000fd01
 8016384:	2000fcfc 	.word	0x2000fcfc
 8016388:	2000fd00 	.word	0x2000fd00
 801638c:	2000fcfe 	.word	0x2000fcfe
 8016390:	2000fd08 	.word	0x2000fd08
 8016394:	2000fcc8 	.word	0x2000fcc8
 8016398:	08022bd0 	.word	0x08022bd0
 801639c:	08022d84 	.word	0x08022d84
 80163a0:	08022c1c 	.word	0x08022c1c
          goto aborted;
 80163a4:	bf00      	nop
    tcp_input_pcb = NULL;
 80163a6:	4b27      	ldr	r3, [pc, #156]	@ (8016444 <tcp_input+0x7f4>)
 80163a8:	2200      	movs	r2, #0
 80163aa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80163ac:	4b26      	ldr	r3, [pc, #152]	@ (8016448 <tcp_input+0x7f8>)
 80163ae:	2200      	movs	r2, #0
 80163b0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80163b2:	4b26      	ldr	r3, [pc, #152]	@ (801644c <tcp_input+0x7fc>)
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d03f      	beq.n	801643a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80163ba:	4b24      	ldr	r3, [pc, #144]	@ (801644c <tcp_input+0x7fc>)
 80163bc:	685b      	ldr	r3, [r3, #4]
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fd fb7c 	bl	8013abc <pbuf_free>
      inseg.p = NULL;
 80163c4:	4b21      	ldr	r3, [pc, #132]	@ (801644c <tcp_input+0x7fc>)
 80163c6:	2200      	movs	r2, #0
 80163c8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80163ca:	e036      	b.n	801643a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80163cc:	4b20      	ldr	r3, [pc, #128]	@ (8016450 <tcp_input+0x800>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	899b      	ldrh	r3, [r3, #12]
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7fb fcb5 	bl	8011d44 <lwip_htons>
 80163da:	4603      	mov	r3, r0
 80163dc:	b2db      	uxtb	r3, r3
 80163de:	f003 0304 	and.w	r3, r3, #4
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d118      	bne.n	8016418 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80163e6:	4b1b      	ldr	r3, [pc, #108]	@ (8016454 <tcp_input+0x804>)
 80163e8:	6819      	ldr	r1, [r3, #0]
 80163ea:	4b1b      	ldr	r3, [pc, #108]	@ (8016458 <tcp_input+0x808>)
 80163ec:	881b      	ldrh	r3, [r3, #0]
 80163ee:	461a      	mov	r2, r3
 80163f0:	4b1a      	ldr	r3, [pc, #104]	@ (801645c <tcp_input+0x80c>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80163f6:	4b16      	ldr	r3, [pc, #88]	@ (8016450 <tcp_input+0x800>)
 80163f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80163fa:	885b      	ldrh	r3, [r3, #2]
 80163fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80163fe:	4a14      	ldr	r2, [pc, #80]	@ (8016450 <tcp_input+0x800>)
 8016400:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016402:	8812      	ldrh	r2, [r2, #0]
 8016404:	b292      	uxth	r2, r2
 8016406:	9202      	str	r2, [sp, #8]
 8016408:	9301      	str	r3, [sp, #4]
 801640a:	4b15      	ldr	r3, [pc, #84]	@ (8016460 <tcp_input+0x810>)
 801640c:	9300      	str	r3, [sp, #0]
 801640e:	4b15      	ldr	r3, [pc, #84]	@ (8016464 <tcp_input+0x814>)
 8016410:	4602      	mov	r2, r0
 8016412:	2000      	movs	r0, #0
 8016414:	f003 fc6e 	bl	8019cf4 <tcp_rst>
    pbuf_free(p);
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f7fd fb4f 	bl	8013abc <pbuf_free>
  return;
 801641e:	e00c      	b.n	801643a <tcp_input+0x7ea>
    goto dropped;
 8016420:	bf00      	nop
 8016422:	e006      	b.n	8016432 <tcp_input+0x7e2>
    goto dropped;
 8016424:	bf00      	nop
 8016426:	e004      	b.n	8016432 <tcp_input+0x7e2>
    goto dropped;
 8016428:	bf00      	nop
 801642a:	e002      	b.n	8016432 <tcp_input+0x7e2>
      goto dropped;
 801642c:	bf00      	nop
 801642e:	e000      	b.n	8016432 <tcp_input+0x7e2>
      goto dropped;
 8016430:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f7fd fb42 	bl	8013abc <pbuf_free>
 8016438:	e000      	b.n	801643c <tcp_input+0x7ec>
  return;
 801643a:	bf00      	nop
}
 801643c:	3724      	adds	r7, #36	@ 0x24
 801643e:	46bd      	mov	sp, r7
 8016440:	bd90      	pop	{r4, r7, pc}
 8016442:	bf00      	nop
 8016444:	2000fd08 	.word	0x2000fd08
 8016448:	2000fd04 	.word	0x2000fd04
 801644c:	2000fcd4 	.word	0x2000fcd4
 8016450:	2000fce4 	.word	0x2000fce4
 8016454:	2000fcf8 	.word	0x2000fcf8
 8016458:	2000fcfe 	.word	0x2000fcfe
 801645c:	2000fcf4 	.word	0x2000fcf4
 8016460:	2000a26c 	.word	0x2000a26c
 8016464:	2000a270 	.word	0x2000a270

08016468 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b082      	sub	sp, #8
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d106      	bne.n	8016484 <tcp_input_delayed_close+0x1c>
 8016476:	4b17      	ldr	r3, [pc, #92]	@ (80164d4 <tcp_input_delayed_close+0x6c>)
 8016478:	f240 225a 	movw	r2, #602	@ 0x25a
 801647c:	4916      	ldr	r1, [pc, #88]	@ (80164d8 <tcp_input_delayed_close+0x70>)
 801647e:	4817      	ldr	r0, [pc, #92]	@ (80164dc <tcp_input_delayed_close+0x74>)
 8016480:	f007 ff70 	bl	801e364 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016484:	4b16      	ldr	r3, [pc, #88]	@ (80164e0 <tcp_input_delayed_close+0x78>)
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	f003 0310 	and.w	r3, r3, #16
 801648c:	2b00      	cmp	r3, #0
 801648e:	d01c      	beq.n	80164ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	8b5b      	ldrh	r3, [r3, #26]
 8016494:	f003 0310 	and.w	r3, r3, #16
 8016498:	2b00      	cmp	r3, #0
 801649a:	d10d      	bne.n	80164b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d008      	beq.n	80164b8 <tcp_input_delayed_close+0x50>
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80164ac:	687a      	ldr	r2, [r7, #4]
 80164ae:	6912      	ldr	r2, [r2, #16]
 80164b0:	f06f 010e 	mvn.w	r1, #14
 80164b4:	4610      	mov	r0, r2
 80164b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80164b8:	6879      	ldr	r1, [r7, #4]
 80164ba:	480a      	ldr	r0, [pc, #40]	@ (80164e4 <tcp_input_delayed_close+0x7c>)
 80164bc:	f7ff fa50 	bl	8015960 <tcp_pcb_remove>
    tcp_free(pcb);
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f7fd ff11 	bl	80142e8 <tcp_free>
    return 1;
 80164c6:	2301      	movs	r3, #1
 80164c8:	e000      	b.n	80164cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80164ca:	2300      	movs	r3, #0
}
 80164cc:	4618      	mov	r0, r3
 80164ce:	3708      	adds	r7, #8
 80164d0:	46bd      	mov	sp, r7
 80164d2:	bd80      	pop	{r7, pc}
 80164d4:	08022bd0 	.word	0x08022bd0
 80164d8:	08022da0 	.word	0x08022da0
 80164dc:	08022c1c 	.word	0x08022c1c
 80164e0:	2000fd01 	.word	0x2000fd01
 80164e4:	2000fcc8 	.word	0x2000fcc8

080164e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80164e8:	b590      	push	{r4, r7, lr}
 80164ea:	b08b      	sub	sp, #44	@ 0x2c
 80164ec:	af04      	add	r7, sp, #16
 80164ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80164f0:	4b6f      	ldr	r3, [pc, #444]	@ (80166b0 <tcp_listen_input+0x1c8>)
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	f003 0304 	and.w	r3, r3, #4
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f040 80d2 	bne.w	80166a2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d106      	bne.n	8016512 <tcp_listen_input+0x2a>
 8016504:	4b6b      	ldr	r3, [pc, #428]	@ (80166b4 <tcp_listen_input+0x1cc>)
 8016506:	f240 2281 	movw	r2, #641	@ 0x281
 801650a:	496b      	ldr	r1, [pc, #428]	@ (80166b8 <tcp_listen_input+0x1d0>)
 801650c:	486b      	ldr	r0, [pc, #428]	@ (80166bc <tcp_listen_input+0x1d4>)
 801650e:	f007 ff29 	bl	801e364 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016512:	4b67      	ldr	r3, [pc, #412]	@ (80166b0 <tcp_listen_input+0x1c8>)
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	f003 0310 	and.w	r3, r3, #16
 801651a:	2b00      	cmp	r3, #0
 801651c:	d019      	beq.n	8016552 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801651e:	4b68      	ldr	r3, [pc, #416]	@ (80166c0 <tcp_listen_input+0x1d8>)
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	4b68      	ldr	r3, [pc, #416]	@ (80166c4 <tcp_listen_input+0x1dc>)
 8016524:	881b      	ldrh	r3, [r3, #0]
 8016526:	461a      	mov	r2, r3
 8016528:	4b67      	ldr	r3, [pc, #412]	@ (80166c8 <tcp_listen_input+0x1e0>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801652e:	4b67      	ldr	r3, [pc, #412]	@ (80166cc <tcp_listen_input+0x1e4>)
 8016530:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016532:	885b      	ldrh	r3, [r3, #2]
 8016534:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016536:	4a65      	ldr	r2, [pc, #404]	@ (80166cc <tcp_listen_input+0x1e4>)
 8016538:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801653a:	8812      	ldrh	r2, [r2, #0]
 801653c:	b292      	uxth	r2, r2
 801653e:	9202      	str	r2, [sp, #8]
 8016540:	9301      	str	r3, [sp, #4]
 8016542:	4b63      	ldr	r3, [pc, #396]	@ (80166d0 <tcp_listen_input+0x1e8>)
 8016544:	9300      	str	r3, [sp, #0]
 8016546:	4b63      	ldr	r3, [pc, #396]	@ (80166d4 <tcp_listen_input+0x1ec>)
 8016548:	4602      	mov	r2, r0
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f003 fbd2 	bl	8019cf4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016550:	e0a9      	b.n	80166a6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016552:	4b57      	ldr	r3, [pc, #348]	@ (80166b0 <tcp_listen_input+0x1c8>)
 8016554:	781b      	ldrb	r3, [r3, #0]
 8016556:	f003 0302 	and.w	r3, r3, #2
 801655a:	2b00      	cmp	r3, #0
 801655c:	f000 80a3 	beq.w	80166a6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	7d5b      	ldrb	r3, [r3, #21]
 8016564:	4618      	mov	r0, r3
 8016566:	f7ff f859 	bl	801561c <tcp_alloc>
 801656a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801656c:	697b      	ldr	r3, [r7, #20]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d111      	bne.n	8016596 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	699b      	ldr	r3, [r3, #24]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d00a      	beq.n	8016590 <tcp_listen_input+0xa8>
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	699b      	ldr	r3, [r3, #24]
 801657e:	687a      	ldr	r2, [r7, #4]
 8016580:	6910      	ldr	r0, [r2, #16]
 8016582:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016586:	2100      	movs	r1, #0
 8016588:	4798      	blx	r3
 801658a:	4603      	mov	r3, r0
 801658c:	73bb      	strb	r3, [r7, #14]
      return;
 801658e:	e08b      	b.n	80166a8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016590:	23f0      	movs	r3, #240	@ 0xf0
 8016592:	73bb      	strb	r3, [r7, #14]
      return;
 8016594:	e088      	b.n	80166a8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016596:	4b50      	ldr	r3, [pc, #320]	@ (80166d8 <tcp_listen_input+0x1f0>)
 8016598:	695a      	ldr	r2, [r3, #20]
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801659e:	4b4e      	ldr	r3, [pc, #312]	@ (80166d8 <tcp_listen_input+0x1f0>)
 80165a0:	691a      	ldr	r2, [r3, #16]
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	8ada      	ldrh	r2, [r3, #22]
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80165ae:	4b47      	ldr	r3, [pc, #284]	@ (80166cc <tcp_listen_input+0x1e4>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	881b      	ldrh	r3, [r3, #0]
 80165b4:	b29a      	uxth	r2, r3
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	2203      	movs	r2, #3
 80165be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80165c0:	4b41      	ldr	r3, [pc, #260]	@ (80166c8 <tcp_listen_input+0x1e0>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	1c5a      	adds	r2, r3, #1
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80165d2:	6978      	ldr	r0, [r7, #20]
 80165d4:	f7ff fa58 	bl	8015a88 <tcp_next_iss>
 80165d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	693a      	ldr	r2, [r7, #16]
 80165de:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	693a      	ldr	r2, [r7, #16]
 80165e4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80165e6:	697b      	ldr	r3, [r7, #20]
 80165e8:	693a      	ldr	r2, [r7, #16]
 80165ea:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	693a      	ldr	r2, [r7, #16]
 80165f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80165f2:	4b35      	ldr	r3, [pc, #212]	@ (80166c8 <tcp_listen_input+0x1e0>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	1e5a      	subs	r2, r3, #1
 80165f8:	697b      	ldr	r3, [r7, #20]
 80165fa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	691a      	ldr	r2, [r3, #16]
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	7a5b      	ldrb	r3, [r3, #9]
 801660e:	f003 030c 	and.w	r3, r3, #12
 8016612:	b2da      	uxtb	r2, r3
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	7a1a      	ldrb	r2, [r3, #8]
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016620:	4b2e      	ldr	r3, [pc, #184]	@ (80166dc <tcp_listen_input+0x1f4>)
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	60da      	str	r2, [r3, #12]
 8016628:	4a2c      	ldr	r2, [pc, #176]	@ (80166dc <tcp_listen_input+0x1f4>)
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	6013      	str	r3, [r2, #0]
 801662e:	f003 fd23 	bl	801a078 <tcp_timer_needed>
 8016632:	4b2b      	ldr	r3, [pc, #172]	@ (80166e0 <tcp_listen_input+0x1f8>)
 8016634:	2201      	movs	r2, #1
 8016636:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016638:	6978      	ldr	r0, [r7, #20]
 801663a:	f001 fd8b 	bl	8018154 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801663e:	4b23      	ldr	r3, [pc, #140]	@ (80166cc <tcp_listen_input+0x1e4>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	89db      	ldrh	r3, [r3, #14]
 8016644:	b29a      	uxth	r2, r3
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801664c:	697b      	ldr	r3, [r7, #20]
 801664e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	3304      	adds	r3, #4
 8016660:	4618      	mov	r0, r3
 8016662:	f005 fc47 	bl	801bef4 <ip4_route>
 8016666:	4601      	mov	r1, r0
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	3304      	adds	r3, #4
 801666c:	461a      	mov	r2, r3
 801666e:	4620      	mov	r0, r4
 8016670:	f7ff fa30 	bl	8015ad4 <tcp_eff_send_mss_netif>
 8016674:	4603      	mov	r3, r0
 8016676:	461a      	mov	r2, r3
 8016678:	697b      	ldr	r3, [r7, #20]
 801667a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801667c:	2112      	movs	r1, #18
 801667e:	6978      	ldr	r0, [r7, #20]
 8016680:	f002 fc96 	bl	8018fb0 <tcp_enqueue_flags>
 8016684:	4603      	mov	r3, r0
 8016686:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d004      	beq.n	801669a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016690:	2100      	movs	r1, #0
 8016692:	6978      	ldr	r0, [r7, #20]
 8016694:	f7fe f8ae 	bl	80147f4 <tcp_abandon>
      return;
 8016698:	e006      	b.n	80166a8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801669a:	6978      	ldr	r0, [r7, #20]
 801669c:	f002 fd76 	bl	801918c <tcp_output>
  return;
 80166a0:	e001      	b.n	80166a6 <tcp_listen_input+0x1be>
    return;
 80166a2:	bf00      	nop
 80166a4:	e000      	b.n	80166a8 <tcp_listen_input+0x1c0>
  return;
 80166a6:	bf00      	nop
}
 80166a8:	371c      	adds	r7, #28
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd90      	pop	{r4, r7, pc}
 80166ae:	bf00      	nop
 80166b0:	2000fd00 	.word	0x2000fd00
 80166b4:	08022bd0 	.word	0x08022bd0
 80166b8:	08022dc8 	.word	0x08022dc8
 80166bc:	08022c1c 	.word	0x08022c1c
 80166c0:	2000fcf8 	.word	0x2000fcf8
 80166c4:	2000fcfe 	.word	0x2000fcfe
 80166c8:	2000fcf4 	.word	0x2000fcf4
 80166cc:	2000fce4 	.word	0x2000fce4
 80166d0:	2000a26c 	.word	0x2000a26c
 80166d4:	2000a270 	.word	0x2000a270
 80166d8:	2000a25c 	.word	0x2000a25c
 80166dc:	2000fcc8 	.word	0x2000fcc8
 80166e0:	2000fcd0 	.word	0x2000fcd0

080166e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b086      	sub	sp, #24
 80166e8:	af04      	add	r7, sp, #16
 80166ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80166ec:	4b2f      	ldr	r3, [pc, #188]	@ (80167ac <tcp_timewait_input+0xc8>)
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	f003 0304 	and.w	r3, r3, #4
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d153      	bne.n	80167a0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d106      	bne.n	801670c <tcp_timewait_input+0x28>
 80166fe:	4b2c      	ldr	r3, [pc, #176]	@ (80167b0 <tcp_timewait_input+0xcc>)
 8016700:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016704:	492b      	ldr	r1, [pc, #172]	@ (80167b4 <tcp_timewait_input+0xd0>)
 8016706:	482c      	ldr	r0, [pc, #176]	@ (80167b8 <tcp_timewait_input+0xd4>)
 8016708:	f007 fe2c 	bl	801e364 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801670c:	4b27      	ldr	r3, [pc, #156]	@ (80167ac <tcp_timewait_input+0xc8>)
 801670e:	781b      	ldrb	r3, [r3, #0]
 8016710:	f003 0302 	and.w	r3, r3, #2
 8016714:	2b00      	cmp	r3, #0
 8016716:	d02a      	beq.n	801676e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016718:	4b28      	ldr	r3, [pc, #160]	@ (80167bc <tcp_timewait_input+0xd8>)
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016720:	1ad3      	subs	r3, r2, r3
 8016722:	2b00      	cmp	r3, #0
 8016724:	db2d      	blt.n	8016782 <tcp_timewait_input+0x9e>
 8016726:	4b25      	ldr	r3, [pc, #148]	@ (80167bc <tcp_timewait_input+0xd8>)
 8016728:	681a      	ldr	r2, [r3, #0]
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801672e:	6879      	ldr	r1, [r7, #4]
 8016730:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016732:	440b      	add	r3, r1
 8016734:	1ad3      	subs	r3, r2, r3
 8016736:	2b00      	cmp	r3, #0
 8016738:	dc23      	bgt.n	8016782 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801673a:	4b21      	ldr	r3, [pc, #132]	@ (80167c0 <tcp_timewait_input+0xdc>)
 801673c:	6819      	ldr	r1, [r3, #0]
 801673e:	4b21      	ldr	r3, [pc, #132]	@ (80167c4 <tcp_timewait_input+0xe0>)
 8016740:	881b      	ldrh	r3, [r3, #0]
 8016742:	461a      	mov	r2, r3
 8016744:	4b1d      	ldr	r3, [pc, #116]	@ (80167bc <tcp_timewait_input+0xd8>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801674a:	4b1f      	ldr	r3, [pc, #124]	@ (80167c8 <tcp_timewait_input+0xe4>)
 801674c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801674e:	885b      	ldrh	r3, [r3, #2]
 8016750:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016752:	4a1d      	ldr	r2, [pc, #116]	@ (80167c8 <tcp_timewait_input+0xe4>)
 8016754:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016756:	8812      	ldrh	r2, [r2, #0]
 8016758:	b292      	uxth	r2, r2
 801675a:	9202      	str	r2, [sp, #8]
 801675c:	9301      	str	r3, [sp, #4]
 801675e:	4b1b      	ldr	r3, [pc, #108]	@ (80167cc <tcp_timewait_input+0xe8>)
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	4b1b      	ldr	r3, [pc, #108]	@ (80167d0 <tcp_timewait_input+0xec>)
 8016764:	4602      	mov	r2, r0
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	f003 fac4 	bl	8019cf4 <tcp_rst>
      return;
 801676c:	e01b      	b.n	80167a6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801676e:	4b0f      	ldr	r3, [pc, #60]	@ (80167ac <tcp_timewait_input+0xc8>)
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	f003 0301 	and.w	r3, r3, #1
 8016776:	2b00      	cmp	r3, #0
 8016778:	d003      	beq.n	8016782 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801677a:	4b16      	ldr	r3, [pc, #88]	@ (80167d4 <tcp_timewait_input+0xf0>)
 801677c:	681a      	ldr	r2, [r3, #0]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016782:	4b10      	ldr	r3, [pc, #64]	@ (80167c4 <tcp_timewait_input+0xe0>)
 8016784:	881b      	ldrh	r3, [r3, #0]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d00c      	beq.n	80167a4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	8b5b      	ldrh	r3, [r3, #26]
 801678e:	f043 0302 	orr.w	r3, r3, #2
 8016792:	b29a      	uxth	r2, r3
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f002 fcf7 	bl	801918c <tcp_output>
  }
  return;
 801679e:	e001      	b.n	80167a4 <tcp_timewait_input+0xc0>
    return;
 80167a0:	bf00      	nop
 80167a2:	e000      	b.n	80167a6 <tcp_timewait_input+0xc2>
  return;
 80167a4:	bf00      	nop
}
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}
 80167ac:	2000fd00 	.word	0x2000fd00
 80167b0:	08022bd0 	.word	0x08022bd0
 80167b4:	08022de8 	.word	0x08022de8
 80167b8:	08022c1c 	.word	0x08022c1c
 80167bc:	2000fcf4 	.word	0x2000fcf4
 80167c0:	2000fcf8 	.word	0x2000fcf8
 80167c4:	2000fcfe 	.word	0x2000fcfe
 80167c8:	2000fce4 	.word	0x2000fce4
 80167cc:	2000a26c 	.word	0x2000a26c
 80167d0:	2000a270 	.word	0x2000a270
 80167d4:	2000fcbc 	.word	0x2000fcbc

080167d8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80167d8:	b590      	push	{r4, r7, lr}
 80167da:	b08d      	sub	sp, #52	@ 0x34
 80167dc:	af04      	add	r7, sp, #16
 80167de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80167e0:	2300      	movs	r3, #0
 80167e2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80167e4:	2300      	movs	r3, #0
 80167e6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d106      	bne.n	80167fc <tcp_process+0x24>
 80167ee:	4b9d      	ldr	r3, [pc, #628]	@ (8016a64 <tcp_process+0x28c>)
 80167f0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80167f4:	499c      	ldr	r1, [pc, #624]	@ (8016a68 <tcp_process+0x290>)
 80167f6:	489d      	ldr	r0, [pc, #628]	@ (8016a6c <tcp_process+0x294>)
 80167f8:	f007 fdb4 	bl	801e364 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80167fc:	4b9c      	ldr	r3, [pc, #624]	@ (8016a70 <tcp_process+0x298>)
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	f003 0304 	and.w	r3, r3, #4
 8016804:	2b00      	cmp	r3, #0
 8016806:	d04e      	beq.n	80168a6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	7d1b      	ldrb	r3, [r3, #20]
 801680c:	2b02      	cmp	r3, #2
 801680e:	d108      	bne.n	8016822 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016814:	4b97      	ldr	r3, [pc, #604]	@ (8016a74 <tcp_process+0x29c>)
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	429a      	cmp	r2, r3
 801681a:	d123      	bne.n	8016864 <tcp_process+0x8c>
        acceptable = 1;
 801681c:	2301      	movs	r3, #1
 801681e:	76fb      	strb	r3, [r7, #27]
 8016820:	e020      	b.n	8016864 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016826:	4b94      	ldr	r3, [pc, #592]	@ (8016a78 <tcp_process+0x2a0>)
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	429a      	cmp	r2, r3
 801682c:	d102      	bne.n	8016834 <tcp_process+0x5c>
        acceptable = 1;
 801682e:	2301      	movs	r3, #1
 8016830:	76fb      	strb	r3, [r7, #27]
 8016832:	e017      	b.n	8016864 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016834:	4b90      	ldr	r3, [pc, #576]	@ (8016a78 <tcp_process+0x2a0>)
 8016836:	681a      	ldr	r2, [r3, #0]
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801683c:	1ad3      	subs	r3, r2, r3
 801683e:	2b00      	cmp	r3, #0
 8016840:	db10      	blt.n	8016864 <tcp_process+0x8c>
 8016842:	4b8d      	ldr	r3, [pc, #564]	@ (8016a78 <tcp_process+0x2a0>)
 8016844:	681a      	ldr	r2, [r3, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801684a:	6879      	ldr	r1, [r7, #4]
 801684c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801684e:	440b      	add	r3, r1
 8016850:	1ad3      	subs	r3, r2, r3
 8016852:	2b00      	cmp	r3, #0
 8016854:	dc06      	bgt.n	8016864 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	8b5b      	ldrh	r3, [r3, #26]
 801685a:	f043 0302 	orr.w	r3, r3, #2
 801685e:	b29a      	uxth	r2, r3
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016864:	7efb      	ldrb	r3, [r7, #27]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d01b      	beq.n	80168a2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	7d1b      	ldrb	r3, [r3, #20]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d106      	bne.n	8016880 <tcp_process+0xa8>
 8016872:	4b7c      	ldr	r3, [pc, #496]	@ (8016a64 <tcp_process+0x28c>)
 8016874:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016878:	4980      	ldr	r1, [pc, #512]	@ (8016a7c <tcp_process+0x2a4>)
 801687a:	487c      	ldr	r0, [pc, #496]	@ (8016a6c <tcp_process+0x294>)
 801687c:	f007 fd72 	bl	801e364 <iprintf>
      recv_flags |= TF_RESET;
 8016880:	4b7f      	ldr	r3, [pc, #508]	@ (8016a80 <tcp_process+0x2a8>)
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	f043 0308 	orr.w	r3, r3, #8
 8016888:	b2da      	uxtb	r2, r3
 801688a:	4b7d      	ldr	r3, [pc, #500]	@ (8016a80 <tcp_process+0x2a8>)
 801688c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	8b5b      	ldrh	r3, [r3, #26]
 8016892:	f023 0301 	bic.w	r3, r3, #1
 8016896:	b29a      	uxth	r2, r3
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801689c:	f06f 030d 	mvn.w	r3, #13
 80168a0:	e37a      	b.n	8016f98 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80168a2:	2300      	movs	r3, #0
 80168a4:	e378      	b.n	8016f98 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80168a6:	4b72      	ldr	r3, [pc, #456]	@ (8016a70 <tcp_process+0x298>)
 80168a8:	781b      	ldrb	r3, [r3, #0]
 80168aa:	f003 0302 	and.w	r3, r3, #2
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d010      	beq.n	80168d4 <tcp_process+0xfc>
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	7d1b      	ldrb	r3, [r3, #20]
 80168b6:	2b02      	cmp	r3, #2
 80168b8:	d00c      	beq.n	80168d4 <tcp_process+0xfc>
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	7d1b      	ldrb	r3, [r3, #20]
 80168be:	2b03      	cmp	r3, #3
 80168c0:	d008      	beq.n	80168d4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	8b5b      	ldrh	r3, [r3, #26]
 80168c6:	f043 0302 	orr.w	r3, r3, #2
 80168ca:	b29a      	uxth	r2, r3
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80168d0:	2300      	movs	r3, #0
 80168d2:	e361      	b.n	8016f98 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	8b5b      	ldrh	r3, [r3, #26]
 80168d8:	f003 0310 	and.w	r3, r3, #16
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d103      	bne.n	80168e8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80168e0:	4b68      	ldr	r3, [pc, #416]	@ (8016a84 <tcp_process+0x2ac>)
 80168e2:	681a      	ldr	r2, [r3, #0]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2200      	movs	r2, #0
 80168ec:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f001 fc2b 	bl	8018154 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	7d1b      	ldrb	r3, [r3, #20]
 8016902:	3b02      	subs	r3, #2
 8016904:	2b07      	cmp	r3, #7
 8016906:	f200 8337 	bhi.w	8016f78 <tcp_process+0x7a0>
 801690a:	a201      	add	r2, pc, #4	@ (adr r2, 8016910 <tcp_process+0x138>)
 801690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016910:	08016931 	.word	0x08016931
 8016914:	08016b61 	.word	0x08016b61
 8016918:	08016cd9 	.word	0x08016cd9
 801691c:	08016d03 	.word	0x08016d03
 8016920:	08016e27 	.word	0x08016e27
 8016924:	08016cd9 	.word	0x08016cd9
 8016928:	08016eb3 	.word	0x08016eb3
 801692c:	08016f43 	.word	0x08016f43
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016930:	4b4f      	ldr	r3, [pc, #316]	@ (8016a70 <tcp_process+0x298>)
 8016932:	781b      	ldrb	r3, [r3, #0]
 8016934:	f003 0310 	and.w	r3, r3, #16
 8016938:	2b00      	cmp	r3, #0
 801693a:	f000 80e4 	beq.w	8016b06 <tcp_process+0x32e>
 801693e:	4b4c      	ldr	r3, [pc, #304]	@ (8016a70 <tcp_process+0x298>)
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	f003 0302 	and.w	r3, r3, #2
 8016946:	2b00      	cmp	r3, #0
 8016948:	f000 80dd 	beq.w	8016b06 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016950:	1c5a      	adds	r2, r3, #1
 8016952:	4b48      	ldr	r3, [pc, #288]	@ (8016a74 <tcp_process+0x29c>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	429a      	cmp	r2, r3
 8016958:	f040 80d5 	bne.w	8016b06 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801695c:	4b46      	ldr	r3, [pc, #280]	@ (8016a78 <tcp_process+0x2a0>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	1c5a      	adds	r2, r3, #1
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801696e:	4b41      	ldr	r3, [pc, #260]	@ (8016a74 <tcp_process+0x29c>)
 8016970:	681a      	ldr	r2, [r3, #0]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016976:	4b44      	ldr	r3, [pc, #272]	@ (8016a88 <tcp_process+0x2b0>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	89db      	ldrh	r3, [r3, #14]
 801697c:	b29a      	uxth	r2, r3
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016990:	4b39      	ldr	r3, [pc, #228]	@ (8016a78 <tcp_process+0x2a0>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	1e5a      	subs	r2, r3, #1
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	2204      	movs	r2, #4
 801699e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	3304      	adds	r3, #4
 80169a8:	4618      	mov	r0, r3
 80169aa:	f005 faa3 	bl	801bef4 <ip4_route>
 80169ae:	4601      	mov	r1, r0
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	3304      	adds	r3, #4
 80169b4:	461a      	mov	r2, r3
 80169b6:	4620      	mov	r0, r4
 80169b8:	f7ff f88c 	bl	8015ad4 <tcp_eff_send_mss_netif>
 80169bc:	4603      	mov	r3, r0
 80169be:	461a      	mov	r2, r3
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169c8:	009a      	lsls	r2, r3, #2
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169ce:	005b      	lsls	r3, r3, #1
 80169d0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80169d4:	428b      	cmp	r3, r1
 80169d6:	bf38      	it	cc
 80169d8:	460b      	movcc	r3, r1
 80169da:	429a      	cmp	r2, r3
 80169dc:	d204      	bcs.n	80169e8 <tcp_process+0x210>
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	b29b      	uxth	r3, r3
 80169e6:	e00d      	b.n	8016a04 <tcp_process+0x22c>
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169ec:	005b      	lsls	r3, r3, #1
 80169ee:	f241 121c 	movw	r2, #4380	@ 0x111c
 80169f2:	4293      	cmp	r3, r2
 80169f4:	d904      	bls.n	8016a00 <tcp_process+0x228>
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169fa:	005b      	lsls	r3, r3, #1
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	e001      	b.n	8016a04 <tcp_process+0x22c>
 8016a00:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d106      	bne.n	8016a22 <tcp_process+0x24a>
 8016a14:	4b13      	ldr	r3, [pc, #76]	@ (8016a64 <tcp_process+0x28c>)
 8016a16:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016a1a:	491c      	ldr	r1, [pc, #112]	@ (8016a8c <tcp_process+0x2b4>)
 8016a1c:	4813      	ldr	r0, [pc, #76]	@ (8016a6c <tcp_process+0x294>)
 8016a1e:	f007 fca1 	bl	801e364 <iprintf>
        --pcb->snd_queuelen;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016a28:	3b01      	subs	r3, #1
 8016a2a:	b29a      	uxth	r2, r3
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a36:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d12a      	bne.n	8016a94 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a42:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d106      	bne.n	8016a58 <tcp_process+0x280>
 8016a4a:	4b06      	ldr	r3, [pc, #24]	@ (8016a64 <tcp_process+0x28c>)
 8016a4c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016a50:	490f      	ldr	r1, [pc, #60]	@ (8016a90 <tcp_process+0x2b8>)
 8016a52:	4806      	ldr	r0, [pc, #24]	@ (8016a6c <tcp_process+0x294>)
 8016a54:	f007 fc86 	bl	801e364 <iprintf>
          pcb->unsent = rseg->next;
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016a60:	e01c      	b.n	8016a9c <tcp_process+0x2c4>
 8016a62:	bf00      	nop
 8016a64:	08022bd0 	.word	0x08022bd0
 8016a68:	08022e08 	.word	0x08022e08
 8016a6c:	08022c1c 	.word	0x08022c1c
 8016a70:	2000fd00 	.word	0x2000fd00
 8016a74:	2000fcf8 	.word	0x2000fcf8
 8016a78:	2000fcf4 	.word	0x2000fcf4
 8016a7c:	08022e24 	.word	0x08022e24
 8016a80:	2000fd01 	.word	0x2000fd01
 8016a84:	2000fcbc 	.word	0x2000fcbc
 8016a88:	2000fce4 	.word	0x2000fce4
 8016a8c:	08022e44 	.word	0x08022e44
 8016a90:	08022e5c 	.word	0x08022e5c
        } else {
          pcb->unacked = rseg->next;
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016a9c:	69f8      	ldr	r0, [r7, #28]
 8016a9e:	f7fe fc54 	bl	801534a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d104      	bne.n	8016ab4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ab0:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016ab2:	e006      	b.n	8016ac2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2200      	movs	r2, #0
 8016abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d00a      	beq.n	8016ae2 <tcp_process+0x30a>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016ad2:	687a      	ldr	r2, [r7, #4]
 8016ad4:	6910      	ldr	r0, [r2, #16]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	6879      	ldr	r1, [r7, #4]
 8016ada:	4798      	blx	r3
 8016adc:	4603      	mov	r3, r0
 8016ade:	76bb      	strb	r3, [r7, #26]
 8016ae0:	e001      	b.n	8016ae6 <tcp_process+0x30e>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016ae6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016aea:	f113 0f0d 	cmn.w	r3, #13
 8016aee:	d102      	bne.n	8016af6 <tcp_process+0x31e>
          return ERR_ABRT;
 8016af0:	f06f 030c 	mvn.w	r3, #12
 8016af4:	e250      	b.n	8016f98 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	8b5b      	ldrh	r3, [r3, #26]
 8016afa:	f043 0302 	orr.w	r3, r3, #2
 8016afe:	b29a      	uxth	r2, r3
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016b04:	e23a      	b.n	8016f7c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016b06:	4b98      	ldr	r3, [pc, #608]	@ (8016d68 <tcp_process+0x590>)
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	f003 0310 	and.w	r3, r3, #16
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	f000 8234 	beq.w	8016f7c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b14:	4b95      	ldr	r3, [pc, #596]	@ (8016d6c <tcp_process+0x594>)
 8016b16:	6819      	ldr	r1, [r3, #0]
 8016b18:	4b95      	ldr	r3, [pc, #596]	@ (8016d70 <tcp_process+0x598>)
 8016b1a:	881b      	ldrh	r3, [r3, #0]
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	4b95      	ldr	r3, [pc, #596]	@ (8016d74 <tcp_process+0x59c>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b24:	4b94      	ldr	r3, [pc, #592]	@ (8016d78 <tcp_process+0x5a0>)
 8016b26:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b28:	885b      	ldrh	r3, [r3, #2]
 8016b2a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b2c:	4a92      	ldr	r2, [pc, #584]	@ (8016d78 <tcp_process+0x5a0>)
 8016b2e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b30:	8812      	ldrh	r2, [r2, #0]
 8016b32:	b292      	uxth	r2, r2
 8016b34:	9202      	str	r2, [sp, #8]
 8016b36:	9301      	str	r3, [sp, #4]
 8016b38:	4b90      	ldr	r3, [pc, #576]	@ (8016d7c <tcp_process+0x5a4>)
 8016b3a:	9300      	str	r3, [sp, #0]
 8016b3c:	4b90      	ldr	r3, [pc, #576]	@ (8016d80 <tcp_process+0x5a8>)
 8016b3e:	4602      	mov	r2, r0
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f003 f8d7 	bl	8019cf4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016b4c:	2b05      	cmp	r3, #5
 8016b4e:	f200 8215 	bhi.w	8016f7c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2200      	movs	r2, #0
 8016b56:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f002 fea3 	bl	80198a4 <tcp_rexmit_rto>
      break;
 8016b5e:	e20d      	b.n	8016f7c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016b60:	4b81      	ldr	r3, [pc, #516]	@ (8016d68 <tcp_process+0x590>)
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	f003 0310 	and.w	r3, r3, #16
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	f000 80a1 	beq.w	8016cb0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8016d6c <tcp_process+0x594>)
 8016b70:	681a      	ldr	r2, [r3, #0]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b76:	1ad3      	subs	r3, r2, r3
 8016b78:	3b01      	subs	r3, #1
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	db7e      	blt.n	8016c7c <tcp_process+0x4a4>
 8016b7e:	4b7b      	ldr	r3, [pc, #492]	@ (8016d6c <tcp_process+0x594>)
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b86:	1ad3      	subs	r3, r2, r3
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	dc77      	bgt.n	8016c7c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2204      	movs	r2, #4
 8016b90:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d102      	bne.n	8016ba0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016b9a:	23fa      	movs	r3, #250	@ 0xfa
 8016b9c:	76bb      	strb	r3, [r7, #26]
 8016b9e:	e01d      	b.n	8016bdc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ba4:	699b      	ldr	r3, [r3, #24]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d106      	bne.n	8016bb8 <tcp_process+0x3e0>
 8016baa:	4b76      	ldr	r3, [pc, #472]	@ (8016d84 <tcp_process+0x5ac>)
 8016bac:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016bb0:	4975      	ldr	r1, [pc, #468]	@ (8016d88 <tcp_process+0x5b0>)
 8016bb2:	4876      	ldr	r0, [pc, #472]	@ (8016d8c <tcp_process+0x5b4>)
 8016bb4:	f007 fbd6 	bl	801e364 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016bbc:	699b      	ldr	r3, [r3, #24]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d00a      	beq.n	8016bd8 <tcp_process+0x400>
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016bc6:	699b      	ldr	r3, [r3, #24]
 8016bc8:	687a      	ldr	r2, [r7, #4]
 8016bca:	6910      	ldr	r0, [r2, #16]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	6879      	ldr	r1, [r7, #4]
 8016bd0:	4798      	blx	r3
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	76bb      	strb	r3, [r7, #26]
 8016bd6:	e001      	b.n	8016bdc <tcp_process+0x404>
 8016bd8:	23f0      	movs	r3, #240	@ 0xf0
 8016bda:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016bdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d00a      	beq.n	8016bfa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016be4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016be8:	f113 0f0d 	cmn.w	r3, #13
 8016bec:	d002      	beq.n	8016bf4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f7fd febe 	bl	8014970 <tcp_abort>
            }
            return ERR_ABRT;
 8016bf4:	f06f 030c 	mvn.w	r3, #12
 8016bf8:	e1ce      	b.n	8016f98 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fae0 	bl	80171c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016c00:	4b63      	ldr	r3, [pc, #396]	@ (8016d90 <tcp_process+0x5b8>)
 8016c02:	881b      	ldrh	r3, [r3, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d005      	beq.n	8016c14 <tcp_process+0x43c>
            recv_acked--;
 8016c08:	4b61      	ldr	r3, [pc, #388]	@ (8016d90 <tcp_process+0x5b8>)
 8016c0a:	881b      	ldrh	r3, [r3, #0]
 8016c0c:	3b01      	subs	r3, #1
 8016c0e:	b29a      	uxth	r2, r3
 8016c10:	4b5f      	ldr	r3, [pc, #380]	@ (8016d90 <tcp_process+0x5b8>)
 8016c12:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c18:	009a      	lsls	r2, r3, #2
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c1e:	005b      	lsls	r3, r3, #1
 8016c20:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016c24:	428b      	cmp	r3, r1
 8016c26:	bf38      	it	cc
 8016c28:	460b      	movcc	r3, r1
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	d204      	bcs.n	8016c38 <tcp_process+0x460>
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	b29b      	uxth	r3, r3
 8016c36:	e00d      	b.n	8016c54 <tcp_process+0x47c>
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c3c:	005b      	lsls	r3, r3, #1
 8016c3e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d904      	bls.n	8016c50 <tcp_process+0x478>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c4a:	005b      	lsls	r3, r3, #1
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	e001      	b.n	8016c54 <tcp_process+0x47c>
 8016c50:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8016d94 <tcp_process+0x5bc>)
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	f003 0320 	and.w	r3, r3, #32
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d037      	beq.n	8016cd6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	8b5b      	ldrh	r3, [r3, #26]
 8016c6a:	f043 0302 	orr.w	r3, r3, #2
 8016c6e:	b29a      	uxth	r2, r3
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2207      	movs	r2, #7
 8016c78:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016c7a:	e02c      	b.n	8016cd6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8016d6c <tcp_process+0x594>)
 8016c7e:	6819      	ldr	r1, [r3, #0]
 8016c80:	4b3b      	ldr	r3, [pc, #236]	@ (8016d70 <tcp_process+0x598>)
 8016c82:	881b      	ldrh	r3, [r3, #0]
 8016c84:	461a      	mov	r2, r3
 8016c86:	4b3b      	ldr	r3, [pc, #236]	@ (8016d74 <tcp_process+0x59c>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8016d78 <tcp_process+0x5a0>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c90:	885b      	ldrh	r3, [r3, #2]
 8016c92:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c94:	4a38      	ldr	r2, [pc, #224]	@ (8016d78 <tcp_process+0x5a0>)
 8016c96:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c98:	8812      	ldrh	r2, [r2, #0]
 8016c9a:	b292      	uxth	r2, r2
 8016c9c:	9202      	str	r2, [sp, #8]
 8016c9e:	9301      	str	r3, [sp, #4]
 8016ca0:	4b36      	ldr	r3, [pc, #216]	@ (8016d7c <tcp_process+0x5a4>)
 8016ca2:	9300      	str	r3, [sp, #0]
 8016ca4:	4b36      	ldr	r3, [pc, #216]	@ (8016d80 <tcp_process+0x5a8>)
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	6878      	ldr	r0, [r7, #4]
 8016caa:	f003 f823 	bl	8019cf4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016cae:	e167      	b.n	8016f80 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8016d68 <tcp_process+0x590>)
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	f003 0302 	and.w	r3, r3, #2
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	f000 8161 	beq.w	8016f80 <tcp_process+0x7a8>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cc2:	1e5a      	subs	r2, r3, #1
 8016cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8016d74 <tcp_process+0x59c>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	f040 8159 	bne.w	8016f80 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f002 fe0a 	bl	80198e8 <tcp_rexmit>
      break;
 8016cd4:	e154      	b.n	8016f80 <tcp_process+0x7a8>
 8016cd6:	e153      	b.n	8016f80 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f000 fa71 	bl	80171c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016cde:	4b2d      	ldr	r3, [pc, #180]	@ (8016d94 <tcp_process+0x5bc>)
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	f003 0320 	and.w	r3, r3, #32
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	f000 814c 	beq.w	8016f84 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	8b5b      	ldrh	r3, [r3, #26]
 8016cf0:	f043 0302 	orr.w	r3, r3, #2
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2207      	movs	r2, #7
 8016cfe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016d00:	e140      	b.n	8016f84 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f000 fa5c 	bl	80171c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016d08:	4b22      	ldr	r3, [pc, #136]	@ (8016d94 <tcp_process+0x5bc>)
 8016d0a:	781b      	ldrb	r3, [r3, #0]
 8016d0c:	f003 0320 	and.w	r3, r3, #32
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d071      	beq.n	8016df8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016d14:	4b14      	ldr	r3, [pc, #80]	@ (8016d68 <tcp_process+0x590>)
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	f003 0310 	and.w	r3, r3, #16
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d060      	beq.n	8016de2 <tcp_process+0x60a>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016d24:	4b11      	ldr	r3, [pc, #68]	@ (8016d6c <tcp_process+0x594>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	d15a      	bne.n	8016de2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d156      	bne.n	8016de2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	8b5b      	ldrh	r3, [r3, #26]
 8016d38:	f043 0302 	orr.w	r3, r3, #2
 8016d3c:	b29a      	uxth	r2, r3
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f7fe fdbc 	bl	80158c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016d48:	4b13      	ldr	r3, [pc, #76]	@ (8016d98 <tcp_process+0x5c0>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	429a      	cmp	r2, r3
 8016d50:	d105      	bne.n	8016d5e <tcp_process+0x586>
 8016d52:	4b11      	ldr	r3, [pc, #68]	@ (8016d98 <tcp_process+0x5c0>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	68db      	ldr	r3, [r3, #12]
 8016d58:	4a0f      	ldr	r2, [pc, #60]	@ (8016d98 <tcp_process+0x5c0>)
 8016d5a:	6013      	str	r3, [r2, #0]
 8016d5c:	e02e      	b.n	8016dbc <tcp_process+0x5e4>
 8016d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8016d98 <tcp_process+0x5c0>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	617b      	str	r3, [r7, #20]
 8016d64:	e027      	b.n	8016db6 <tcp_process+0x5de>
 8016d66:	bf00      	nop
 8016d68:	2000fd00 	.word	0x2000fd00
 8016d6c:	2000fcf8 	.word	0x2000fcf8
 8016d70:	2000fcfe 	.word	0x2000fcfe
 8016d74:	2000fcf4 	.word	0x2000fcf4
 8016d78:	2000fce4 	.word	0x2000fce4
 8016d7c:	2000a26c 	.word	0x2000a26c
 8016d80:	2000a270 	.word	0x2000a270
 8016d84:	08022bd0 	.word	0x08022bd0
 8016d88:	08022e70 	.word	0x08022e70
 8016d8c:	08022c1c 	.word	0x08022c1c
 8016d90:	2000fcfc 	.word	0x2000fcfc
 8016d94:	2000fd01 	.word	0x2000fd01
 8016d98:	2000fcc8 	.word	0x2000fcc8
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	68db      	ldr	r3, [r3, #12]
 8016da0:	687a      	ldr	r2, [r7, #4]
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d104      	bne.n	8016db0 <tcp_process+0x5d8>
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	68da      	ldr	r2, [r3, #12]
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	60da      	str	r2, [r3, #12]
 8016dae:	e005      	b.n	8016dbc <tcp_process+0x5e4>
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	68db      	ldr	r3, [r3, #12]
 8016db4:	617b      	str	r3, [r7, #20]
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d1ef      	bne.n	8016d9c <tcp_process+0x5c4>
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	60da      	str	r2, [r3, #12]
 8016dc2:	4b77      	ldr	r3, [pc, #476]	@ (8016fa0 <tcp_process+0x7c8>)
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	220a      	movs	r2, #10
 8016dcc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016dce:	4b75      	ldr	r3, [pc, #468]	@ (8016fa4 <tcp_process+0x7cc>)
 8016dd0:	681a      	ldr	r2, [r3, #0]
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	60da      	str	r2, [r3, #12]
 8016dd6:	4a73      	ldr	r2, [pc, #460]	@ (8016fa4 <tcp_process+0x7cc>)
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	6013      	str	r3, [r2, #0]
 8016ddc:	f003 f94c 	bl	801a078 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016de0:	e0d2      	b.n	8016f88 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	8b5b      	ldrh	r3, [r3, #26]
 8016de6:	f043 0302 	orr.w	r3, r3, #2
 8016dea:	b29a      	uxth	r2, r3
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2208      	movs	r2, #8
 8016df4:	751a      	strb	r2, [r3, #20]
      break;
 8016df6:	e0c7      	b.n	8016f88 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016df8:	4b6b      	ldr	r3, [pc, #428]	@ (8016fa8 <tcp_process+0x7d0>)
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	f003 0310 	and.w	r3, r3, #16
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	f000 80c1 	beq.w	8016f88 <tcp_process+0x7b0>
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e0a:	4b68      	ldr	r3, [pc, #416]	@ (8016fac <tcp_process+0x7d4>)
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	f040 80ba 	bne.w	8016f88 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	f040 80b5 	bne.w	8016f88 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	2206      	movs	r2, #6
 8016e22:	751a      	strb	r2, [r3, #20]
      break;
 8016e24:	e0b0      	b.n	8016f88 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f000 f9ca 	bl	80171c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016e2c:	4b60      	ldr	r3, [pc, #384]	@ (8016fb0 <tcp_process+0x7d8>)
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	f003 0320 	and.w	r3, r3, #32
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	f000 80a9 	beq.w	8016f8c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	8b5b      	ldrh	r3, [r3, #26]
 8016e3e:	f043 0302 	orr.w	r3, r3, #2
 8016e42:	b29a      	uxth	r2, r3
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f7fe fd39 	bl	80158c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016e4e:	4b59      	ldr	r3, [pc, #356]	@ (8016fb4 <tcp_process+0x7dc>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	687a      	ldr	r2, [r7, #4]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d105      	bne.n	8016e64 <tcp_process+0x68c>
 8016e58:	4b56      	ldr	r3, [pc, #344]	@ (8016fb4 <tcp_process+0x7dc>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	68db      	ldr	r3, [r3, #12]
 8016e5e:	4a55      	ldr	r2, [pc, #340]	@ (8016fb4 <tcp_process+0x7dc>)
 8016e60:	6013      	str	r3, [r2, #0]
 8016e62:	e013      	b.n	8016e8c <tcp_process+0x6b4>
 8016e64:	4b53      	ldr	r3, [pc, #332]	@ (8016fb4 <tcp_process+0x7dc>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	613b      	str	r3, [r7, #16]
 8016e6a:	e00c      	b.n	8016e86 <tcp_process+0x6ae>
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	68db      	ldr	r3, [r3, #12]
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d104      	bne.n	8016e80 <tcp_process+0x6a8>
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	68da      	ldr	r2, [r3, #12]
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	60da      	str	r2, [r3, #12]
 8016e7e:	e005      	b.n	8016e8c <tcp_process+0x6b4>
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	68db      	ldr	r3, [r3, #12]
 8016e84:	613b      	str	r3, [r7, #16]
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d1ef      	bne.n	8016e6c <tcp_process+0x694>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	60da      	str	r2, [r3, #12]
 8016e92:	4b43      	ldr	r3, [pc, #268]	@ (8016fa0 <tcp_process+0x7c8>)
 8016e94:	2201      	movs	r2, #1
 8016e96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	220a      	movs	r2, #10
 8016e9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016e9e:	4b41      	ldr	r3, [pc, #260]	@ (8016fa4 <tcp_process+0x7cc>)
 8016ea0:	681a      	ldr	r2, [r3, #0]
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	60da      	str	r2, [r3, #12]
 8016ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8016fa4 <tcp_process+0x7cc>)
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6013      	str	r3, [r2, #0]
 8016eac:	f003 f8e4 	bl	801a078 <tcp_timer_needed>
      }
      break;
 8016eb0:	e06c      	b.n	8016f8c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f000 f984 	bl	80171c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8016fa8 <tcp_process+0x7d0>)
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	f003 0310 	and.w	r3, r3, #16
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d065      	beq.n	8016f90 <tcp_process+0x7b8>
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016ec8:	4b38      	ldr	r3, [pc, #224]	@ (8016fac <tcp_process+0x7d4>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d15f      	bne.n	8016f90 <tcp_process+0x7b8>
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d15b      	bne.n	8016f90 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f7fe fcf1 	bl	80158c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016ede:	4b35      	ldr	r3, [pc, #212]	@ (8016fb4 <tcp_process+0x7dc>)
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d105      	bne.n	8016ef4 <tcp_process+0x71c>
 8016ee8:	4b32      	ldr	r3, [pc, #200]	@ (8016fb4 <tcp_process+0x7dc>)
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	68db      	ldr	r3, [r3, #12]
 8016eee:	4a31      	ldr	r2, [pc, #196]	@ (8016fb4 <tcp_process+0x7dc>)
 8016ef0:	6013      	str	r3, [r2, #0]
 8016ef2:	e013      	b.n	8016f1c <tcp_process+0x744>
 8016ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8016fb4 <tcp_process+0x7dc>)
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	60fb      	str	r3, [r7, #12]
 8016efa:	e00c      	b.n	8016f16 <tcp_process+0x73e>
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	68db      	ldr	r3, [r3, #12]
 8016f00:	687a      	ldr	r2, [r7, #4]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d104      	bne.n	8016f10 <tcp_process+0x738>
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	68da      	ldr	r2, [r3, #12]
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	60da      	str	r2, [r3, #12]
 8016f0e:	e005      	b.n	8016f1c <tcp_process+0x744>
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	68db      	ldr	r3, [r3, #12]
 8016f14:	60fb      	str	r3, [r7, #12]
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d1ef      	bne.n	8016efc <tcp_process+0x724>
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	60da      	str	r2, [r3, #12]
 8016f22:	4b1f      	ldr	r3, [pc, #124]	@ (8016fa0 <tcp_process+0x7c8>)
 8016f24:	2201      	movs	r2, #1
 8016f26:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	220a      	movs	r2, #10
 8016f2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8016fa4 <tcp_process+0x7cc>)
 8016f30:	681a      	ldr	r2, [r3, #0]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	60da      	str	r2, [r3, #12]
 8016f36:	4a1b      	ldr	r2, [pc, #108]	@ (8016fa4 <tcp_process+0x7cc>)
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	6013      	str	r3, [r2, #0]
 8016f3c:	f003 f89c 	bl	801a078 <tcp_timer_needed>
      }
      break;
 8016f40:	e026      	b.n	8016f90 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016f42:	6878      	ldr	r0, [r7, #4]
 8016f44:	f000 f93c 	bl	80171c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016f48:	4b17      	ldr	r3, [pc, #92]	@ (8016fa8 <tcp_process+0x7d0>)
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	f003 0310 	and.w	r3, r3, #16
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d01f      	beq.n	8016f94 <tcp_process+0x7bc>
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016f58:	4b14      	ldr	r3, [pc, #80]	@ (8016fac <tcp_process+0x7d4>)
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d119      	bne.n	8016f94 <tcp_process+0x7bc>
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d115      	bne.n	8016f94 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016f68:	4b11      	ldr	r3, [pc, #68]	@ (8016fb0 <tcp_process+0x7d8>)
 8016f6a:	781b      	ldrb	r3, [r3, #0]
 8016f6c:	f043 0310 	orr.w	r3, r3, #16
 8016f70:	b2da      	uxtb	r2, r3
 8016f72:	4b0f      	ldr	r3, [pc, #60]	@ (8016fb0 <tcp_process+0x7d8>)
 8016f74:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016f76:	e00d      	b.n	8016f94 <tcp_process+0x7bc>
    default:
      break;
 8016f78:	bf00      	nop
 8016f7a:	e00c      	b.n	8016f96 <tcp_process+0x7be>
      break;
 8016f7c:	bf00      	nop
 8016f7e:	e00a      	b.n	8016f96 <tcp_process+0x7be>
      break;
 8016f80:	bf00      	nop
 8016f82:	e008      	b.n	8016f96 <tcp_process+0x7be>
      break;
 8016f84:	bf00      	nop
 8016f86:	e006      	b.n	8016f96 <tcp_process+0x7be>
      break;
 8016f88:	bf00      	nop
 8016f8a:	e004      	b.n	8016f96 <tcp_process+0x7be>
      break;
 8016f8c:	bf00      	nop
 8016f8e:	e002      	b.n	8016f96 <tcp_process+0x7be>
      break;
 8016f90:	bf00      	nop
 8016f92:	e000      	b.n	8016f96 <tcp_process+0x7be>
      break;
 8016f94:	bf00      	nop
  }
  return ERR_OK;
 8016f96:	2300      	movs	r3, #0
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3724      	adds	r7, #36	@ 0x24
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd90      	pop	{r4, r7, pc}
 8016fa0:	2000fcd0 	.word	0x2000fcd0
 8016fa4:	2000fccc 	.word	0x2000fccc
 8016fa8:	2000fd00 	.word	0x2000fd00
 8016fac:	2000fcf8 	.word	0x2000fcf8
 8016fb0:	2000fd01 	.word	0x2000fd01
 8016fb4:	2000fcc8 	.word	0x2000fcc8

08016fb8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016fb8:	b590      	push	{r4, r7, lr}
 8016fba:	b085      	sub	sp, #20
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 8016fc0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d106      	bne.n	8016fd6 <tcp_oos_insert_segment+0x1e>
 8016fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80170b8 <tcp_oos_insert_segment+0x100>)
 8016fca:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016fce:	493b      	ldr	r1, [pc, #236]	@ (80170bc <tcp_oos_insert_segment+0x104>)
 8016fd0:	483b      	ldr	r0, [pc, #236]	@ (80170c0 <tcp_oos_insert_segment+0x108>)
 8016fd2:	f007 f9c7 	bl	801e364 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	899b      	ldrh	r3, [r3, #12]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fa feb0 	bl	8011d44 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	f003 0301 	and.w	r3, r3, #1
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d028      	beq.n	8017042 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016ff0:	6838      	ldr	r0, [r7, #0]
 8016ff2:	f7fe f995 	bl	8015320 <tcp_segs_free>
    next = NULL;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	603b      	str	r3, [r7, #0]
 8016ffa:	e056      	b.n	80170aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	68db      	ldr	r3, [r3, #12]
 8017000:	899b      	ldrh	r3, [r3, #12]
 8017002:	b29b      	uxth	r3, r3
 8017004:	4618      	mov	r0, r3
 8017006:	f7fa fe9d 	bl	8011d44 <lwip_htons>
 801700a:	4603      	mov	r3, r0
 801700c:	b2db      	uxtb	r3, r3
 801700e:	f003 0301 	and.w	r3, r3, #1
 8017012:	2b00      	cmp	r3, #0
 8017014:	d00d      	beq.n	8017032 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	68db      	ldr	r3, [r3, #12]
 801701a:	899b      	ldrh	r3, [r3, #12]
 801701c:	b29c      	uxth	r4, r3
 801701e:	2001      	movs	r0, #1
 8017020:	f7fa fe90 	bl	8011d44 <lwip_htons>
 8017024:	4603      	mov	r3, r0
 8017026:	461a      	mov	r2, r3
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	68db      	ldr	r3, [r3, #12]
 801702c:	4322      	orrs	r2, r4
 801702e:	b292      	uxth	r2, r2
 8017030:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801703c:	68f8      	ldr	r0, [r7, #12]
 801703e:	f7fe f984 	bl	801534a <tcp_seg_free>
    while (next &&
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d00e      	beq.n	8017066 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	891b      	ldrh	r3, [r3, #8]
 801704c:	461a      	mov	r2, r3
 801704e:	4b1d      	ldr	r3, [pc, #116]	@ (80170c4 <tcp_oos_insert_segment+0x10c>)
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	441a      	add	r2, r3
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	68db      	ldr	r3, [r3, #12]
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	6839      	ldr	r1, [r7, #0]
 801705c:	8909      	ldrh	r1, [r1, #8]
 801705e:	440b      	add	r3, r1
 8017060:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017062:	2b00      	cmp	r3, #0
 8017064:	daca      	bge.n	8016ffc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d01e      	beq.n	80170aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	891b      	ldrh	r3, [r3, #8]
 8017070:	461a      	mov	r2, r3
 8017072:	4b14      	ldr	r3, [pc, #80]	@ (80170c4 <tcp_oos_insert_segment+0x10c>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	441a      	add	r2, r3
 8017078:	683b      	ldr	r3, [r7, #0]
 801707a:	68db      	ldr	r3, [r3, #12]
 801707c:	685b      	ldr	r3, [r3, #4]
 801707e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017080:	2b00      	cmp	r3, #0
 8017082:	dd12      	ble.n	80170aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	68db      	ldr	r3, [r3, #12]
 8017088:	685b      	ldr	r3, [r3, #4]
 801708a:	b29a      	uxth	r2, r3
 801708c:	4b0d      	ldr	r3, [pc, #52]	@ (80170c4 <tcp_oos_insert_segment+0x10c>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	b29b      	uxth	r3, r3
 8017092:	1ad3      	subs	r3, r2, r3
 8017094:	b29a      	uxth	r2, r3
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	685a      	ldr	r2, [r3, #4]
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	891b      	ldrh	r3, [r3, #8]
 80170a2:	4619      	mov	r1, r3
 80170a4:	4610      	mov	r0, r2
 80170a6:	f7fc fb83 	bl	80137b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	683a      	ldr	r2, [r7, #0]
 80170ae:	601a      	str	r2, [r3, #0]
}
 80170b0:	bf00      	nop
 80170b2:	3714      	adds	r7, #20
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd90      	pop	{r4, r7, pc}
 80170b8:	08022bd0 	.word	0x08022bd0
 80170bc:	08022e90 	.word	0x08022e90
 80170c0:	08022c1c 	.word	0x08022c1c
 80170c4:	2000fcf4 	.word	0x2000fcf4

080170c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80170c8:	b5b0      	push	{r4, r5, r7, lr}
 80170ca:	b086      	sub	sp, #24
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	60f8      	str	r0, [r7, #12]
 80170d0:	60b9      	str	r1, [r7, #8]
 80170d2:	607a      	str	r2, [r7, #4]
 80170d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80170d6:	e03e      	b.n	8017156 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80170d8:	68bb      	ldr	r3, [r7, #8]
 80170da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	685b      	ldr	r3, [r3, #4]
 80170e6:	4618      	mov	r0, r3
 80170e8:	f7fc fd76 	bl	8013bd8 <pbuf_clen>
 80170ec:	4603      	mov	r3, r0
 80170ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80170f6:	8a7a      	ldrh	r2, [r7, #18]
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d906      	bls.n	801710a <tcp_free_acked_segments+0x42>
 80170fc:	4b2a      	ldr	r3, [pc, #168]	@ (80171a8 <tcp_free_acked_segments+0xe0>)
 80170fe:	f240 4257 	movw	r2, #1111	@ 0x457
 8017102:	492a      	ldr	r1, [pc, #168]	@ (80171ac <tcp_free_acked_segments+0xe4>)
 8017104:	482a      	ldr	r0, [pc, #168]	@ (80171b0 <tcp_free_acked_segments+0xe8>)
 8017106:	f007 f92d 	bl	801e364 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017110:	8a7b      	ldrh	r3, [r7, #18]
 8017112:	1ad3      	subs	r3, r2, r3
 8017114:	b29a      	uxth	r2, r3
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	891a      	ldrh	r2, [r3, #8]
 8017120:	4b24      	ldr	r3, [pc, #144]	@ (80171b4 <tcp_free_acked_segments+0xec>)
 8017122:	881b      	ldrh	r3, [r3, #0]
 8017124:	4413      	add	r3, r2
 8017126:	b29a      	uxth	r2, r3
 8017128:	4b22      	ldr	r3, [pc, #136]	@ (80171b4 <tcp_free_acked_segments+0xec>)
 801712a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801712c:	6978      	ldr	r0, [r7, #20]
 801712e:	f7fe f90c 	bl	801534a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017138:	2b00      	cmp	r3, #0
 801713a:	d00c      	beq.n	8017156 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d109      	bne.n	8017156 <tcp_free_acked_segments+0x8e>
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d106      	bne.n	8017156 <tcp_free_acked_segments+0x8e>
 8017148:	4b17      	ldr	r3, [pc, #92]	@ (80171a8 <tcp_free_acked_segments+0xe0>)
 801714a:	f240 4261 	movw	r2, #1121	@ 0x461
 801714e:	491a      	ldr	r1, [pc, #104]	@ (80171b8 <tcp_free_acked_segments+0xf0>)
 8017150:	4817      	ldr	r0, [pc, #92]	@ (80171b0 <tcp_free_acked_segments+0xe8>)
 8017152:	f007 f907 	bl	801e364 <iprintf>
  while (seg_list != NULL &&
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d020      	beq.n	801719e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	68db      	ldr	r3, [r3, #12]
 8017160:	685b      	ldr	r3, [r3, #4]
 8017162:	4618      	mov	r0, r3
 8017164:	f7fa fe03 	bl	8011d6e <lwip_htonl>
 8017168:	4604      	mov	r4, r0
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	891b      	ldrh	r3, [r3, #8]
 801716e:	461d      	mov	r5, r3
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	68db      	ldr	r3, [r3, #12]
 8017174:	899b      	ldrh	r3, [r3, #12]
 8017176:	b29b      	uxth	r3, r3
 8017178:	4618      	mov	r0, r3
 801717a:	f7fa fde3 	bl	8011d44 <lwip_htons>
 801717e:	4603      	mov	r3, r0
 8017180:	b2db      	uxtb	r3, r3
 8017182:	f003 0303 	and.w	r3, r3, #3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d001      	beq.n	801718e <tcp_free_acked_segments+0xc6>
 801718a:	2301      	movs	r3, #1
 801718c:	e000      	b.n	8017190 <tcp_free_acked_segments+0xc8>
 801718e:	2300      	movs	r3, #0
 8017190:	442b      	add	r3, r5
 8017192:	18e2      	adds	r2, r4, r3
 8017194:	4b09      	ldr	r3, [pc, #36]	@ (80171bc <tcp_free_acked_segments+0xf4>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801719a:	2b00      	cmp	r3, #0
 801719c:	dd9c      	ble.n	80170d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801719e:	68bb      	ldr	r3, [r7, #8]
}
 80171a0:	4618      	mov	r0, r3
 80171a2:	3718      	adds	r7, #24
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bdb0      	pop	{r4, r5, r7, pc}
 80171a8:	08022bd0 	.word	0x08022bd0
 80171ac:	08022eb8 	.word	0x08022eb8
 80171b0:	08022c1c 	.word	0x08022c1c
 80171b4:	2000fcfc 	.word	0x2000fcfc
 80171b8:	08022ee0 	.word	0x08022ee0
 80171bc:	2000fcf8 	.word	0x2000fcf8

080171c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80171c0:	b5b0      	push	{r4, r5, r7, lr}
 80171c2:	b094      	sub	sp, #80	@ 0x50
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80171c8:	2300      	movs	r3, #0
 80171ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d106      	bne.n	80171e0 <tcp_receive+0x20>
 80171d2:	4b91      	ldr	r3, [pc, #580]	@ (8017418 <tcp_receive+0x258>)
 80171d4:	f240 427b 	movw	r2, #1147	@ 0x47b
 80171d8:	4990      	ldr	r1, [pc, #576]	@ (801741c <tcp_receive+0x25c>)
 80171da:	4891      	ldr	r0, [pc, #580]	@ (8017420 <tcp_receive+0x260>)
 80171dc:	f007 f8c2 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	7d1b      	ldrb	r3, [r3, #20]
 80171e4:	2b03      	cmp	r3, #3
 80171e6:	d806      	bhi.n	80171f6 <tcp_receive+0x36>
 80171e8:	4b8b      	ldr	r3, [pc, #556]	@ (8017418 <tcp_receive+0x258>)
 80171ea:	f240 427c 	movw	r2, #1148	@ 0x47c
 80171ee:	498d      	ldr	r1, [pc, #564]	@ (8017424 <tcp_receive+0x264>)
 80171f0:	488b      	ldr	r0, [pc, #556]	@ (8017420 <tcp_receive+0x260>)
 80171f2:	f007 f8b7 	bl	801e364 <iprintf>

  if (flags & TCP_ACK) {
 80171f6:	4b8c      	ldr	r3, [pc, #560]	@ (8017428 <tcp_receive+0x268>)
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	f003 0310 	and.w	r3, r3, #16
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f000 8264 	beq.w	80176cc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801720a:	461a      	mov	r2, r3
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017210:	4413      	add	r3, r2
 8017212:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017218:	4b84      	ldr	r3, [pc, #528]	@ (801742c <tcp_receive+0x26c>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	1ad3      	subs	r3, r2, r3
 801721e:	2b00      	cmp	r3, #0
 8017220:	db1b      	blt.n	801725a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017226:	4b81      	ldr	r3, [pc, #516]	@ (801742c <tcp_receive+0x26c>)
 8017228:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801722a:	429a      	cmp	r2, r3
 801722c:	d106      	bne.n	801723c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017232:	4b7f      	ldr	r3, [pc, #508]	@ (8017430 <tcp_receive+0x270>)
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	1ad3      	subs	r3, r2, r3
 8017238:	2b00      	cmp	r3, #0
 801723a:	db0e      	blt.n	801725a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017240:	4b7b      	ldr	r3, [pc, #492]	@ (8017430 <tcp_receive+0x270>)
 8017242:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017244:	429a      	cmp	r2, r3
 8017246:	d125      	bne.n	8017294 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017248:	4b7a      	ldr	r3, [pc, #488]	@ (8017434 <tcp_receive+0x274>)
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	89db      	ldrh	r3, [r3, #14]
 801724e:	b29a      	uxth	r2, r3
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017256:	429a      	cmp	r2, r3
 8017258:	d91c      	bls.n	8017294 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801725a:	4b76      	ldr	r3, [pc, #472]	@ (8017434 <tcp_receive+0x274>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	89db      	ldrh	r3, [r3, #14]
 8017260:	b29a      	uxth	r2, r3
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017274:	429a      	cmp	r2, r3
 8017276:	d205      	bcs.n	8017284 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8017284:	4b69      	ldr	r3, [pc, #420]	@ (801742c <tcp_receive+0x26c>)
 8017286:	681a      	ldr	r2, [r3, #0]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801728c:	4b68      	ldr	r3, [pc, #416]	@ (8017430 <tcp_receive+0x270>)
 801728e:	681a      	ldr	r2, [r3, #0]
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017294:	4b66      	ldr	r3, [pc, #408]	@ (8017430 <tcp_receive+0x270>)
 8017296:	681a      	ldr	r2, [r3, #0]
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801729c:	1ad3      	subs	r3, r2, r3
 801729e:	2b00      	cmp	r3, #0
 80172a0:	dc58      	bgt.n	8017354 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80172a2:	4b65      	ldr	r3, [pc, #404]	@ (8017438 <tcp_receive+0x278>)
 80172a4:	881b      	ldrh	r3, [r3, #0]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d14b      	bne.n	8017342 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80172ae:	687a      	ldr	r2, [r7, #4]
 80172b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80172b4:	4413      	add	r3, r2
 80172b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80172b8:	429a      	cmp	r2, r3
 80172ba:	d142      	bne.n	8017342 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	db3d      	blt.n	8017342 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80172ca:	4b59      	ldr	r3, [pc, #356]	@ (8017430 <tcp_receive+0x270>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d137      	bne.n	8017342 <tcp_receive+0x182>
              found_dupack = 1;
 80172d2:	2301      	movs	r3, #1
 80172d4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80172dc:	2bff      	cmp	r3, #255	@ 0xff
 80172de:	d007      	beq.n	80172f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80172e6:	3301      	adds	r3, #1
 80172e8:	b2da      	uxtb	r2, r3
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80172f6:	2b03      	cmp	r3, #3
 80172f8:	d91b      	bls.n	8017332 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017304:	4413      	add	r3, r2
 8017306:	b29a      	uxth	r2, r3
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801730e:	429a      	cmp	r2, r3
 8017310:	d30a      	bcc.n	8017328 <tcp_receive+0x168>
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801731c:	4413      	add	r3, r2
 801731e:	b29a      	uxth	r2, r3
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017326:	e004      	b.n	8017332 <tcp_receive+0x172>
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801732e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017338:	2b02      	cmp	r3, #2
 801733a:	d902      	bls.n	8017342 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f002 fb3f 	bl	80199c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017344:	2b00      	cmp	r3, #0
 8017346:	f040 8161 	bne.w	801760c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	2200      	movs	r2, #0
 801734e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017352:	e15b      	b.n	801760c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017354:	4b36      	ldr	r3, [pc, #216]	@ (8017430 <tcp_receive+0x270>)
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801735c:	1ad3      	subs	r3, r2, r3
 801735e:	3b01      	subs	r3, #1
 8017360:	2b00      	cmp	r3, #0
 8017362:	f2c0 814e 	blt.w	8017602 <tcp_receive+0x442>
 8017366:	4b32      	ldr	r3, [pc, #200]	@ (8017430 <tcp_receive+0x270>)
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801736e:	1ad3      	subs	r3, r2, r3
 8017370:	2b00      	cmp	r3, #0
 8017372:	f300 8146 	bgt.w	8017602 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	8b5b      	ldrh	r3, [r3, #26]
 801737a:	f003 0304 	and.w	r3, r3, #4
 801737e:	2b00      	cmp	r3, #0
 8017380:	d010      	beq.n	80173a4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	8b5b      	ldrh	r3, [r3, #26]
 8017386:	f023 0304 	bic.w	r3, r3, #4
 801738a:	b29a      	uxth	r2, r3
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2200      	movs	r2, #0
 80173a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2200      	movs	r2, #0
 80173a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80173b2:	10db      	asrs	r3, r3, #3
 80173b4:	b21b      	sxth	r3, r3
 80173b6:	b29a      	uxth	r2, r3
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80173be:	b29b      	uxth	r3, r3
 80173c0:	4413      	add	r3, r2
 80173c2:	b29b      	uxth	r3, r3
 80173c4:	b21a      	sxth	r2, r3
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80173cc:	4b18      	ldr	r3, [pc, #96]	@ (8017430 <tcp_receive+0x270>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	b29a      	uxth	r2, r3
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173d6:	b29b      	uxth	r3, r3
 80173d8:	1ad3      	subs	r3, r2, r3
 80173da:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2200      	movs	r2, #0
 80173e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80173e4:	4b12      	ldr	r3, [pc, #72]	@ (8017430 <tcp_receive+0x270>)
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	7d1b      	ldrb	r3, [r3, #20]
 80173f0:	2b03      	cmp	r3, #3
 80173f2:	f240 8097 	bls.w	8017524 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017402:	429a      	cmp	r2, r3
 8017404:	d245      	bcs.n	8017492 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	8b5b      	ldrh	r3, [r3, #26]
 801740a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801740e:	2b00      	cmp	r3, #0
 8017410:	d014      	beq.n	801743c <tcp_receive+0x27c>
 8017412:	2301      	movs	r3, #1
 8017414:	e013      	b.n	801743e <tcp_receive+0x27e>
 8017416:	bf00      	nop
 8017418:	08022bd0 	.word	0x08022bd0
 801741c:	08022f00 	.word	0x08022f00
 8017420:	08022c1c 	.word	0x08022c1c
 8017424:	08022f1c 	.word	0x08022f1c
 8017428:	2000fd00 	.word	0x2000fd00
 801742c:	2000fcf4 	.word	0x2000fcf4
 8017430:	2000fcf8 	.word	0x2000fcf8
 8017434:	2000fce4 	.word	0x2000fce4
 8017438:	2000fcfe 	.word	0x2000fcfe
 801743c:	2302      	movs	r3, #2
 801743e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017442:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017446:	b29a      	uxth	r2, r3
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801744c:	fb12 f303 	smulbb	r3, r2, r3
 8017450:	b29b      	uxth	r3, r3
 8017452:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017454:	4293      	cmp	r3, r2
 8017456:	bf28      	it	cs
 8017458:	4613      	movcs	r3, r2
 801745a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017462:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017464:	4413      	add	r3, r2
 8017466:	b29a      	uxth	r2, r3
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801746e:	429a      	cmp	r2, r3
 8017470:	d309      	bcc.n	8017486 <tcp_receive+0x2c6>
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017478:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801747a:	4413      	add	r3, r2
 801747c:	b29a      	uxth	r2, r3
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017484:	e04e      	b.n	8017524 <tcp_receive+0x364>
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801748c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017490:	e048      	b.n	8017524 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017498:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801749a:	4413      	add	r3, r2
 801749c:	b29a      	uxth	r2, r3
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d309      	bcc.n	80174bc <tcp_receive+0x2fc>
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80174ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80174b0:	4413      	add	r3, r2
 80174b2:	b29a      	uxth	r2, r3
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80174ba:	e004      	b.n	80174c6 <tcp_receive+0x306>
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80174c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80174d2:	429a      	cmp	r2, r3
 80174d4:	d326      	bcc.n	8017524 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80174e2:	1ad3      	subs	r3, r2, r3
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174f6:	4413      	add	r3, r2
 80174f8:	b29a      	uxth	r2, r3
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017500:	429a      	cmp	r2, r3
 8017502:	d30a      	bcc.n	801751a <tcp_receive+0x35a>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801750e:	4413      	add	r3, r2
 8017510:	b29a      	uxth	r2, r3
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017518:	e004      	b.n	8017524 <tcp_receive+0x364>
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017520:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801752c:	4a98      	ldr	r2, [pc, #608]	@ (8017790 <tcp_receive+0x5d0>)
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	f7ff fdca 	bl	80170c8 <tcp_free_acked_segments>
 8017534:	4602      	mov	r2, r0
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017542:	4a94      	ldr	r2, [pc, #592]	@ (8017794 <tcp_receive+0x5d4>)
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f7ff fdbf 	bl	80170c8 <tcp_free_acked_segments>
 801754a:	4602      	mov	r2, r0
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017554:	2b00      	cmp	r3, #0
 8017556:	d104      	bne.n	8017562 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801755e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017560:	e002      	b.n	8017568 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2200      	movs	r2, #0
 8017566:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	2200      	movs	r2, #0
 801756c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017572:	2b00      	cmp	r3, #0
 8017574:	d103      	bne.n	801757e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	2200      	movs	r2, #0
 801757a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017584:	4b84      	ldr	r3, [pc, #528]	@ (8017798 <tcp_receive+0x5d8>)
 8017586:	881b      	ldrh	r3, [r3, #0]
 8017588:	4413      	add	r3, r2
 801758a:	b29a      	uxth	r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	8b5b      	ldrh	r3, [r3, #26]
 8017596:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801759a:	2b00      	cmp	r3, #0
 801759c:	d035      	beq.n	801760a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d118      	bne.n	80175d8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d00c      	beq.n	80175c8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175b6:	68db      	ldr	r3, [r3, #12]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7fa fbd7 	bl	8011d6e <lwip_htonl>
 80175c0:	4603      	mov	r3, r0
 80175c2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	dc20      	bgt.n	801760a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	8b5b      	ldrh	r3, [r3, #26]
 80175cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80175d0:	b29a      	uxth	r2, r3
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80175d6:	e018      	b.n	801760a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175e0:	68db      	ldr	r3, [r3, #12]
 80175e2:	685b      	ldr	r3, [r3, #4]
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7fa fbc2 	bl	8011d6e <lwip_htonl>
 80175ea:	4603      	mov	r3, r0
 80175ec:	1ae3      	subs	r3, r4, r3
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	dc0b      	bgt.n	801760a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	8b5b      	ldrh	r3, [r3, #26]
 80175f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80175fa:	b29a      	uxth	r2, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017600:	e003      	b.n	801760a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017602:	6878      	ldr	r0, [r7, #4]
 8017604:	f002 fbc8 	bl	8019d98 <tcp_send_empty_ack>
 8017608:	e000      	b.n	801760c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801760a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017610:	2b00      	cmp	r3, #0
 8017612:	d05b      	beq.n	80176cc <tcp_receive+0x50c>
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017618:	4b60      	ldr	r3, [pc, #384]	@ (801779c <tcp_receive+0x5dc>)
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	1ad3      	subs	r3, r2, r3
 801761e:	2b00      	cmp	r3, #0
 8017620:	da54      	bge.n	80176cc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017622:	4b5f      	ldr	r3, [pc, #380]	@ (80177a0 <tcp_receive+0x5e0>)
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	b29a      	uxth	r2, r3
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801762c:	b29b      	uxth	r3, r3
 801762e:	1ad3      	subs	r3, r2, r3
 8017630:	b29b      	uxth	r3, r3
 8017632:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017636:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017640:	10db      	asrs	r3, r3, #3
 8017642:	b21b      	sxth	r3, r3
 8017644:	b29b      	uxth	r3, r3
 8017646:	1ad3      	subs	r3, r2, r3
 8017648:	b29b      	uxth	r3, r3
 801764a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017654:	b29a      	uxth	r2, r3
 8017656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801765a:	4413      	add	r3, r2
 801765c:	b29b      	uxth	r3, r3
 801765e:	b21a      	sxth	r2, r3
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017664:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017668:	2b00      	cmp	r3, #0
 801766a:	da05      	bge.n	8017678 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801766c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017670:	425b      	negs	r3, r3
 8017672:	b29b      	uxth	r3, r3
 8017674:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017678:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017682:	109b      	asrs	r3, r3, #2
 8017684:	b21b      	sxth	r3, r3
 8017686:	b29b      	uxth	r3, r3
 8017688:	1ad3      	subs	r3, r2, r3
 801768a:	b29b      	uxth	r3, r3
 801768c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017696:	b29a      	uxth	r2, r3
 8017698:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801769c:	4413      	add	r3, r2
 801769e:	b29b      	uxth	r3, r3
 80176a0:	b21a      	sxth	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80176ac:	10db      	asrs	r3, r3, #3
 80176ae:	b21b      	sxth	r3, r3
 80176b0:	b29a      	uxth	r2, r3
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80176b8:	b29b      	uxth	r3, r3
 80176ba:	4413      	add	r3, r2
 80176bc:	b29b      	uxth	r3, r3
 80176be:	b21a      	sxth	r2, r3
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2200      	movs	r2, #0
 80176ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80176cc:	4b35      	ldr	r3, [pc, #212]	@ (80177a4 <tcp_receive+0x5e4>)
 80176ce:	881b      	ldrh	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	f000 84df 	beq.w	8018094 <tcp_receive+0xed4>
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	7d1b      	ldrb	r3, [r3, #20]
 80176da:	2b06      	cmp	r3, #6
 80176dc:	f200 84da 	bhi.w	8018094 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176e4:	4b30      	ldr	r3, [pc, #192]	@ (80177a8 <tcp_receive+0x5e8>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	1ad3      	subs	r3, r2, r3
 80176ea:	3b01      	subs	r3, #1
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	f2c0 808f 	blt.w	8017810 <tcp_receive+0x650>
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176f6:	4b2b      	ldr	r3, [pc, #172]	@ (80177a4 <tcp_receive+0x5e4>)
 80176f8:	881b      	ldrh	r3, [r3, #0]
 80176fa:	4619      	mov	r1, r3
 80176fc:	4b2a      	ldr	r3, [pc, #168]	@ (80177a8 <tcp_receive+0x5e8>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	440b      	add	r3, r1
 8017702:	1ad3      	subs	r3, r2, r3
 8017704:	3301      	adds	r3, #1
 8017706:	2b00      	cmp	r3, #0
 8017708:	f300 8082 	bgt.w	8017810 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801770c:	4b27      	ldr	r3, [pc, #156]	@ (80177ac <tcp_receive+0x5ec>)
 801770e:	685b      	ldr	r3, [r3, #4]
 8017710:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017716:	4b24      	ldr	r3, [pc, #144]	@ (80177a8 <tcp_receive+0x5e8>)
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	1ad3      	subs	r3, r2, r3
 801771c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801771e:	4b23      	ldr	r3, [pc, #140]	@ (80177ac <tcp_receive+0x5ec>)
 8017720:	685b      	ldr	r3, [r3, #4]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d106      	bne.n	8017734 <tcp_receive+0x574>
 8017726:	4b22      	ldr	r3, [pc, #136]	@ (80177b0 <tcp_receive+0x5f0>)
 8017728:	f240 5294 	movw	r2, #1428	@ 0x594
 801772c:	4921      	ldr	r1, [pc, #132]	@ (80177b4 <tcp_receive+0x5f4>)
 801772e:	4822      	ldr	r0, [pc, #136]	@ (80177b8 <tcp_receive+0x5f8>)
 8017730:	f006 fe18 	bl	801e364 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017736:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801773a:	4293      	cmp	r3, r2
 801773c:	d906      	bls.n	801774c <tcp_receive+0x58c>
 801773e:	4b1c      	ldr	r3, [pc, #112]	@ (80177b0 <tcp_receive+0x5f0>)
 8017740:	f240 5295 	movw	r2, #1429	@ 0x595
 8017744:	491d      	ldr	r1, [pc, #116]	@ (80177bc <tcp_receive+0x5fc>)
 8017746:	481c      	ldr	r0, [pc, #112]	@ (80177b8 <tcp_receive+0x5f8>)
 8017748:	f006 fe0c 	bl	801e364 <iprintf>
      off = (u16_t)off32;
 801774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801774e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017752:	4b16      	ldr	r3, [pc, #88]	@ (80177ac <tcp_receive+0x5ec>)
 8017754:	685b      	ldr	r3, [r3, #4]
 8017756:	891b      	ldrh	r3, [r3, #8]
 8017758:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801775c:	429a      	cmp	r2, r3
 801775e:	d906      	bls.n	801776e <tcp_receive+0x5ae>
 8017760:	4b13      	ldr	r3, [pc, #76]	@ (80177b0 <tcp_receive+0x5f0>)
 8017762:	f240 5297 	movw	r2, #1431	@ 0x597
 8017766:	4916      	ldr	r1, [pc, #88]	@ (80177c0 <tcp_receive+0x600>)
 8017768:	4813      	ldr	r0, [pc, #76]	@ (80177b8 <tcp_receive+0x5f8>)
 801776a:	f006 fdfb 	bl	801e364 <iprintf>
      inseg.len -= off;
 801776e:	4b0f      	ldr	r3, [pc, #60]	@ (80177ac <tcp_receive+0x5ec>)
 8017770:	891a      	ldrh	r2, [r3, #8]
 8017772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017776:	1ad3      	subs	r3, r2, r3
 8017778:	b29a      	uxth	r2, r3
 801777a:	4b0c      	ldr	r3, [pc, #48]	@ (80177ac <tcp_receive+0x5ec>)
 801777c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801777e:	4b0b      	ldr	r3, [pc, #44]	@ (80177ac <tcp_receive+0x5ec>)
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	891a      	ldrh	r2, [r3, #8]
 8017784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017788:	1ad3      	subs	r3, r2, r3
 801778a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801778c:	e02a      	b.n	80177e4 <tcp_receive+0x624>
 801778e:	bf00      	nop
 8017790:	08022f38 	.word	0x08022f38
 8017794:	08022f40 	.word	0x08022f40
 8017798:	2000fcfc 	.word	0x2000fcfc
 801779c:	2000fcf8 	.word	0x2000fcf8
 80177a0:	2000fcbc 	.word	0x2000fcbc
 80177a4:	2000fcfe 	.word	0x2000fcfe
 80177a8:	2000fcf4 	.word	0x2000fcf4
 80177ac:	2000fcd4 	.word	0x2000fcd4
 80177b0:	08022bd0 	.word	0x08022bd0
 80177b4:	08022f48 	.word	0x08022f48
 80177b8:	08022c1c 	.word	0x08022c1c
 80177bc:	08022f58 	.word	0x08022f58
 80177c0:	08022f68 	.word	0x08022f68
        off -= p->len;
 80177c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177c6:	895b      	ldrh	r3, [r3, #10]
 80177c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80177d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80177d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80177d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177da:	2200      	movs	r2, #0
 80177dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80177de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80177e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177e6:	895b      	ldrh	r3, [r3, #10]
 80177e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d8e9      	bhi.n	80177c4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80177f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80177f4:	4619      	mov	r1, r3
 80177f6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80177f8:	f7fc f8da 	bl	80139b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017800:	4a90      	ldr	r2, [pc, #576]	@ (8017a44 <tcp_receive+0x884>)
 8017802:	6013      	str	r3, [r2, #0]
 8017804:	4b90      	ldr	r3, [pc, #576]	@ (8017a48 <tcp_receive+0x888>)
 8017806:	68db      	ldr	r3, [r3, #12]
 8017808:	4a8e      	ldr	r2, [pc, #568]	@ (8017a44 <tcp_receive+0x884>)
 801780a:	6812      	ldr	r2, [r2, #0]
 801780c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801780e:	e00d      	b.n	801782c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017810:	4b8c      	ldr	r3, [pc, #560]	@ (8017a44 <tcp_receive+0x884>)
 8017812:	681a      	ldr	r2, [r3, #0]
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017818:	1ad3      	subs	r3, r2, r3
 801781a:	2b00      	cmp	r3, #0
 801781c:	da06      	bge.n	801782c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	8b5b      	ldrh	r3, [r3, #26]
 8017822:	f043 0302 	orr.w	r3, r3, #2
 8017826:	b29a      	uxth	r2, r3
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801782c:	4b85      	ldr	r3, [pc, #532]	@ (8017a44 <tcp_receive+0x884>)
 801782e:	681a      	ldr	r2, [r3, #0]
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017834:	1ad3      	subs	r3, r2, r3
 8017836:	2b00      	cmp	r3, #0
 8017838:	f2c0 8427 	blt.w	801808a <tcp_receive+0xeca>
 801783c:	4b81      	ldr	r3, [pc, #516]	@ (8017a44 <tcp_receive+0x884>)
 801783e:	681a      	ldr	r2, [r3, #0]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017844:	6879      	ldr	r1, [r7, #4]
 8017846:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017848:	440b      	add	r3, r1
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	3301      	adds	r3, #1
 801784e:	2b00      	cmp	r3, #0
 8017850:	f300 841b 	bgt.w	801808a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017858:	4b7a      	ldr	r3, [pc, #488]	@ (8017a44 <tcp_receive+0x884>)
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	429a      	cmp	r2, r3
 801785e:	f040 8298 	bne.w	8017d92 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017862:	4b79      	ldr	r3, [pc, #484]	@ (8017a48 <tcp_receive+0x888>)
 8017864:	891c      	ldrh	r4, [r3, #8]
 8017866:	4b78      	ldr	r3, [pc, #480]	@ (8017a48 <tcp_receive+0x888>)
 8017868:	68db      	ldr	r3, [r3, #12]
 801786a:	899b      	ldrh	r3, [r3, #12]
 801786c:	b29b      	uxth	r3, r3
 801786e:	4618      	mov	r0, r3
 8017870:	f7fa fa68 	bl	8011d44 <lwip_htons>
 8017874:	4603      	mov	r3, r0
 8017876:	b2db      	uxtb	r3, r3
 8017878:	f003 0303 	and.w	r3, r3, #3
 801787c:	2b00      	cmp	r3, #0
 801787e:	d001      	beq.n	8017884 <tcp_receive+0x6c4>
 8017880:	2301      	movs	r3, #1
 8017882:	e000      	b.n	8017886 <tcp_receive+0x6c6>
 8017884:	2300      	movs	r3, #0
 8017886:	4423      	add	r3, r4
 8017888:	b29a      	uxth	r2, r3
 801788a:	4b70      	ldr	r3, [pc, #448]	@ (8017a4c <tcp_receive+0x88c>)
 801788c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017892:	4b6e      	ldr	r3, [pc, #440]	@ (8017a4c <tcp_receive+0x88c>)
 8017894:	881b      	ldrh	r3, [r3, #0]
 8017896:	429a      	cmp	r2, r3
 8017898:	d274      	bcs.n	8017984 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801789a:	4b6b      	ldr	r3, [pc, #428]	@ (8017a48 <tcp_receive+0x888>)
 801789c:	68db      	ldr	r3, [r3, #12]
 801789e:	899b      	ldrh	r3, [r3, #12]
 80178a0:	b29b      	uxth	r3, r3
 80178a2:	4618      	mov	r0, r3
 80178a4:	f7fa fa4e 	bl	8011d44 <lwip_htons>
 80178a8:	4603      	mov	r3, r0
 80178aa:	b2db      	uxtb	r3, r3
 80178ac:	f003 0301 	and.w	r3, r3, #1
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d01e      	beq.n	80178f2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80178b4:	4b64      	ldr	r3, [pc, #400]	@ (8017a48 <tcp_receive+0x888>)
 80178b6:	68db      	ldr	r3, [r3, #12]
 80178b8:	899b      	ldrh	r3, [r3, #12]
 80178ba:	b29b      	uxth	r3, r3
 80178bc:	b21b      	sxth	r3, r3
 80178be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80178c2:	b21c      	sxth	r4, r3
 80178c4:	4b60      	ldr	r3, [pc, #384]	@ (8017a48 <tcp_receive+0x888>)
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	899b      	ldrh	r3, [r3, #12]
 80178ca:	b29b      	uxth	r3, r3
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7fa fa39 	bl	8011d44 <lwip_htons>
 80178d2:	4603      	mov	r3, r0
 80178d4:	b2db      	uxtb	r3, r3
 80178d6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80178da:	b29b      	uxth	r3, r3
 80178dc:	4618      	mov	r0, r3
 80178de:	f7fa fa31 	bl	8011d44 <lwip_htons>
 80178e2:	4603      	mov	r3, r0
 80178e4:	b21b      	sxth	r3, r3
 80178e6:	4323      	orrs	r3, r4
 80178e8:	b21a      	sxth	r2, r3
 80178ea:	4b57      	ldr	r3, [pc, #348]	@ (8017a48 <tcp_receive+0x888>)
 80178ec:	68db      	ldr	r3, [r3, #12]
 80178ee:	b292      	uxth	r2, r2
 80178f0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80178f6:	4b54      	ldr	r3, [pc, #336]	@ (8017a48 <tcp_receive+0x888>)
 80178f8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80178fa:	4b53      	ldr	r3, [pc, #332]	@ (8017a48 <tcp_receive+0x888>)
 80178fc:	68db      	ldr	r3, [r3, #12]
 80178fe:	899b      	ldrh	r3, [r3, #12]
 8017900:	b29b      	uxth	r3, r3
 8017902:	4618      	mov	r0, r3
 8017904:	f7fa fa1e 	bl	8011d44 <lwip_htons>
 8017908:	4603      	mov	r3, r0
 801790a:	b2db      	uxtb	r3, r3
 801790c:	f003 0302 	and.w	r3, r3, #2
 8017910:	2b00      	cmp	r3, #0
 8017912:	d005      	beq.n	8017920 <tcp_receive+0x760>
            inseg.len -= 1;
 8017914:	4b4c      	ldr	r3, [pc, #304]	@ (8017a48 <tcp_receive+0x888>)
 8017916:	891b      	ldrh	r3, [r3, #8]
 8017918:	3b01      	subs	r3, #1
 801791a:	b29a      	uxth	r2, r3
 801791c:	4b4a      	ldr	r3, [pc, #296]	@ (8017a48 <tcp_receive+0x888>)
 801791e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017920:	4b49      	ldr	r3, [pc, #292]	@ (8017a48 <tcp_receive+0x888>)
 8017922:	685b      	ldr	r3, [r3, #4]
 8017924:	4a48      	ldr	r2, [pc, #288]	@ (8017a48 <tcp_receive+0x888>)
 8017926:	8912      	ldrh	r2, [r2, #8]
 8017928:	4611      	mov	r1, r2
 801792a:	4618      	mov	r0, r3
 801792c:	f7fb ff40 	bl	80137b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017930:	4b45      	ldr	r3, [pc, #276]	@ (8017a48 <tcp_receive+0x888>)
 8017932:	891c      	ldrh	r4, [r3, #8]
 8017934:	4b44      	ldr	r3, [pc, #272]	@ (8017a48 <tcp_receive+0x888>)
 8017936:	68db      	ldr	r3, [r3, #12]
 8017938:	899b      	ldrh	r3, [r3, #12]
 801793a:	b29b      	uxth	r3, r3
 801793c:	4618      	mov	r0, r3
 801793e:	f7fa fa01 	bl	8011d44 <lwip_htons>
 8017942:	4603      	mov	r3, r0
 8017944:	b2db      	uxtb	r3, r3
 8017946:	f003 0303 	and.w	r3, r3, #3
 801794a:	2b00      	cmp	r3, #0
 801794c:	d001      	beq.n	8017952 <tcp_receive+0x792>
 801794e:	2301      	movs	r3, #1
 8017950:	e000      	b.n	8017954 <tcp_receive+0x794>
 8017952:	2300      	movs	r3, #0
 8017954:	4423      	add	r3, r4
 8017956:	b29a      	uxth	r2, r3
 8017958:	4b3c      	ldr	r3, [pc, #240]	@ (8017a4c <tcp_receive+0x88c>)
 801795a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801795c:	4b3b      	ldr	r3, [pc, #236]	@ (8017a4c <tcp_receive+0x88c>)
 801795e:	881b      	ldrh	r3, [r3, #0]
 8017960:	461a      	mov	r2, r3
 8017962:	4b38      	ldr	r3, [pc, #224]	@ (8017a44 <tcp_receive+0x884>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	441a      	add	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801796c:	6879      	ldr	r1, [r7, #4]
 801796e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017970:	440b      	add	r3, r1
 8017972:	429a      	cmp	r2, r3
 8017974:	d006      	beq.n	8017984 <tcp_receive+0x7c4>
 8017976:	4b36      	ldr	r3, [pc, #216]	@ (8017a50 <tcp_receive+0x890>)
 8017978:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801797c:	4935      	ldr	r1, [pc, #212]	@ (8017a54 <tcp_receive+0x894>)
 801797e:	4836      	ldr	r0, [pc, #216]	@ (8017a58 <tcp_receive+0x898>)
 8017980:	f006 fcf0 	bl	801e364 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017988:	2b00      	cmp	r3, #0
 801798a:	f000 80e6 	beq.w	8017b5a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801798e:	4b2e      	ldr	r3, [pc, #184]	@ (8017a48 <tcp_receive+0x888>)
 8017990:	68db      	ldr	r3, [r3, #12]
 8017992:	899b      	ldrh	r3, [r3, #12]
 8017994:	b29b      	uxth	r3, r3
 8017996:	4618      	mov	r0, r3
 8017998:	f7fa f9d4 	bl	8011d44 <lwip_htons>
 801799c:	4603      	mov	r3, r0
 801799e:	b2db      	uxtb	r3, r3
 80179a0:	f003 0301 	and.w	r3, r3, #1
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d010      	beq.n	80179ca <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80179a8:	e00a      	b.n	80179c0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179ae:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179b4:	681a      	ldr	r2, [r3, #0]
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80179ba:	68f8      	ldr	r0, [r7, #12]
 80179bc:	f7fd fcc5 	bl	801534a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d1f0      	bne.n	80179aa <tcp_receive+0x7ea>
 80179c8:	e0c7      	b.n	8017b5a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80179d0:	e051      	b.n	8017a76 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80179d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80179d4:	68db      	ldr	r3, [r3, #12]
 80179d6:	899b      	ldrh	r3, [r3, #12]
 80179d8:	b29b      	uxth	r3, r3
 80179da:	4618      	mov	r0, r3
 80179dc:	f7fa f9b2 	bl	8011d44 <lwip_htons>
 80179e0:	4603      	mov	r3, r0
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	f003 0301 	and.w	r3, r3, #1
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d03c      	beq.n	8017a66 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80179ec:	4b16      	ldr	r3, [pc, #88]	@ (8017a48 <tcp_receive+0x888>)
 80179ee:	68db      	ldr	r3, [r3, #12]
 80179f0:	899b      	ldrh	r3, [r3, #12]
 80179f2:	b29b      	uxth	r3, r3
 80179f4:	4618      	mov	r0, r3
 80179f6:	f7fa f9a5 	bl	8011d44 <lwip_htons>
 80179fa:	4603      	mov	r3, r0
 80179fc:	b2db      	uxtb	r3, r3
 80179fe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d12f      	bne.n	8017a66 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017a06:	4b10      	ldr	r3, [pc, #64]	@ (8017a48 <tcp_receive+0x888>)
 8017a08:	68db      	ldr	r3, [r3, #12]
 8017a0a:	899b      	ldrh	r3, [r3, #12]
 8017a0c:	b29c      	uxth	r4, r3
 8017a0e:	2001      	movs	r0, #1
 8017a10:	f7fa f998 	bl	8011d44 <lwip_htons>
 8017a14:	4603      	mov	r3, r0
 8017a16:	461a      	mov	r2, r3
 8017a18:	4b0b      	ldr	r3, [pc, #44]	@ (8017a48 <tcp_receive+0x888>)
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	4322      	orrs	r2, r4
 8017a1e:	b292      	uxth	r2, r2
 8017a20:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017a22:	4b09      	ldr	r3, [pc, #36]	@ (8017a48 <tcp_receive+0x888>)
 8017a24:	891c      	ldrh	r4, [r3, #8]
 8017a26:	4b08      	ldr	r3, [pc, #32]	@ (8017a48 <tcp_receive+0x888>)
 8017a28:	68db      	ldr	r3, [r3, #12]
 8017a2a:	899b      	ldrh	r3, [r3, #12]
 8017a2c:	b29b      	uxth	r3, r3
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7fa f988 	bl	8011d44 <lwip_htons>
 8017a34:	4603      	mov	r3, r0
 8017a36:	b2db      	uxtb	r3, r3
 8017a38:	f003 0303 	and.w	r3, r3, #3
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d00d      	beq.n	8017a5c <tcp_receive+0x89c>
 8017a40:	2301      	movs	r3, #1
 8017a42:	e00c      	b.n	8017a5e <tcp_receive+0x89e>
 8017a44:	2000fcf4 	.word	0x2000fcf4
 8017a48:	2000fcd4 	.word	0x2000fcd4
 8017a4c:	2000fcfe 	.word	0x2000fcfe
 8017a50:	08022bd0 	.word	0x08022bd0
 8017a54:	08022f78 	.word	0x08022f78
 8017a58:	08022c1c 	.word	0x08022c1c
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	4423      	add	r3, r4
 8017a60:	b29a      	uxth	r2, r3
 8017a62:	4b98      	ldr	r3, [pc, #608]	@ (8017cc4 <tcp_receive+0xb04>)
 8017a64:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a68:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017a70:	6938      	ldr	r0, [r7, #16]
 8017a72:	f7fd fc6a 	bl	801534a <tcp_seg_free>
            while (next &&
 8017a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d00e      	beq.n	8017a9a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017a7c:	4b91      	ldr	r3, [pc, #580]	@ (8017cc4 <tcp_receive+0xb04>)
 8017a7e:	881b      	ldrh	r3, [r3, #0]
 8017a80:	461a      	mov	r2, r3
 8017a82:	4b91      	ldr	r3, [pc, #580]	@ (8017cc8 <tcp_receive+0xb08>)
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	441a      	add	r2, r3
 8017a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a8a:	68db      	ldr	r3, [r3, #12]
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017a90:	8909      	ldrh	r1, [r1, #8]
 8017a92:	440b      	add	r3, r1
 8017a94:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	da9b      	bge.n	80179d2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d059      	beq.n	8017b54 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017aa0:	4b88      	ldr	r3, [pc, #544]	@ (8017cc4 <tcp_receive+0xb04>)
 8017aa2:	881b      	ldrh	r3, [r3, #0]
 8017aa4:	461a      	mov	r2, r3
 8017aa6:	4b88      	ldr	r3, [pc, #544]	@ (8017cc8 <tcp_receive+0xb08>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	441a      	add	r2, r3
 8017aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017aae:	68db      	ldr	r3, [r3, #12]
 8017ab0:	685b      	ldr	r3, [r3, #4]
 8017ab2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	dd4d      	ble.n	8017b54 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017aba:	68db      	ldr	r3, [r3, #12]
 8017abc:	685b      	ldr	r3, [r3, #4]
 8017abe:	b29a      	uxth	r2, r3
 8017ac0:	4b81      	ldr	r3, [pc, #516]	@ (8017cc8 <tcp_receive+0xb08>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	b29b      	uxth	r3, r3
 8017ac6:	1ad3      	subs	r3, r2, r3
 8017ac8:	b29a      	uxth	r2, r3
 8017aca:	4b80      	ldr	r3, [pc, #512]	@ (8017ccc <tcp_receive+0xb0c>)
 8017acc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017ace:	4b7f      	ldr	r3, [pc, #508]	@ (8017ccc <tcp_receive+0xb0c>)
 8017ad0:	68db      	ldr	r3, [r3, #12]
 8017ad2:	899b      	ldrh	r3, [r3, #12]
 8017ad4:	b29b      	uxth	r3, r3
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7fa f934 	bl	8011d44 <lwip_htons>
 8017adc:	4603      	mov	r3, r0
 8017ade:	b2db      	uxtb	r3, r3
 8017ae0:	f003 0302 	and.w	r3, r3, #2
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d005      	beq.n	8017af4 <tcp_receive+0x934>
                inseg.len -= 1;
 8017ae8:	4b78      	ldr	r3, [pc, #480]	@ (8017ccc <tcp_receive+0xb0c>)
 8017aea:	891b      	ldrh	r3, [r3, #8]
 8017aec:	3b01      	subs	r3, #1
 8017aee:	b29a      	uxth	r2, r3
 8017af0:	4b76      	ldr	r3, [pc, #472]	@ (8017ccc <tcp_receive+0xb0c>)
 8017af2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017af4:	4b75      	ldr	r3, [pc, #468]	@ (8017ccc <tcp_receive+0xb0c>)
 8017af6:	685b      	ldr	r3, [r3, #4]
 8017af8:	4a74      	ldr	r2, [pc, #464]	@ (8017ccc <tcp_receive+0xb0c>)
 8017afa:	8912      	ldrh	r2, [r2, #8]
 8017afc:	4611      	mov	r1, r2
 8017afe:	4618      	mov	r0, r3
 8017b00:	f7fb fe56 	bl	80137b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017b04:	4b71      	ldr	r3, [pc, #452]	@ (8017ccc <tcp_receive+0xb0c>)
 8017b06:	891c      	ldrh	r4, [r3, #8]
 8017b08:	4b70      	ldr	r3, [pc, #448]	@ (8017ccc <tcp_receive+0xb0c>)
 8017b0a:	68db      	ldr	r3, [r3, #12]
 8017b0c:	899b      	ldrh	r3, [r3, #12]
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7fa f917 	bl	8011d44 <lwip_htons>
 8017b16:	4603      	mov	r3, r0
 8017b18:	b2db      	uxtb	r3, r3
 8017b1a:	f003 0303 	and.w	r3, r3, #3
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d001      	beq.n	8017b26 <tcp_receive+0x966>
 8017b22:	2301      	movs	r3, #1
 8017b24:	e000      	b.n	8017b28 <tcp_receive+0x968>
 8017b26:	2300      	movs	r3, #0
 8017b28:	4423      	add	r3, r4
 8017b2a:	b29a      	uxth	r2, r3
 8017b2c:	4b65      	ldr	r3, [pc, #404]	@ (8017cc4 <tcp_receive+0xb04>)
 8017b2e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017b30:	4b64      	ldr	r3, [pc, #400]	@ (8017cc4 <tcp_receive+0xb04>)
 8017b32:	881b      	ldrh	r3, [r3, #0]
 8017b34:	461a      	mov	r2, r3
 8017b36:	4b64      	ldr	r3, [pc, #400]	@ (8017cc8 <tcp_receive+0xb08>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	441a      	add	r2, r3
 8017b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b3e:	68db      	ldr	r3, [r3, #12]
 8017b40:	685b      	ldr	r3, [r3, #4]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d006      	beq.n	8017b54 <tcp_receive+0x994>
 8017b46:	4b62      	ldr	r3, [pc, #392]	@ (8017cd0 <tcp_receive+0xb10>)
 8017b48:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017b4c:	4961      	ldr	r1, [pc, #388]	@ (8017cd4 <tcp_receive+0xb14>)
 8017b4e:	4862      	ldr	r0, [pc, #392]	@ (8017cd8 <tcp_receive+0xb18>)
 8017b50:	f006 fc08 	bl	801e364 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017b58:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8017cc4 <tcp_receive+0xb04>)
 8017b5c:	881b      	ldrh	r3, [r3, #0]
 8017b5e:	461a      	mov	r2, r3
 8017b60:	4b59      	ldr	r3, [pc, #356]	@ (8017cc8 <tcp_receive+0xb08>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	441a      	add	r2, r3
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017b6e:	4b55      	ldr	r3, [pc, #340]	@ (8017cc4 <tcp_receive+0xb04>)
 8017b70:	881b      	ldrh	r3, [r3, #0]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d206      	bcs.n	8017b84 <tcp_receive+0x9c4>
 8017b76:	4b56      	ldr	r3, [pc, #344]	@ (8017cd0 <tcp_receive+0xb10>)
 8017b78:	f240 6207 	movw	r2, #1543	@ 0x607
 8017b7c:	4957      	ldr	r1, [pc, #348]	@ (8017cdc <tcp_receive+0xb1c>)
 8017b7e:	4856      	ldr	r0, [pc, #344]	@ (8017cd8 <tcp_receive+0xb18>)
 8017b80:	f006 fbf0 	bl	801e364 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017b88:	4b4e      	ldr	r3, [pc, #312]	@ (8017cc4 <tcp_receive+0xb04>)
 8017b8a:	881b      	ldrh	r3, [r3, #0]
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	b29a      	uxth	r2, r3
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017b94:	6878      	ldr	r0, [r7, #4]
 8017b96:	f7fc fef7 	bl	8014988 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8017ccc <tcp_receive+0xb0c>)
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	891b      	ldrh	r3, [r3, #8]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d006      	beq.n	8017bb2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017ba4:	4b49      	ldr	r3, [pc, #292]	@ (8017ccc <tcp_receive+0xb0c>)
 8017ba6:	685b      	ldr	r3, [r3, #4]
 8017ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8017ce0 <tcp_receive+0xb20>)
 8017baa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017bac:	4b47      	ldr	r3, [pc, #284]	@ (8017ccc <tcp_receive+0xb0c>)
 8017bae:	2200      	movs	r2, #0
 8017bb0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017bb2:	4b46      	ldr	r3, [pc, #280]	@ (8017ccc <tcp_receive+0xb0c>)
 8017bb4:	68db      	ldr	r3, [r3, #12]
 8017bb6:	899b      	ldrh	r3, [r3, #12]
 8017bb8:	b29b      	uxth	r3, r3
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7fa f8c2 	bl	8011d44 <lwip_htons>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	b2db      	uxtb	r3, r3
 8017bc4:	f003 0301 	and.w	r3, r3, #1
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	f000 80b8 	beq.w	8017d3e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017bce:	4b45      	ldr	r3, [pc, #276]	@ (8017ce4 <tcp_receive+0xb24>)
 8017bd0:	781b      	ldrb	r3, [r3, #0]
 8017bd2:	f043 0320 	orr.w	r3, r3, #32
 8017bd6:	b2da      	uxtb	r2, r3
 8017bd8:	4b42      	ldr	r3, [pc, #264]	@ (8017ce4 <tcp_receive+0xb24>)
 8017bda:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017bdc:	e0af      	b.n	8017d3e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017be2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	685b      	ldr	r3, [r3, #4]
 8017bec:	4a36      	ldr	r2, [pc, #216]	@ (8017cc8 <tcp_receive+0xb08>)
 8017bee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017bf0:	68bb      	ldr	r3, [r7, #8]
 8017bf2:	891b      	ldrh	r3, [r3, #8]
 8017bf4:	461c      	mov	r4, r3
 8017bf6:	68bb      	ldr	r3, [r7, #8]
 8017bf8:	68db      	ldr	r3, [r3, #12]
 8017bfa:	899b      	ldrh	r3, [r3, #12]
 8017bfc:	b29b      	uxth	r3, r3
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7fa f8a0 	bl	8011d44 <lwip_htons>
 8017c04:	4603      	mov	r3, r0
 8017c06:	b2db      	uxtb	r3, r3
 8017c08:	f003 0303 	and.w	r3, r3, #3
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d001      	beq.n	8017c14 <tcp_receive+0xa54>
 8017c10:	2301      	movs	r3, #1
 8017c12:	e000      	b.n	8017c16 <tcp_receive+0xa56>
 8017c14:	2300      	movs	r3, #0
 8017c16:	191a      	adds	r2, r3, r4
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c1c:	441a      	add	r2, r3
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017c26:	461c      	mov	r4, r3
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	891b      	ldrh	r3, [r3, #8]
 8017c2c:	461d      	mov	r5, r3
 8017c2e:	68bb      	ldr	r3, [r7, #8]
 8017c30:	68db      	ldr	r3, [r3, #12]
 8017c32:	899b      	ldrh	r3, [r3, #12]
 8017c34:	b29b      	uxth	r3, r3
 8017c36:	4618      	mov	r0, r3
 8017c38:	f7fa f884 	bl	8011d44 <lwip_htons>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	b2db      	uxtb	r3, r3
 8017c40:	f003 0303 	and.w	r3, r3, #3
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d001      	beq.n	8017c4c <tcp_receive+0xa8c>
 8017c48:	2301      	movs	r3, #1
 8017c4a:	e000      	b.n	8017c4e <tcp_receive+0xa8e>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	442b      	add	r3, r5
 8017c50:	429c      	cmp	r4, r3
 8017c52:	d206      	bcs.n	8017c62 <tcp_receive+0xaa2>
 8017c54:	4b1e      	ldr	r3, [pc, #120]	@ (8017cd0 <tcp_receive+0xb10>)
 8017c56:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017c5a:	4923      	ldr	r1, [pc, #140]	@ (8017ce8 <tcp_receive+0xb28>)
 8017c5c:	481e      	ldr	r0, [pc, #120]	@ (8017cd8 <tcp_receive+0xb18>)
 8017c5e:	f006 fb81 	bl	801e364 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	891b      	ldrh	r3, [r3, #8]
 8017c66:	461c      	mov	r4, r3
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	68db      	ldr	r3, [r3, #12]
 8017c6c:	899b      	ldrh	r3, [r3, #12]
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7fa f867 	bl	8011d44 <lwip_htons>
 8017c76:	4603      	mov	r3, r0
 8017c78:	b2db      	uxtb	r3, r3
 8017c7a:	f003 0303 	and.w	r3, r3, #3
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d001      	beq.n	8017c86 <tcp_receive+0xac6>
 8017c82:	2301      	movs	r3, #1
 8017c84:	e000      	b.n	8017c88 <tcp_receive+0xac8>
 8017c86:	2300      	movs	r3, #0
 8017c88:	1919      	adds	r1, r3, r4
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017c8e:	b28b      	uxth	r3, r1
 8017c90:	1ad3      	subs	r3, r2, r3
 8017c92:	b29a      	uxth	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f7fc fe75 	bl	8014988 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	891b      	ldrh	r3, [r3, #8]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d028      	beq.n	8017cfa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8017ce0 <tcp_receive+0xb20>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d01d      	beq.n	8017cec <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8017ce0 <tcp_receive+0xb20>)
 8017cb2:	681a      	ldr	r2, [r3, #0]
 8017cb4:	68bb      	ldr	r3, [r7, #8]
 8017cb6:	685b      	ldr	r3, [r3, #4]
 8017cb8:	4619      	mov	r1, r3
 8017cba:	4610      	mov	r0, r2
 8017cbc:	f7fb ffcc 	bl	8013c58 <pbuf_cat>
 8017cc0:	e018      	b.n	8017cf4 <tcp_receive+0xb34>
 8017cc2:	bf00      	nop
 8017cc4:	2000fcfe 	.word	0x2000fcfe
 8017cc8:	2000fcf4 	.word	0x2000fcf4
 8017ccc:	2000fcd4 	.word	0x2000fcd4
 8017cd0:	08022bd0 	.word	0x08022bd0
 8017cd4:	08022fb0 	.word	0x08022fb0
 8017cd8:	08022c1c 	.word	0x08022c1c
 8017cdc:	08022fec 	.word	0x08022fec
 8017ce0:	2000fd04 	.word	0x2000fd04
 8017ce4:	2000fd01 	.word	0x2000fd01
 8017ce8:	0802300c 	.word	0x0802300c
            } else {
              recv_data = cseg->p;
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	685b      	ldr	r3, [r3, #4]
 8017cf0:	4a70      	ldr	r2, [pc, #448]	@ (8017eb4 <tcp_receive+0xcf4>)
 8017cf2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	68db      	ldr	r3, [r3, #12]
 8017cfe:	899b      	ldrh	r3, [r3, #12]
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	4618      	mov	r0, r3
 8017d04:	f7fa f81e 	bl	8011d44 <lwip_htons>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	f003 0301 	and.w	r3, r3, #1
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d00d      	beq.n	8017d30 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017d14:	4b68      	ldr	r3, [pc, #416]	@ (8017eb8 <tcp_receive+0xcf8>)
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	f043 0320 	orr.w	r3, r3, #32
 8017d1c:	b2da      	uxtb	r2, r3
 8017d1e:	4b66      	ldr	r3, [pc, #408]	@ (8017eb8 <tcp_receive+0xcf8>)
 8017d20:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	7d1b      	ldrb	r3, [r3, #20]
 8017d26:	2b04      	cmp	r3, #4
 8017d28:	d102      	bne.n	8017d30 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2207      	movs	r2, #7
 8017d2e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	681a      	ldr	r2, [r3, #0]
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8017d38:	68b8      	ldr	r0, [r7, #8]
 8017d3a:	f7fd fb06 	bl	801534a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d008      	beq.n	8017d58 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d4a:	68db      	ldr	r3, [r3, #12]
 8017d4c:	685a      	ldr	r2, [r3, #4]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8017d52:	429a      	cmp	r2, r3
 8017d54:	f43f af43 	beq.w	8017bde <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	8b5b      	ldrh	r3, [r3, #26]
 8017d5c:	f003 0301 	and.w	r3, r3, #1
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d00e      	beq.n	8017d82 <tcp_receive+0xbc2>
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	8b5b      	ldrh	r3, [r3, #26]
 8017d68:	f023 0301 	bic.w	r3, r3, #1
 8017d6c:	b29a      	uxth	r2, r3
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	835a      	strh	r2, [r3, #26]
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	8b5b      	ldrh	r3, [r3, #26]
 8017d76:	f043 0302 	orr.w	r3, r3, #2
 8017d7a:	b29a      	uxth	r2, r3
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017d80:	e187      	b.n	8018092 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	8b5b      	ldrh	r3, [r3, #26]
 8017d86:	f043 0301 	orr.w	r3, r3, #1
 8017d8a:	b29a      	uxth	r2, r3
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017d90:	e17f      	b.n	8018092 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d106      	bne.n	8017da8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017d9a:	4848      	ldr	r0, [pc, #288]	@ (8017ebc <tcp_receive+0xcfc>)
 8017d9c:	f7fd faee 	bl	801537c <tcp_seg_copy>
 8017da0:	4602      	mov	r2, r0
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	675a      	str	r2, [r3, #116]	@ 0x74
 8017da6:	e16c      	b.n	8018082 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017da8:	2300      	movs	r3, #0
 8017daa:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017db2:	e156      	b.n	8018062 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8017db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017db6:	68db      	ldr	r3, [r3, #12]
 8017db8:	685a      	ldr	r2, [r3, #4]
 8017dba:	4b41      	ldr	r3, [pc, #260]	@ (8017ec0 <tcp_receive+0xd00>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d11d      	bne.n	8017dfe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8017ebc <tcp_receive+0xcfc>)
 8017dc4:	891a      	ldrh	r2, [r3, #8]
 8017dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dc8:	891b      	ldrh	r3, [r3, #8]
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	f240 814e 	bls.w	801806c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017dd0:	483a      	ldr	r0, [pc, #232]	@ (8017ebc <tcp_receive+0xcfc>)
 8017dd2:	f7fd fad3 	bl	801537c <tcp_seg_copy>
 8017dd6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017dd8:	697b      	ldr	r3, [r7, #20]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	f000 8148 	beq.w	8018070 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d003      	beq.n	8017dee <tcp_receive+0xc2e>
                    prev->next = cseg;
 8017de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017de8:	697a      	ldr	r2, [r7, #20]
 8017dea:	601a      	str	r2, [r3, #0]
 8017dec:	e002      	b.n	8017df4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	697a      	ldr	r2, [r7, #20]
 8017df2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017df4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017df6:	6978      	ldr	r0, [r7, #20]
 8017df8:	f7ff f8de 	bl	8016fb8 <tcp_oos_insert_segment>
                }
                break;
 8017dfc:	e138      	b.n	8018070 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d117      	bne.n	8017e34 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017e04:	4b2e      	ldr	r3, [pc, #184]	@ (8017ec0 <tcp_receive+0xd00>)
 8017e06:	681a      	ldr	r2, [r3, #0]
 8017e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e0a:	68db      	ldr	r3, [r3, #12]
 8017e0c:	685b      	ldr	r3, [r3, #4]
 8017e0e:	1ad3      	subs	r3, r2, r3
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	da57      	bge.n	8017ec4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017e14:	4829      	ldr	r0, [pc, #164]	@ (8017ebc <tcp_receive+0xcfc>)
 8017e16:	f7fd fab1 	bl	801537c <tcp_seg_copy>
 8017e1a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017e1c:	69bb      	ldr	r3, [r7, #24]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	f000 8128 	beq.w	8018074 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	69ba      	ldr	r2, [r7, #24]
 8017e28:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017e2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017e2c:	69b8      	ldr	r0, [r7, #24]
 8017e2e:	f7ff f8c3 	bl	8016fb8 <tcp_oos_insert_segment>
                  }
                  break;
 8017e32:	e11f      	b.n	8018074 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017e34:	4b22      	ldr	r3, [pc, #136]	@ (8017ec0 <tcp_receive+0xd00>)
 8017e36:	681a      	ldr	r2, [r3, #0]
 8017e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e3a:	68db      	ldr	r3, [r3, #12]
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	1ad3      	subs	r3, r2, r3
 8017e40:	3b01      	subs	r3, #1
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	db3e      	blt.n	8017ec4 <tcp_receive+0xd04>
 8017e46:	4b1e      	ldr	r3, [pc, #120]	@ (8017ec0 <tcp_receive+0xd00>)
 8017e48:	681a      	ldr	r2, [r3, #0]
 8017e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e4c:	68db      	ldr	r3, [r3, #12]
 8017e4e:	685b      	ldr	r3, [r3, #4]
 8017e50:	1ad3      	subs	r3, r2, r3
 8017e52:	3301      	adds	r3, #1
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	dc35      	bgt.n	8017ec4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017e58:	4818      	ldr	r0, [pc, #96]	@ (8017ebc <tcp_receive+0xcfc>)
 8017e5a:	f7fd fa8f 	bl	801537c <tcp_seg_copy>
 8017e5e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	f000 8108 	beq.w	8018078 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e6a:	68db      	ldr	r3, [r3, #12]
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e70:	8912      	ldrh	r2, [r2, #8]
 8017e72:	441a      	add	r2, r3
 8017e74:	4b12      	ldr	r3, [pc, #72]	@ (8017ec0 <tcp_receive+0xd00>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	1ad3      	subs	r3, r2, r3
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	dd12      	ble.n	8017ea4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017e7e:	4b10      	ldr	r3, [pc, #64]	@ (8017ec0 <tcp_receive+0xd00>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	b29a      	uxth	r2, r3
 8017e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e86:	68db      	ldr	r3, [r3, #12]
 8017e88:	685b      	ldr	r3, [r3, #4]
 8017e8a:	b29b      	uxth	r3, r3
 8017e8c:	1ad3      	subs	r3, r2, r3
 8017e8e:	b29a      	uxth	r2, r3
 8017e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e92:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e96:	685a      	ldr	r2, [r3, #4]
 8017e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e9a:	891b      	ldrh	r3, [r3, #8]
 8017e9c:	4619      	mov	r1, r3
 8017e9e:	4610      	mov	r0, r2
 8017ea0:	f7fb fc86 	bl	80137b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ea6:	69fa      	ldr	r2, [r7, #28]
 8017ea8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017eaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017eac:	69f8      	ldr	r0, [r7, #28]
 8017eae:	f7ff f883 	bl	8016fb8 <tcp_oos_insert_segment>
                  }
                  break;
 8017eb2:	e0e1      	b.n	8018078 <tcp_receive+0xeb8>
 8017eb4:	2000fd04 	.word	0x2000fd04
 8017eb8:	2000fd01 	.word	0x2000fd01
 8017ebc:	2000fcd4 	.word	0x2000fcd4
 8017ec0:	2000fcf4 	.word	0x2000fcf4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ec6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	f040 80c5 	bne.w	801805c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80180d0 <tcp_receive+0xf10>)
 8017ed4:	681a      	ldr	r2, [r3, #0]
 8017ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ed8:	68db      	ldr	r3, [r3, #12]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	f340 80bc 	ble.w	801805c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ee6:	68db      	ldr	r3, [r3, #12]
 8017ee8:	899b      	ldrh	r3, [r3, #12]
 8017eea:	b29b      	uxth	r3, r3
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7f9 ff29 	bl	8011d44 <lwip_htons>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	b2db      	uxtb	r3, r3
 8017ef6:	f003 0301 	and.w	r3, r3, #1
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	f040 80be 	bne.w	801807c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017f00:	4874      	ldr	r0, [pc, #464]	@ (80180d4 <tcp_receive+0xf14>)
 8017f02:	f7fd fa3b 	bl	801537c <tcp_seg_copy>
 8017f06:	4602      	mov	r2, r0
 8017f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f0a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	f000 80b5 	beq.w	8018080 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f18:	68db      	ldr	r3, [r3, #12]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017f1e:	8912      	ldrh	r2, [r2, #8]
 8017f20:	441a      	add	r2, r3
 8017f22:	4b6b      	ldr	r3, [pc, #428]	@ (80180d0 <tcp_receive+0xf10>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	dd12      	ble.n	8017f52 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017f2c:	4b68      	ldr	r3, [pc, #416]	@ (80180d0 <tcp_receive+0xf10>)
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	b29a      	uxth	r2, r3
 8017f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f34:	68db      	ldr	r3, [r3, #12]
 8017f36:	685b      	ldr	r3, [r3, #4]
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	1ad3      	subs	r3, r2, r3
 8017f3c:	b29a      	uxth	r2, r3
 8017f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f44:	685a      	ldr	r2, [r3, #4]
 8017f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f48:	891b      	ldrh	r3, [r3, #8]
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	4610      	mov	r0, r2
 8017f4e:	f7fb fc2f 	bl	80137b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017f52:	4b61      	ldr	r3, [pc, #388]	@ (80180d8 <tcp_receive+0xf18>)
 8017f54:	881b      	ldrh	r3, [r3, #0]
 8017f56:	461a      	mov	r2, r3
 8017f58:	4b5d      	ldr	r3, [pc, #372]	@ (80180d0 <tcp_receive+0xf10>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	441a      	add	r2, r3
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f62:	6879      	ldr	r1, [r7, #4]
 8017f64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017f66:	440b      	add	r3, r1
 8017f68:	1ad3      	subs	r3, r2, r3
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	f340 8088 	ble.w	8018080 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	68db      	ldr	r3, [r3, #12]
 8017f76:	899b      	ldrh	r3, [r3, #12]
 8017f78:	b29b      	uxth	r3, r3
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	f7f9 fee2 	bl	8011d44 <lwip_htons>
 8017f80:	4603      	mov	r3, r0
 8017f82:	b2db      	uxtb	r3, r3
 8017f84:	f003 0301 	and.w	r3, r3, #1
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d021      	beq.n	8017fd0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	68db      	ldr	r3, [r3, #12]
 8017f92:	899b      	ldrh	r3, [r3, #12]
 8017f94:	b29b      	uxth	r3, r3
 8017f96:	b21b      	sxth	r3, r3
 8017f98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017f9c:	b21c      	sxth	r4, r3
 8017f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	68db      	ldr	r3, [r3, #12]
 8017fa4:	899b      	ldrh	r3, [r3, #12]
 8017fa6:	b29b      	uxth	r3, r3
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f7f9 fecb 	bl	8011d44 <lwip_htons>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	b2db      	uxtb	r3, r3
 8017fb2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7f9 fec3 	bl	8011d44 <lwip_htons>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	b21b      	sxth	r3, r3
 8017fc2:	4323      	orrs	r3, r4
 8017fc4:	b21a      	sxth	r2, r3
 8017fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	68db      	ldr	r3, [r3, #12]
 8017fcc:	b292      	uxth	r2, r2
 8017fce:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fd4:	b29a      	uxth	r2, r3
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017fda:	4413      	add	r3, r2
 8017fdc:	b299      	uxth	r1, r3
 8017fde:	4b3c      	ldr	r3, [pc, #240]	@ (80180d0 <tcp_receive+0xf10>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	b29a      	uxth	r2, r3
 8017fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	1a8a      	subs	r2, r1, r2
 8017fea:	b292      	uxth	r2, r2
 8017fec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	685a      	ldr	r2, [r3, #4]
 8017ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	891b      	ldrh	r3, [r3, #8]
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	4610      	mov	r0, r2
 8017ffe:	f7fb fbd7 	bl	80137b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	891c      	ldrh	r4, [r3, #8]
 8018008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	68db      	ldr	r3, [r3, #12]
 801800e:	899b      	ldrh	r3, [r3, #12]
 8018010:	b29b      	uxth	r3, r3
 8018012:	4618      	mov	r0, r3
 8018014:	f7f9 fe96 	bl	8011d44 <lwip_htons>
 8018018:	4603      	mov	r3, r0
 801801a:	b2db      	uxtb	r3, r3
 801801c:	f003 0303 	and.w	r3, r3, #3
 8018020:	2b00      	cmp	r3, #0
 8018022:	d001      	beq.n	8018028 <tcp_receive+0xe68>
 8018024:	2301      	movs	r3, #1
 8018026:	e000      	b.n	801802a <tcp_receive+0xe6a>
 8018028:	2300      	movs	r3, #0
 801802a:	4423      	add	r3, r4
 801802c:	b29a      	uxth	r2, r3
 801802e:	4b2a      	ldr	r3, [pc, #168]	@ (80180d8 <tcp_receive+0xf18>)
 8018030:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018032:	4b29      	ldr	r3, [pc, #164]	@ (80180d8 <tcp_receive+0xf18>)
 8018034:	881b      	ldrh	r3, [r3, #0]
 8018036:	461a      	mov	r2, r3
 8018038:	4b25      	ldr	r3, [pc, #148]	@ (80180d0 <tcp_receive+0xf10>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	441a      	add	r2, r3
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018042:	6879      	ldr	r1, [r7, #4]
 8018044:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018046:	440b      	add	r3, r1
 8018048:	429a      	cmp	r2, r3
 801804a:	d019      	beq.n	8018080 <tcp_receive+0xec0>
 801804c:	4b23      	ldr	r3, [pc, #140]	@ (80180dc <tcp_receive+0xf1c>)
 801804e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8018052:	4923      	ldr	r1, [pc, #140]	@ (80180e0 <tcp_receive+0xf20>)
 8018054:	4823      	ldr	r0, [pc, #140]	@ (80180e4 <tcp_receive+0xf24>)
 8018056:	f006 f985 	bl	801e364 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801805a:	e011      	b.n	8018080 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801805c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018064:	2b00      	cmp	r3, #0
 8018066:	f47f aea5 	bne.w	8017db4 <tcp_receive+0xbf4>
 801806a:	e00a      	b.n	8018082 <tcp_receive+0xec2>
                break;
 801806c:	bf00      	nop
 801806e:	e008      	b.n	8018082 <tcp_receive+0xec2>
                break;
 8018070:	bf00      	nop
 8018072:	e006      	b.n	8018082 <tcp_receive+0xec2>
                  break;
 8018074:	bf00      	nop
 8018076:	e004      	b.n	8018082 <tcp_receive+0xec2>
                  break;
 8018078:	bf00      	nop
 801807a:	e002      	b.n	8018082 <tcp_receive+0xec2>
                  break;
 801807c:	bf00      	nop
 801807e:	e000      	b.n	8018082 <tcp_receive+0xec2>
                break;
 8018080:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f001 fe88 	bl	8019d98 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018088:	e003      	b.n	8018092 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f001 fe84 	bl	8019d98 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018090:	e01a      	b.n	80180c8 <tcp_receive+0xf08>
 8018092:	e019      	b.n	80180c8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018094:	4b0e      	ldr	r3, [pc, #56]	@ (80180d0 <tcp_receive+0xf10>)
 8018096:	681a      	ldr	r2, [r3, #0]
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801809c:	1ad3      	subs	r3, r2, r3
 801809e:	2b00      	cmp	r3, #0
 80180a0:	db0a      	blt.n	80180b8 <tcp_receive+0xef8>
 80180a2:	4b0b      	ldr	r3, [pc, #44]	@ (80180d0 <tcp_receive+0xf10>)
 80180a4:	681a      	ldr	r2, [r3, #0]
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180aa:	6879      	ldr	r1, [r7, #4]
 80180ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80180ae:	440b      	add	r3, r1
 80180b0:	1ad3      	subs	r3, r2, r3
 80180b2:	3301      	adds	r3, #1
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	dd07      	ble.n	80180c8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	8b5b      	ldrh	r3, [r3, #26]
 80180bc:	f043 0302 	orr.w	r3, r3, #2
 80180c0:	b29a      	uxth	r2, r3
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80180c6:	e7ff      	b.n	80180c8 <tcp_receive+0xf08>
 80180c8:	bf00      	nop
 80180ca:	3750      	adds	r7, #80	@ 0x50
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bdb0      	pop	{r4, r5, r7, pc}
 80180d0:	2000fcf4 	.word	0x2000fcf4
 80180d4:	2000fcd4 	.word	0x2000fcd4
 80180d8:	2000fcfe 	.word	0x2000fcfe
 80180dc:	08022bd0 	.word	0x08022bd0
 80180e0:	08022f78 	.word	0x08022f78
 80180e4:	08022c1c 	.word	0x08022c1c

080180e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80180e8:	b480      	push	{r7}
 80180ea:	b083      	sub	sp, #12
 80180ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80180ee:	4b15      	ldr	r3, [pc, #84]	@ (8018144 <tcp_get_next_optbyte+0x5c>)
 80180f0:	881b      	ldrh	r3, [r3, #0]
 80180f2:	1c5a      	adds	r2, r3, #1
 80180f4:	b291      	uxth	r1, r2
 80180f6:	4a13      	ldr	r2, [pc, #76]	@ (8018144 <tcp_get_next_optbyte+0x5c>)
 80180f8:	8011      	strh	r1, [r2, #0]
 80180fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80180fc:	4b12      	ldr	r3, [pc, #72]	@ (8018148 <tcp_get_next_optbyte+0x60>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d004      	beq.n	801810e <tcp_get_next_optbyte+0x26>
 8018104:	4b11      	ldr	r3, [pc, #68]	@ (801814c <tcp_get_next_optbyte+0x64>)
 8018106:	881b      	ldrh	r3, [r3, #0]
 8018108:	88fa      	ldrh	r2, [r7, #6]
 801810a:	429a      	cmp	r2, r3
 801810c:	d208      	bcs.n	8018120 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801810e:	4b10      	ldr	r3, [pc, #64]	@ (8018150 <tcp_get_next_optbyte+0x68>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	3314      	adds	r3, #20
 8018114:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018116:	88fb      	ldrh	r3, [r7, #6]
 8018118:	683a      	ldr	r2, [r7, #0]
 801811a:	4413      	add	r3, r2
 801811c:	781b      	ldrb	r3, [r3, #0]
 801811e:	e00b      	b.n	8018138 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018120:	88fb      	ldrh	r3, [r7, #6]
 8018122:	b2da      	uxtb	r2, r3
 8018124:	4b09      	ldr	r3, [pc, #36]	@ (801814c <tcp_get_next_optbyte+0x64>)
 8018126:	881b      	ldrh	r3, [r3, #0]
 8018128:	b2db      	uxtb	r3, r3
 801812a:	1ad3      	subs	r3, r2, r3
 801812c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801812e:	4b06      	ldr	r3, [pc, #24]	@ (8018148 <tcp_get_next_optbyte+0x60>)
 8018130:	681a      	ldr	r2, [r3, #0]
 8018132:	797b      	ldrb	r3, [r7, #5]
 8018134:	4413      	add	r3, r2
 8018136:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018138:	4618      	mov	r0, r3
 801813a:	370c      	adds	r7, #12
 801813c:	46bd      	mov	sp, r7
 801813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018142:	4770      	bx	lr
 8018144:	2000fcf0 	.word	0x2000fcf0
 8018148:	2000fcec 	.word	0x2000fcec
 801814c:	2000fcea 	.word	0x2000fcea
 8018150:	2000fce4 	.word	0x2000fce4

08018154 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d106      	bne.n	8018170 <tcp_parseopt+0x1c>
 8018162:	4b32      	ldr	r3, [pc, #200]	@ (801822c <tcp_parseopt+0xd8>)
 8018164:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018168:	4931      	ldr	r1, [pc, #196]	@ (8018230 <tcp_parseopt+0xdc>)
 801816a:	4832      	ldr	r0, [pc, #200]	@ (8018234 <tcp_parseopt+0xe0>)
 801816c:	f006 f8fa 	bl	801e364 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018170:	4b31      	ldr	r3, [pc, #196]	@ (8018238 <tcp_parseopt+0xe4>)
 8018172:	881b      	ldrh	r3, [r3, #0]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d056      	beq.n	8018226 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018178:	4b30      	ldr	r3, [pc, #192]	@ (801823c <tcp_parseopt+0xe8>)
 801817a:	2200      	movs	r2, #0
 801817c:	801a      	strh	r2, [r3, #0]
 801817e:	e046      	b.n	801820e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018180:	f7ff ffb2 	bl	80180e8 <tcp_get_next_optbyte>
 8018184:	4603      	mov	r3, r0
 8018186:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018188:	7bfb      	ldrb	r3, [r7, #15]
 801818a:	2b02      	cmp	r3, #2
 801818c:	d006      	beq.n	801819c <tcp_parseopt+0x48>
 801818e:	2b02      	cmp	r3, #2
 8018190:	dc2a      	bgt.n	80181e8 <tcp_parseopt+0x94>
 8018192:	2b00      	cmp	r3, #0
 8018194:	d042      	beq.n	801821c <tcp_parseopt+0xc8>
 8018196:	2b01      	cmp	r3, #1
 8018198:	d038      	beq.n	801820c <tcp_parseopt+0xb8>
 801819a:	e025      	b.n	80181e8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801819c:	f7ff ffa4 	bl	80180e8 <tcp_get_next_optbyte>
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b04      	cmp	r3, #4
 80181a4:	d13c      	bne.n	8018220 <tcp_parseopt+0xcc>
 80181a6:	4b25      	ldr	r3, [pc, #148]	@ (801823c <tcp_parseopt+0xe8>)
 80181a8:	881b      	ldrh	r3, [r3, #0]
 80181aa:	3301      	adds	r3, #1
 80181ac:	4a22      	ldr	r2, [pc, #136]	@ (8018238 <tcp_parseopt+0xe4>)
 80181ae:	8812      	ldrh	r2, [r2, #0]
 80181b0:	4293      	cmp	r3, r2
 80181b2:	da35      	bge.n	8018220 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80181b4:	f7ff ff98 	bl	80180e8 <tcp_get_next_optbyte>
 80181b8:	4603      	mov	r3, r0
 80181ba:	021b      	lsls	r3, r3, #8
 80181bc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80181be:	f7ff ff93 	bl	80180e8 <tcp_get_next_optbyte>
 80181c2:	4603      	mov	r3, r0
 80181c4:	461a      	mov	r2, r3
 80181c6:	89bb      	ldrh	r3, [r7, #12]
 80181c8:	4313      	orrs	r3, r2
 80181ca:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80181cc:	89bb      	ldrh	r3, [r7, #12]
 80181ce:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80181d2:	d804      	bhi.n	80181de <tcp_parseopt+0x8a>
 80181d4:	89bb      	ldrh	r3, [r7, #12]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d001      	beq.n	80181de <tcp_parseopt+0x8a>
 80181da:	89ba      	ldrh	r2, [r7, #12]
 80181dc:	e001      	b.n	80181e2 <tcp_parseopt+0x8e>
 80181de:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80181e6:	e012      	b.n	801820e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80181e8:	f7ff ff7e 	bl	80180e8 <tcp_get_next_optbyte>
 80181ec:	4603      	mov	r3, r0
 80181ee:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80181f0:	7afb      	ldrb	r3, [r7, #11]
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d916      	bls.n	8018224 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80181f6:	7afb      	ldrb	r3, [r7, #11]
 80181f8:	b29a      	uxth	r2, r3
 80181fa:	4b10      	ldr	r3, [pc, #64]	@ (801823c <tcp_parseopt+0xe8>)
 80181fc:	881b      	ldrh	r3, [r3, #0]
 80181fe:	4413      	add	r3, r2
 8018200:	b29b      	uxth	r3, r3
 8018202:	3b02      	subs	r3, #2
 8018204:	b29a      	uxth	r2, r3
 8018206:	4b0d      	ldr	r3, [pc, #52]	@ (801823c <tcp_parseopt+0xe8>)
 8018208:	801a      	strh	r2, [r3, #0]
 801820a:	e000      	b.n	801820e <tcp_parseopt+0xba>
          break;
 801820c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801820e:	4b0b      	ldr	r3, [pc, #44]	@ (801823c <tcp_parseopt+0xe8>)
 8018210:	881a      	ldrh	r2, [r3, #0]
 8018212:	4b09      	ldr	r3, [pc, #36]	@ (8018238 <tcp_parseopt+0xe4>)
 8018214:	881b      	ldrh	r3, [r3, #0]
 8018216:	429a      	cmp	r2, r3
 8018218:	d3b2      	bcc.n	8018180 <tcp_parseopt+0x2c>
 801821a:	e004      	b.n	8018226 <tcp_parseopt+0xd2>
          return;
 801821c:	bf00      	nop
 801821e:	e002      	b.n	8018226 <tcp_parseopt+0xd2>
            return;
 8018220:	bf00      	nop
 8018222:	e000      	b.n	8018226 <tcp_parseopt+0xd2>
            return;
 8018224:	bf00      	nop
      }
    }
  }
}
 8018226:	3710      	adds	r7, #16
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}
 801822c:	08022bd0 	.word	0x08022bd0
 8018230:	08023034 	.word	0x08023034
 8018234:	08022c1c 	.word	0x08022c1c
 8018238:	2000fce8 	.word	0x2000fce8
 801823c:	2000fcf0 	.word	0x2000fcf0

08018240 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018240:	b480      	push	{r7}
 8018242:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018244:	4b05      	ldr	r3, [pc, #20]	@ (801825c <tcp_trigger_input_pcb_close+0x1c>)
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	f043 0310 	orr.w	r3, r3, #16
 801824c:	b2da      	uxtb	r2, r3
 801824e:	4b03      	ldr	r3, [pc, #12]	@ (801825c <tcp_trigger_input_pcb_close+0x1c>)
 8018250:	701a      	strb	r2, [r3, #0]
}
 8018252:	bf00      	nop
 8018254:	46bd      	mov	sp, r7
 8018256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825a:	4770      	bx	lr
 801825c:	2000fd01 	.word	0x2000fd01

08018260 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b084      	sub	sp, #16
 8018264:	af00      	add	r7, sp, #0
 8018266:	60f8      	str	r0, [r7, #12]
 8018268:	60b9      	str	r1, [r7, #8]
 801826a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d00a      	beq.n	8018288 <tcp_route+0x28>
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	7a1b      	ldrb	r3, [r3, #8]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d006      	beq.n	8018288 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	7a1b      	ldrb	r3, [r3, #8]
 801827e:	4618      	mov	r0, r3
 8018280:	f7fb f88e 	bl	80133a0 <netif_get_by_index>
 8018284:	4603      	mov	r3, r0
 8018286:	e003      	b.n	8018290 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	f003 fe33 	bl	801bef4 <ip4_route>
 801828e:	4603      	mov	r3, r0
  }
}
 8018290:	4618      	mov	r0, r3
 8018292:	3710      	adds	r7, #16
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}

08018298 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018298:	b590      	push	{r4, r7, lr}
 801829a:	b087      	sub	sp, #28
 801829c:	af00      	add	r7, sp, #0
 801829e:	60f8      	str	r0, [r7, #12]
 80182a0:	60b9      	str	r1, [r7, #8]
 80182a2:	603b      	str	r3, [r7, #0]
 80182a4:	4613      	mov	r3, r2
 80182a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d105      	bne.n	80182ba <tcp_create_segment+0x22>
 80182ae:	4b43      	ldr	r3, [pc, #268]	@ (80183bc <tcp_create_segment+0x124>)
 80182b0:	22a3      	movs	r2, #163	@ 0xa3
 80182b2:	4943      	ldr	r1, [pc, #268]	@ (80183c0 <tcp_create_segment+0x128>)
 80182b4:	4843      	ldr	r0, [pc, #268]	@ (80183c4 <tcp_create_segment+0x12c>)
 80182b6:	f006 f855 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d105      	bne.n	80182cc <tcp_create_segment+0x34>
 80182c0:	4b3e      	ldr	r3, [pc, #248]	@ (80183bc <tcp_create_segment+0x124>)
 80182c2:	22a4      	movs	r2, #164	@ 0xa4
 80182c4:	4940      	ldr	r1, [pc, #256]	@ (80183c8 <tcp_create_segment+0x130>)
 80182c6:	483f      	ldr	r0, [pc, #252]	@ (80183c4 <tcp_create_segment+0x12c>)
 80182c8:	f006 f84c 	bl	801e364 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80182cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80182d0:	009b      	lsls	r3, r3, #2
 80182d2:	b2db      	uxtb	r3, r3
 80182d4:	f003 0304 	and.w	r3, r3, #4
 80182d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80182da:	2003      	movs	r0, #3
 80182dc:	f7fa fcd4 	bl	8012c88 <memp_malloc>
 80182e0:	6138      	str	r0, [r7, #16]
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d104      	bne.n	80182f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80182e8:	68b8      	ldr	r0, [r7, #8]
 80182ea:	f7fb fbe7 	bl	8013abc <pbuf_free>
    return NULL;
 80182ee:	2300      	movs	r3, #0
 80182f0:	e060      	b.n	80183b4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80182f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80182fa:	693b      	ldr	r3, [r7, #16]
 80182fc:	2200      	movs	r2, #0
 80182fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018300:	693b      	ldr	r3, [r7, #16]
 8018302:	68ba      	ldr	r2, [r7, #8]
 8018304:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	891a      	ldrh	r2, [r3, #8]
 801830a:	7dfb      	ldrb	r3, [r7, #23]
 801830c:	b29b      	uxth	r3, r3
 801830e:	429a      	cmp	r2, r3
 8018310:	d205      	bcs.n	801831e <tcp_create_segment+0x86>
 8018312:	4b2a      	ldr	r3, [pc, #168]	@ (80183bc <tcp_create_segment+0x124>)
 8018314:	22b0      	movs	r2, #176	@ 0xb0
 8018316:	492d      	ldr	r1, [pc, #180]	@ (80183cc <tcp_create_segment+0x134>)
 8018318:	482a      	ldr	r0, [pc, #168]	@ (80183c4 <tcp_create_segment+0x12c>)
 801831a:	f006 f823 	bl	801e364 <iprintf>
  seg->len = p->tot_len - optlen;
 801831e:	68bb      	ldr	r3, [r7, #8]
 8018320:	891a      	ldrh	r2, [r3, #8]
 8018322:	7dfb      	ldrb	r3, [r7, #23]
 8018324:	b29b      	uxth	r3, r3
 8018326:	1ad3      	subs	r3, r2, r3
 8018328:	b29a      	uxth	r2, r3
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801832e:	2114      	movs	r1, #20
 8018330:	68b8      	ldr	r0, [r7, #8]
 8018332:	f7fb fb2d 	bl	8013990 <pbuf_add_header>
 8018336:	4603      	mov	r3, r0
 8018338:	2b00      	cmp	r3, #0
 801833a:	d004      	beq.n	8018346 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801833c:	6938      	ldr	r0, [r7, #16]
 801833e:	f7fd f804 	bl	801534a <tcp_seg_free>
    return NULL;
 8018342:	2300      	movs	r3, #0
 8018344:	e036      	b.n	80183b4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018346:	693b      	ldr	r3, [r7, #16]
 8018348:	685b      	ldr	r3, [r3, #4]
 801834a:	685a      	ldr	r2, [r3, #4]
 801834c:	693b      	ldr	r3, [r7, #16]
 801834e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	8ada      	ldrh	r2, [r3, #22]
 8018354:	693b      	ldr	r3, [r7, #16]
 8018356:	68dc      	ldr	r4, [r3, #12]
 8018358:	4610      	mov	r0, r2
 801835a:	f7f9 fcf3 	bl	8011d44 <lwip_htons>
 801835e:	4603      	mov	r3, r0
 8018360:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	8b1a      	ldrh	r2, [r3, #24]
 8018366:	693b      	ldr	r3, [r7, #16]
 8018368:	68dc      	ldr	r4, [r3, #12]
 801836a:	4610      	mov	r0, r2
 801836c:	f7f9 fcea 	bl	8011d44 <lwip_htons>
 8018370:	4603      	mov	r3, r0
 8018372:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018374:	693b      	ldr	r3, [r7, #16]
 8018376:	68dc      	ldr	r4, [r3, #12]
 8018378:	6838      	ldr	r0, [r7, #0]
 801837a:	f7f9 fcf8 	bl	8011d6e <lwip_htonl>
 801837e:	4603      	mov	r3, r0
 8018380:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018382:	7dfb      	ldrb	r3, [r7, #23]
 8018384:	089b      	lsrs	r3, r3, #2
 8018386:	b2db      	uxtb	r3, r3
 8018388:	3305      	adds	r3, #5
 801838a:	b29b      	uxth	r3, r3
 801838c:	031b      	lsls	r3, r3, #12
 801838e:	b29a      	uxth	r2, r3
 8018390:	79fb      	ldrb	r3, [r7, #7]
 8018392:	b29b      	uxth	r3, r3
 8018394:	4313      	orrs	r3, r2
 8018396:	b29a      	uxth	r2, r3
 8018398:	693b      	ldr	r3, [r7, #16]
 801839a:	68dc      	ldr	r4, [r3, #12]
 801839c:	4610      	mov	r0, r2
 801839e:	f7f9 fcd1 	bl	8011d44 <lwip_htons>
 80183a2:	4603      	mov	r3, r0
 80183a4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	68db      	ldr	r3, [r3, #12]
 80183aa:	2200      	movs	r2, #0
 80183ac:	749a      	strb	r2, [r3, #18]
 80183ae:	2200      	movs	r2, #0
 80183b0:	74da      	strb	r2, [r3, #19]
  return seg;
 80183b2:	693b      	ldr	r3, [r7, #16]
}
 80183b4:	4618      	mov	r0, r3
 80183b6:	371c      	adds	r7, #28
 80183b8:	46bd      	mov	sp, r7
 80183ba:	bd90      	pop	{r4, r7, pc}
 80183bc:	08023050 	.word	0x08023050
 80183c0:	08023084 	.word	0x08023084
 80183c4:	080230a4 	.word	0x080230a4
 80183c8:	080230cc 	.word	0x080230cc
 80183cc:	080230f0 	.word	0x080230f0

080183d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b086      	sub	sp, #24
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	607b      	str	r3, [r7, #4]
 80183d8:	4603      	mov	r3, r0
 80183da:	73fb      	strb	r3, [r7, #15]
 80183dc:	460b      	mov	r3, r1
 80183de:	81bb      	strh	r3, [r7, #12]
 80183e0:	4613      	mov	r3, r2
 80183e2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80183e4:	89bb      	ldrh	r3, [r7, #12]
 80183e6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d105      	bne.n	80183fa <tcp_pbuf_prealloc+0x2a>
 80183ee:	4b30      	ldr	r3, [pc, #192]	@ (80184b0 <tcp_pbuf_prealloc+0xe0>)
 80183f0:	22e8      	movs	r2, #232	@ 0xe8
 80183f2:	4930      	ldr	r1, [pc, #192]	@ (80184b4 <tcp_pbuf_prealloc+0xe4>)
 80183f4:	4830      	ldr	r0, [pc, #192]	@ (80184b8 <tcp_pbuf_prealloc+0xe8>)
 80183f6:	f005 ffb5 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80183fa:	6a3b      	ldr	r3, [r7, #32]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d105      	bne.n	801840c <tcp_pbuf_prealloc+0x3c>
 8018400:	4b2b      	ldr	r3, [pc, #172]	@ (80184b0 <tcp_pbuf_prealloc+0xe0>)
 8018402:	22e9      	movs	r2, #233	@ 0xe9
 8018404:	492d      	ldr	r1, [pc, #180]	@ (80184bc <tcp_pbuf_prealloc+0xec>)
 8018406:	482c      	ldr	r0, [pc, #176]	@ (80184b8 <tcp_pbuf_prealloc+0xe8>)
 8018408:	f005 ffac 	bl	801e364 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801840c:	89ba      	ldrh	r2, [r7, #12]
 801840e:	897b      	ldrh	r3, [r7, #10]
 8018410:	429a      	cmp	r2, r3
 8018412:	d221      	bcs.n	8018458 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018414:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018418:	f003 0302 	and.w	r3, r3, #2
 801841c:	2b00      	cmp	r3, #0
 801841e:	d111      	bne.n	8018444 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018420:	6a3b      	ldr	r3, [r7, #32]
 8018422:	8b5b      	ldrh	r3, [r3, #26]
 8018424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018428:	2b00      	cmp	r3, #0
 801842a:	d115      	bne.n	8018458 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801842c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018430:	2b00      	cmp	r3, #0
 8018432:	d007      	beq.n	8018444 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018434:	6a3b      	ldr	r3, [r7, #32]
 8018436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8018438:	2b00      	cmp	r3, #0
 801843a:	d103      	bne.n	8018444 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801843c:	6a3b      	ldr	r3, [r7, #32]
 801843e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8018440:	2b00      	cmp	r3, #0
 8018442:	d009      	beq.n	8018458 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018444:	89bb      	ldrh	r3, [r7, #12]
 8018446:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801844a:	f023 0203 	bic.w	r2, r3, #3
 801844e:	897b      	ldrh	r3, [r7, #10]
 8018450:	4293      	cmp	r3, r2
 8018452:	bf28      	it	cs
 8018454:	4613      	movcs	r3, r2
 8018456:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018458:	8af9      	ldrh	r1, [r7, #22]
 801845a:	7bfb      	ldrb	r3, [r7, #15]
 801845c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018460:	4618      	mov	r0, r3
 8018462:	f7fb f847 	bl	80134f4 <pbuf_alloc>
 8018466:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018468:	693b      	ldr	r3, [r7, #16]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d101      	bne.n	8018472 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801846e:	2300      	movs	r3, #0
 8018470:	e019      	b.n	80184a6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018472:	693b      	ldr	r3, [r7, #16]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d006      	beq.n	8018488 <tcp_pbuf_prealloc+0xb8>
 801847a:	4b0d      	ldr	r3, [pc, #52]	@ (80184b0 <tcp_pbuf_prealloc+0xe0>)
 801847c:	f240 120b 	movw	r2, #267	@ 0x10b
 8018480:	490f      	ldr	r1, [pc, #60]	@ (80184c0 <tcp_pbuf_prealloc+0xf0>)
 8018482:	480d      	ldr	r0, [pc, #52]	@ (80184b8 <tcp_pbuf_prealloc+0xe8>)
 8018484:	f005 ff6e 	bl	801e364 <iprintf>
  *oversize = p->len - length;
 8018488:	693b      	ldr	r3, [r7, #16]
 801848a:	895a      	ldrh	r2, [r3, #10]
 801848c:	89bb      	ldrh	r3, [r7, #12]
 801848e:	1ad3      	subs	r3, r2, r3
 8018490:	b29a      	uxth	r2, r3
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018496:	693b      	ldr	r3, [r7, #16]
 8018498:	89ba      	ldrh	r2, [r7, #12]
 801849a:	811a      	strh	r2, [r3, #8]
 801849c:	693b      	ldr	r3, [r7, #16]
 801849e:	891a      	ldrh	r2, [r3, #8]
 80184a0:	693b      	ldr	r3, [r7, #16]
 80184a2:	815a      	strh	r2, [r3, #10]
  return p;
 80184a4:	693b      	ldr	r3, [r7, #16]
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3718      	adds	r7, #24
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
 80184ae:	bf00      	nop
 80184b0:	08023050 	.word	0x08023050
 80184b4:	08023108 	.word	0x08023108
 80184b8:	080230a4 	.word	0x080230a4
 80184bc:	0802312c 	.word	0x0802312c
 80184c0:	0802314c 	.word	0x0802314c

080184c4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b082      	sub	sp, #8
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
 80184cc:	460b      	mov	r3, r1
 80184ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d106      	bne.n	80184e4 <tcp_write_checks+0x20>
 80184d6:	4b33      	ldr	r3, [pc, #204]	@ (80185a4 <tcp_write_checks+0xe0>)
 80184d8:	f240 1233 	movw	r2, #307	@ 0x133
 80184dc:	4932      	ldr	r1, [pc, #200]	@ (80185a8 <tcp_write_checks+0xe4>)
 80184de:	4833      	ldr	r0, [pc, #204]	@ (80185ac <tcp_write_checks+0xe8>)
 80184e0:	f005 ff40 	bl	801e364 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	7d1b      	ldrb	r3, [r3, #20]
 80184e8:	2b04      	cmp	r3, #4
 80184ea:	d00e      	beq.n	801850a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80184f0:	2b07      	cmp	r3, #7
 80184f2:	d00a      	beq.n	801850a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80184f8:	2b02      	cmp	r3, #2
 80184fa:	d006      	beq.n	801850a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018500:	2b03      	cmp	r3, #3
 8018502:	d002      	beq.n	801850a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018504:	f06f 030a 	mvn.w	r3, #10
 8018508:	e048      	b.n	801859c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801850a:	887b      	ldrh	r3, [r7, #2]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d101      	bne.n	8018514 <tcp_write_checks+0x50>
    return ERR_OK;
 8018510:	2300      	movs	r3, #0
 8018512:	e043      	b.n	801859c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801851a:	887a      	ldrh	r2, [r7, #2]
 801851c:	429a      	cmp	r2, r3
 801851e:	d909      	bls.n	8018534 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	8b5b      	ldrh	r3, [r3, #26]
 8018524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018528:	b29a      	uxth	r2, r3
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801852e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018532:	e033      	b.n	801859c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801853a:	2b08      	cmp	r3, #8
 801853c:	d909      	bls.n	8018552 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	8b5b      	ldrh	r3, [r3, #26]
 8018542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018546:	b29a      	uxth	r2, r3
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801854c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018550:	e024      	b.n	801859c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018558:	2b00      	cmp	r3, #0
 801855a:	d00f      	beq.n	801857c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018560:	2b00      	cmp	r3, #0
 8018562:	d11a      	bne.n	801859a <tcp_write_checks+0xd6>
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018568:	2b00      	cmp	r3, #0
 801856a:	d116      	bne.n	801859a <tcp_write_checks+0xd6>
 801856c:	4b0d      	ldr	r3, [pc, #52]	@ (80185a4 <tcp_write_checks+0xe0>)
 801856e:	f240 1255 	movw	r2, #341	@ 0x155
 8018572:	490f      	ldr	r1, [pc, #60]	@ (80185b0 <tcp_write_checks+0xec>)
 8018574:	480d      	ldr	r0, [pc, #52]	@ (80185ac <tcp_write_checks+0xe8>)
 8018576:	f005 fef5 	bl	801e364 <iprintf>
 801857a:	e00e      	b.n	801859a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018580:	2b00      	cmp	r3, #0
 8018582:	d103      	bne.n	801858c <tcp_write_checks+0xc8>
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018588:	2b00      	cmp	r3, #0
 801858a:	d006      	beq.n	801859a <tcp_write_checks+0xd6>
 801858c:	4b05      	ldr	r3, [pc, #20]	@ (80185a4 <tcp_write_checks+0xe0>)
 801858e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8018592:	4908      	ldr	r1, [pc, #32]	@ (80185b4 <tcp_write_checks+0xf0>)
 8018594:	4805      	ldr	r0, [pc, #20]	@ (80185ac <tcp_write_checks+0xe8>)
 8018596:	f005 fee5 	bl	801e364 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801859a:	2300      	movs	r3, #0
}
 801859c:	4618      	mov	r0, r3
 801859e:	3708      	adds	r7, #8
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	08023050 	.word	0x08023050
 80185a8:	08023160 	.word	0x08023160
 80185ac:	080230a4 	.word	0x080230a4
 80185b0:	08023180 	.word	0x08023180
 80185b4:	080231bc 	.word	0x080231bc

080185b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80185b8:	b590      	push	{r4, r7, lr}
 80185ba:	b09b      	sub	sp, #108	@ 0x6c
 80185bc:	af04      	add	r7, sp, #16
 80185be:	60f8      	str	r0, [r7, #12]
 80185c0:	60b9      	str	r1, [r7, #8]
 80185c2:	4611      	mov	r1, r2
 80185c4:	461a      	mov	r2, r3
 80185c6:	460b      	mov	r3, r1
 80185c8:	80fb      	strh	r3, [r7, #6]
 80185ca:	4613      	mov	r3, r2
 80185cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80185ce:	2300      	movs	r3, #0
 80185d0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80185d2:	2300      	movs	r3, #0
 80185d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80185d6:	2300      	movs	r3, #0
 80185d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80185da:	2300      	movs	r3, #0
 80185dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80185de:	2300      	movs	r3, #0
 80185e0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80185e2:	2300      	movs	r3, #0
 80185e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80185e8:	2300      	movs	r3, #0
 80185ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80185ee:	2300      	movs	r3, #0
 80185f0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80185f2:	2300      	movs	r3, #0
 80185f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80185f6:	2300      	movs	r3, #0
 80185f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d109      	bne.n	8018614 <tcp_write+0x5c>
 8018600:	4ba4      	ldr	r3, [pc, #656]	@ (8018894 <tcp_write+0x2dc>)
 8018602:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8018606:	49a4      	ldr	r1, [pc, #656]	@ (8018898 <tcp_write+0x2e0>)
 8018608:	48a4      	ldr	r0, [pc, #656]	@ (801889c <tcp_write+0x2e4>)
 801860a:	f005 feab 	bl	801e364 <iprintf>
 801860e:	f06f 030f 	mvn.w	r3, #15
 8018612:	e32a      	b.n	8018c6a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801861a:	085b      	lsrs	r3, r3, #1
 801861c:	b29a      	uxth	r2, r3
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018622:	4293      	cmp	r3, r2
 8018624:	bf28      	it	cs
 8018626:	4613      	movcs	r3, r2
 8018628:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801862a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801862c:	2b00      	cmp	r3, #0
 801862e:	d102      	bne.n	8018636 <tcp_write+0x7e>
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018634:	e000      	b.n	8018638 <tcp_write+0x80>
 8018636:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018638:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801863a:	68bb      	ldr	r3, [r7, #8]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d109      	bne.n	8018654 <tcp_write+0x9c>
 8018640:	4b94      	ldr	r3, [pc, #592]	@ (8018894 <tcp_write+0x2dc>)
 8018642:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8018646:	4996      	ldr	r1, [pc, #600]	@ (80188a0 <tcp_write+0x2e8>)
 8018648:	4894      	ldr	r0, [pc, #592]	@ (801889c <tcp_write+0x2e4>)
 801864a:	f005 fe8b 	bl	801e364 <iprintf>
 801864e:	f06f 030f 	mvn.w	r3, #15
 8018652:	e30a      	b.n	8018c6a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018654:	88fb      	ldrh	r3, [r7, #6]
 8018656:	4619      	mov	r1, r3
 8018658:	68f8      	ldr	r0, [r7, #12]
 801865a:	f7ff ff33 	bl	80184c4 <tcp_write_checks>
 801865e:	4603      	mov	r3, r0
 8018660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8018664:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018668:	2b00      	cmp	r3, #0
 801866a:	d002      	beq.n	8018672 <tcp_write+0xba>
    return err;
 801866c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018670:	e2fb      	b.n	8018c6a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018678:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801867c:	2300      	movs	r3, #0
 801867e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018686:	2b00      	cmp	r3, #0
 8018688:	f000 80f6 	beq.w	8018878 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018690:	653b      	str	r3, [r7, #80]	@ 0x50
 8018692:	e002      	b.n	801869a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801869a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d1f8      	bne.n	8018694 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80186a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186a4:	7a9b      	ldrb	r3, [r3, #10]
 80186a6:	009b      	lsls	r3, r3, #2
 80186a8:	b29b      	uxth	r3, r3
 80186aa:	f003 0304 	and.w	r3, r3, #4
 80186ae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80186b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80186b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186b4:	891b      	ldrh	r3, [r3, #8]
 80186b6:	4619      	mov	r1, r3
 80186b8:	8c3b      	ldrh	r3, [r7, #32]
 80186ba:	440b      	add	r3, r1
 80186bc:	429a      	cmp	r2, r3
 80186be:	da06      	bge.n	80186ce <tcp_write+0x116>
 80186c0:	4b74      	ldr	r3, [pc, #464]	@ (8018894 <tcp_write+0x2dc>)
 80186c2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80186c6:	4977      	ldr	r1, [pc, #476]	@ (80188a4 <tcp_write+0x2ec>)
 80186c8:	4874      	ldr	r0, [pc, #464]	@ (801889c <tcp_write+0x2e4>)
 80186ca:	f005 fe4b 	bl	801e364 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80186ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186d0:	891a      	ldrh	r2, [r3, #8]
 80186d2:	8c3b      	ldrh	r3, [r7, #32]
 80186d4:	4413      	add	r3, r2
 80186d6:	b29b      	uxth	r3, r3
 80186d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80186da:	1ad3      	subs	r3, r2, r3
 80186dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80186e4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80186e6:	8a7b      	ldrh	r3, [r7, #18]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d026      	beq.n	801873a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80186ec:	8a7b      	ldrh	r3, [r7, #18]
 80186ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80186f0:	429a      	cmp	r2, r3
 80186f2:	d206      	bcs.n	8018702 <tcp_write+0x14a>
 80186f4:	4b67      	ldr	r3, [pc, #412]	@ (8018894 <tcp_write+0x2dc>)
 80186f6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80186fa:	496b      	ldr	r1, [pc, #428]	@ (80188a8 <tcp_write+0x2f0>)
 80186fc:	4867      	ldr	r0, [pc, #412]	@ (801889c <tcp_write+0x2e4>)
 80186fe:	f005 fe31 	bl	801e364 <iprintf>
      seg = last_unsent;
 8018702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018704:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018706:	8a7b      	ldrh	r3, [r7, #18]
 8018708:	88fa      	ldrh	r2, [r7, #6]
 801870a:	4293      	cmp	r3, r2
 801870c:	bf28      	it	cs
 801870e:	4613      	movcs	r3, r2
 8018710:	b29b      	uxth	r3, r3
 8018712:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018714:	4293      	cmp	r3, r2
 8018716:	bf28      	it	cs
 8018718:	4613      	movcs	r3, r2
 801871a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801871c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018720:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018722:	4413      	add	r3, r2
 8018724:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8018728:	8a7a      	ldrh	r2, [r7, #18]
 801872a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801872c:	1ad3      	subs	r3, r2, r3
 801872e:	b29b      	uxth	r3, r3
 8018730:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018732:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018734:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018736:	1ad3      	subs	r3, r2, r3
 8018738:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801873a:	8a7b      	ldrh	r3, [r7, #18]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d00b      	beq.n	8018758 <tcp_write+0x1a0>
 8018740:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018744:	88fb      	ldrh	r3, [r7, #6]
 8018746:	429a      	cmp	r2, r3
 8018748:	d006      	beq.n	8018758 <tcp_write+0x1a0>
 801874a:	4b52      	ldr	r3, [pc, #328]	@ (8018894 <tcp_write+0x2dc>)
 801874c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018750:	4956      	ldr	r1, [pc, #344]	@ (80188ac <tcp_write+0x2f4>)
 8018752:	4852      	ldr	r0, [pc, #328]	@ (801889c <tcp_write+0x2e4>)
 8018754:	f005 fe06 	bl	801e364 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018758:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801875c:	88fb      	ldrh	r3, [r7, #6]
 801875e:	429a      	cmp	r2, r3
 8018760:	f080 8167 	bcs.w	8018a32 <tcp_write+0x47a>
 8018764:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018766:	2b00      	cmp	r3, #0
 8018768:	f000 8163 	beq.w	8018a32 <tcp_write+0x47a>
 801876c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801876e:	891b      	ldrh	r3, [r3, #8]
 8018770:	2b00      	cmp	r3, #0
 8018772:	f000 815e 	beq.w	8018a32 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018776:	88fa      	ldrh	r2, [r7, #6]
 8018778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801877c:	1ad2      	subs	r2, r2, r3
 801877e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018780:	4293      	cmp	r3, r2
 8018782:	bfa8      	it	ge
 8018784:	4613      	movge	r3, r2
 8018786:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801878a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801878c:	797b      	ldrb	r3, [r7, #5]
 801878e:	f003 0301 	and.w	r3, r3, #1
 8018792:	2b00      	cmp	r3, #0
 8018794:	d027      	beq.n	80187e6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018796:	f107 0012 	add.w	r0, r7, #18
 801879a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801879c:	8bf9      	ldrh	r1, [r7, #30]
 801879e:	2301      	movs	r3, #1
 80187a0:	9302      	str	r3, [sp, #8]
 80187a2:	797b      	ldrb	r3, [r7, #5]
 80187a4:	9301      	str	r3, [sp, #4]
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	9300      	str	r3, [sp, #0]
 80187aa:	4603      	mov	r3, r0
 80187ac:	2000      	movs	r0, #0
 80187ae:	f7ff fe0f 	bl	80183d0 <tcp_pbuf_prealloc>
 80187b2:	6578      	str	r0, [r7, #84]	@ 0x54
 80187b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	f000 8225 	beq.w	8018c06 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80187bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187be:	6858      	ldr	r0, [r3, #4]
 80187c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80187c4:	68ba      	ldr	r2, [r7, #8]
 80187c6:	4413      	add	r3, r2
 80187c8:	8bfa      	ldrh	r2, [r7, #30]
 80187ca:	4619      	mov	r1, r3
 80187cc:	f006 f82b 	bl	801e826 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80187d0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80187d2:	f7fb fa01 	bl	8013bd8 <pbuf_clen>
 80187d6:	4603      	mov	r3, r0
 80187d8:	461a      	mov	r2, r3
 80187da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80187de:	4413      	add	r3, r2
 80187e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80187e4:	e041      	b.n	801886a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80187e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187e8:	685b      	ldr	r3, [r3, #4]
 80187ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80187ec:	e002      	b.n	80187f4 <tcp_write+0x23c>
 80187ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80187f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d1f8      	bne.n	80187ee <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80187fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187fe:	7b1b      	ldrb	r3, [r3, #12]
 8018800:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018804:	2b00      	cmp	r3, #0
 8018806:	d115      	bne.n	8018834 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801880a:	685b      	ldr	r3, [r3, #4]
 801880c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801880e:	8952      	ldrh	r2, [r2, #10]
 8018810:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018812:	68ba      	ldr	r2, [r7, #8]
 8018814:	429a      	cmp	r2, r3
 8018816:	d10d      	bne.n	8018834 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018818:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801881c:	2b00      	cmp	r3, #0
 801881e:	d006      	beq.n	801882e <tcp_write+0x276>
 8018820:	4b1c      	ldr	r3, [pc, #112]	@ (8018894 <tcp_write+0x2dc>)
 8018822:	f240 2231 	movw	r2, #561	@ 0x231
 8018826:	4922      	ldr	r1, [pc, #136]	@ (80188b0 <tcp_write+0x2f8>)
 8018828:	481c      	ldr	r0, [pc, #112]	@ (801889c <tcp_write+0x2e4>)
 801882a:	f005 fd9b 	bl	801e364 <iprintf>
          extendlen = seglen;
 801882e:	8bfb      	ldrh	r3, [r7, #30]
 8018830:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8018832:	e01a      	b.n	801886a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018834:	8bfb      	ldrh	r3, [r7, #30]
 8018836:	2201      	movs	r2, #1
 8018838:	4619      	mov	r1, r3
 801883a:	2000      	movs	r0, #0
 801883c:	f7fa fe5a 	bl	80134f4 <pbuf_alloc>
 8018840:	6578      	str	r0, [r7, #84]	@ 0x54
 8018842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018844:	2b00      	cmp	r3, #0
 8018846:	f000 81e0 	beq.w	8018c0a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801884a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801884e:	68ba      	ldr	r2, [r7, #8]
 8018850:	441a      	add	r2, r3
 8018852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018854:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018856:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018858:	f7fb f9be 	bl	8013bd8 <pbuf_clen>
 801885c:	4603      	mov	r3, r0
 801885e:	461a      	mov	r2, r3
 8018860:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018864:	4413      	add	r3, r2
 8018866:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801886a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801886e:	8bfb      	ldrh	r3, [r7, #30]
 8018870:	4413      	add	r3, r2
 8018872:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8018876:	e0dc      	b.n	8018a32 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801887e:	2b00      	cmp	r3, #0
 8018880:	f000 80d7 	beq.w	8018a32 <tcp_write+0x47a>
 8018884:	4b03      	ldr	r3, [pc, #12]	@ (8018894 <tcp_write+0x2dc>)
 8018886:	f240 224a 	movw	r2, #586	@ 0x24a
 801888a:	490a      	ldr	r1, [pc, #40]	@ (80188b4 <tcp_write+0x2fc>)
 801888c:	4803      	ldr	r0, [pc, #12]	@ (801889c <tcp_write+0x2e4>)
 801888e:	f005 fd69 	bl	801e364 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8018892:	e0ce      	b.n	8018a32 <tcp_write+0x47a>
 8018894:	08023050 	.word	0x08023050
 8018898:	080231f0 	.word	0x080231f0
 801889c:	080230a4 	.word	0x080230a4
 80188a0:	08023208 	.word	0x08023208
 80188a4:	0802323c 	.word	0x0802323c
 80188a8:	08023254 	.word	0x08023254
 80188ac:	08023274 	.word	0x08023274
 80188b0:	08023294 	.word	0x08023294
 80188b4:	080232c0 	.word	0x080232c0
    struct pbuf *p;
    u16_t left = len - pos;
 80188b8:	88fa      	ldrh	r2, [r7, #6]
 80188ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80188be:	1ad3      	subs	r3, r2, r3
 80188c0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80188c2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80188c6:	b29b      	uxth	r3, r3
 80188c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80188ca:	1ad3      	subs	r3, r2, r3
 80188cc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80188ce:	8b7a      	ldrh	r2, [r7, #26]
 80188d0:	8bbb      	ldrh	r3, [r7, #28]
 80188d2:	4293      	cmp	r3, r2
 80188d4:	bf28      	it	cs
 80188d6:	4613      	movcs	r3, r2
 80188d8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80188da:	797b      	ldrb	r3, [r7, #5]
 80188dc:	f003 0301 	and.w	r3, r3, #1
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d036      	beq.n	8018952 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80188e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80188e8:	b29a      	uxth	r2, r3
 80188ea:	8b3b      	ldrh	r3, [r7, #24]
 80188ec:	4413      	add	r3, r2
 80188ee:	b299      	uxth	r1, r3
 80188f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	bf0c      	ite	eq
 80188f6:	2301      	moveq	r3, #1
 80188f8:	2300      	movne	r3, #0
 80188fa:	b2db      	uxtb	r3, r3
 80188fc:	f107 0012 	add.w	r0, r7, #18
 8018900:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018902:	9302      	str	r3, [sp, #8]
 8018904:	797b      	ldrb	r3, [r7, #5]
 8018906:	9301      	str	r3, [sp, #4]
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	9300      	str	r3, [sp, #0]
 801890c:	4603      	mov	r3, r0
 801890e:	2036      	movs	r0, #54	@ 0x36
 8018910:	f7ff fd5e 	bl	80183d0 <tcp_pbuf_prealloc>
 8018914:	6338      	str	r0, [r7, #48]	@ 0x30
 8018916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018918:	2b00      	cmp	r3, #0
 801891a:	f000 8178 	beq.w	8018c0e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018920:	895b      	ldrh	r3, [r3, #10]
 8018922:	8b3a      	ldrh	r2, [r7, #24]
 8018924:	429a      	cmp	r2, r3
 8018926:	d906      	bls.n	8018936 <tcp_write+0x37e>
 8018928:	4b8c      	ldr	r3, [pc, #560]	@ (8018b5c <tcp_write+0x5a4>)
 801892a:	f240 2266 	movw	r2, #614	@ 0x266
 801892e:	498c      	ldr	r1, [pc, #560]	@ (8018b60 <tcp_write+0x5a8>)
 8018930:	488c      	ldr	r0, [pc, #560]	@ (8018b64 <tcp_write+0x5ac>)
 8018932:	f005 fd17 	bl	801e364 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018938:	685a      	ldr	r2, [r3, #4]
 801893a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801893e:	18d0      	adds	r0, r2, r3
 8018940:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018944:	68ba      	ldr	r2, [r7, #8]
 8018946:	4413      	add	r3, r2
 8018948:	8b3a      	ldrh	r2, [r7, #24]
 801894a:	4619      	mov	r1, r3
 801894c:	f005 ff6b 	bl	801e826 <memcpy>
 8018950:	e02f      	b.n	80189b2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018952:	8a7b      	ldrh	r3, [r7, #18]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d006      	beq.n	8018966 <tcp_write+0x3ae>
 8018958:	4b80      	ldr	r3, [pc, #512]	@ (8018b5c <tcp_write+0x5a4>)
 801895a:	f240 2271 	movw	r2, #625	@ 0x271
 801895e:	4982      	ldr	r1, [pc, #520]	@ (8018b68 <tcp_write+0x5b0>)
 8018960:	4880      	ldr	r0, [pc, #512]	@ (8018b64 <tcp_write+0x5ac>)
 8018962:	f005 fcff 	bl	801e364 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018966:	8b3b      	ldrh	r3, [r7, #24]
 8018968:	2201      	movs	r2, #1
 801896a:	4619      	mov	r1, r3
 801896c:	2036      	movs	r0, #54	@ 0x36
 801896e:	f7fa fdc1 	bl	80134f4 <pbuf_alloc>
 8018972:	6178      	str	r0, [r7, #20]
 8018974:	697b      	ldr	r3, [r7, #20]
 8018976:	2b00      	cmp	r3, #0
 8018978:	f000 814b 	beq.w	8018c12 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801897c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018980:	68ba      	ldr	r2, [r7, #8]
 8018982:	441a      	add	r2, r3
 8018984:	697b      	ldr	r3, [r7, #20]
 8018986:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018988:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801898c:	b29b      	uxth	r3, r3
 801898e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018992:	4619      	mov	r1, r3
 8018994:	2036      	movs	r0, #54	@ 0x36
 8018996:	f7fa fdad 	bl	80134f4 <pbuf_alloc>
 801899a:	6338      	str	r0, [r7, #48]	@ 0x30
 801899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d103      	bne.n	80189aa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80189a2:	6978      	ldr	r0, [r7, #20]
 80189a4:	f7fb f88a 	bl	8013abc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80189a8:	e136      	b.n	8018c18 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80189aa:	6979      	ldr	r1, [r7, #20]
 80189ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80189ae:	f7fb f953 	bl	8013c58 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80189b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80189b4:	f7fb f910 	bl	8013bd8 <pbuf_clen>
 80189b8:	4603      	mov	r3, r0
 80189ba:	461a      	mov	r2, r3
 80189bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80189c0:	4413      	add	r3, r2
 80189c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80189c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80189ca:	2b09      	cmp	r3, #9
 80189cc:	d903      	bls.n	80189d6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80189ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80189d0:	f7fb f874 	bl	8013abc <pbuf_free>
      goto memerr;
 80189d4:	e120      	b.n	8018c18 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80189da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80189de:	441a      	add	r2, r3
 80189e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189e4:	9300      	str	r3, [sp, #0]
 80189e6:	4613      	mov	r3, r2
 80189e8:	2200      	movs	r2, #0
 80189ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80189ec:	68f8      	ldr	r0, [r7, #12]
 80189ee:	f7ff fc53 	bl	8018298 <tcp_create_segment>
 80189f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80189f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	f000 810d 	beq.w	8018c16 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80189fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d102      	bne.n	8018a08 <tcp_write+0x450>
      queue = seg;
 8018a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8018a06:	e00c      	b.n	8018a22 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d106      	bne.n	8018a1c <tcp_write+0x464>
 8018a0e:	4b53      	ldr	r3, [pc, #332]	@ (8018b5c <tcp_write+0x5a4>)
 8018a10:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018a14:	4955      	ldr	r1, [pc, #340]	@ (8018b6c <tcp_write+0x5b4>)
 8018a16:	4853      	ldr	r0, [pc, #332]	@ (8018b64 <tcp_write+0x5ac>)
 8018a18:	f005 fca4 	bl	801e364 <iprintf>
      prev_seg->next = seg;
 8018a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018a1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a20:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a24:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018a26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a2a:	8b3b      	ldrh	r3, [r7, #24]
 8018a2c:	4413      	add	r3, r2
 8018a2e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8018a32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a36:	88fb      	ldrh	r3, [r7, #6]
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	f4ff af3d 	bcc.w	80188b8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8018a3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d02c      	beq.n	8018a9e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a46:	685b      	ldr	r3, [r3, #4]
 8018a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a4a:	e01e      	b.n	8018a8a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8018a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a4e:	891a      	ldrh	r2, [r3, #8]
 8018a50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a52:	4413      	add	r3, r2
 8018a54:	b29a      	uxth	r2, r3
 8018a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a58:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d110      	bne.n	8018a84 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a64:	685b      	ldr	r3, [r3, #4]
 8018a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a68:	8952      	ldrh	r2, [r2, #10]
 8018a6a:	4413      	add	r3, r2
 8018a6c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018a6e:	68b9      	ldr	r1, [r7, #8]
 8018a70:	4618      	mov	r0, r3
 8018a72:	f005 fed8 	bl	801e826 <memcpy>
        p->len += oversize_used;
 8018a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a78:	895a      	ldrh	r2, [r3, #10]
 8018a7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a7c:	4413      	add	r3, r2
 8018a7e:	b29a      	uxth	r2, r3
 8018a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a82:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d1dd      	bne.n	8018a4c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a92:	891a      	ldrh	r2, [r3, #8]
 8018a94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a96:	4413      	add	r3, r2
 8018a98:	b29a      	uxth	r2, r3
 8018a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a9c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018a9e:	8a7a      	ldrh	r2, [r7, #18]
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d018      	beq.n	8018ade <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d106      	bne.n	8018ac0 <tcp_write+0x508>
 8018ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8018b5c <tcp_write+0x5a4>)
 8018ab4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8018ab8:	492d      	ldr	r1, [pc, #180]	@ (8018b70 <tcp_write+0x5b8>)
 8018aba:	482a      	ldr	r0, [pc, #168]	@ (8018b64 <tcp_write+0x5ac>)
 8018abc:	f005 fc52 	bl	801e364 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ac2:	685b      	ldr	r3, [r3, #4]
 8018ac4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7fb f8c6 	bl	8013c58 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ace:	891a      	ldrh	r2, [r3, #8]
 8018ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ad2:	891b      	ldrh	r3, [r3, #8]
 8018ad4:	4413      	add	r3, r2
 8018ad6:	b29a      	uxth	r2, r3
 8018ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ada:	811a      	strh	r2, [r3, #8]
 8018adc:	e037      	b.n	8018b4e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8018ade:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d034      	beq.n	8018b4e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d003      	beq.n	8018af2 <tcp_write+0x53a>
 8018aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018aec:	685b      	ldr	r3, [r3, #4]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d106      	bne.n	8018b00 <tcp_write+0x548>
 8018af2:	4b1a      	ldr	r3, [pc, #104]	@ (8018b5c <tcp_write+0x5a4>)
 8018af4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8018af8:	491e      	ldr	r1, [pc, #120]	@ (8018b74 <tcp_write+0x5bc>)
 8018afa:	481a      	ldr	r0, [pc, #104]	@ (8018b64 <tcp_write+0x5ac>)
 8018afc:	f005 fc32 	bl	801e364 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b06:	e009      	b.n	8018b1c <tcp_write+0x564>
      p->tot_len += extendlen;
 8018b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b0a:	891a      	ldrh	r2, [r3, #8]
 8018b0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b0e:	4413      	add	r3, r2
 8018b10:	b29a      	uxth	r2, r3
 8018b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b14:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d1f1      	bne.n	8018b08 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8018b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b26:	891a      	ldrh	r2, [r3, #8]
 8018b28:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b2a:	4413      	add	r3, r2
 8018b2c:	b29a      	uxth	r2, r3
 8018b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b30:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8018b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b34:	895a      	ldrh	r2, [r3, #10]
 8018b36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b38:	4413      	add	r3, r2
 8018b3a:	b29a      	uxth	r2, r3
 8018b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b3e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8018b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b42:	891a      	ldrh	r2, [r3, #8]
 8018b44:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b46:	4413      	add	r3, r2
 8018b48:	b29a      	uxth	r2, r3
 8018b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b4c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8018b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d111      	bne.n	8018b78 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018b58:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018b5a:	e010      	b.n	8018b7e <tcp_write+0x5c6>
 8018b5c:	08023050 	.word	0x08023050
 8018b60:	080232f0 	.word	0x080232f0
 8018b64:	080230a4 	.word	0x080230a4
 8018b68:	08023330 	.word	0x08023330
 8018b6c:	08023340 	.word	0x08023340
 8018b70:	08023354 	.word	0x08023354
 8018b74:	0802338c 	.word	0x0802338c
  } else {
    last_unsent->next = queue;
 8018b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018b7c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018b82:	88fb      	ldrh	r3, [r7, #6]
 8018b84:	441a      	add	r2, r3
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018b90:	88fb      	ldrh	r3, [r7, #6]
 8018b92:	1ad3      	subs	r3, r2, r3
 8018b94:	b29a      	uxth	r2, r3
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018ba2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d00e      	beq.n	8018bce <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d10a      	bne.n	8018bce <tcp_write+0x616>
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d106      	bne.n	8018bce <tcp_write+0x616>
 8018bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8018c74 <tcp_write+0x6bc>)
 8018bc2:	f240 3212 	movw	r2, #786	@ 0x312
 8018bc6:	492c      	ldr	r1, [pc, #176]	@ (8018c78 <tcp_write+0x6c0>)
 8018bc8:	482c      	ldr	r0, [pc, #176]	@ (8018c7c <tcp_write+0x6c4>)
 8018bca:	f005 fbcb 	bl	801e364 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8018bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d016      	beq.n	8018c02 <tcp_write+0x64a>
 8018bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bd6:	68db      	ldr	r3, [r3, #12]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d012      	beq.n	8018c02 <tcp_write+0x64a>
 8018bdc:	797b      	ldrb	r3, [r7, #5]
 8018bde:	f003 0302 	and.w	r3, r3, #2
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d10d      	bne.n	8018c02 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018be8:	68db      	ldr	r3, [r3, #12]
 8018bea:	899b      	ldrh	r3, [r3, #12]
 8018bec:	b29c      	uxth	r4, r3
 8018bee:	2008      	movs	r0, #8
 8018bf0:	f7f9 f8a8 	bl	8011d44 <lwip_htons>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	461a      	mov	r2, r3
 8018bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bfa:	68db      	ldr	r3, [r3, #12]
 8018bfc:	4322      	orrs	r2, r4
 8018bfe:	b292      	uxth	r2, r2
 8018c00:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8018c02:	2300      	movs	r3, #0
 8018c04:	e031      	b.n	8018c6a <tcp_write+0x6b2>
          goto memerr;
 8018c06:	bf00      	nop
 8018c08:	e006      	b.n	8018c18 <tcp_write+0x660>
            goto memerr;
 8018c0a:	bf00      	nop
 8018c0c:	e004      	b.n	8018c18 <tcp_write+0x660>
        goto memerr;
 8018c0e:	bf00      	nop
 8018c10:	e002      	b.n	8018c18 <tcp_write+0x660>
        goto memerr;
 8018c12:	bf00      	nop
 8018c14:	e000      	b.n	8018c18 <tcp_write+0x660>
      goto memerr;
 8018c16:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	8b5b      	ldrh	r3, [r3, #26]
 8018c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c20:	b29a      	uxth	r2, r3
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8018c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d002      	beq.n	8018c32 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018c2c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018c2e:	f7fa ff45 	bl	8013abc <pbuf_free>
  }
  if (queue != NULL) {
 8018c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d002      	beq.n	8018c3e <tcp_write+0x686>
    tcp_segs_free(queue);
 8018c38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018c3a:	f7fc fb71 	bl	8015320 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d00e      	beq.n	8018c66 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d10a      	bne.n	8018c66 <tcp_write+0x6ae>
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d106      	bne.n	8018c66 <tcp_write+0x6ae>
 8018c58:	4b06      	ldr	r3, [pc, #24]	@ (8018c74 <tcp_write+0x6bc>)
 8018c5a:	f240 3227 	movw	r2, #807	@ 0x327
 8018c5e:	4906      	ldr	r1, [pc, #24]	@ (8018c78 <tcp_write+0x6c0>)
 8018c60:	4806      	ldr	r0, [pc, #24]	@ (8018c7c <tcp_write+0x6c4>)
 8018c62:	f005 fb7f 	bl	801e364 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	375c      	adds	r7, #92	@ 0x5c
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd90      	pop	{r4, r7, pc}
 8018c72:	bf00      	nop
 8018c74:	08023050 	.word	0x08023050
 8018c78:	080233c4 	.word	0x080233c4
 8018c7c:	080230a4 	.word	0x080230a4

08018c80 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018c80:	b590      	push	{r4, r7, lr}
 8018c82:	b08b      	sub	sp, #44	@ 0x2c
 8018c84:	af02      	add	r7, sp, #8
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	460b      	mov	r3, r1
 8018c8a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	61fb      	str	r3, [r7, #28]
 8018c90:	2300      	movs	r3, #0
 8018c92:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018c94:	2300      	movs	r3, #0
 8018c96:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d106      	bne.n	8018cac <tcp_split_unsent_seg+0x2c>
 8018c9e:	4b95      	ldr	r3, [pc, #596]	@ (8018ef4 <tcp_split_unsent_seg+0x274>)
 8018ca0:	f240 324b 	movw	r2, #843	@ 0x34b
 8018ca4:	4994      	ldr	r1, [pc, #592]	@ (8018ef8 <tcp_split_unsent_seg+0x278>)
 8018ca6:	4895      	ldr	r0, [pc, #596]	@ (8018efc <tcp_split_unsent_seg+0x27c>)
 8018ca8:	f005 fb5c 	bl	801e364 <iprintf>

  useg = pcb->unsent;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018cb0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018cb2:	697b      	ldr	r3, [r7, #20]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d102      	bne.n	8018cbe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018cb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018cbc:	e116      	b.n	8018eec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018cbe:	887b      	ldrh	r3, [r7, #2]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d109      	bne.n	8018cd8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018cc4:	4b8b      	ldr	r3, [pc, #556]	@ (8018ef4 <tcp_split_unsent_seg+0x274>)
 8018cc6:	f240 3253 	movw	r2, #851	@ 0x353
 8018cca:	498d      	ldr	r1, [pc, #564]	@ (8018f00 <tcp_split_unsent_seg+0x280>)
 8018ccc:	488b      	ldr	r0, [pc, #556]	@ (8018efc <tcp_split_unsent_seg+0x27c>)
 8018cce:	f005 fb49 	bl	801e364 <iprintf>
    return ERR_VAL;
 8018cd2:	f06f 0305 	mvn.w	r3, #5
 8018cd6:	e109      	b.n	8018eec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	891b      	ldrh	r3, [r3, #8]
 8018cdc:	887a      	ldrh	r2, [r7, #2]
 8018cde:	429a      	cmp	r2, r3
 8018ce0:	d301      	bcc.n	8018ce6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	e102      	b.n	8018eec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018cea:	887a      	ldrh	r2, [r7, #2]
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d906      	bls.n	8018cfe <tcp_split_unsent_seg+0x7e>
 8018cf0:	4b80      	ldr	r3, [pc, #512]	@ (8018ef4 <tcp_split_unsent_seg+0x274>)
 8018cf2:	f240 325b 	movw	r2, #859	@ 0x35b
 8018cf6:	4983      	ldr	r1, [pc, #524]	@ (8018f04 <tcp_split_unsent_seg+0x284>)
 8018cf8:	4880      	ldr	r0, [pc, #512]	@ (8018efc <tcp_split_unsent_seg+0x27c>)
 8018cfa:	f005 fb33 	bl	801e364 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	891b      	ldrh	r3, [r3, #8]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d106      	bne.n	8018d14 <tcp_split_unsent_seg+0x94>
 8018d06:	4b7b      	ldr	r3, [pc, #492]	@ (8018ef4 <tcp_split_unsent_seg+0x274>)
 8018d08:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018d0c:	497e      	ldr	r1, [pc, #504]	@ (8018f08 <tcp_split_unsent_seg+0x288>)
 8018d0e:	487b      	ldr	r0, [pc, #492]	@ (8018efc <tcp_split_unsent_seg+0x27c>)
 8018d10:	f005 fb28 	bl	801e364 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018d14:	697b      	ldr	r3, [r7, #20]
 8018d16:	7a9b      	ldrb	r3, [r3, #10]
 8018d18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018d1a:	7bfb      	ldrb	r3, [r7, #15]
 8018d1c:	009b      	lsls	r3, r3, #2
 8018d1e:	b2db      	uxtb	r3, r3
 8018d20:	f003 0304 	and.w	r3, r3, #4
 8018d24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	891a      	ldrh	r2, [r3, #8]
 8018d2a:	887b      	ldrh	r3, [r7, #2]
 8018d2c:	1ad3      	subs	r3, r2, r3
 8018d2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018d30:	7bbb      	ldrb	r3, [r7, #14]
 8018d32:	b29a      	uxth	r2, r3
 8018d34:	89bb      	ldrh	r3, [r7, #12]
 8018d36:	4413      	add	r3, r2
 8018d38:	b29b      	uxth	r3, r3
 8018d3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018d3e:	4619      	mov	r1, r3
 8018d40:	2036      	movs	r0, #54	@ 0x36
 8018d42:	f7fa fbd7 	bl	80134f4 <pbuf_alloc>
 8018d46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018d48:	693b      	ldr	r3, [r7, #16]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	f000 80b7 	beq.w	8018ebe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018d50:	697b      	ldr	r3, [r7, #20]
 8018d52:	685b      	ldr	r3, [r3, #4]
 8018d54:	891a      	ldrh	r2, [r3, #8]
 8018d56:	697b      	ldr	r3, [r7, #20]
 8018d58:	891b      	ldrh	r3, [r3, #8]
 8018d5a:	1ad3      	subs	r3, r2, r3
 8018d5c:	b29a      	uxth	r2, r3
 8018d5e:	887b      	ldrh	r3, [r7, #2]
 8018d60:	4413      	add	r3, r2
 8018d62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018d64:	697b      	ldr	r3, [r7, #20]
 8018d66:	6858      	ldr	r0, [r3, #4]
 8018d68:	693b      	ldr	r3, [r7, #16]
 8018d6a:	685a      	ldr	r2, [r3, #4]
 8018d6c:	7bbb      	ldrb	r3, [r7, #14]
 8018d6e:	18d1      	adds	r1, r2, r3
 8018d70:	897b      	ldrh	r3, [r7, #10]
 8018d72:	89ba      	ldrh	r2, [r7, #12]
 8018d74:	f7fb f8a8 	bl	8013ec8 <pbuf_copy_partial>
 8018d78:	4603      	mov	r3, r0
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	89bb      	ldrh	r3, [r7, #12]
 8018d7e:	4293      	cmp	r3, r2
 8018d80:	f040 809f 	bne.w	8018ec2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018d84:	697b      	ldr	r3, [r7, #20]
 8018d86:	68db      	ldr	r3, [r3, #12]
 8018d88:	899b      	ldrh	r3, [r3, #12]
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7f8 ffd9 	bl	8011d44 <lwip_htons>
 8018d92:	4603      	mov	r3, r0
 8018d94:	b2db      	uxtb	r3, r3
 8018d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018d9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018da0:	7efb      	ldrb	r3, [r7, #27]
 8018da2:	f003 0308 	and.w	r3, r3, #8
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d007      	beq.n	8018dba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018daa:	7efb      	ldrb	r3, [r7, #27]
 8018dac:	f023 0308 	bic.w	r3, r3, #8
 8018db0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018db2:	7ebb      	ldrb	r3, [r7, #26]
 8018db4:	f043 0308 	orr.w	r3, r3, #8
 8018db8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018dba:	7efb      	ldrb	r3, [r7, #27]
 8018dbc:	f003 0301 	and.w	r3, r3, #1
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d007      	beq.n	8018dd4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018dc4:	7efb      	ldrb	r3, [r7, #27]
 8018dc6:	f023 0301 	bic.w	r3, r3, #1
 8018dca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018dcc:	7ebb      	ldrb	r3, [r7, #26]
 8018dce:	f043 0301 	orr.w	r3, r3, #1
 8018dd2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	68db      	ldr	r3, [r3, #12]
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f7f8 ffc7 	bl	8011d6e <lwip_htonl>
 8018de0:	4602      	mov	r2, r0
 8018de2:	887b      	ldrh	r3, [r7, #2]
 8018de4:	18d1      	adds	r1, r2, r3
 8018de6:	7eba      	ldrb	r2, [r7, #26]
 8018de8:	7bfb      	ldrb	r3, [r7, #15]
 8018dea:	9300      	str	r3, [sp, #0]
 8018dec:	460b      	mov	r3, r1
 8018dee:	6939      	ldr	r1, [r7, #16]
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f7ff fa51 	bl	8018298 <tcp_create_segment>
 8018df6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018df8:	69fb      	ldr	r3, [r7, #28]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d063      	beq.n	8018ec6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018dfe:	697b      	ldr	r3, [r7, #20]
 8018e00:	685b      	ldr	r3, [r3, #4]
 8018e02:	4618      	mov	r0, r3
 8018e04:	f7fa fee8 	bl	8013bd8 <pbuf_clen>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018e12:	1a9b      	subs	r3, r3, r2
 8018e14:	b29a      	uxth	r2, r3
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	6858      	ldr	r0, [r3, #4]
 8018e20:	697b      	ldr	r3, [r7, #20]
 8018e22:	685b      	ldr	r3, [r3, #4]
 8018e24:	891a      	ldrh	r2, [r3, #8]
 8018e26:	89bb      	ldrh	r3, [r7, #12]
 8018e28:	1ad3      	subs	r3, r2, r3
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	f7fa fcbf 	bl	80137b0 <pbuf_realloc>
  useg->len -= remainder;
 8018e32:	697b      	ldr	r3, [r7, #20]
 8018e34:	891a      	ldrh	r2, [r3, #8]
 8018e36:	89bb      	ldrh	r3, [r7, #12]
 8018e38:	1ad3      	subs	r3, r2, r3
 8018e3a:	b29a      	uxth	r2, r3
 8018e3c:	697b      	ldr	r3, [r7, #20]
 8018e3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	68db      	ldr	r3, [r3, #12]
 8018e44:	899b      	ldrh	r3, [r3, #12]
 8018e46:	b29c      	uxth	r4, r3
 8018e48:	7efb      	ldrb	r3, [r7, #27]
 8018e4a:	b29b      	uxth	r3, r3
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7f8 ff79 	bl	8011d44 <lwip_htons>
 8018e52:	4603      	mov	r3, r0
 8018e54:	461a      	mov	r2, r3
 8018e56:	697b      	ldr	r3, [r7, #20]
 8018e58:	68db      	ldr	r3, [r3, #12]
 8018e5a:	4322      	orrs	r2, r4
 8018e5c:	b292      	uxth	r2, r2
 8018e5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018e60:	697b      	ldr	r3, [r7, #20]
 8018e62:	685b      	ldr	r3, [r3, #4]
 8018e64:	4618      	mov	r0, r3
 8018e66:	f7fa feb7 	bl	8013bd8 <pbuf_clen>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018e74:	4413      	add	r3, r2
 8018e76:	b29a      	uxth	r2, r3
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018e7e:	69fb      	ldr	r3, [r7, #28]
 8018e80:	685b      	ldr	r3, [r3, #4]
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7fa fea8 	bl	8013bd8 <pbuf_clen>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	461a      	mov	r2, r3
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018e92:	4413      	add	r3, r2
 8018e94:	b29a      	uxth	r2, r3
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018e9c:	697b      	ldr	r3, [r7, #20]
 8018e9e:	681a      	ldr	r2, [r3, #0]
 8018ea0:	69fb      	ldr	r3, [r7, #28]
 8018ea2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018ea4:	697b      	ldr	r3, [r7, #20]
 8018ea6:	69fa      	ldr	r2, [r7, #28]
 8018ea8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018eaa:	69fb      	ldr	r3, [r7, #28]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d103      	bne.n	8018eba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018eba:	2300      	movs	r3, #0
 8018ebc:	e016      	b.n	8018eec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018ebe:	bf00      	nop
 8018ec0:	e002      	b.n	8018ec8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018ec2:	bf00      	nop
 8018ec4:	e000      	b.n	8018ec8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018ec6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018ec8:	69fb      	ldr	r3, [r7, #28]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d006      	beq.n	8018edc <tcp_split_unsent_seg+0x25c>
 8018ece:	4b09      	ldr	r3, [pc, #36]	@ (8018ef4 <tcp_split_unsent_seg+0x274>)
 8018ed0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8018ed4:	490d      	ldr	r1, [pc, #52]	@ (8018f0c <tcp_split_unsent_seg+0x28c>)
 8018ed6:	4809      	ldr	r0, [pc, #36]	@ (8018efc <tcp_split_unsent_seg+0x27c>)
 8018ed8:	f005 fa44 	bl	801e364 <iprintf>
  if (p != NULL) {
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d002      	beq.n	8018ee8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018ee2:	6938      	ldr	r0, [r7, #16]
 8018ee4:	f7fa fdea 	bl	8013abc <pbuf_free>
  }

  return ERR_MEM;
 8018ee8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8018eec:	4618      	mov	r0, r3
 8018eee:	3724      	adds	r7, #36	@ 0x24
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd90      	pop	{r4, r7, pc}
 8018ef4:	08023050 	.word	0x08023050
 8018ef8:	080233e4 	.word	0x080233e4
 8018efc:	080230a4 	.word	0x080230a4
 8018f00:	08023408 	.word	0x08023408
 8018f04:	0802342c 	.word	0x0802342c
 8018f08:	0802343c 	.word	0x0802343c
 8018f0c:	0802344c 	.word	0x0802344c

08018f10 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018f10:	b590      	push	{r4, r7, lr}
 8018f12:	b085      	sub	sp, #20
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d106      	bne.n	8018f2c <tcp_send_fin+0x1c>
 8018f1e:	4b21      	ldr	r3, [pc, #132]	@ (8018fa4 <tcp_send_fin+0x94>)
 8018f20:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8018f24:	4920      	ldr	r1, [pc, #128]	@ (8018fa8 <tcp_send_fin+0x98>)
 8018f26:	4821      	ldr	r0, [pc, #132]	@ (8018fac <tcp_send_fin+0x9c>)
 8018f28:	f005 fa1c 	bl	801e364 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d02e      	beq.n	8018f92 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f38:	60fb      	str	r3, [r7, #12]
 8018f3a:	e002      	b.n	8018f42 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d1f8      	bne.n	8018f3c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	68db      	ldr	r3, [r3, #12]
 8018f4e:	899b      	ldrh	r3, [r3, #12]
 8018f50:	b29b      	uxth	r3, r3
 8018f52:	4618      	mov	r0, r3
 8018f54:	f7f8 fef6 	bl	8011d44 <lwip_htons>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	f003 0307 	and.w	r3, r3, #7
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d116      	bne.n	8018f92 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	68db      	ldr	r3, [r3, #12]
 8018f68:	899b      	ldrh	r3, [r3, #12]
 8018f6a:	b29c      	uxth	r4, r3
 8018f6c:	2001      	movs	r0, #1
 8018f6e:	f7f8 fee9 	bl	8011d44 <lwip_htons>
 8018f72:	4603      	mov	r3, r0
 8018f74:	461a      	mov	r2, r3
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	68db      	ldr	r3, [r3, #12]
 8018f7a:	4322      	orrs	r2, r4
 8018f7c:	b292      	uxth	r2, r2
 8018f7e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	8b5b      	ldrh	r3, [r3, #26]
 8018f84:	f043 0320 	orr.w	r3, r3, #32
 8018f88:	b29a      	uxth	r2, r3
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	e004      	b.n	8018f9c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018f92:	2101      	movs	r1, #1
 8018f94:	6878      	ldr	r0, [r7, #4]
 8018f96:	f000 f80b 	bl	8018fb0 <tcp_enqueue_flags>
 8018f9a:	4603      	mov	r3, r0
}
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	3714      	adds	r7, #20
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd90      	pop	{r4, r7, pc}
 8018fa4:	08023050 	.word	0x08023050
 8018fa8:	08023458 	.word	0x08023458
 8018fac:	080230a4 	.word	0x080230a4

08018fb0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b08a      	sub	sp, #40	@ 0x28
 8018fb4:	af02      	add	r7, sp, #8
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	460b      	mov	r3, r1
 8018fba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018fc4:	78fb      	ldrb	r3, [r7, #3]
 8018fc6:	f003 0303 	and.w	r3, r3, #3
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d106      	bne.n	8018fdc <tcp_enqueue_flags+0x2c>
 8018fce:	4b67      	ldr	r3, [pc, #412]	@ (801916c <tcp_enqueue_flags+0x1bc>)
 8018fd0:	f240 4211 	movw	r2, #1041	@ 0x411
 8018fd4:	4966      	ldr	r1, [pc, #408]	@ (8019170 <tcp_enqueue_flags+0x1c0>)
 8018fd6:	4867      	ldr	r0, [pc, #412]	@ (8019174 <tcp_enqueue_flags+0x1c4>)
 8018fd8:	f005 f9c4 	bl	801e364 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d106      	bne.n	8018ff0 <tcp_enqueue_flags+0x40>
 8018fe2:	4b62      	ldr	r3, [pc, #392]	@ (801916c <tcp_enqueue_flags+0x1bc>)
 8018fe4:	f240 4213 	movw	r2, #1043	@ 0x413
 8018fe8:	4963      	ldr	r1, [pc, #396]	@ (8019178 <tcp_enqueue_flags+0x1c8>)
 8018fea:	4862      	ldr	r0, [pc, #392]	@ (8019174 <tcp_enqueue_flags+0x1c4>)
 8018fec:	f005 f9ba 	bl	801e364 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018ff0:	78fb      	ldrb	r3, [r7, #3]
 8018ff2:	f003 0302 	and.w	r3, r3, #2
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d001      	beq.n	8018ffe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018ffa:	2301      	movs	r3, #1
 8018ffc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ffe:	7ffb      	ldrb	r3, [r7, #31]
 8019000:	009b      	lsls	r3, r3, #2
 8019002:	b2db      	uxtb	r3, r3
 8019004:	f003 0304 	and.w	r3, r3, #4
 8019008:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801900a:	7dfb      	ldrb	r3, [r7, #23]
 801900c:	b29b      	uxth	r3, r3
 801900e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019012:	4619      	mov	r1, r3
 8019014:	2036      	movs	r0, #54	@ 0x36
 8019016:	f7fa fa6d 	bl	80134f4 <pbuf_alloc>
 801901a:	6138      	str	r0, [r7, #16]
 801901c:	693b      	ldr	r3, [r7, #16]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d109      	bne.n	8019036 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	8b5b      	ldrh	r3, [r3, #26]
 8019026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801902a:	b29a      	uxth	r2, r3
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019034:	e095      	b.n	8019162 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019036:	693b      	ldr	r3, [r7, #16]
 8019038:	895a      	ldrh	r2, [r3, #10]
 801903a:	7dfb      	ldrb	r3, [r7, #23]
 801903c:	b29b      	uxth	r3, r3
 801903e:	429a      	cmp	r2, r3
 8019040:	d206      	bcs.n	8019050 <tcp_enqueue_flags+0xa0>
 8019042:	4b4a      	ldr	r3, [pc, #296]	@ (801916c <tcp_enqueue_flags+0x1bc>)
 8019044:	f240 4239 	movw	r2, #1081	@ 0x439
 8019048:	494c      	ldr	r1, [pc, #304]	@ (801917c <tcp_enqueue_flags+0x1cc>)
 801904a:	484a      	ldr	r0, [pc, #296]	@ (8019174 <tcp_enqueue_flags+0x1c4>)
 801904c:	f005 f98a 	bl	801e364 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019054:	78fa      	ldrb	r2, [r7, #3]
 8019056:	7ffb      	ldrb	r3, [r7, #31]
 8019058:	9300      	str	r3, [sp, #0]
 801905a:	460b      	mov	r3, r1
 801905c:	6939      	ldr	r1, [r7, #16]
 801905e:	6878      	ldr	r0, [r7, #4]
 8019060:	f7ff f91a 	bl	8018298 <tcp_create_segment>
 8019064:	60f8      	str	r0, [r7, #12]
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d109      	bne.n	8019080 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	8b5b      	ldrh	r3, [r3, #26]
 8019070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019074:	b29a      	uxth	r2, r3
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801907a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801907e:	e070      	b.n	8019162 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	68db      	ldr	r3, [r3, #12]
 8019084:	f003 0303 	and.w	r3, r3, #3
 8019088:	2b00      	cmp	r3, #0
 801908a:	d006      	beq.n	801909a <tcp_enqueue_flags+0xea>
 801908c:	4b37      	ldr	r3, [pc, #220]	@ (801916c <tcp_enqueue_flags+0x1bc>)
 801908e:	f240 4242 	movw	r2, #1090	@ 0x442
 8019092:	493b      	ldr	r1, [pc, #236]	@ (8019180 <tcp_enqueue_flags+0x1d0>)
 8019094:	4837      	ldr	r0, [pc, #220]	@ (8019174 <tcp_enqueue_flags+0x1c4>)
 8019096:	f005 f965 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	891b      	ldrh	r3, [r3, #8]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d006      	beq.n	80190b0 <tcp_enqueue_flags+0x100>
 80190a2:	4b32      	ldr	r3, [pc, #200]	@ (801916c <tcp_enqueue_flags+0x1bc>)
 80190a4:	f240 4243 	movw	r2, #1091	@ 0x443
 80190a8:	4936      	ldr	r1, [pc, #216]	@ (8019184 <tcp_enqueue_flags+0x1d4>)
 80190aa:	4832      	ldr	r0, [pc, #200]	@ (8019174 <tcp_enqueue_flags+0x1c4>)
 80190ac:	f005 f95a 	bl	801e364 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d103      	bne.n	80190c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	68fa      	ldr	r2, [r7, #12]
 80190bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80190be:	e00d      	b.n	80190dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80190c4:	61bb      	str	r3, [r7, #24]
 80190c6:	e002      	b.n	80190ce <tcp_enqueue_flags+0x11e>
 80190c8:	69bb      	ldr	r3, [r7, #24]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	61bb      	str	r3, [r7, #24]
 80190ce:	69bb      	ldr	r3, [r7, #24]
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d1f8      	bne.n	80190c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80190d6:	69bb      	ldr	r3, [r7, #24]
 80190d8:	68fa      	ldr	r2, [r7, #12]
 80190da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2200      	movs	r2, #0
 80190e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80190e4:	78fb      	ldrb	r3, [r7, #3]
 80190e6:	f003 0302 	and.w	r3, r3, #2
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d104      	bne.n	80190f8 <tcp_enqueue_flags+0x148>
 80190ee:	78fb      	ldrb	r3, [r7, #3]
 80190f0:	f003 0301 	and.w	r3, r3, #1
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d004      	beq.n	8019102 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80190fc:	1c5a      	adds	r2, r3, #1
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019102:	78fb      	ldrb	r3, [r7, #3]
 8019104:	f003 0301 	and.w	r3, r3, #1
 8019108:	2b00      	cmp	r3, #0
 801910a:	d006      	beq.n	801911a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	8b5b      	ldrh	r3, [r3, #26]
 8019110:	f043 0320 	orr.w	r3, r3, #32
 8019114:	b29a      	uxth	r2, r3
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	685b      	ldr	r3, [r3, #4]
 801911e:	4618      	mov	r0, r3
 8019120:	f7fa fd5a 	bl	8013bd8 <pbuf_clen>
 8019124:	4603      	mov	r3, r0
 8019126:	461a      	mov	r2, r3
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801912e:	4413      	add	r3, r2
 8019130:	b29a      	uxth	r2, r3
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801913e:	2b00      	cmp	r3, #0
 8019140:	d00e      	beq.n	8019160 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019146:	2b00      	cmp	r3, #0
 8019148:	d10a      	bne.n	8019160 <tcp_enqueue_flags+0x1b0>
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801914e:	2b00      	cmp	r3, #0
 8019150:	d106      	bne.n	8019160 <tcp_enqueue_flags+0x1b0>
 8019152:	4b06      	ldr	r3, [pc, #24]	@ (801916c <tcp_enqueue_flags+0x1bc>)
 8019154:	f240 4265 	movw	r2, #1125	@ 0x465
 8019158:	490b      	ldr	r1, [pc, #44]	@ (8019188 <tcp_enqueue_flags+0x1d8>)
 801915a:	4806      	ldr	r0, [pc, #24]	@ (8019174 <tcp_enqueue_flags+0x1c4>)
 801915c:	f005 f902 	bl	801e364 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019160:	2300      	movs	r3, #0
}
 8019162:	4618      	mov	r0, r3
 8019164:	3720      	adds	r7, #32
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}
 801916a:	bf00      	nop
 801916c:	08023050 	.word	0x08023050
 8019170:	08023474 	.word	0x08023474
 8019174:	080230a4 	.word	0x080230a4
 8019178:	080234cc 	.word	0x080234cc
 801917c:	080234ec 	.word	0x080234ec
 8019180:	08023528 	.word	0x08023528
 8019184:	08023540 	.word	0x08023540
 8019188:	0802356c 	.word	0x0802356c

0801918c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801918c:	b5b0      	push	{r4, r5, r7, lr}
 801918e:	b08a      	sub	sp, #40	@ 0x28
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d106      	bne.n	80191a8 <tcp_output+0x1c>
 801919a:	4b8a      	ldr	r3, [pc, #552]	@ (80193c4 <tcp_output+0x238>)
 801919c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80191a0:	4989      	ldr	r1, [pc, #548]	@ (80193c8 <tcp_output+0x23c>)
 80191a2:	488a      	ldr	r0, [pc, #552]	@ (80193cc <tcp_output+0x240>)
 80191a4:	f005 f8de 	bl	801e364 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	7d1b      	ldrb	r3, [r3, #20]
 80191ac:	2b01      	cmp	r3, #1
 80191ae:	d106      	bne.n	80191be <tcp_output+0x32>
 80191b0:	4b84      	ldr	r3, [pc, #528]	@ (80193c4 <tcp_output+0x238>)
 80191b2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80191b6:	4986      	ldr	r1, [pc, #536]	@ (80193d0 <tcp_output+0x244>)
 80191b8:	4884      	ldr	r0, [pc, #528]	@ (80193cc <tcp_output+0x240>)
 80191ba:	f005 f8d3 	bl	801e364 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80191be:	4b85      	ldr	r3, [pc, #532]	@ (80193d4 <tcp_output+0x248>)
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	687a      	ldr	r2, [r7, #4]
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d101      	bne.n	80191cc <tcp_output+0x40>
    return ERR_OK;
 80191c8:	2300      	movs	r3, #0
 80191ca:	e1ce      	b.n	801956a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80191d8:	4293      	cmp	r3, r2
 80191da:	bf28      	it	cs
 80191dc:	4613      	movcs	r3, r2
 80191de:	b29b      	uxth	r3, r3
 80191e0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80191e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d10b      	bne.n	8019206 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	8b5b      	ldrh	r3, [r3, #26]
 80191f2:	f003 0302 	and.w	r3, r3, #2
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f000 81aa 	beq.w	8019550 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f000 fdcb 	bl	8019d98 <tcp_send_empty_ack>
 8019202:	4603      	mov	r3, r0
 8019204:	e1b1      	b.n	801956a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019206:	6879      	ldr	r1, [r7, #4]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	3304      	adds	r3, #4
 801920c:	461a      	mov	r2, r3
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f7ff f826 	bl	8018260 <tcp_route>
 8019214:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019216:	697b      	ldr	r3, [r7, #20]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d102      	bne.n	8019222 <tcp_output+0x96>
    return ERR_RTE;
 801921c:	f06f 0303 	mvn.w	r3, #3
 8019220:	e1a3      	b.n	801956a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d003      	beq.n	8019230 <tcp_output+0xa4>
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d111      	bne.n	8019254 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019230:	697b      	ldr	r3, [r7, #20]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d002      	beq.n	801923c <tcp_output+0xb0>
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	3304      	adds	r3, #4
 801923a:	e000      	b.n	801923e <tcp_output+0xb2>
 801923c:	2300      	movs	r3, #0
 801923e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019240:	693b      	ldr	r3, [r7, #16]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d102      	bne.n	801924c <tcp_output+0xc0>
      return ERR_RTE;
 8019246:	f06f 0303 	mvn.w	r3, #3
 801924a:	e18e      	b.n	801956a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801924c:	693b      	ldr	r3, [r7, #16]
 801924e:	681a      	ldr	r2, [r3, #0]
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019256:	68db      	ldr	r3, [r3, #12]
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	4618      	mov	r0, r3
 801925c:	f7f8 fd87 	bl	8011d6e <lwip_htonl>
 8019260:	4602      	mov	r2, r0
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019266:	1ad3      	subs	r3, r2, r3
 8019268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801926a:	8912      	ldrh	r2, [r2, #8]
 801926c:	4413      	add	r3, r2
 801926e:	69ba      	ldr	r2, [r7, #24]
 8019270:	429a      	cmp	r2, r3
 8019272:	d227      	bcs.n	80192c4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801927a:	461a      	mov	r2, r3
 801927c:	69bb      	ldr	r3, [r7, #24]
 801927e:	4293      	cmp	r3, r2
 8019280:	d114      	bne.n	80192ac <tcp_output+0x120>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019286:	2b00      	cmp	r3, #0
 8019288:	d110      	bne.n	80192ac <tcp_output+0x120>
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019290:	2b00      	cmp	r3, #0
 8019292:	d10b      	bne.n	80192ac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2200      	movs	r2, #0
 8019298:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	2201      	movs	r2, #1
 80192a0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	2200      	movs	r2, #0
 80192a8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	8b5b      	ldrh	r3, [r3, #26]
 80192b0:	f003 0302 	and.w	r3, r3, #2
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	f000 814d 	beq.w	8019554 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80192ba:	6878      	ldr	r0, [r7, #4]
 80192bc:	f000 fd6c 	bl	8019d98 <tcp_send_empty_ack>
 80192c0:	4603      	mov	r3, r0
 80192c2:	e152      	b.n	801956a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2200      	movs	r2, #0
 80192c8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80192d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80192d2:	6a3b      	ldr	r3, [r7, #32]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	f000 811c 	beq.w	8019512 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80192da:	e002      	b.n	80192e2 <tcp_output+0x156>
 80192dc:	6a3b      	ldr	r3, [r7, #32]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	623b      	str	r3, [r7, #32]
 80192e2:	6a3b      	ldr	r3, [r7, #32]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d1f8      	bne.n	80192dc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80192ea:	e112      	b.n	8019512 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80192ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ee:	68db      	ldr	r3, [r3, #12]
 80192f0:	899b      	ldrh	r3, [r3, #12]
 80192f2:	b29b      	uxth	r3, r3
 80192f4:	4618      	mov	r0, r3
 80192f6:	f7f8 fd25 	bl	8011d44 <lwip_htons>
 80192fa:	4603      	mov	r3, r0
 80192fc:	b2db      	uxtb	r3, r3
 80192fe:	f003 0304 	and.w	r3, r3, #4
 8019302:	2b00      	cmp	r3, #0
 8019304:	d006      	beq.n	8019314 <tcp_output+0x188>
 8019306:	4b2f      	ldr	r3, [pc, #188]	@ (80193c4 <tcp_output+0x238>)
 8019308:	f240 5236 	movw	r2, #1334	@ 0x536
 801930c:	4932      	ldr	r1, [pc, #200]	@ (80193d8 <tcp_output+0x24c>)
 801930e:	482f      	ldr	r0, [pc, #188]	@ (80193cc <tcp_output+0x240>)
 8019310:	f005 f828 	bl	801e364 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019318:	2b00      	cmp	r3, #0
 801931a:	d01f      	beq.n	801935c <tcp_output+0x1d0>
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	8b5b      	ldrh	r3, [r3, #26]
 8019320:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8019324:	2b00      	cmp	r3, #0
 8019326:	d119      	bne.n	801935c <tcp_output+0x1d0>
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801932c:	2b00      	cmp	r3, #0
 801932e:	d00b      	beq.n	8019348 <tcp_output+0x1bc>
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d110      	bne.n	801935c <tcp_output+0x1d0>
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801933e:	891a      	ldrh	r2, [r3, #8]
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019344:	429a      	cmp	r2, r3
 8019346:	d209      	bcs.n	801935c <tcp_output+0x1d0>
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801934e:	2b00      	cmp	r3, #0
 8019350:	d004      	beq.n	801935c <tcp_output+0x1d0>
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019358:	2b08      	cmp	r3, #8
 801935a:	d901      	bls.n	8019360 <tcp_output+0x1d4>
 801935c:	2301      	movs	r3, #1
 801935e:	e000      	b.n	8019362 <tcp_output+0x1d6>
 8019360:	2300      	movs	r3, #0
 8019362:	2b00      	cmp	r3, #0
 8019364:	d106      	bne.n	8019374 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	8b5b      	ldrh	r3, [r3, #26]
 801936a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801936e:	2b00      	cmp	r3, #0
 8019370:	f000 80e4 	beq.w	801953c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	7d1b      	ldrb	r3, [r3, #20]
 8019378:	2b02      	cmp	r3, #2
 801937a:	d00d      	beq.n	8019398 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801937e:	68db      	ldr	r3, [r3, #12]
 8019380:	899b      	ldrh	r3, [r3, #12]
 8019382:	b29c      	uxth	r4, r3
 8019384:	2010      	movs	r0, #16
 8019386:	f7f8 fcdd 	bl	8011d44 <lwip_htons>
 801938a:	4603      	mov	r3, r0
 801938c:	461a      	mov	r2, r3
 801938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019390:	68db      	ldr	r3, [r3, #12]
 8019392:	4322      	orrs	r2, r4
 8019394:	b292      	uxth	r2, r2
 8019396:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019398:	697a      	ldr	r2, [r7, #20]
 801939a:	6879      	ldr	r1, [r7, #4]
 801939c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801939e:	f000 f909 	bl	80195b4 <tcp_output_segment>
 80193a2:	4603      	mov	r3, r0
 80193a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80193a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d016      	beq.n	80193dc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	8b5b      	ldrh	r3, [r3, #26]
 80193b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80193b6:	b29a      	uxth	r2, r3
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	835a      	strh	r2, [r3, #26]
      return err;
 80193bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193c0:	e0d3      	b.n	801956a <tcp_output+0x3de>
 80193c2:	bf00      	nop
 80193c4:	08023050 	.word	0x08023050
 80193c8:	08023594 	.word	0x08023594
 80193cc:	080230a4 	.word	0x080230a4
 80193d0:	080235ac 	.word	0x080235ac
 80193d4:	2000fd08 	.word	0x2000fd08
 80193d8:	080235d4 	.word	0x080235d4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80193dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193de:	681a      	ldr	r2, [r3, #0]
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	7d1b      	ldrb	r3, [r3, #20]
 80193e8:	2b02      	cmp	r3, #2
 80193ea:	d006      	beq.n	80193fa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	8b5b      	ldrh	r3, [r3, #26]
 80193f0:	f023 0303 	bic.w	r3, r3, #3
 80193f4:	b29a      	uxth	r2, r3
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80193fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193fc:	68db      	ldr	r3, [r3, #12]
 80193fe:	685b      	ldr	r3, [r3, #4]
 8019400:	4618      	mov	r0, r3
 8019402:	f7f8 fcb4 	bl	8011d6e <lwip_htonl>
 8019406:	4604      	mov	r4, r0
 8019408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801940a:	891b      	ldrh	r3, [r3, #8]
 801940c:	461d      	mov	r5, r3
 801940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019410:	68db      	ldr	r3, [r3, #12]
 8019412:	899b      	ldrh	r3, [r3, #12]
 8019414:	b29b      	uxth	r3, r3
 8019416:	4618      	mov	r0, r3
 8019418:	f7f8 fc94 	bl	8011d44 <lwip_htons>
 801941c:	4603      	mov	r3, r0
 801941e:	b2db      	uxtb	r3, r3
 8019420:	f003 0303 	and.w	r3, r3, #3
 8019424:	2b00      	cmp	r3, #0
 8019426:	d001      	beq.n	801942c <tcp_output+0x2a0>
 8019428:	2301      	movs	r3, #1
 801942a:	e000      	b.n	801942e <tcp_output+0x2a2>
 801942c:	2300      	movs	r3, #0
 801942e:	442b      	add	r3, r5
 8019430:	4423      	add	r3, r4
 8019432:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019438:	68bb      	ldr	r3, [r7, #8]
 801943a:	1ad3      	subs	r3, r2, r3
 801943c:	2b00      	cmp	r3, #0
 801943e:	da02      	bge.n	8019446 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	68ba      	ldr	r2, [r7, #8]
 8019444:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019448:	891b      	ldrh	r3, [r3, #8]
 801944a:	461c      	mov	r4, r3
 801944c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801944e:	68db      	ldr	r3, [r3, #12]
 8019450:	899b      	ldrh	r3, [r3, #12]
 8019452:	b29b      	uxth	r3, r3
 8019454:	4618      	mov	r0, r3
 8019456:	f7f8 fc75 	bl	8011d44 <lwip_htons>
 801945a:	4603      	mov	r3, r0
 801945c:	b2db      	uxtb	r3, r3
 801945e:	f003 0303 	and.w	r3, r3, #3
 8019462:	2b00      	cmp	r3, #0
 8019464:	d001      	beq.n	801946a <tcp_output+0x2de>
 8019466:	2301      	movs	r3, #1
 8019468:	e000      	b.n	801946c <tcp_output+0x2e0>
 801946a:	2300      	movs	r3, #0
 801946c:	4423      	add	r3, r4
 801946e:	2b00      	cmp	r3, #0
 8019470:	d049      	beq.n	8019506 <tcp_output+0x37a>
      seg->next = NULL;
 8019472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019474:	2200      	movs	r2, #0
 8019476:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801947c:	2b00      	cmp	r3, #0
 801947e:	d105      	bne.n	801948c <tcp_output+0x300>
        pcb->unacked = seg;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019484:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8019486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019488:	623b      	str	r3, [r7, #32]
 801948a:	e03f      	b.n	801950c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948e:	68db      	ldr	r3, [r3, #12]
 8019490:	685b      	ldr	r3, [r3, #4]
 8019492:	4618      	mov	r0, r3
 8019494:	f7f8 fc6b 	bl	8011d6e <lwip_htonl>
 8019498:	4604      	mov	r4, r0
 801949a:	6a3b      	ldr	r3, [r7, #32]
 801949c:	68db      	ldr	r3, [r3, #12]
 801949e:	685b      	ldr	r3, [r3, #4]
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7f8 fc64 	bl	8011d6e <lwip_htonl>
 80194a6:	4603      	mov	r3, r0
 80194a8:	1ae3      	subs	r3, r4, r3
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	da24      	bge.n	80194f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	3370      	adds	r3, #112	@ 0x70
 80194b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80194b4:	e002      	b.n	80194bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80194b6:	69fb      	ldr	r3, [r7, #28]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80194bc:	69fb      	ldr	r3, [r7, #28]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d011      	beq.n	80194e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80194c4:	69fb      	ldr	r3, [r7, #28]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	68db      	ldr	r3, [r3, #12]
 80194ca:	685b      	ldr	r3, [r3, #4]
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7f8 fc4e 	bl	8011d6e <lwip_htonl>
 80194d2:	4604      	mov	r4, r0
 80194d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194d6:	68db      	ldr	r3, [r3, #12]
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	4618      	mov	r0, r3
 80194dc:	f7f8 fc47 	bl	8011d6e <lwip_htonl>
 80194e0:	4603      	mov	r3, r0
 80194e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	dbe6      	blt.n	80194b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80194e8:	69fb      	ldr	r3, [r7, #28]
 80194ea:	681a      	ldr	r2, [r3, #0]
 80194ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80194f0:	69fb      	ldr	r3, [r7, #28]
 80194f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194f4:	601a      	str	r2, [r3, #0]
 80194f6:	e009      	b.n	801950c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80194f8:	6a3b      	ldr	r3, [r7, #32]
 80194fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80194fe:	6a3b      	ldr	r3, [r7, #32]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	623b      	str	r3, [r7, #32]
 8019504:	e002      	b.n	801950c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019506:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019508:	f7fb ff1f 	bl	801534a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019510:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8019512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019514:	2b00      	cmp	r3, #0
 8019516:	d012      	beq.n	801953e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801951a:	68db      	ldr	r3, [r3, #12]
 801951c:	685b      	ldr	r3, [r3, #4]
 801951e:	4618      	mov	r0, r3
 8019520:	f7f8 fc25 	bl	8011d6e <lwip_htonl>
 8019524:	4602      	mov	r2, r0
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801952a:	1ad3      	subs	r3, r2, r3
 801952c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801952e:	8912      	ldrh	r2, [r2, #8]
 8019530:	4413      	add	r3, r2
  while (seg != NULL &&
 8019532:	69ba      	ldr	r2, [r7, #24]
 8019534:	429a      	cmp	r2, r3
 8019536:	f4bf aed9 	bcs.w	80192ec <tcp_output+0x160>
 801953a:	e000      	b.n	801953e <tcp_output+0x3b2>
      break;
 801953c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019542:	2b00      	cmp	r3, #0
 8019544:	d108      	bne.n	8019558 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2200      	movs	r2, #0
 801954a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801954e:	e004      	b.n	801955a <tcp_output+0x3ce>
    goto output_done;
 8019550:	bf00      	nop
 8019552:	e002      	b.n	801955a <tcp_output+0x3ce>
    goto output_done;
 8019554:	bf00      	nop
 8019556:	e000      	b.n	801955a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019558:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	8b5b      	ldrh	r3, [r3, #26]
 801955e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019562:	b29a      	uxth	r2, r3
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019568:	2300      	movs	r3, #0
}
 801956a:	4618      	mov	r0, r3
 801956c:	3728      	adds	r7, #40	@ 0x28
 801956e:	46bd      	mov	sp, r7
 8019570:	bdb0      	pop	{r4, r5, r7, pc}
 8019572:	bf00      	nop

08019574 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b082      	sub	sp, #8
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d106      	bne.n	8019590 <tcp_output_segment_busy+0x1c>
 8019582:	4b09      	ldr	r3, [pc, #36]	@ (80195a8 <tcp_output_segment_busy+0x34>)
 8019584:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019588:	4908      	ldr	r1, [pc, #32]	@ (80195ac <tcp_output_segment_busy+0x38>)
 801958a:	4809      	ldr	r0, [pc, #36]	@ (80195b0 <tcp_output_segment_busy+0x3c>)
 801958c:	f004 feea 	bl	801e364 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	7b9b      	ldrb	r3, [r3, #14]
 8019596:	2b01      	cmp	r3, #1
 8019598:	d001      	beq.n	801959e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801959a:	2301      	movs	r3, #1
 801959c:	e000      	b.n	80195a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801959e:	2300      	movs	r3, #0
}
 80195a0:	4618      	mov	r0, r3
 80195a2:	3708      	adds	r7, #8
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}
 80195a8:	08023050 	.word	0x08023050
 80195ac:	080235ec 	.word	0x080235ec
 80195b0:	080230a4 	.word	0x080230a4

080195b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80195b4:	b5b0      	push	{r4, r5, r7, lr}
 80195b6:	b08c      	sub	sp, #48	@ 0x30
 80195b8:	af04      	add	r7, sp, #16
 80195ba:	60f8      	str	r0, [r7, #12]
 80195bc:	60b9      	str	r1, [r7, #8]
 80195be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d106      	bne.n	80195d4 <tcp_output_segment+0x20>
 80195c6:	4b64      	ldr	r3, [pc, #400]	@ (8019758 <tcp_output_segment+0x1a4>)
 80195c8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80195cc:	4963      	ldr	r1, [pc, #396]	@ (801975c <tcp_output_segment+0x1a8>)
 80195ce:	4864      	ldr	r0, [pc, #400]	@ (8019760 <tcp_output_segment+0x1ac>)
 80195d0:	f004 fec8 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80195d4:	68bb      	ldr	r3, [r7, #8]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d106      	bne.n	80195e8 <tcp_output_segment+0x34>
 80195da:	4b5f      	ldr	r3, [pc, #380]	@ (8019758 <tcp_output_segment+0x1a4>)
 80195dc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80195e0:	4960      	ldr	r1, [pc, #384]	@ (8019764 <tcp_output_segment+0x1b0>)
 80195e2:	485f      	ldr	r0, [pc, #380]	@ (8019760 <tcp_output_segment+0x1ac>)
 80195e4:	f004 febe 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d106      	bne.n	80195fc <tcp_output_segment+0x48>
 80195ee:	4b5a      	ldr	r3, [pc, #360]	@ (8019758 <tcp_output_segment+0x1a4>)
 80195f0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80195f4:	495c      	ldr	r1, [pc, #368]	@ (8019768 <tcp_output_segment+0x1b4>)
 80195f6:	485a      	ldr	r0, [pc, #360]	@ (8019760 <tcp_output_segment+0x1ac>)
 80195f8:	f004 feb4 	bl	801e364 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80195fc:	68f8      	ldr	r0, [r7, #12]
 80195fe:	f7ff ffb9 	bl	8019574 <tcp_output_segment_busy>
 8019602:	4603      	mov	r3, r0
 8019604:	2b00      	cmp	r3, #0
 8019606:	d001      	beq.n	801960c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019608:	2300      	movs	r3, #0
 801960a:	e0a1      	b.n	8019750 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801960c:	68bb      	ldr	r3, [r7, #8]
 801960e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	68dc      	ldr	r4, [r3, #12]
 8019614:	4610      	mov	r0, r2
 8019616:	f7f8 fbaa 	bl	8011d6e <lwip_htonl>
 801961a:	4603      	mov	r3, r0
 801961c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	68dc      	ldr	r4, [r3, #12]
 8019626:	4610      	mov	r0, r2
 8019628:	f7f8 fb8c 	bl	8011d44 <lwip_htons>
 801962c:	4603      	mov	r3, r0
 801962e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019634:	68ba      	ldr	r2, [r7, #8]
 8019636:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019638:	441a      	add	r2, r3
 801963a:	68bb      	ldr	r3, [r7, #8]
 801963c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	68db      	ldr	r3, [r3, #12]
 8019642:	3314      	adds	r3, #20
 8019644:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	7a9b      	ldrb	r3, [r3, #10]
 801964a:	f003 0301 	and.w	r3, r3, #1
 801964e:	2b00      	cmp	r3, #0
 8019650:	d015      	beq.n	801967e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	3304      	adds	r3, #4
 8019656:	461a      	mov	r2, r3
 8019658:	6879      	ldr	r1, [r7, #4]
 801965a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801965e:	f7fc fa39 	bl	8015ad4 <tcp_eff_send_mss_netif>
 8019662:	4603      	mov	r3, r0
 8019664:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019666:	8b7b      	ldrh	r3, [r7, #26]
 8019668:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801966c:	4618      	mov	r0, r3
 801966e:	f7f8 fb7e 	bl	8011d6e <lwip_htonl>
 8019672:	4602      	mov	r2, r0
 8019674:	69fb      	ldr	r3, [r7, #28]
 8019676:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019678:	69fb      	ldr	r3, [r7, #28]
 801967a:	3304      	adds	r3, #4
 801967c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801967e:	68bb      	ldr	r3, [r7, #8]
 8019680:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019684:	2b00      	cmp	r3, #0
 8019686:	da02      	bge.n	801968e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	2200      	movs	r2, #0
 801968c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801968e:	68bb      	ldr	r3, [r7, #8]
 8019690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019692:	2b00      	cmp	r3, #0
 8019694:	d10c      	bne.n	80196b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019696:	4b35      	ldr	r3, [pc, #212]	@ (801976c <tcp_output_segment+0x1b8>)
 8019698:	681a      	ldr	r2, [r3, #0]
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	68db      	ldr	r3, [r3, #12]
 80196a2:	685b      	ldr	r3, [r3, #4]
 80196a4:	4618      	mov	r0, r3
 80196a6:	f7f8 fb62 	bl	8011d6e <lwip_htonl>
 80196aa:	4602      	mov	r2, r0
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	68da      	ldr	r2, [r3, #12]
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	685b      	ldr	r3, [r3, #4]
 80196ba:	1ad3      	subs	r3, r2, r3
 80196bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	8959      	ldrh	r1, [r3, #10]
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	685b      	ldr	r3, [r3, #4]
 80196c8:	8b3a      	ldrh	r2, [r7, #24]
 80196ca:	1a8a      	subs	r2, r1, r2
 80196cc:	b292      	uxth	r2, r2
 80196ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	685b      	ldr	r3, [r3, #4]
 80196d4:	8919      	ldrh	r1, [r3, #8]
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	685b      	ldr	r3, [r3, #4]
 80196da:	8b3a      	ldrh	r2, [r7, #24]
 80196dc:	1a8a      	subs	r2, r1, r2
 80196de:	b292      	uxth	r2, r2
 80196e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	685b      	ldr	r3, [r3, #4]
 80196e6:	68fa      	ldr	r2, [r7, #12]
 80196e8:	68d2      	ldr	r2, [r2, #12]
 80196ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	68db      	ldr	r3, [r3, #12]
 80196f0:	2200      	movs	r2, #0
 80196f2:	741a      	strb	r2, [r3, #16]
 80196f4:	2200      	movs	r2, #0
 80196f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	68da      	ldr	r2, [r3, #12]
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	7a9b      	ldrb	r3, [r3, #10]
 8019700:	f003 0301 	and.w	r3, r3, #1
 8019704:	2b00      	cmp	r3, #0
 8019706:	d001      	beq.n	801970c <tcp_output_segment+0x158>
 8019708:	2318      	movs	r3, #24
 801970a:	e000      	b.n	801970e <tcp_output_segment+0x15a>
 801970c:	2314      	movs	r3, #20
 801970e:	4413      	add	r3, r2
 8019710:	69fa      	ldr	r2, [r7, #28]
 8019712:	429a      	cmp	r2, r3
 8019714:	d006      	beq.n	8019724 <tcp_output_segment+0x170>
 8019716:	4b10      	ldr	r3, [pc, #64]	@ (8019758 <tcp_output_segment+0x1a4>)
 8019718:	f240 621c 	movw	r2, #1564	@ 0x61c
 801971c:	4914      	ldr	r1, [pc, #80]	@ (8019770 <tcp_output_segment+0x1bc>)
 801971e:	4810      	ldr	r0, [pc, #64]	@ (8019760 <tcp_output_segment+0x1ac>)
 8019720:	f004 fe20 	bl	801e364 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	6858      	ldr	r0, [r3, #4]
 8019728:	68b9      	ldr	r1, [r7, #8]
 801972a:	68bb      	ldr	r3, [r7, #8]
 801972c:	1d1c      	adds	r4, r3, #4
 801972e:	68bb      	ldr	r3, [r7, #8]
 8019730:	7add      	ldrb	r5, [r3, #11]
 8019732:	68bb      	ldr	r3, [r7, #8]
 8019734:	7a9b      	ldrb	r3, [r3, #10]
 8019736:	687a      	ldr	r2, [r7, #4]
 8019738:	9202      	str	r2, [sp, #8]
 801973a:	2206      	movs	r2, #6
 801973c:	9201      	str	r2, [sp, #4]
 801973e:	9300      	str	r3, [sp, #0]
 8019740:	462b      	mov	r3, r5
 8019742:	4622      	mov	r2, r4
 8019744:	f002 fd94 	bl	801c270 <ip4_output_if>
 8019748:	4603      	mov	r3, r0
 801974a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801974c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019750:	4618      	mov	r0, r3
 8019752:	3720      	adds	r7, #32
 8019754:	46bd      	mov	sp, r7
 8019756:	bdb0      	pop	{r4, r5, r7, pc}
 8019758:	08023050 	.word	0x08023050
 801975c:	08023614 	.word	0x08023614
 8019760:	080230a4 	.word	0x080230a4
 8019764:	08023634 	.word	0x08023634
 8019768:	08023654 	.word	0x08023654
 801976c:	2000fcbc 	.word	0x2000fcbc
 8019770:	08023678 	.word	0x08023678

08019774 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019774:	b5b0      	push	{r4, r5, r7, lr}
 8019776:	b084      	sub	sp, #16
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d106      	bne.n	8019790 <tcp_rexmit_rto_prepare+0x1c>
 8019782:	4b31      	ldr	r3, [pc, #196]	@ (8019848 <tcp_rexmit_rto_prepare+0xd4>)
 8019784:	f240 6263 	movw	r2, #1635	@ 0x663
 8019788:	4930      	ldr	r1, [pc, #192]	@ (801984c <tcp_rexmit_rto_prepare+0xd8>)
 801978a:	4831      	ldr	r0, [pc, #196]	@ (8019850 <tcp_rexmit_rto_prepare+0xdc>)
 801978c:	f004 fdea 	bl	801e364 <iprintf>

  if (pcb->unacked == NULL) {
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019794:	2b00      	cmp	r3, #0
 8019796:	d102      	bne.n	801979e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019798:	f06f 0305 	mvn.w	r3, #5
 801979c:	e050      	b.n	8019840 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80197a2:	60fb      	str	r3, [r7, #12]
 80197a4:	e00b      	b.n	80197be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80197a6:	68f8      	ldr	r0, [r7, #12]
 80197a8:	f7ff fee4 	bl	8019574 <tcp_output_segment_busy>
 80197ac:	4603      	mov	r3, r0
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d002      	beq.n	80197b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80197b2:	f06f 0305 	mvn.w	r3, #5
 80197b6:	e043      	b.n	8019840 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	60fb      	str	r3, [r7, #12]
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d1ef      	bne.n	80197a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80197c6:	68f8      	ldr	r0, [r7, #12]
 80197c8:	f7ff fed4 	bl	8019574 <tcp_output_segment_busy>
 80197cc:	4603      	mov	r3, r0
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d002      	beq.n	80197d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80197d2:	f06f 0305 	mvn.w	r3, #5
 80197d6:	e033      	b.n	8019840 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	2200      	movs	r2, #0
 80197ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	8b5b      	ldrh	r3, [r3, #26]
 80197f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80197f6:	b29a      	uxth	r2, r3
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	68db      	ldr	r3, [r3, #12]
 8019800:	685b      	ldr	r3, [r3, #4]
 8019802:	4618      	mov	r0, r3
 8019804:	f7f8 fab3 	bl	8011d6e <lwip_htonl>
 8019808:	4604      	mov	r4, r0
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	891b      	ldrh	r3, [r3, #8]
 801980e:	461d      	mov	r5, r3
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	68db      	ldr	r3, [r3, #12]
 8019814:	899b      	ldrh	r3, [r3, #12]
 8019816:	b29b      	uxth	r3, r3
 8019818:	4618      	mov	r0, r3
 801981a:	f7f8 fa93 	bl	8011d44 <lwip_htons>
 801981e:	4603      	mov	r3, r0
 8019820:	b2db      	uxtb	r3, r3
 8019822:	f003 0303 	and.w	r3, r3, #3
 8019826:	2b00      	cmp	r3, #0
 8019828:	d001      	beq.n	801982e <tcp_rexmit_rto_prepare+0xba>
 801982a:	2301      	movs	r3, #1
 801982c:	e000      	b.n	8019830 <tcp_rexmit_rto_prepare+0xbc>
 801982e:	2300      	movs	r3, #0
 8019830:	442b      	add	r3, r5
 8019832:	18e2      	adds	r2, r4, r3
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	2200      	movs	r2, #0
 801983c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801983e:	2300      	movs	r3, #0
}
 8019840:	4618      	mov	r0, r3
 8019842:	3710      	adds	r7, #16
 8019844:	46bd      	mov	sp, r7
 8019846:	bdb0      	pop	{r4, r5, r7, pc}
 8019848:	08023050 	.word	0x08023050
 801984c:	0802368c 	.word	0x0802368c
 8019850:	080230a4 	.word	0x080230a4

08019854 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b082      	sub	sp, #8
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d106      	bne.n	8019870 <tcp_rexmit_rto_commit+0x1c>
 8019862:	4b0d      	ldr	r3, [pc, #52]	@ (8019898 <tcp_rexmit_rto_commit+0x44>)
 8019864:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019868:	490c      	ldr	r1, [pc, #48]	@ (801989c <tcp_rexmit_rto_commit+0x48>)
 801986a:	480d      	ldr	r0, [pc, #52]	@ (80198a0 <tcp_rexmit_rto_commit+0x4c>)
 801986c:	f004 fd7a 	bl	801e364 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019876:	2bff      	cmp	r3, #255	@ 0xff
 8019878:	d007      	beq.n	801988a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019880:	3301      	adds	r3, #1
 8019882:	b2da      	uxtb	r2, r3
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801988a:	6878      	ldr	r0, [r7, #4]
 801988c:	f7ff fc7e 	bl	801918c <tcp_output>
}
 8019890:	bf00      	nop
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}
 8019898:	08023050 	.word	0x08023050
 801989c:	080236b0 	.word	0x080236b0
 80198a0:	080230a4 	.word	0x080230a4

080198a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b082      	sub	sp, #8
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d106      	bne.n	80198c0 <tcp_rexmit_rto+0x1c>
 80198b2:	4b0a      	ldr	r3, [pc, #40]	@ (80198dc <tcp_rexmit_rto+0x38>)
 80198b4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80198b8:	4909      	ldr	r1, [pc, #36]	@ (80198e0 <tcp_rexmit_rto+0x3c>)
 80198ba:	480a      	ldr	r0, [pc, #40]	@ (80198e4 <tcp_rexmit_rto+0x40>)
 80198bc:	f004 fd52 	bl	801e364 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f7ff ff57 	bl	8019774 <tcp_rexmit_rto_prepare>
 80198c6:	4603      	mov	r3, r0
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d102      	bne.n	80198d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f7ff ffc1 	bl	8019854 <tcp_rexmit_rto_commit>
  }
}
 80198d2:	bf00      	nop
 80198d4:	3708      	adds	r7, #8
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}
 80198da:	bf00      	nop
 80198dc:	08023050 	.word	0x08023050
 80198e0:	080236d4 	.word	0x080236d4
 80198e4:	080230a4 	.word	0x080230a4

080198e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80198e8:	b590      	push	{r4, r7, lr}
 80198ea:	b085      	sub	sp, #20
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d106      	bne.n	8019904 <tcp_rexmit+0x1c>
 80198f6:	4b2f      	ldr	r3, [pc, #188]	@ (80199b4 <tcp_rexmit+0xcc>)
 80198f8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80198fc:	492e      	ldr	r1, [pc, #184]	@ (80199b8 <tcp_rexmit+0xd0>)
 80198fe:	482f      	ldr	r0, [pc, #188]	@ (80199bc <tcp_rexmit+0xd4>)
 8019900:	f004 fd30 	bl	801e364 <iprintf>

  if (pcb->unacked == NULL) {
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019908:	2b00      	cmp	r3, #0
 801990a:	d102      	bne.n	8019912 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801990c:	f06f 0305 	mvn.w	r3, #5
 8019910:	e04c      	b.n	80199ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019916:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019918:	68b8      	ldr	r0, [r7, #8]
 801991a:	f7ff fe2b 	bl	8019574 <tcp_output_segment_busy>
 801991e:	4603      	mov	r3, r0
 8019920:	2b00      	cmp	r3, #0
 8019922:	d002      	beq.n	801992a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019924:	f06f 0305 	mvn.w	r3, #5
 8019928:	e040      	b.n	80199ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	681a      	ldr	r2, [r3, #0]
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	336c      	adds	r3, #108	@ 0x6c
 8019936:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019938:	e002      	b.n	8019940 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d011      	beq.n	801996c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	68db      	ldr	r3, [r3, #12]
 801994e:	685b      	ldr	r3, [r3, #4]
 8019950:	4618      	mov	r0, r3
 8019952:	f7f8 fa0c 	bl	8011d6e <lwip_htonl>
 8019956:	4604      	mov	r4, r0
 8019958:	68bb      	ldr	r3, [r7, #8]
 801995a:	68db      	ldr	r3, [r3, #12]
 801995c:	685b      	ldr	r3, [r3, #4]
 801995e:	4618      	mov	r0, r3
 8019960:	f7f8 fa05 	bl	8011d6e <lwip_htonl>
 8019964:	4603      	mov	r3, r0
 8019966:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019968:	2b00      	cmp	r3, #0
 801996a:	dbe6      	blt.n	801993a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	681a      	ldr	r2, [r3, #0]
 8019970:	68bb      	ldr	r3, [r7, #8]
 8019972:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	68ba      	ldr	r2, [r7, #8]
 8019978:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801997a:	68bb      	ldr	r3, [r7, #8]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d103      	bne.n	801998a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2200      	movs	r2, #0
 8019986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019990:	2bff      	cmp	r3, #255	@ 0xff
 8019992:	d007      	beq.n	80199a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801999a:	3301      	adds	r3, #1
 801999c:	b2da      	uxtb	r2, r3
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	2200      	movs	r2, #0
 80199a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80199aa:	2300      	movs	r3, #0
}
 80199ac:	4618      	mov	r0, r3
 80199ae:	3714      	adds	r7, #20
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd90      	pop	{r4, r7, pc}
 80199b4:	08023050 	.word	0x08023050
 80199b8:	080236f0 	.word	0x080236f0
 80199bc:	080230a4 	.word	0x080230a4

080199c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b082      	sub	sp, #8
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d106      	bne.n	80199dc <tcp_rexmit_fast+0x1c>
 80199ce:	4b2a      	ldr	r3, [pc, #168]	@ (8019a78 <tcp_rexmit_fast+0xb8>)
 80199d0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80199d4:	4929      	ldr	r1, [pc, #164]	@ (8019a7c <tcp_rexmit_fast+0xbc>)
 80199d6:	482a      	ldr	r0, [pc, #168]	@ (8019a80 <tcp_rexmit_fast+0xc0>)
 80199d8:	f004 fcc4 	bl	801e364 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d044      	beq.n	8019a6e <tcp_rexmit_fast+0xae>
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	8b5b      	ldrh	r3, [r3, #26]
 80199e8:	f003 0304 	and.w	r3, r3, #4
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d13e      	bne.n	8019a6e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f7ff ff79 	bl	80198e8 <tcp_rexmit>
 80199f6:	4603      	mov	r3, r0
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d138      	bne.n	8019a6e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019a08:	4293      	cmp	r3, r2
 8019a0a:	bf28      	it	cs
 8019a0c:	4613      	movcs	r3, r2
 8019a0e:	b29b      	uxth	r3, r3
 8019a10:	0fda      	lsrs	r2, r3, #31
 8019a12:	4413      	add	r3, r2
 8019a14:	105b      	asrs	r3, r3, #1
 8019a16:	b29a      	uxth	r2, r3
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019a24:	461a      	mov	r2, r3
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a2a:	005b      	lsls	r3, r3, #1
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	d206      	bcs.n	8019a3e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a34:	005b      	lsls	r3, r3, #1
 8019a36:	b29a      	uxth	r2, r3
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a48:	4619      	mov	r1, r3
 8019a4a:	0049      	lsls	r1, r1, #1
 8019a4c:	440b      	add	r3, r1
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	4413      	add	r3, r2
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	8b5b      	ldrh	r3, [r3, #26]
 8019a5e:	f043 0304 	orr.w	r3, r3, #4
 8019a62:	b29a      	uxth	r2, r3
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019a6e:	bf00      	nop
 8019a70:	3708      	adds	r7, #8
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
 8019a76:	bf00      	nop
 8019a78:	08023050 	.word	0x08023050
 8019a7c:	08023708 	.word	0x08023708
 8019a80:	080230a4 	.word	0x080230a4

08019a84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b086      	sub	sp, #24
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	60f8      	str	r0, [r7, #12]
 8019a8c:	607b      	str	r3, [r7, #4]
 8019a8e:	460b      	mov	r3, r1
 8019a90:	817b      	strh	r3, [r7, #10]
 8019a92:	4613      	mov	r3, r2
 8019a94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019a96:	897a      	ldrh	r2, [r7, #10]
 8019a98:	893b      	ldrh	r3, [r7, #8]
 8019a9a:	4413      	add	r3, r2
 8019a9c:	b29b      	uxth	r3, r3
 8019a9e:	3314      	adds	r3, #20
 8019aa0:	b29b      	uxth	r3, r3
 8019aa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019aa6:	4619      	mov	r1, r3
 8019aa8:	2022      	movs	r0, #34	@ 0x22
 8019aaa:	f7f9 fd23 	bl	80134f4 <pbuf_alloc>
 8019aae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d04d      	beq.n	8019b52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019ab6:	897b      	ldrh	r3, [r7, #10]
 8019ab8:	3313      	adds	r3, #19
 8019aba:	697a      	ldr	r2, [r7, #20]
 8019abc:	8952      	ldrh	r2, [r2, #10]
 8019abe:	4293      	cmp	r3, r2
 8019ac0:	db06      	blt.n	8019ad0 <tcp_output_alloc_header_common+0x4c>
 8019ac2:	4b26      	ldr	r3, [pc, #152]	@ (8019b5c <tcp_output_alloc_header_common+0xd8>)
 8019ac4:	f240 7223 	movw	r2, #1827	@ 0x723
 8019ac8:	4925      	ldr	r1, [pc, #148]	@ (8019b60 <tcp_output_alloc_header_common+0xdc>)
 8019aca:	4826      	ldr	r0, [pc, #152]	@ (8019b64 <tcp_output_alloc_header_common+0xe0>)
 8019acc:	f004 fc4a 	bl	801e364 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019ad0:	697b      	ldr	r3, [r7, #20]
 8019ad2:	685b      	ldr	r3, [r3, #4]
 8019ad4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019ad6:	8c3b      	ldrh	r3, [r7, #32]
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f7f8 f933 	bl	8011d44 <lwip_htons>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	461a      	mov	r2, r3
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f7f8 f92b 	bl	8011d44 <lwip_htons>
 8019aee:	4603      	mov	r3, r0
 8019af0:	461a      	mov	r2, r3
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019af6:	693b      	ldr	r3, [r7, #16]
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019afc:	68f8      	ldr	r0, [r7, #12]
 8019afe:	f7f8 f936 	bl	8011d6e <lwip_htonl>
 8019b02:	4602      	mov	r2, r0
 8019b04:	693b      	ldr	r3, [r7, #16]
 8019b06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019b08:	897b      	ldrh	r3, [r7, #10]
 8019b0a:	089b      	lsrs	r3, r3, #2
 8019b0c:	b29b      	uxth	r3, r3
 8019b0e:	3305      	adds	r3, #5
 8019b10:	b29b      	uxth	r3, r3
 8019b12:	031b      	lsls	r3, r3, #12
 8019b14:	b29a      	uxth	r2, r3
 8019b16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019b1a:	b29b      	uxth	r3, r3
 8019b1c:	4313      	orrs	r3, r2
 8019b1e:	b29b      	uxth	r3, r3
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7f8 f90f 	bl	8011d44 <lwip_htons>
 8019b26:	4603      	mov	r3, r0
 8019b28:	461a      	mov	r2, r3
 8019b2a:	693b      	ldr	r3, [r7, #16]
 8019b2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019b2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019b30:	4618      	mov	r0, r3
 8019b32:	f7f8 f907 	bl	8011d44 <lwip_htons>
 8019b36:	4603      	mov	r3, r0
 8019b38:	461a      	mov	r2, r3
 8019b3a:	693b      	ldr	r3, [r7, #16]
 8019b3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019b3e:	693b      	ldr	r3, [r7, #16]
 8019b40:	2200      	movs	r2, #0
 8019b42:	741a      	strb	r2, [r3, #16]
 8019b44:	2200      	movs	r2, #0
 8019b46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019b48:	693b      	ldr	r3, [r7, #16]
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	749a      	strb	r2, [r3, #18]
 8019b4e:	2200      	movs	r2, #0
 8019b50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8019b52:	697b      	ldr	r3, [r7, #20]
}
 8019b54:	4618      	mov	r0, r3
 8019b56:	3718      	adds	r7, #24
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	bd80      	pop	{r7, pc}
 8019b5c:	08023050 	.word	0x08023050
 8019b60:	08023728 	.word	0x08023728
 8019b64:	080230a4 	.word	0x080230a4

08019b68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019b68:	b5b0      	push	{r4, r5, r7, lr}
 8019b6a:	b08a      	sub	sp, #40	@ 0x28
 8019b6c:	af04      	add	r7, sp, #16
 8019b6e:	60f8      	str	r0, [r7, #12]
 8019b70:	607b      	str	r3, [r7, #4]
 8019b72:	460b      	mov	r3, r1
 8019b74:	817b      	strh	r3, [r7, #10]
 8019b76:	4613      	mov	r3, r2
 8019b78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d106      	bne.n	8019b8e <tcp_output_alloc_header+0x26>
 8019b80:	4b15      	ldr	r3, [pc, #84]	@ (8019bd8 <tcp_output_alloc_header+0x70>)
 8019b82:	f240 7242 	movw	r2, #1858	@ 0x742
 8019b86:	4915      	ldr	r1, [pc, #84]	@ (8019bdc <tcp_output_alloc_header+0x74>)
 8019b88:	4815      	ldr	r0, [pc, #84]	@ (8019be0 <tcp_output_alloc_header+0x78>)
 8019b8a:	f004 fbeb 	bl	801e364 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	8adb      	ldrh	r3, [r3, #22]
 8019b96:	68fa      	ldr	r2, [r7, #12]
 8019b98:	8b12      	ldrh	r2, [r2, #24]
 8019b9a:	68f9      	ldr	r1, [r7, #12]
 8019b9c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019b9e:	893d      	ldrh	r5, [r7, #8]
 8019ba0:	897c      	ldrh	r4, [r7, #10]
 8019ba2:	9103      	str	r1, [sp, #12]
 8019ba4:	2110      	movs	r1, #16
 8019ba6:	9102      	str	r1, [sp, #8]
 8019ba8:	9201      	str	r2, [sp, #4]
 8019baa:	9300      	str	r3, [sp, #0]
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	462a      	mov	r2, r5
 8019bb0:	4621      	mov	r1, r4
 8019bb2:	f7ff ff67 	bl	8019a84 <tcp_output_alloc_header_common>
 8019bb6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019bb8:	697b      	ldr	r3, [r7, #20]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d006      	beq.n	8019bcc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bc2:	68fa      	ldr	r2, [r7, #12]
 8019bc4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019bc6:	441a      	add	r2, r3
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019bcc:	697b      	ldr	r3, [r7, #20]
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3718      	adds	r7, #24
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8019bd6:	bf00      	nop
 8019bd8:	08023050 	.word	0x08023050
 8019bdc:	08023758 	.word	0x08023758
 8019be0:	080230a4 	.word	0x080230a4

08019be4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b088      	sub	sp, #32
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	60f8      	str	r0, [r7, #12]
 8019bec:	60b9      	str	r1, [r7, #8]
 8019bee:	4611      	mov	r1, r2
 8019bf0:	461a      	mov	r2, r3
 8019bf2:	460b      	mov	r3, r1
 8019bf4:	71fb      	strb	r3, [r7, #7]
 8019bf6:	4613      	mov	r3, r2
 8019bf8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019bfe:	68bb      	ldr	r3, [r7, #8]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d106      	bne.n	8019c12 <tcp_output_fill_options+0x2e>
 8019c04:	4b12      	ldr	r3, [pc, #72]	@ (8019c50 <tcp_output_fill_options+0x6c>)
 8019c06:	f240 7256 	movw	r2, #1878	@ 0x756
 8019c0a:	4912      	ldr	r1, [pc, #72]	@ (8019c54 <tcp_output_fill_options+0x70>)
 8019c0c:	4812      	ldr	r0, [pc, #72]	@ (8019c58 <tcp_output_fill_options+0x74>)
 8019c0e:	f004 fba9 	bl	801e364 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	685b      	ldr	r3, [r3, #4]
 8019c16:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019c18:	69bb      	ldr	r3, [r7, #24]
 8019c1a:	3314      	adds	r3, #20
 8019c1c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019c1e:	8bfb      	ldrh	r3, [r7, #30]
 8019c20:	009b      	lsls	r3, r3, #2
 8019c22:	461a      	mov	r2, r3
 8019c24:	79fb      	ldrb	r3, [r7, #7]
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	f003 0304 	and.w	r3, r3, #4
 8019c2c:	4413      	add	r3, r2
 8019c2e:	3314      	adds	r3, #20
 8019c30:	69ba      	ldr	r2, [r7, #24]
 8019c32:	4413      	add	r3, r2
 8019c34:	697a      	ldr	r2, [r7, #20]
 8019c36:	429a      	cmp	r2, r3
 8019c38:	d006      	beq.n	8019c48 <tcp_output_fill_options+0x64>
 8019c3a:	4b05      	ldr	r3, [pc, #20]	@ (8019c50 <tcp_output_fill_options+0x6c>)
 8019c3c:	f240 7275 	movw	r2, #1909	@ 0x775
 8019c40:	4906      	ldr	r1, [pc, #24]	@ (8019c5c <tcp_output_fill_options+0x78>)
 8019c42:	4805      	ldr	r0, [pc, #20]	@ (8019c58 <tcp_output_fill_options+0x74>)
 8019c44:	f004 fb8e 	bl	801e364 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019c48:	bf00      	nop
 8019c4a:	3720      	adds	r7, #32
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bd80      	pop	{r7, pc}
 8019c50:	08023050 	.word	0x08023050
 8019c54:	08023780 	.word	0x08023780
 8019c58:	080230a4 	.word	0x080230a4
 8019c5c:	08023678 	.word	0x08023678

08019c60 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b08a      	sub	sp, #40	@ 0x28
 8019c64:	af04      	add	r7, sp, #16
 8019c66:	60f8      	str	r0, [r7, #12]
 8019c68:	60b9      	str	r1, [r7, #8]
 8019c6a:	607a      	str	r2, [r7, #4]
 8019c6c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d106      	bne.n	8019c82 <tcp_output_control_segment+0x22>
 8019c74:	4b1c      	ldr	r3, [pc, #112]	@ (8019ce8 <tcp_output_control_segment+0x88>)
 8019c76:	f240 7287 	movw	r2, #1927	@ 0x787
 8019c7a:	491c      	ldr	r1, [pc, #112]	@ (8019cec <tcp_output_control_segment+0x8c>)
 8019c7c:	481c      	ldr	r0, [pc, #112]	@ (8019cf0 <tcp_output_control_segment+0x90>)
 8019c7e:	f004 fb71 	bl	801e364 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019c82:	683a      	ldr	r2, [r7, #0]
 8019c84:	6879      	ldr	r1, [r7, #4]
 8019c86:	68f8      	ldr	r0, [r7, #12]
 8019c88:	f7fe faea 	bl	8018260 <tcp_route>
 8019c8c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019c8e:	693b      	ldr	r3, [r7, #16]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d102      	bne.n	8019c9a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019c94:	23fc      	movs	r3, #252	@ 0xfc
 8019c96:	75fb      	strb	r3, [r7, #23]
 8019c98:	e01c      	b.n	8019cd4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d006      	beq.n	8019cae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	7adb      	ldrb	r3, [r3, #11]
 8019ca4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	7a9b      	ldrb	r3, [r3, #10]
 8019caa:	757b      	strb	r3, [r7, #21]
 8019cac:	e003      	b.n	8019cb6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019cae:	23ff      	movs	r3, #255	@ 0xff
 8019cb0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019cb6:	7dba      	ldrb	r2, [r7, #22]
 8019cb8:	693b      	ldr	r3, [r7, #16]
 8019cba:	9302      	str	r3, [sp, #8]
 8019cbc:	2306      	movs	r3, #6
 8019cbe:	9301      	str	r3, [sp, #4]
 8019cc0:	7d7b      	ldrb	r3, [r7, #21]
 8019cc2:	9300      	str	r3, [sp, #0]
 8019cc4:	4613      	mov	r3, r2
 8019cc6:	683a      	ldr	r2, [r7, #0]
 8019cc8:	6879      	ldr	r1, [r7, #4]
 8019cca:	68b8      	ldr	r0, [r7, #8]
 8019ccc:	f002 fad0 	bl	801c270 <ip4_output_if>
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019cd4:	68b8      	ldr	r0, [r7, #8]
 8019cd6:	f7f9 fef1 	bl	8013abc <pbuf_free>
  return err;
 8019cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019cde:	4618      	mov	r0, r3
 8019ce0:	3718      	adds	r7, #24
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}
 8019ce6:	bf00      	nop
 8019ce8:	08023050 	.word	0x08023050
 8019cec:	080237a8 	.word	0x080237a8
 8019cf0:	080230a4 	.word	0x080230a4

08019cf4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019cf4:	b590      	push	{r4, r7, lr}
 8019cf6:	b08b      	sub	sp, #44	@ 0x2c
 8019cf8:	af04      	add	r7, sp, #16
 8019cfa:	60f8      	str	r0, [r7, #12]
 8019cfc:	60b9      	str	r1, [r7, #8]
 8019cfe:	607a      	str	r2, [r7, #4]
 8019d00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d106      	bne.n	8019d16 <tcp_rst+0x22>
 8019d08:	4b1f      	ldr	r3, [pc, #124]	@ (8019d88 <tcp_rst+0x94>)
 8019d0a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019d0e:	491f      	ldr	r1, [pc, #124]	@ (8019d8c <tcp_rst+0x98>)
 8019d10:	481f      	ldr	r0, [pc, #124]	@ (8019d90 <tcp_rst+0x9c>)
 8019d12:	f004 fb27 	bl	801e364 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8019d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d106      	bne.n	8019d2a <tcp_rst+0x36>
 8019d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8019d88 <tcp_rst+0x94>)
 8019d1e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8019d22:	491c      	ldr	r1, [pc, #112]	@ (8019d94 <tcp_rst+0xa0>)
 8019d24:	481a      	ldr	r0, [pc, #104]	@ (8019d90 <tcp_rst+0x9c>)
 8019d26:	f004 fb1d 	bl	801e364 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019d2e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8019d32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8019d34:	7dfb      	ldrb	r3, [r7, #23]
 8019d36:	b29c      	uxth	r4, r3
 8019d38:	68b8      	ldr	r0, [r7, #8]
 8019d3a:	f7f8 f818 	bl	8011d6e <lwip_htonl>
 8019d3e:	4602      	mov	r2, r0
 8019d40:	8abb      	ldrh	r3, [r7, #20]
 8019d42:	9303      	str	r3, [sp, #12]
 8019d44:	2314      	movs	r3, #20
 8019d46:	9302      	str	r3, [sp, #8]
 8019d48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019d4a:	9301      	str	r3, [sp, #4]
 8019d4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019d4e:	9300      	str	r3, [sp, #0]
 8019d50:	4613      	mov	r3, r2
 8019d52:	2200      	movs	r2, #0
 8019d54:	4621      	mov	r1, r4
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	f7ff fe94 	bl	8019a84 <tcp_output_alloc_header_common>
 8019d5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019d5e:	693b      	ldr	r3, [r7, #16]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d00c      	beq.n	8019d7e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019d64:	7dfb      	ldrb	r3, [r7, #23]
 8019d66:	2200      	movs	r2, #0
 8019d68:	6939      	ldr	r1, [r7, #16]
 8019d6a:	68f8      	ldr	r0, [r7, #12]
 8019d6c:	f7ff ff3a 	bl	8019be4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d72:	683a      	ldr	r2, [r7, #0]
 8019d74:	6939      	ldr	r1, [r7, #16]
 8019d76:	68f8      	ldr	r0, [r7, #12]
 8019d78:	f7ff ff72 	bl	8019c60 <tcp_output_control_segment>
 8019d7c:	e000      	b.n	8019d80 <tcp_rst+0x8c>
    return;
 8019d7e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019d80:	371c      	adds	r7, #28
 8019d82:	46bd      	mov	sp, r7
 8019d84:	bd90      	pop	{r4, r7, pc}
 8019d86:	bf00      	nop
 8019d88:	08023050 	.word	0x08023050
 8019d8c:	080237d4 	.word	0x080237d4
 8019d90:	080230a4 	.word	0x080230a4
 8019d94:	080237f0 	.word	0x080237f0

08019d98 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019d98:	b590      	push	{r4, r7, lr}
 8019d9a:	b087      	sub	sp, #28
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019da0:	2300      	movs	r3, #0
 8019da2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019da4:	2300      	movs	r3, #0
 8019da6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d106      	bne.n	8019dbc <tcp_send_empty_ack+0x24>
 8019dae:	4b28      	ldr	r3, [pc, #160]	@ (8019e50 <tcp_send_empty_ack+0xb8>)
 8019db0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8019db4:	4927      	ldr	r1, [pc, #156]	@ (8019e54 <tcp_send_empty_ack+0xbc>)
 8019db6:	4828      	ldr	r0, [pc, #160]	@ (8019e58 <tcp_send_empty_ack+0xc0>)
 8019db8:	f004 fad4 	bl	801e364 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019dbc:	7dfb      	ldrb	r3, [r7, #23]
 8019dbe:	009b      	lsls	r3, r3, #2
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	f003 0304 	and.w	r3, r3, #4
 8019dc6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019dc8:	7d7b      	ldrb	r3, [r7, #21]
 8019dca:	b29c      	uxth	r4, r3
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f7f7 ffcc 	bl	8011d6e <lwip_htonl>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	2200      	movs	r2, #0
 8019dda:	4621      	mov	r1, r4
 8019ddc:	6878      	ldr	r0, [r7, #4]
 8019dde:	f7ff fec3 	bl	8019b68 <tcp_output_alloc_header>
 8019de2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019de4:	693b      	ldr	r3, [r7, #16]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d109      	bne.n	8019dfe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	8b5b      	ldrh	r3, [r3, #26]
 8019dee:	f043 0303 	orr.w	r3, r3, #3
 8019df2:	b29a      	uxth	r2, r3
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019df8:	f06f 0301 	mvn.w	r3, #1
 8019dfc:	e023      	b.n	8019e46 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019dfe:	7dbb      	ldrb	r3, [r7, #22]
 8019e00:	7dfa      	ldrb	r2, [r7, #23]
 8019e02:	6939      	ldr	r1, [r7, #16]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	f7ff feed 	bl	8019be4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019e0a:	687a      	ldr	r2, [r7, #4]
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	3304      	adds	r3, #4
 8019e10:	6939      	ldr	r1, [r7, #16]
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	f7ff ff24 	bl	8019c60 <tcp_output_control_segment>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d007      	beq.n	8019e34 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	8b5b      	ldrh	r3, [r3, #26]
 8019e28:	f043 0303 	orr.w	r3, r3, #3
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	835a      	strh	r2, [r3, #26]
 8019e32:	e006      	b.n	8019e42 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	8b5b      	ldrh	r3, [r3, #26]
 8019e38:	f023 0303 	bic.w	r3, r3, #3
 8019e3c:	b29a      	uxth	r2, r3
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019e46:	4618      	mov	r0, r3
 8019e48:	371c      	adds	r7, #28
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	bd90      	pop	{r4, r7, pc}
 8019e4e:	bf00      	nop
 8019e50:	08023050 	.word	0x08023050
 8019e54:	0802380c 	.word	0x0802380c
 8019e58:	080230a4 	.word	0x080230a4

08019e5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019e5c:	b590      	push	{r4, r7, lr}
 8019e5e:	b087      	sub	sp, #28
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019e64:	2300      	movs	r3, #0
 8019e66:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d106      	bne.n	8019e7c <tcp_keepalive+0x20>
 8019e6e:	4b18      	ldr	r3, [pc, #96]	@ (8019ed0 <tcp_keepalive+0x74>)
 8019e70:	f640 0224 	movw	r2, #2084	@ 0x824
 8019e74:	4917      	ldr	r1, [pc, #92]	@ (8019ed4 <tcp_keepalive+0x78>)
 8019e76:	4818      	ldr	r0, [pc, #96]	@ (8019ed8 <tcp_keepalive+0x7c>)
 8019e78:	f004 fa74 	bl	801e364 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019e7c:	7dfb      	ldrb	r3, [r7, #23]
 8019e7e:	b29c      	uxth	r4, r3
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e84:	3b01      	subs	r3, #1
 8019e86:	4618      	mov	r0, r3
 8019e88:	f7f7 ff71 	bl	8011d6e <lwip_htonl>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	2200      	movs	r2, #0
 8019e90:	4621      	mov	r1, r4
 8019e92:	6878      	ldr	r0, [r7, #4]
 8019e94:	f7ff fe68 	bl	8019b68 <tcp_output_alloc_header>
 8019e98:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019e9a:	693b      	ldr	r3, [r7, #16]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d102      	bne.n	8019ea6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019ea0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019ea4:	e010      	b.n	8019ec8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019ea6:	7dfb      	ldrb	r3, [r7, #23]
 8019ea8:	2200      	movs	r2, #0
 8019eaa:	6939      	ldr	r1, [r7, #16]
 8019eac:	6878      	ldr	r0, [r7, #4]
 8019eae:	f7ff fe99 	bl	8019be4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	3304      	adds	r3, #4
 8019eb8:	6939      	ldr	r1, [r7, #16]
 8019eba:	6878      	ldr	r0, [r7, #4]
 8019ebc:	f7ff fed0 	bl	8019c60 <tcp_output_control_segment>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019ec8:	4618      	mov	r0, r3
 8019eca:	371c      	adds	r7, #28
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	bd90      	pop	{r4, r7, pc}
 8019ed0:	08023050 	.word	0x08023050
 8019ed4:	0802382c 	.word	0x0802382c
 8019ed8:	080230a4 	.word	0x080230a4

08019edc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019edc:	b590      	push	{r4, r7, lr}
 8019ede:	b08b      	sub	sp, #44	@ 0x2c
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d106      	bne.n	8019efe <tcp_zero_window_probe+0x22>
 8019ef0:	4b4c      	ldr	r3, [pc, #304]	@ (801a024 <tcp_zero_window_probe+0x148>)
 8019ef2:	f640 024f 	movw	r2, #2127	@ 0x84f
 8019ef6:	494c      	ldr	r1, [pc, #304]	@ (801a028 <tcp_zero_window_probe+0x14c>)
 8019ef8:	484c      	ldr	r0, [pc, #304]	@ (801a02c <tcp_zero_window_probe+0x150>)
 8019efa:	f004 fa33 	bl	801e364 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f02:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019f04:	6a3b      	ldr	r3, [r7, #32]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d101      	bne.n	8019f0e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	e086      	b.n	801a01c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019f14:	2bff      	cmp	r3, #255	@ 0xff
 8019f16:	d007      	beq.n	8019f28 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019f1e:	3301      	adds	r3, #1
 8019f20:	b2da      	uxtb	r2, r3
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019f28:	6a3b      	ldr	r3, [r7, #32]
 8019f2a:	68db      	ldr	r3, [r3, #12]
 8019f2c:	899b      	ldrh	r3, [r3, #12]
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	4618      	mov	r0, r3
 8019f32:	f7f7 ff07 	bl	8011d44 <lwip_htons>
 8019f36:	4603      	mov	r3, r0
 8019f38:	b2db      	uxtb	r3, r3
 8019f3a:	f003 0301 	and.w	r3, r3, #1
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d005      	beq.n	8019f4e <tcp_zero_window_probe+0x72>
 8019f42:	6a3b      	ldr	r3, [r7, #32]
 8019f44:	891b      	ldrh	r3, [r3, #8]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d101      	bne.n	8019f4e <tcp_zero_window_probe+0x72>
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	e000      	b.n	8019f50 <tcp_zero_window_probe+0x74>
 8019f4e:	2300      	movs	r3, #0
 8019f50:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019f52:	7ffb      	ldrb	r3, [r7, #31]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	bf0c      	ite	eq
 8019f58:	2301      	moveq	r3, #1
 8019f5a:	2300      	movne	r3, #0
 8019f5c:	b2db      	uxtb	r3, r3
 8019f5e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f64:	b299      	uxth	r1, r3
 8019f66:	6a3b      	ldr	r3, [r7, #32]
 8019f68:	68db      	ldr	r3, [r3, #12]
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	8bba      	ldrh	r2, [r7, #28]
 8019f6e:	6878      	ldr	r0, [r7, #4]
 8019f70:	f7ff fdfa 	bl	8019b68 <tcp_output_alloc_header>
 8019f74:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019f76:	69bb      	ldr	r3, [r7, #24]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d102      	bne.n	8019f82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019f7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019f80:	e04c      	b.n	801a01c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019f82:	69bb      	ldr	r3, [r7, #24]
 8019f84:	685b      	ldr	r3, [r3, #4]
 8019f86:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019f88:	7ffb      	ldrb	r3, [r7, #31]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d011      	beq.n	8019fb2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	899b      	ldrh	r3, [r3, #12]
 8019f92:	b29b      	uxth	r3, r3
 8019f94:	b21b      	sxth	r3, r3
 8019f96:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019f9a:	b21c      	sxth	r4, r3
 8019f9c:	2011      	movs	r0, #17
 8019f9e:	f7f7 fed1 	bl	8011d44 <lwip_htons>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	b21b      	sxth	r3, r3
 8019fa6:	4323      	orrs	r3, r4
 8019fa8:	b21b      	sxth	r3, r3
 8019faa:	b29a      	uxth	r2, r3
 8019fac:	697b      	ldr	r3, [r7, #20]
 8019fae:	819a      	strh	r2, [r3, #12]
 8019fb0:	e010      	b.n	8019fd4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019fb2:	69bb      	ldr	r3, [r7, #24]
 8019fb4:	685b      	ldr	r3, [r3, #4]
 8019fb6:	3314      	adds	r3, #20
 8019fb8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019fba:	6a3b      	ldr	r3, [r7, #32]
 8019fbc:	6858      	ldr	r0, [r3, #4]
 8019fbe:	6a3b      	ldr	r3, [r7, #32]
 8019fc0:	685b      	ldr	r3, [r3, #4]
 8019fc2:	891a      	ldrh	r2, [r3, #8]
 8019fc4:	6a3b      	ldr	r3, [r7, #32]
 8019fc6:	891b      	ldrh	r3, [r3, #8]
 8019fc8:	1ad3      	subs	r3, r2, r3
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	2201      	movs	r2, #1
 8019fce:	6939      	ldr	r1, [r7, #16]
 8019fd0:	f7f9 ff7a 	bl	8013ec8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019fd4:	6a3b      	ldr	r3, [r7, #32]
 8019fd6:	68db      	ldr	r3, [r3, #12]
 8019fd8:	685b      	ldr	r3, [r3, #4]
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f7f7 fec7 	bl	8011d6e <lwip_htonl>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	1ad3      	subs	r3, r2, r3
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	da02      	bge.n	8019ff8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	68fa      	ldr	r2, [r7, #12]
 8019ff6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	69b9      	ldr	r1, [r7, #24]
 801a000:	6878      	ldr	r0, [r7, #4]
 801a002:	f7ff fdef 	bl	8019be4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a006:	687a      	ldr	r2, [r7, #4]
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	3304      	adds	r3, #4
 801a00c:	69b9      	ldr	r1, [r7, #24]
 801a00e:	6878      	ldr	r0, [r7, #4]
 801a010:	f7ff fe26 	bl	8019c60 <tcp_output_control_segment>
 801a014:	4603      	mov	r3, r0
 801a016:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a018:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	372c      	adds	r7, #44	@ 0x2c
 801a020:	46bd      	mov	sp, r7
 801a022:	bd90      	pop	{r4, r7, pc}
 801a024:	08023050 	.word	0x08023050
 801a028:	08023848 	.word	0x08023848
 801a02c:	080230a4 	.word	0x080230a4

0801a030 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b082      	sub	sp, #8
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a038:	f7fa f98e 	bl	8014358 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a03c:	4b0a      	ldr	r3, [pc, #40]	@ (801a068 <tcpip_tcp_timer+0x38>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d103      	bne.n	801a04c <tcpip_tcp_timer+0x1c>
 801a044:	4b09      	ldr	r3, [pc, #36]	@ (801a06c <tcpip_tcp_timer+0x3c>)
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d005      	beq.n	801a058 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a04c:	2200      	movs	r2, #0
 801a04e:	4908      	ldr	r1, [pc, #32]	@ (801a070 <tcpip_tcp_timer+0x40>)
 801a050:	20fa      	movs	r0, #250	@ 0xfa
 801a052:	f000 f8f3 	bl	801a23c <sys_timeout>
 801a056:	e003      	b.n	801a060 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a058:	4b06      	ldr	r3, [pc, #24]	@ (801a074 <tcpip_tcp_timer+0x44>)
 801a05a:	2200      	movs	r2, #0
 801a05c:	601a      	str	r2, [r3, #0]
  }
}
 801a05e:	bf00      	nop
 801a060:	bf00      	nop
 801a062:	3708      	adds	r7, #8
 801a064:	46bd      	mov	sp, r7
 801a066:	bd80      	pop	{r7, pc}
 801a068:	2000fcc8 	.word	0x2000fcc8
 801a06c:	2000fccc 	.word	0x2000fccc
 801a070:	0801a031 	.word	0x0801a031
 801a074:	2000fd14 	.word	0x2000fd14

0801a078 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a07c:	4b0a      	ldr	r3, [pc, #40]	@ (801a0a8 <tcp_timer_needed+0x30>)
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d10f      	bne.n	801a0a4 <tcp_timer_needed+0x2c>
 801a084:	4b09      	ldr	r3, [pc, #36]	@ (801a0ac <tcp_timer_needed+0x34>)
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d103      	bne.n	801a094 <tcp_timer_needed+0x1c>
 801a08c:	4b08      	ldr	r3, [pc, #32]	@ (801a0b0 <tcp_timer_needed+0x38>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d007      	beq.n	801a0a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a094:	4b04      	ldr	r3, [pc, #16]	@ (801a0a8 <tcp_timer_needed+0x30>)
 801a096:	2201      	movs	r2, #1
 801a098:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a09a:	2200      	movs	r2, #0
 801a09c:	4905      	ldr	r1, [pc, #20]	@ (801a0b4 <tcp_timer_needed+0x3c>)
 801a09e:	20fa      	movs	r0, #250	@ 0xfa
 801a0a0:	f000 f8cc 	bl	801a23c <sys_timeout>
  }
}
 801a0a4:	bf00      	nop
 801a0a6:	bd80      	pop	{r7, pc}
 801a0a8:	2000fd14 	.word	0x2000fd14
 801a0ac:	2000fcc8 	.word	0x2000fcc8
 801a0b0:	2000fccc 	.word	0x2000fccc
 801a0b4:	0801a031 	.word	0x0801a031

0801a0b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b086      	sub	sp, #24
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	60f8      	str	r0, [r7, #12]
 801a0c0:	60b9      	str	r1, [r7, #8]
 801a0c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a0c4:	200a      	movs	r0, #10
 801a0c6:	f7f8 fddf 	bl	8012c88 <memp_malloc>
 801a0ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a0cc:	693b      	ldr	r3, [r7, #16]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d109      	bne.n	801a0e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a0d2:	693b      	ldr	r3, [r7, #16]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d151      	bne.n	801a17c <sys_timeout_abs+0xc4>
 801a0d8:	4b2a      	ldr	r3, [pc, #168]	@ (801a184 <sys_timeout_abs+0xcc>)
 801a0da:	22be      	movs	r2, #190	@ 0xbe
 801a0dc:	492a      	ldr	r1, [pc, #168]	@ (801a188 <sys_timeout_abs+0xd0>)
 801a0de:	482b      	ldr	r0, [pc, #172]	@ (801a18c <sys_timeout_abs+0xd4>)
 801a0e0:	f004 f940 	bl	801e364 <iprintf>
    return;
 801a0e4:	e04a      	b.n	801a17c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a0ec:	693b      	ldr	r3, [r7, #16]
 801a0ee:	68ba      	ldr	r2, [r7, #8]
 801a0f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a0f2:	693b      	ldr	r3, [r7, #16]
 801a0f4:	687a      	ldr	r2, [r7, #4]
 801a0f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a0f8:	693b      	ldr	r3, [r7, #16]
 801a0fa:	68fa      	ldr	r2, [r7, #12]
 801a0fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a0fe:	4b24      	ldr	r3, [pc, #144]	@ (801a190 <sys_timeout_abs+0xd8>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d103      	bne.n	801a10e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a106:	4a22      	ldr	r2, [pc, #136]	@ (801a190 <sys_timeout_abs+0xd8>)
 801a108:	693b      	ldr	r3, [r7, #16]
 801a10a:	6013      	str	r3, [r2, #0]
    return;
 801a10c:	e037      	b.n	801a17e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a10e:	693b      	ldr	r3, [r7, #16]
 801a110:	685a      	ldr	r2, [r3, #4]
 801a112:	4b1f      	ldr	r3, [pc, #124]	@ (801a190 <sys_timeout_abs+0xd8>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	685b      	ldr	r3, [r3, #4]
 801a118:	1ad3      	subs	r3, r2, r3
 801a11a:	0fdb      	lsrs	r3, r3, #31
 801a11c:	f003 0301 	and.w	r3, r3, #1
 801a120:	b2db      	uxtb	r3, r3
 801a122:	2b00      	cmp	r3, #0
 801a124:	d007      	beq.n	801a136 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a126:	4b1a      	ldr	r3, [pc, #104]	@ (801a190 <sys_timeout_abs+0xd8>)
 801a128:	681a      	ldr	r2, [r3, #0]
 801a12a:	693b      	ldr	r3, [r7, #16]
 801a12c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a12e:	4a18      	ldr	r2, [pc, #96]	@ (801a190 <sys_timeout_abs+0xd8>)
 801a130:	693b      	ldr	r3, [r7, #16]
 801a132:	6013      	str	r3, [r2, #0]
 801a134:	e023      	b.n	801a17e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a136:	4b16      	ldr	r3, [pc, #88]	@ (801a190 <sys_timeout_abs+0xd8>)
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	617b      	str	r3, [r7, #20]
 801a13c:	e01a      	b.n	801a174 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a13e:	697b      	ldr	r3, [r7, #20]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d00b      	beq.n	801a15e <sys_timeout_abs+0xa6>
 801a146:	693b      	ldr	r3, [r7, #16]
 801a148:	685a      	ldr	r2, [r3, #4]
 801a14a:	697b      	ldr	r3, [r7, #20]
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	685b      	ldr	r3, [r3, #4]
 801a150:	1ad3      	subs	r3, r2, r3
 801a152:	0fdb      	lsrs	r3, r3, #31
 801a154:	f003 0301 	and.w	r3, r3, #1
 801a158:	b2db      	uxtb	r3, r3
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d007      	beq.n	801a16e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a15e:	697b      	ldr	r3, [r7, #20]
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	693b      	ldr	r3, [r7, #16]
 801a164:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a166:	697b      	ldr	r3, [r7, #20]
 801a168:	693a      	ldr	r2, [r7, #16]
 801a16a:	601a      	str	r2, [r3, #0]
        break;
 801a16c:	e007      	b.n	801a17e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a16e:	697b      	ldr	r3, [r7, #20]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	617b      	str	r3, [r7, #20]
 801a174:	697b      	ldr	r3, [r7, #20]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d1e1      	bne.n	801a13e <sys_timeout_abs+0x86>
 801a17a:	e000      	b.n	801a17e <sys_timeout_abs+0xc6>
    return;
 801a17c:	bf00      	nop
      }
    }
  }
}
 801a17e:	3718      	adds	r7, #24
 801a180:	46bd      	mov	sp, r7
 801a182:	bd80      	pop	{r7, pc}
 801a184:	0802386c 	.word	0x0802386c
 801a188:	080238a0 	.word	0x080238a0
 801a18c:	080238e0 	.word	0x080238e0
 801a190:	2000fd0c 	.word	0x2000fd0c

0801a194 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b086      	sub	sp, #24
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a1a0:	697b      	ldr	r3, [r7, #20]
 801a1a2:	685b      	ldr	r3, [r3, #4]
 801a1a4:	4798      	blx	r3

  now = sys_now();
 801a1a6:	f7f1 fa97 	bl	800b6d8 <sys_now>
 801a1aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	681a      	ldr	r2, [r3, #0]
 801a1b0:	4b0f      	ldr	r3, [pc, #60]	@ (801a1f0 <lwip_cyclic_timer+0x5c>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	4413      	add	r3, r2
 801a1b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a1b8:	68fa      	ldr	r2, [r7, #12]
 801a1ba:	693b      	ldr	r3, [r7, #16]
 801a1bc:	1ad3      	subs	r3, r2, r3
 801a1be:	0fdb      	lsrs	r3, r3, #31
 801a1c0:	f003 0301 	and.w	r3, r3, #1
 801a1c4:	b2db      	uxtb	r3, r3
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d009      	beq.n	801a1de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a1ca:	697b      	ldr	r3, [r7, #20]
 801a1cc:	681a      	ldr	r2, [r3, #0]
 801a1ce:	693b      	ldr	r3, [r7, #16]
 801a1d0:	4413      	add	r3, r2
 801a1d2:	687a      	ldr	r2, [r7, #4]
 801a1d4:	4907      	ldr	r1, [pc, #28]	@ (801a1f4 <lwip_cyclic_timer+0x60>)
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7ff ff6e 	bl	801a0b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a1dc:	e004      	b.n	801a1e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a1de:	687a      	ldr	r2, [r7, #4]
 801a1e0:	4904      	ldr	r1, [pc, #16]	@ (801a1f4 <lwip_cyclic_timer+0x60>)
 801a1e2:	68f8      	ldr	r0, [r7, #12]
 801a1e4:	f7ff ff68 	bl	801a0b8 <sys_timeout_abs>
}
 801a1e8:	bf00      	nop
 801a1ea:	3718      	adds	r7, #24
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}
 801a1f0:	2000fd10 	.word	0x2000fd10
 801a1f4:	0801a195 	.word	0x0801a195

0801a1f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a1fe:	2301      	movs	r3, #1
 801a200:	607b      	str	r3, [r7, #4]
 801a202:	e00e      	b.n	801a222 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a204:	4a0b      	ldr	r2, [pc, #44]	@ (801a234 <sys_timeouts_init+0x3c>)
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	00db      	lsls	r3, r3, #3
 801a210:	4a08      	ldr	r2, [pc, #32]	@ (801a234 <sys_timeouts_init+0x3c>)
 801a212:	4413      	add	r3, r2
 801a214:	461a      	mov	r2, r3
 801a216:	4908      	ldr	r1, [pc, #32]	@ (801a238 <sys_timeouts_init+0x40>)
 801a218:	f000 f810 	bl	801a23c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	3301      	adds	r3, #1
 801a220:	607b      	str	r3, [r7, #4]
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	2b03      	cmp	r3, #3
 801a226:	d9ed      	bls.n	801a204 <sys_timeouts_init+0xc>
  }
}
 801a228:	bf00      	nop
 801a22a:	bf00      	nop
 801a22c:	3708      	adds	r7, #8
 801a22e:	46bd      	mov	sp, r7
 801a230:	bd80      	pop	{r7, pc}
 801a232:	bf00      	nop
 801a234:	080246a4 	.word	0x080246a4
 801a238:	0801a195 	.word	0x0801a195

0801a23c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b086      	sub	sp, #24
 801a240:	af00      	add	r7, sp, #0
 801a242:	60f8      	str	r0, [r7, #12]
 801a244:	60b9      	str	r1, [r7, #8]
 801a246:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a24e:	d306      	bcc.n	801a25e <sys_timeout+0x22>
 801a250:	4b0a      	ldr	r3, [pc, #40]	@ (801a27c <sys_timeout+0x40>)
 801a252:	f240 1229 	movw	r2, #297	@ 0x129
 801a256:	490a      	ldr	r1, [pc, #40]	@ (801a280 <sys_timeout+0x44>)
 801a258:	480a      	ldr	r0, [pc, #40]	@ (801a284 <sys_timeout+0x48>)
 801a25a:	f004 f883 	bl	801e364 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a25e:	f7f1 fa3b 	bl	800b6d8 <sys_now>
 801a262:	4602      	mov	r2, r0
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	4413      	add	r3, r2
 801a268:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	68b9      	ldr	r1, [r7, #8]
 801a26e:	6978      	ldr	r0, [r7, #20]
 801a270:	f7ff ff22 	bl	801a0b8 <sys_timeout_abs>
#endif
}
 801a274:	bf00      	nop
 801a276:	3718      	adds	r7, #24
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}
 801a27c:	0802386c 	.word	0x0802386c
 801a280:	08023908 	.word	0x08023908
 801a284:	080238e0 	.word	0x080238e0

0801a288 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b084      	sub	sp, #16
 801a28c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a28e:	f7f1 fa23 	bl	800b6d8 <sys_now>
 801a292:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a294:	4b17      	ldr	r3, [pc, #92]	@ (801a2f4 <sys_check_timeouts+0x6c>)
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a29a:	68bb      	ldr	r3, [r7, #8]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d022      	beq.n	801a2e6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a2a0:	68bb      	ldr	r3, [r7, #8]
 801a2a2:	685b      	ldr	r3, [r3, #4]
 801a2a4:	68fa      	ldr	r2, [r7, #12]
 801a2a6:	1ad3      	subs	r3, r2, r3
 801a2a8:	0fdb      	lsrs	r3, r3, #31
 801a2aa:	f003 0301 	and.w	r3, r3, #1
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d11a      	bne.n	801a2ea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a2b4:	68bb      	ldr	r3, [r7, #8]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	4a0e      	ldr	r2, [pc, #56]	@ (801a2f4 <sys_check_timeouts+0x6c>)
 801a2ba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	689b      	ldr	r3, [r3, #8]
 801a2c0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	68db      	ldr	r3, [r3, #12]
 801a2c6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a2c8:	68bb      	ldr	r3, [r7, #8]
 801a2ca:	685b      	ldr	r3, [r3, #4]
 801a2cc:	4a0a      	ldr	r2, [pc, #40]	@ (801a2f8 <sys_check_timeouts+0x70>)
 801a2ce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a2d0:	68b9      	ldr	r1, [r7, #8]
 801a2d2:	200a      	movs	r0, #10
 801a2d4:	f7f8 fd4e 	bl	8012d74 <memp_free>
    if (handler != NULL) {
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d0da      	beq.n	801a294 <sys_check_timeouts+0xc>
      handler(arg);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	6838      	ldr	r0, [r7, #0]
 801a2e2:	4798      	blx	r3
  do {
 801a2e4:	e7d6      	b.n	801a294 <sys_check_timeouts+0xc>
      return;
 801a2e6:	bf00      	nop
 801a2e8:	e000      	b.n	801a2ec <sys_check_timeouts+0x64>
      return;
 801a2ea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a2ec:	3710      	adds	r7, #16
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bd80      	pop	{r7, pc}
 801a2f2:	bf00      	nop
 801a2f4:	2000fd0c 	.word	0x2000fd0c
 801a2f8:	2000fd10 	.word	0x2000fd10

0801a2fc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b082      	sub	sp, #8
 801a300:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a302:	4b16      	ldr	r3, [pc, #88]	@ (801a35c <sys_timeouts_sleeptime+0x60>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d102      	bne.n	801a310 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a30a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a30e:	e020      	b.n	801a352 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a310:	f7f1 f9e2 	bl	800b6d8 <sys_now>
 801a314:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a316:	4b11      	ldr	r3, [pc, #68]	@ (801a35c <sys_timeouts_sleeptime+0x60>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	685a      	ldr	r2, [r3, #4]
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	1ad3      	subs	r3, r2, r3
 801a320:	0fdb      	lsrs	r3, r3, #31
 801a322:	f003 0301 	and.w	r3, r3, #1
 801a326:	b2db      	uxtb	r3, r3
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d001      	beq.n	801a330 <sys_timeouts_sleeptime+0x34>
    return 0;
 801a32c:	2300      	movs	r3, #0
 801a32e:	e010      	b.n	801a352 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a330:	4b0a      	ldr	r3, [pc, #40]	@ (801a35c <sys_timeouts_sleeptime+0x60>)
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	685a      	ldr	r2, [r3, #4]
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	1ad3      	subs	r3, r2, r3
 801a33a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a33c:	683b      	ldr	r3, [r7, #0]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	da06      	bge.n	801a350 <sys_timeouts_sleeptime+0x54>
 801a342:	4b07      	ldr	r3, [pc, #28]	@ (801a360 <sys_timeouts_sleeptime+0x64>)
 801a344:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801a348:	4906      	ldr	r1, [pc, #24]	@ (801a364 <sys_timeouts_sleeptime+0x68>)
 801a34a:	4807      	ldr	r0, [pc, #28]	@ (801a368 <sys_timeouts_sleeptime+0x6c>)
 801a34c:	f004 f80a 	bl	801e364 <iprintf>
    return ret;
 801a350:	683b      	ldr	r3, [r7, #0]
  }
}
 801a352:	4618      	mov	r0, r3
 801a354:	3708      	adds	r7, #8
 801a356:	46bd      	mov	sp, r7
 801a358:	bd80      	pop	{r7, pc}
 801a35a:	bf00      	nop
 801a35c:	2000fd0c 	.word	0x2000fd0c
 801a360:	0802386c 	.word	0x0802386c
 801a364:	08023940 	.word	0x08023940
 801a368:	080238e0 	.word	0x080238e0

0801a36c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a370:	f003 faa0 	bl	801d8b4 <rand>
 801a374:	4603      	mov	r3, r0
 801a376:	b29b      	uxth	r3, r3
 801a378:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a37c:	b29b      	uxth	r3, r3
 801a37e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a382:	b29a      	uxth	r2, r3
 801a384:	4b01      	ldr	r3, [pc, #4]	@ (801a38c <udp_init+0x20>)
 801a386:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a388:	bf00      	nop
 801a38a:	bd80      	pop	{r7, pc}
 801a38c:	2000002c 	.word	0x2000002c

0801a390 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a390:	b480      	push	{r7}
 801a392:	b083      	sub	sp, #12
 801a394:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a396:	2300      	movs	r3, #0
 801a398:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a39a:	4b17      	ldr	r3, [pc, #92]	@ (801a3f8 <udp_new_port+0x68>)
 801a39c:	881b      	ldrh	r3, [r3, #0]
 801a39e:	1c5a      	adds	r2, r3, #1
 801a3a0:	b291      	uxth	r1, r2
 801a3a2:	4a15      	ldr	r2, [pc, #84]	@ (801a3f8 <udp_new_port+0x68>)
 801a3a4:	8011      	strh	r1, [r2, #0]
 801a3a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3aa:	4293      	cmp	r3, r2
 801a3ac:	d103      	bne.n	801a3b6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a3ae:	4b12      	ldr	r3, [pc, #72]	@ (801a3f8 <udp_new_port+0x68>)
 801a3b0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a3b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a3b6:	4b11      	ldr	r3, [pc, #68]	@ (801a3fc <udp_new_port+0x6c>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	603b      	str	r3, [r7, #0]
 801a3bc:	e011      	b.n	801a3e2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a3be:	683b      	ldr	r3, [r7, #0]
 801a3c0:	8a5a      	ldrh	r2, [r3, #18]
 801a3c2:	4b0d      	ldr	r3, [pc, #52]	@ (801a3f8 <udp_new_port+0x68>)
 801a3c4:	881b      	ldrh	r3, [r3, #0]
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	d108      	bne.n	801a3dc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a3ca:	88fb      	ldrh	r3, [r7, #6]
 801a3cc:	3301      	adds	r3, #1
 801a3ce:	80fb      	strh	r3, [r7, #6]
 801a3d0:	88fb      	ldrh	r3, [r7, #6]
 801a3d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a3d6:	d3e0      	bcc.n	801a39a <udp_new_port+0xa>
        return 0;
 801a3d8:	2300      	movs	r3, #0
 801a3da:	e007      	b.n	801a3ec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a3dc:	683b      	ldr	r3, [r7, #0]
 801a3de:	68db      	ldr	r3, [r3, #12]
 801a3e0:	603b      	str	r3, [r7, #0]
 801a3e2:	683b      	ldr	r3, [r7, #0]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d1ea      	bne.n	801a3be <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a3e8:	4b03      	ldr	r3, [pc, #12]	@ (801a3f8 <udp_new_port+0x68>)
 801a3ea:	881b      	ldrh	r3, [r3, #0]
}
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	370c      	adds	r7, #12
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3f6:	4770      	bx	lr
 801a3f8:	2000002c 	.word	0x2000002c
 801a3fc:	2000fd18 	.word	0x2000fd18

0801a400 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b084      	sub	sp, #16
 801a404:	af00      	add	r7, sp, #0
 801a406:	60f8      	str	r0, [r7, #12]
 801a408:	60b9      	str	r1, [r7, #8]
 801a40a:	4613      	mov	r3, r2
 801a40c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d105      	bne.n	801a420 <udp_input_local_match+0x20>
 801a414:	4b27      	ldr	r3, [pc, #156]	@ (801a4b4 <udp_input_local_match+0xb4>)
 801a416:	2287      	movs	r2, #135	@ 0x87
 801a418:	4927      	ldr	r1, [pc, #156]	@ (801a4b8 <udp_input_local_match+0xb8>)
 801a41a:	4828      	ldr	r0, [pc, #160]	@ (801a4bc <udp_input_local_match+0xbc>)
 801a41c:	f003 ffa2 	bl	801e364 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a420:	68bb      	ldr	r3, [r7, #8]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d105      	bne.n	801a432 <udp_input_local_match+0x32>
 801a426:	4b23      	ldr	r3, [pc, #140]	@ (801a4b4 <udp_input_local_match+0xb4>)
 801a428:	2288      	movs	r2, #136	@ 0x88
 801a42a:	4925      	ldr	r1, [pc, #148]	@ (801a4c0 <udp_input_local_match+0xc0>)
 801a42c:	4823      	ldr	r0, [pc, #140]	@ (801a4bc <udp_input_local_match+0xbc>)
 801a42e:	f003 ff99 	bl	801e364 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	7a1b      	ldrb	r3, [r3, #8]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d00b      	beq.n	801a452 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	7a1a      	ldrb	r2, [r3, #8]
 801a43e:	4b21      	ldr	r3, [pc, #132]	@ (801a4c4 <udp_input_local_match+0xc4>)
 801a440:	685b      	ldr	r3, [r3, #4]
 801a442:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a446:	3301      	adds	r3, #1
 801a448:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a44a:	429a      	cmp	r2, r3
 801a44c:	d001      	beq.n	801a452 <udp_input_local_match+0x52>
    return 0;
 801a44e:	2300      	movs	r3, #0
 801a450:	e02b      	b.n	801a4aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a452:	79fb      	ldrb	r3, [r7, #7]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d018      	beq.n	801a48a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d013      	beq.n	801a486 <udp_input_local_match+0x86>
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d00f      	beq.n	801a486 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a466:	4b17      	ldr	r3, [pc, #92]	@ (801a4c4 <udp_input_local_match+0xc4>)
 801a468:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a46a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a46e:	d00a      	beq.n	801a486 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	681a      	ldr	r2, [r3, #0]
 801a474:	4b13      	ldr	r3, [pc, #76]	@ (801a4c4 <udp_input_local_match+0xc4>)
 801a476:	695b      	ldr	r3, [r3, #20]
 801a478:	405a      	eors	r2, r3
 801a47a:	68bb      	ldr	r3, [r7, #8]
 801a47c:	3308      	adds	r3, #8
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a482:	2b00      	cmp	r3, #0
 801a484:	d110      	bne.n	801a4a8 <udp_input_local_match+0xa8>
          return 1;
 801a486:	2301      	movs	r3, #1
 801a488:	e00f      	b.n	801a4aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d009      	beq.n	801a4a4 <udp_input_local_match+0xa4>
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d005      	beq.n	801a4a4 <udp_input_local_match+0xa4>
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	681a      	ldr	r2, [r3, #0]
 801a49c:	4b09      	ldr	r3, [pc, #36]	@ (801a4c4 <udp_input_local_match+0xc4>)
 801a49e:	695b      	ldr	r3, [r3, #20]
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	d101      	bne.n	801a4a8 <udp_input_local_match+0xa8>
        return 1;
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	e000      	b.n	801a4aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a4a8:	2300      	movs	r3, #0
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	3710      	adds	r7, #16
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}
 801a4b2:	bf00      	nop
 801a4b4:	08023954 	.word	0x08023954
 801a4b8:	08023984 	.word	0x08023984
 801a4bc:	080239a8 	.word	0x080239a8
 801a4c0:	080239d0 	.word	0x080239d0
 801a4c4:	2000a25c 	.word	0x2000a25c

0801a4c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a4c8:	b590      	push	{r4, r7, lr}
 801a4ca:	b08d      	sub	sp, #52	@ 0x34
 801a4cc:	af02      	add	r7, sp, #8
 801a4ce:	6078      	str	r0, [r7, #4]
 801a4d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d105      	bne.n	801a4e8 <udp_input+0x20>
 801a4dc:	4b7c      	ldr	r3, [pc, #496]	@ (801a6d0 <udp_input+0x208>)
 801a4de:	22cf      	movs	r2, #207	@ 0xcf
 801a4e0:	497c      	ldr	r1, [pc, #496]	@ (801a6d4 <udp_input+0x20c>)
 801a4e2:	487d      	ldr	r0, [pc, #500]	@ (801a6d8 <udp_input+0x210>)
 801a4e4:	f003 ff3e 	bl	801e364 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d105      	bne.n	801a4fa <udp_input+0x32>
 801a4ee:	4b78      	ldr	r3, [pc, #480]	@ (801a6d0 <udp_input+0x208>)
 801a4f0:	22d0      	movs	r2, #208	@ 0xd0
 801a4f2:	497a      	ldr	r1, [pc, #488]	@ (801a6dc <udp_input+0x214>)
 801a4f4:	4878      	ldr	r0, [pc, #480]	@ (801a6d8 <udp_input+0x210>)
 801a4f6:	f003 ff35 	bl	801e364 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	895b      	ldrh	r3, [r3, #10]
 801a4fe:	2b07      	cmp	r3, #7
 801a500:	d803      	bhi.n	801a50a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a502:	6878      	ldr	r0, [r7, #4]
 801a504:	f7f9 fada 	bl	8013abc <pbuf_free>
    goto end;
 801a508:	e0de      	b.n	801a6c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	685b      	ldr	r3, [r3, #4]
 801a50e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a510:	4b73      	ldr	r3, [pc, #460]	@ (801a6e0 <udp_input+0x218>)
 801a512:	695b      	ldr	r3, [r3, #20]
 801a514:	4a72      	ldr	r2, [pc, #456]	@ (801a6e0 <udp_input+0x218>)
 801a516:	6812      	ldr	r2, [r2, #0]
 801a518:	4611      	mov	r1, r2
 801a51a:	4618      	mov	r0, r3
 801a51c:	f001 ff80 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801a520:	4603      	mov	r3, r0
 801a522:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a524:	697b      	ldr	r3, [r7, #20]
 801a526:	881b      	ldrh	r3, [r3, #0]
 801a528:	b29b      	uxth	r3, r3
 801a52a:	4618      	mov	r0, r3
 801a52c:	f7f7 fc0a 	bl	8011d44 <lwip_htons>
 801a530:	4603      	mov	r3, r0
 801a532:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a534:	697b      	ldr	r3, [r7, #20]
 801a536:	885b      	ldrh	r3, [r3, #2]
 801a538:	b29b      	uxth	r3, r3
 801a53a:	4618      	mov	r0, r3
 801a53c:	f7f7 fc02 	bl	8011d44 <lwip_htons>
 801a540:	4603      	mov	r3, r0
 801a542:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a544:	2300      	movs	r3, #0
 801a546:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a548:	2300      	movs	r3, #0
 801a54a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a54c:	2300      	movs	r3, #0
 801a54e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a550:	4b64      	ldr	r3, [pc, #400]	@ (801a6e4 <udp_input+0x21c>)
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	627b      	str	r3, [r7, #36]	@ 0x24
 801a556:	e054      	b.n	801a602 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a55a:	8a5b      	ldrh	r3, [r3, #18]
 801a55c:	89fa      	ldrh	r2, [r7, #14]
 801a55e:	429a      	cmp	r2, r3
 801a560:	d14a      	bne.n	801a5f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a562:	7cfb      	ldrb	r3, [r7, #19]
 801a564:	461a      	mov	r2, r3
 801a566:	6839      	ldr	r1, [r7, #0]
 801a568:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a56a:	f7ff ff49 	bl	801a400 <udp_input_local_match>
 801a56e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a570:	2b00      	cmp	r3, #0
 801a572:	d041      	beq.n	801a5f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a576:	7c1b      	ldrb	r3, [r3, #16]
 801a578:	f003 0304 	and.w	r3, r3, #4
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d11d      	bne.n	801a5bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a580:	69fb      	ldr	r3, [r7, #28]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d102      	bne.n	801a58c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a588:	61fb      	str	r3, [r7, #28]
 801a58a:	e017      	b.n	801a5bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a58c:	7cfb      	ldrb	r3, [r7, #19]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d014      	beq.n	801a5bc <udp_input+0xf4>
 801a592:	4b53      	ldr	r3, [pc, #332]	@ (801a6e0 <udp_input+0x218>)
 801a594:	695b      	ldr	r3, [r3, #20]
 801a596:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a59a:	d10f      	bne.n	801a5bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a59c:	69fb      	ldr	r3, [r7, #28]
 801a59e:	681a      	ldr	r2, [r3, #0]
 801a5a0:	683b      	ldr	r3, [r7, #0]
 801a5a2:	3304      	adds	r3, #4
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	429a      	cmp	r2, r3
 801a5a8:	d008      	beq.n	801a5bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ac:	681a      	ldr	r2, [r3, #0]
 801a5ae:	683b      	ldr	r3, [r7, #0]
 801a5b0:	3304      	adds	r3, #4
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	d101      	bne.n	801a5bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5be:	8a9b      	ldrh	r3, [r3, #20]
 801a5c0:	8a3a      	ldrh	r2, [r7, #16]
 801a5c2:	429a      	cmp	r2, r3
 801a5c4:	d118      	bne.n	801a5f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d005      	beq.n	801a5da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d0:	685a      	ldr	r2, [r3, #4]
 801a5d2:	4b43      	ldr	r3, [pc, #268]	@ (801a6e0 <udp_input+0x218>)
 801a5d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a5d6:	429a      	cmp	r2, r3
 801a5d8:	d10e      	bne.n	801a5f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a5da:	6a3b      	ldr	r3, [r7, #32]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d014      	beq.n	801a60a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e2:	68da      	ldr	r2, [r3, #12]
 801a5e4:	6a3b      	ldr	r3, [r7, #32]
 801a5e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a5e8:	4b3e      	ldr	r3, [pc, #248]	@ (801a6e4 <udp_input+0x21c>)
 801a5ea:	681a      	ldr	r2, [r3, #0]
 801a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a5f0:	4a3c      	ldr	r2, [pc, #240]	@ (801a6e4 <udp_input+0x21c>)
 801a5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a5f6:	e008      	b.n	801a60a <udp_input+0x142>
      }
    }

    prev = pcb;
 801a5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5fe:	68db      	ldr	r3, [r3, #12]
 801a600:	627b      	str	r3, [r7, #36]	@ 0x24
 801a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a604:	2b00      	cmp	r3, #0
 801a606:	d1a7      	bne.n	801a558 <udp_input+0x90>
 801a608:	e000      	b.n	801a60c <udp_input+0x144>
        break;
 801a60a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d101      	bne.n	801a616 <udp_input+0x14e>
    pcb = uncon_pcb;
 801a612:	69fb      	ldr	r3, [r7, #28]
 801a614:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d002      	beq.n	801a622 <udp_input+0x15a>
    for_us = 1;
 801a61c:	2301      	movs	r3, #1
 801a61e:	76fb      	strb	r3, [r7, #27]
 801a620:	e00a      	b.n	801a638 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a622:	683b      	ldr	r3, [r7, #0]
 801a624:	3304      	adds	r3, #4
 801a626:	681a      	ldr	r2, [r3, #0]
 801a628:	4b2d      	ldr	r3, [pc, #180]	@ (801a6e0 <udp_input+0x218>)
 801a62a:	695b      	ldr	r3, [r3, #20]
 801a62c:	429a      	cmp	r2, r3
 801a62e:	bf0c      	ite	eq
 801a630:	2301      	moveq	r3, #1
 801a632:	2300      	movne	r3, #0
 801a634:	b2db      	uxtb	r3, r3
 801a636:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a638:	7efb      	ldrb	r3, [r7, #27]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d041      	beq.n	801a6c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a63e:	2108      	movs	r1, #8
 801a640:	6878      	ldr	r0, [r7, #4]
 801a642:	f7f9 f9b5 	bl	80139b0 <pbuf_remove_header>
 801a646:	4603      	mov	r3, r0
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d00a      	beq.n	801a662 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a64c:	4b20      	ldr	r3, [pc, #128]	@ (801a6d0 <udp_input+0x208>)
 801a64e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a652:	4925      	ldr	r1, [pc, #148]	@ (801a6e8 <udp_input+0x220>)
 801a654:	4820      	ldr	r0, [pc, #128]	@ (801a6d8 <udp_input+0x210>)
 801a656:	f003 fe85 	bl	801e364 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a65a:	6878      	ldr	r0, [r7, #4]
 801a65c:	f7f9 fa2e 	bl	8013abc <pbuf_free>
      goto end;
 801a660:	e032      	b.n	801a6c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a664:	2b00      	cmp	r3, #0
 801a666:	d012      	beq.n	801a68e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a66a:	699b      	ldr	r3, [r3, #24]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d00a      	beq.n	801a686 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a672:	699c      	ldr	r4, [r3, #24]
 801a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a676:	69d8      	ldr	r0, [r3, #28]
 801a678:	8a3b      	ldrh	r3, [r7, #16]
 801a67a:	9300      	str	r3, [sp, #0]
 801a67c:	4b1b      	ldr	r3, [pc, #108]	@ (801a6ec <udp_input+0x224>)
 801a67e:	687a      	ldr	r2, [r7, #4]
 801a680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a682:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a684:	e021      	b.n	801a6ca <udp_input+0x202>
        pbuf_free(p);
 801a686:	6878      	ldr	r0, [r7, #4]
 801a688:	f7f9 fa18 	bl	8013abc <pbuf_free>
        goto end;
 801a68c:	e01c      	b.n	801a6c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a68e:	7cfb      	ldrb	r3, [r7, #19]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d112      	bne.n	801a6ba <udp_input+0x1f2>
 801a694:	4b12      	ldr	r3, [pc, #72]	@ (801a6e0 <udp_input+0x218>)
 801a696:	695b      	ldr	r3, [r3, #20]
 801a698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a69c:	2be0      	cmp	r3, #224	@ 0xe0
 801a69e:	d00c      	beq.n	801a6ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a6a0:	4b0f      	ldr	r3, [pc, #60]	@ (801a6e0 <udp_input+0x218>)
 801a6a2:	899b      	ldrh	r3, [r3, #12]
 801a6a4:	3308      	adds	r3, #8
 801a6a6:	b29b      	uxth	r3, r3
 801a6a8:	b21b      	sxth	r3, r3
 801a6aa:	4619      	mov	r1, r3
 801a6ac:	6878      	ldr	r0, [r7, #4]
 801a6ae:	f7f9 f9f2 	bl	8013a96 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a6b2:	2103      	movs	r1, #3
 801a6b4:	6878      	ldr	r0, [r7, #4]
 801a6b6:	f001 fb93 	bl	801bde0 <icmp_dest_unreach>
      pbuf_free(p);
 801a6ba:	6878      	ldr	r0, [r7, #4]
 801a6bc:	f7f9 f9fe 	bl	8013abc <pbuf_free>
  return;
 801a6c0:	e003      	b.n	801a6ca <udp_input+0x202>
    pbuf_free(p);
 801a6c2:	6878      	ldr	r0, [r7, #4]
 801a6c4:	f7f9 f9fa 	bl	8013abc <pbuf_free>
  return;
 801a6c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a6ca:	372c      	adds	r7, #44	@ 0x2c
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	bd90      	pop	{r4, r7, pc}
 801a6d0:	08023954 	.word	0x08023954
 801a6d4:	080239f8 	.word	0x080239f8
 801a6d8:	080239a8 	.word	0x080239a8
 801a6dc:	08023a10 	.word	0x08023a10
 801a6e0:	2000a25c 	.word	0x2000a25c
 801a6e4:	2000fd18 	.word	0x2000fd18
 801a6e8:	08023a2c 	.word	0x08023a2c
 801a6ec:	2000a26c 	.word	0x2000a26c

0801a6f0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	b082      	sub	sp, #8
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
 801a6f8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d109      	bne.n	801a714 <udp_send+0x24>
 801a700:	4b11      	ldr	r3, [pc, #68]	@ (801a748 <udp_send+0x58>)
 801a702:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801a706:	4911      	ldr	r1, [pc, #68]	@ (801a74c <udp_send+0x5c>)
 801a708:	4811      	ldr	r0, [pc, #68]	@ (801a750 <udp_send+0x60>)
 801a70a:	f003 fe2b 	bl	801e364 <iprintf>
 801a70e:	f06f 030f 	mvn.w	r3, #15
 801a712:	e015      	b.n	801a740 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d109      	bne.n	801a72e <udp_send+0x3e>
 801a71a:	4b0b      	ldr	r3, [pc, #44]	@ (801a748 <udp_send+0x58>)
 801a71c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801a720:	490c      	ldr	r1, [pc, #48]	@ (801a754 <udp_send+0x64>)
 801a722:	480b      	ldr	r0, [pc, #44]	@ (801a750 <udp_send+0x60>)
 801a724:	f003 fe1e 	bl	801e364 <iprintf>
 801a728:	f06f 030f 	mvn.w	r3, #15
 801a72c:	e008      	b.n	801a740 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	1d1a      	adds	r2, r3, #4
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	8a9b      	ldrh	r3, [r3, #20]
 801a736:	6839      	ldr	r1, [r7, #0]
 801a738:	6878      	ldr	r0, [r7, #4]
 801a73a:	f000 f80d 	bl	801a758 <udp_sendto>
 801a73e:	4603      	mov	r3, r0
}
 801a740:	4618      	mov	r0, r3
 801a742:	3708      	adds	r7, #8
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	08023954 	.word	0x08023954
 801a74c:	08023a48 	.word	0x08023a48
 801a750:	080239a8 	.word	0x080239a8
 801a754:	08023a60 	.word	0x08023a60

0801a758 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b088      	sub	sp, #32
 801a75c:	af02      	add	r7, sp, #8
 801a75e:	60f8      	str	r0, [r7, #12]
 801a760:	60b9      	str	r1, [r7, #8]
 801a762:	607a      	str	r2, [r7, #4]
 801a764:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d109      	bne.n	801a780 <udp_sendto+0x28>
 801a76c:	4b23      	ldr	r3, [pc, #140]	@ (801a7fc <udp_sendto+0xa4>)
 801a76e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a772:	4923      	ldr	r1, [pc, #140]	@ (801a800 <udp_sendto+0xa8>)
 801a774:	4823      	ldr	r0, [pc, #140]	@ (801a804 <udp_sendto+0xac>)
 801a776:	f003 fdf5 	bl	801e364 <iprintf>
 801a77a:	f06f 030f 	mvn.w	r3, #15
 801a77e:	e038      	b.n	801a7f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801a780:	68bb      	ldr	r3, [r7, #8]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d109      	bne.n	801a79a <udp_sendto+0x42>
 801a786:	4b1d      	ldr	r3, [pc, #116]	@ (801a7fc <udp_sendto+0xa4>)
 801a788:	f240 2219 	movw	r2, #537	@ 0x219
 801a78c:	491e      	ldr	r1, [pc, #120]	@ (801a808 <udp_sendto+0xb0>)
 801a78e:	481d      	ldr	r0, [pc, #116]	@ (801a804 <udp_sendto+0xac>)
 801a790:	f003 fde8 	bl	801e364 <iprintf>
 801a794:	f06f 030f 	mvn.w	r3, #15
 801a798:	e02b      	b.n	801a7f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d109      	bne.n	801a7b4 <udp_sendto+0x5c>
 801a7a0:	4b16      	ldr	r3, [pc, #88]	@ (801a7fc <udp_sendto+0xa4>)
 801a7a2:	f240 221a 	movw	r2, #538	@ 0x21a
 801a7a6:	4919      	ldr	r1, [pc, #100]	@ (801a80c <udp_sendto+0xb4>)
 801a7a8:	4816      	ldr	r0, [pc, #88]	@ (801a804 <udp_sendto+0xac>)
 801a7aa:	f003 fddb 	bl	801e364 <iprintf>
 801a7ae:	f06f 030f 	mvn.w	r3, #15
 801a7b2:	e01e      	b.n	801a7f2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	7a1b      	ldrb	r3, [r3, #8]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d006      	beq.n	801a7ca <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	7a1b      	ldrb	r3, [r3, #8]
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f7f8 fded 	bl	80133a0 <netif_get_by_index>
 801a7c6:	6178      	str	r0, [r7, #20]
 801a7c8:	e003      	b.n	801a7d2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801a7ca:	6878      	ldr	r0, [r7, #4]
 801a7cc:	f001 fb92 	bl	801bef4 <ip4_route>
 801a7d0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801a7d2:	697b      	ldr	r3, [r7, #20]
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d102      	bne.n	801a7de <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801a7d8:	f06f 0303 	mvn.w	r3, #3
 801a7dc:	e009      	b.n	801a7f2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801a7de:	887a      	ldrh	r2, [r7, #2]
 801a7e0:	697b      	ldr	r3, [r7, #20]
 801a7e2:	9300      	str	r3, [sp, #0]
 801a7e4:	4613      	mov	r3, r2
 801a7e6:	687a      	ldr	r2, [r7, #4]
 801a7e8:	68b9      	ldr	r1, [r7, #8]
 801a7ea:	68f8      	ldr	r0, [r7, #12]
 801a7ec:	f000 f810 	bl	801a810 <udp_sendto_if>
 801a7f0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	3718      	adds	r7, #24
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	bd80      	pop	{r7, pc}
 801a7fa:	bf00      	nop
 801a7fc:	08023954 	.word	0x08023954
 801a800:	08023a78 	.word	0x08023a78
 801a804:	080239a8 	.word	0x080239a8
 801a808:	08023a90 	.word	0x08023a90
 801a80c:	08023aac 	.word	0x08023aac

0801a810 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b088      	sub	sp, #32
 801a814:	af02      	add	r7, sp, #8
 801a816:	60f8      	str	r0, [r7, #12]
 801a818:	60b9      	str	r1, [r7, #8]
 801a81a:	607a      	str	r2, [r7, #4]
 801a81c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d109      	bne.n	801a838 <udp_sendto_if+0x28>
 801a824:	4b2e      	ldr	r3, [pc, #184]	@ (801a8e0 <udp_sendto_if+0xd0>)
 801a826:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a82a:	492e      	ldr	r1, [pc, #184]	@ (801a8e4 <udp_sendto_if+0xd4>)
 801a82c:	482e      	ldr	r0, [pc, #184]	@ (801a8e8 <udp_sendto_if+0xd8>)
 801a82e:	f003 fd99 	bl	801e364 <iprintf>
 801a832:	f06f 030f 	mvn.w	r3, #15
 801a836:	e04f      	b.n	801a8d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d109      	bne.n	801a852 <udp_sendto_if+0x42>
 801a83e:	4b28      	ldr	r3, [pc, #160]	@ (801a8e0 <udp_sendto_if+0xd0>)
 801a840:	f240 2281 	movw	r2, #641	@ 0x281
 801a844:	4929      	ldr	r1, [pc, #164]	@ (801a8ec <udp_sendto_if+0xdc>)
 801a846:	4828      	ldr	r0, [pc, #160]	@ (801a8e8 <udp_sendto_if+0xd8>)
 801a848:	f003 fd8c 	bl	801e364 <iprintf>
 801a84c:	f06f 030f 	mvn.w	r3, #15
 801a850:	e042      	b.n	801a8d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d109      	bne.n	801a86c <udp_sendto_if+0x5c>
 801a858:	4b21      	ldr	r3, [pc, #132]	@ (801a8e0 <udp_sendto_if+0xd0>)
 801a85a:	f240 2282 	movw	r2, #642	@ 0x282
 801a85e:	4924      	ldr	r1, [pc, #144]	@ (801a8f0 <udp_sendto_if+0xe0>)
 801a860:	4821      	ldr	r0, [pc, #132]	@ (801a8e8 <udp_sendto_if+0xd8>)
 801a862:	f003 fd7f 	bl	801e364 <iprintf>
 801a866:	f06f 030f 	mvn.w	r3, #15
 801a86a:	e035      	b.n	801a8d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801a86c:	6a3b      	ldr	r3, [r7, #32]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d109      	bne.n	801a886 <udp_sendto_if+0x76>
 801a872:	4b1b      	ldr	r3, [pc, #108]	@ (801a8e0 <udp_sendto_if+0xd0>)
 801a874:	f240 2283 	movw	r2, #643	@ 0x283
 801a878:	491e      	ldr	r1, [pc, #120]	@ (801a8f4 <udp_sendto_if+0xe4>)
 801a87a:	481b      	ldr	r0, [pc, #108]	@ (801a8e8 <udp_sendto_if+0xd8>)
 801a87c:	f003 fd72 	bl	801e364 <iprintf>
 801a880:	f06f 030f 	mvn.w	r3, #15
 801a884:	e028      	b.n	801a8d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d009      	beq.n	801a8a0 <udp_sendto_if+0x90>
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d005      	beq.n	801a8a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a89c:	2be0      	cmp	r3, #224	@ 0xe0
 801a89e:	d103      	bne.n	801a8a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801a8a0:	6a3b      	ldr	r3, [r7, #32]
 801a8a2:	3304      	adds	r3, #4
 801a8a4:	617b      	str	r3, [r7, #20]
 801a8a6:	e00b      	b.n	801a8c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	681a      	ldr	r2, [r3, #0]
 801a8ac:	6a3b      	ldr	r3, [r7, #32]
 801a8ae:	3304      	adds	r3, #4
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	429a      	cmp	r2, r3
 801a8b4:	d002      	beq.n	801a8bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801a8b6:	f06f 0303 	mvn.w	r3, #3
 801a8ba:	e00d      	b.n	801a8d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801a8c0:	887a      	ldrh	r2, [r7, #2]
 801a8c2:	697b      	ldr	r3, [r7, #20]
 801a8c4:	9301      	str	r3, [sp, #4]
 801a8c6:	6a3b      	ldr	r3, [r7, #32]
 801a8c8:	9300      	str	r3, [sp, #0]
 801a8ca:	4613      	mov	r3, r2
 801a8cc:	687a      	ldr	r2, [r7, #4]
 801a8ce:	68b9      	ldr	r1, [r7, #8]
 801a8d0:	68f8      	ldr	r0, [r7, #12]
 801a8d2:	f000 f811 	bl	801a8f8 <udp_sendto_if_src>
 801a8d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a8d8:	4618      	mov	r0, r3
 801a8da:	3718      	adds	r7, #24
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd80      	pop	{r7, pc}
 801a8e0:	08023954 	.word	0x08023954
 801a8e4:	08023ac8 	.word	0x08023ac8
 801a8e8:	080239a8 	.word	0x080239a8
 801a8ec:	08023ae4 	.word	0x08023ae4
 801a8f0:	08023b00 	.word	0x08023b00
 801a8f4:	08023b20 	.word	0x08023b20

0801a8f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b08c      	sub	sp, #48	@ 0x30
 801a8fc:	af04      	add	r7, sp, #16
 801a8fe:	60f8      	str	r0, [r7, #12]
 801a900:	60b9      	str	r1, [r7, #8]
 801a902:	607a      	str	r2, [r7, #4]
 801a904:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d109      	bne.n	801a920 <udp_sendto_if_src+0x28>
 801a90c:	4b65      	ldr	r3, [pc, #404]	@ (801aaa4 <udp_sendto_if_src+0x1ac>)
 801a90e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801a912:	4965      	ldr	r1, [pc, #404]	@ (801aaa8 <udp_sendto_if_src+0x1b0>)
 801a914:	4865      	ldr	r0, [pc, #404]	@ (801aaac <udp_sendto_if_src+0x1b4>)
 801a916:	f003 fd25 	bl	801e364 <iprintf>
 801a91a:	f06f 030f 	mvn.w	r3, #15
 801a91e:	e0bc      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d109      	bne.n	801a93a <udp_sendto_if_src+0x42>
 801a926:	4b5f      	ldr	r3, [pc, #380]	@ (801aaa4 <udp_sendto_if_src+0x1ac>)
 801a928:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801a92c:	4960      	ldr	r1, [pc, #384]	@ (801aab0 <udp_sendto_if_src+0x1b8>)
 801a92e:	485f      	ldr	r0, [pc, #380]	@ (801aaac <udp_sendto_if_src+0x1b4>)
 801a930:	f003 fd18 	bl	801e364 <iprintf>
 801a934:	f06f 030f 	mvn.w	r3, #15
 801a938:	e0af      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d109      	bne.n	801a954 <udp_sendto_if_src+0x5c>
 801a940:	4b58      	ldr	r3, [pc, #352]	@ (801aaa4 <udp_sendto_if_src+0x1ac>)
 801a942:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a946:	495b      	ldr	r1, [pc, #364]	@ (801aab4 <udp_sendto_if_src+0x1bc>)
 801a948:	4858      	ldr	r0, [pc, #352]	@ (801aaac <udp_sendto_if_src+0x1b4>)
 801a94a:	f003 fd0b 	bl	801e364 <iprintf>
 801a94e:	f06f 030f 	mvn.w	r3, #15
 801a952:	e0a2      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801a954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a956:	2b00      	cmp	r3, #0
 801a958:	d109      	bne.n	801a96e <udp_sendto_if_src+0x76>
 801a95a:	4b52      	ldr	r3, [pc, #328]	@ (801aaa4 <udp_sendto_if_src+0x1ac>)
 801a95c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801a960:	4955      	ldr	r1, [pc, #340]	@ (801aab8 <udp_sendto_if_src+0x1c0>)
 801a962:	4852      	ldr	r0, [pc, #328]	@ (801aaac <udp_sendto_if_src+0x1b4>)
 801a964:	f003 fcfe 	bl	801e364 <iprintf>
 801a968:	f06f 030f 	mvn.w	r3, #15
 801a96c:	e095      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801a96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a970:	2b00      	cmp	r3, #0
 801a972:	d109      	bne.n	801a988 <udp_sendto_if_src+0x90>
 801a974:	4b4b      	ldr	r3, [pc, #300]	@ (801aaa4 <udp_sendto_if_src+0x1ac>)
 801a976:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801a97a:	4950      	ldr	r1, [pc, #320]	@ (801aabc <udp_sendto_if_src+0x1c4>)
 801a97c:	484b      	ldr	r0, [pc, #300]	@ (801aaac <udp_sendto_if_src+0x1b4>)
 801a97e:	f003 fcf1 	bl	801e364 <iprintf>
 801a982:	f06f 030f 	mvn.w	r3, #15
 801a986:	e088      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	8a5b      	ldrh	r3, [r3, #18]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d10f      	bne.n	801a9b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a990:	68f9      	ldr	r1, [r7, #12]
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	8a5b      	ldrh	r3, [r3, #18]
 801a996:	461a      	mov	r2, r3
 801a998:	68f8      	ldr	r0, [r7, #12]
 801a99a:	f000 f893 	bl	801aac4 <udp_bind>
 801a99e:	4603      	mov	r3, r0
 801a9a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a9a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d002      	beq.n	801a9b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a9aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a9ae:	e074      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	891b      	ldrh	r3, [r3, #8]
 801a9b4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801a9b8:	4293      	cmp	r3, r2
 801a9ba:	d902      	bls.n	801a9c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801a9bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a9c0:	e06b      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801a9c2:	2108      	movs	r1, #8
 801a9c4:	68b8      	ldr	r0, [r7, #8]
 801a9c6:	f7f8 ffe3 	bl	8013990 <pbuf_add_header>
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d015      	beq.n	801a9fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a9d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a9d4:	2108      	movs	r1, #8
 801a9d6:	2022      	movs	r0, #34	@ 0x22
 801a9d8:	f7f8 fd8c 	bl	80134f4 <pbuf_alloc>
 801a9dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a9de:	69fb      	ldr	r3, [r7, #28]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d102      	bne.n	801a9ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a9e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a9e8:	e057      	b.n	801aa9a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801a9ea:	68bb      	ldr	r3, [r7, #8]
 801a9ec:	891b      	ldrh	r3, [r3, #8]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d006      	beq.n	801aa00 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a9f2:	68b9      	ldr	r1, [r7, #8]
 801a9f4:	69f8      	ldr	r0, [r7, #28]
 801a9f6:	f7f9 f985 	bl	8013d04 <pbuf_chain>
 801a9fa:	e001      	b.n	801aa00 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801aa00:	69fb      	ldr	r3, [r7, #28]
 801aa02:	895b      	ldrh	r3, [r3, #10]
 801aa04:	2b07      	cmp	r3, #7
 801aa06:	d806      	bhi.n	801aa16 <udp_sendto_if_src+0x11e>
 801aa08:	4b26      	ldr	r3, [pc, #152]	@ (801aaa4 <udp_sendto_if_src+0x1ac>)
 801aa0a:	f240 320d 	movw	r2, #781	@ 0x30d
 801aa0e:	492c      	ldr	r1, [pc, #176]	@ (801aac0 <udp_sendto_if_src+0x1c8>)
 801aa10:	4826      	ldr	r0, [pc, #152]	@ (801aaac <udp_sendto_if_src+0x1b4>)
 801aa12:	f003 fca7 	bl	801e364 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801aa16:	69fb      	ldr	r3, [r7, #28]
 801aa18:	685b      	ldr	r3, [r3, #4]
 801aa1a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	8a5b      	ldrh	r3, [r3, #18]
 801aa20:	4618      	mov	r0, r3
 801aa22:	f7f7 f98f 	bl	8011d44 <lwip_htons>
 801aa26:	4603      	mov	r3, r0
 801aa28:	461a      	mov	r2, r3
 801aa2a:	697b      	ldr	r3, [r7, #20]
 801aa2c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801aa2e:	887b      	ldrh	r3, [r7, #2]
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7f7 f987 	bl	8011d44 <lwip_htons>
 801aa36:	4603      	mov	r3, r0
 801aa38:	461a      	mov	r2, r3
 801aa3a:	697b      	ldr	r3, [r7, #20]
 801aa3c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801aa3e:	697b      	ldr	r3, [r7, #20]
 801aa40:	2200      	movs	r2, #0
 801aa42:	719a      	strb	r2, [r3, #6]
 801aa44:	2200      	movs	r2, #0
 801aa46:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801aa48:	69fb      	ldr	r3, [r7, #28]
 801aa4a:	891b      	ldrh	r3, [r3, #8]
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	f7f7 f979 	bl	8011d44 <lwip_htons>
 801aa52:	4603      	mov	r3, r0
 801aa54:	461a      	mov	r2, r3
 801aa56:	697b      	ldr	r3, [r7, #20]
 801aa58:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801aa5a:	2311      	movs	r3, #17
 801aa5c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	7adb      	ldrb	r3, [r3, #11]
 801aa62:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	7a9b      	ldrb	r3, [r3, #10]
 801aa68:	7cb9      	ldrb	r1, [r7, #18]
 801aa6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aa6c:	9202      	str	r2, [sp, #8]
 801aa6e:	7cfa      	ldrb	r2, [r7, #19]
 801aa70:	9201      	str	r2, [sp, #4]
 801aa72:	9300      	str	r3, [sp, #0]
 801aa74:	460b      	mov	r3, r1
 801aa76:	687a      	ldr	r2, [r7, #4]
 801aa78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aa7a:	69f8      	ldr	r0, [r7, #28]
 801aa7c:	f001 fc22 	bl	801c2c4 <ip4_output_if_src>
 801aa80:	4603      	mov	r3, r0
 801aa82:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801aa84:	69fa      	ldr	r2, [r7, #28]
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	429a      	cmp	r2, r3
 801aa8a:	d004      	beq.n	801aa96 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801aa8c:	69f8      	ldr	r0, [r7, #28]
 801aa8e:	f7f9 f815 	bl	8013abc <pbuf_free>
    q = NULL;
 801aa92:	2300      	movs	r3, #0
 801aa94:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801aa96:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	3720      	adds	r7, #32
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd80      	pop	{r7, pc}
 801aaa2:	bf00      	nop
 801aaa4:	08023954 	.word	0x08023954
 801aaa8:	08023b40 	.word	0x08023b40
 801aaac:	080239a8 	.word	0x080239a8
 801aab0:	08023b60 	.word	0x08023b60
 801aab4:	08023b80 	.word	0x08023b80
 801aab8:	08023ba4 	.word	0x08023ba4
 801aabc:	08023bc8 	.word	0x08023bc8
 801aac0:	08023bec 	.word	0x08023bec

0801aac4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b086      	sub	sp, #24
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	60f8      	str	r0, [r7, #12]
 801aacc:	60b9      	str	r1, [r7, #8]
 801aace:	4613      	mov	r3, r2
 801aad0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801aad2:	68bb      	ldr	r3, [r7, #8]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d101      	bne.n	801aadc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801aad8:	4b39      	ldr	r3, [pc, #228]	@ (801abc0 <udp_bind+0xfc>)
 801aada:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d109      	bne.n	801aaf6 <udp_bind+0x32>
 801aae2:	4b38      	ldr	r3, [pc, #224]	@ (801abc4 <udp_bind+0x100>)
 801aae4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801aae8:	4937      	ldr	r1, [pc, #220]	@ (801abc8 <udp_bind+0x104>)
 801aaea:	4838      	ldr	r0, [pc, #224]	@ (801abcc <udp_bind+0x108>)
 801aaec:	f003 fc3a 	bl	801e364 <iprintf>
 801aaf0:	f06f 030f 	mvn.w	r3, #15
 801aaf4:	e060      	b.n	801abb8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801aafa:	4b35      	ldr	r3, [pc, #212]	@ (801abd0 <udp_bind+0x10c>)
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	617b      	str	r3, [r7, #20]
 801ab00:	e009      	b.n	801ab16 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ab02:	68fa      	ldr	r2, [r7, #12]
 801ab04:	697b      	ldr	r3, [r7, #20]
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d102      	bne.n	801ab10 <udp_bind+0x4c>
      rebind = 1;
 801ab0a:	2301      	movs	r3, #1
 801ab0c:	74fb      	strb	r3, [r7, #19]
      break;
 801ab0e:	e005      	b.n	801ab1c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ab10:	697b      	ldr	r3, [r7, #20]
 801ab12:	68db      	ldr	r3, [r3, #12]
 801ab14:	617b      	str	r3, [r7, #20]
 801ab16:	697b      	ldr	r3, [r7, #20]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d1f2      	bne.n	801ab02 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ab1c:	88fb      	ldrh	r3, [r7, #6]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d109      	bne.n	801ab36 <udp_bind+0x72>
    port = udp_new_port();
 801ab22:	f7ff fc35 	bl	801a390 <udp_new_port>
 801ab26:	4603      	mov	r3, r0
 801ab28:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ab2a:	88fb      	ldrh	r3, [r7, #6]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d12c      	bne.n	801ab8a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ab30:	f06f 0307 	mvn.w	r3, #7
 801ab34:	e040      	b.n	801abb8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ab36:	4b26      	ldr	r3, [pc, #152]	@ (801abd0 <udp_bind+0x10c>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	617b      	str	r3, [r7, #20]
 801ab3c:	e022      	b.n	801ab84 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ab3e:	68fa      	ldr	r2, [r7, #12]
 801ab40:	697b      	ldr	r3, [r7, #20]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d01b      	beq.n	801ab7e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	8a5b      	ldrh	r3, [r3, #18]
 801ab4a:	88fa      	ldrh	r2, [r7, #6]
 801ab4c:	429a      	cmp	r2, r3
 801ab4e:	d116      	bne.n	801ab7e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ab50:	697b      	ldr	r3, [r7, #20]
 801ab52:	681a      	ldr	r2, [r3, #0]
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	d00d      	beq.n	801ab78 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ab5c:	68bb      	ldr	r3, [r7, #8]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d00a      	beq.n	801ab78 <udp_bind+0xb4>
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d006      	beq.n	801ab78 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ab6a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d003      	beq.n	801ab78 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ab70:	697b      	ldr	r3, [r7, #20]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d102      	bne.n	801ab7e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ab78:	f06f 0307 	mvn.w	r3, #7
 801ab7c:	e01c      	b.n	801abb8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ab7e:	697b      	ldr	r3, [r7, #20]
 801ab80:	68db      	ldr	r3, [r3, #12]
 801ab82:	617b      	str	r3, [r7, #20]
 801ab84:	697b      	ldr	r3, [r7, #20]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d1d9      	bne.n	801ab3e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d002      	beq.n	801ab96 <udp_bind+0xd2>
 801ab90:	68bb      	ldr	r3, [r7, #8]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	e000      	b.n	801ab98 <udp_bind+0xd4>
 801ab96:	2300      	movs	r3, #0
 801ab98:	68fa      	ldr	r2, [r7, #12]
 801ab9a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	88fa      	ldrh	r2, [r7, #6]
 801aba0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801aba2:	7cfb      	ldrb	r3, [r7, #19]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d106      	bne.n	801abb6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801aba8:	4b09      	ldr	r3, [pc, #36]	@ (801abd0 <udp_bind+0x10c>)
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801abb0:	4a07      	ldr	r2, [pc, #28]	@ (801abd0 <udp_bind+0x10c>)
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801abb6:	2300      	movs	r3, #0
}
 801abb8:	4618      	mov	r0, r3
 801abba:	3718      	adds	r7, #24
 801abbc:	46bd      	mov	sp, r7
 801abbe:	bd80      	pop	{r7, pc}
 801abc0:	080246c4 	.word	0x080246c4
 801abc4:	08023954 	.word	0x08023954
 801abc8:	08023c1c 	.word	0x08023c1c
 801abcc:	080239a8 	.word	0x080239a8
 801abd0:	2000fd18 	.word	0x2000fd18

0801abd4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b084      	sub	sp, #16
 801abd8:	af00      	add	r7, sp, #0
 801abda:	60f8      	str	r0, [r7, #12]
 801abdc:	60b9      	str	r1, [r7, #8]
 801abde:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d107      	bne.n	801abf6 <udp_recv+0x22>
 801abe6:	4b08      	ldr	r3, [pc, #32]	@ (801ac08 <udp_recv+0x34>)
 801abe8:	f240 428a 	movw	r2, #1162	@ 0x48a
 801abec:	4907      	ldr	r1, [pc, #28]	@ (801ac0c <udp_recv+0x38>)
 801abee:	4808      	ldr	r0, [pc, #32]	@ (801ac10 <udp_recv+0x3c>)
 801abf0:	f003 fbb8 	bl	801e364 <iprintf>
 801abf4:	e005      	b.n	801ac02 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801abf6:	68fb      	ldr	r3, [r7, #12]
 801abf8:	68ba      	ldr	r2, [r7, #8]
 801abfa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	687a      	ldr	r2, [r7, #4]
 801ac00:	61da      	str	r2, [r3, #28]
}
 801ac02:	3710      	adds	r7, #16
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd80      	pop	{r7, pc}
 801ac08:	08023954 	.word	0x08023954
 801ac0c:	08023c88 	.word	0x08023c88
 801ac10:	080239a8 	.word	0x080239a8

0801ac14 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b084      	sub	sp, #16
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d107      	bne.n	801ac32 <udp_remove+0x1e>
 801ac22:	4b19      	ldr	r3, [pc, #100]	@ (801ac88 <udp_remove+0x74>)
 801ac24:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801ac28:	4918      	ldr	r1, [pc, #96]	@ (801ac8c <udp_remove+0x78>)
 801ac2a:	4819      	ldr	r0, [pc, #100]	@ (801ac90 <udp_remove+0x7c>)
 801ac2c:	f003 fb9a 	bl	801e364 <iprintf>
 801ac30:	e026      	b.n	801ac80 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ac32:	4b18      	ldr	r3, [pc, #96]	@ (801ac94 <udp_remove+0x80>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	429a      	cmp	r2, r3
 801ac3a:	d105      	bne.n	801ac48 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ac3c:	4b15      	ldr	r3, [pc, #84]	@ (801ac94 <udp_remove+0x80>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	68db      	ldr	r3, [r3, #12]
 801ac42:	4a14      	ldr	r2, [pc, #80]	@ (801ac94 <udp_remove+0x80>)
 801ac44:	6013      	str	r3, [r2, #0]
 801ac46:	e017      	b.n	801ac78 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ac48:	4b12      	ldr	r3, [pc, #72]	@ (801ac94 <udp_remove+0x80>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	60fb      	str	r3, [r7, #12]
 801ac4e:	e010      	b.n	801ac72 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	68db      	ldr	r3, [r3, #12]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d009      	beq.n	801ac6c <udp_remove+0x58>
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	68db      	ldr	r3, [r3, #12]
 801ac5c:	687a      	ldr	r2, [r7, #4]
 801ac5e:	429a      	cmp	r2, r3
 801ac60:	d104      	bne.n	801ac6c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	68da      	ldr	r2, [r3, #12]
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	60da      	str	r2, [r3, #12]
        break;
 801ac6a:	e005      	b.n	801ac78 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	68db      	ldr	r3, [r3, #12]
 801ac70:	60fb      	str	r3, [r7, #12]
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d1eb      	bne.n	801ac50 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ac78:	6879      	ldr	r1, [r7, #4]
 801ac7a:	2000      	movs	r0, #0
 801ac7c:	f7f8 f87a 	bl	8012d74 <memp_free>
}
 801ac80:	3710      	adds	r7, #16
 801ac82:	46bd      	mov	sp, r7
 801ac84:	bd80      	pop	{r7, pc}
 801ac86:	bf00      	nop
 801ac88:	08023954 	.word	0x08023954
 801ac8c:	08023ca0 	.word	0x08023ca0
 801ac90:	080239a8 	.word	0x080239a8
 801ac94:	2000fd18 	.word	0x2000fd18

0801ac98 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ac98:	b580      	push	{r7, lr}
 801ac9a:	b082      	sub	sp, #8
 801ac9c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ac9e:	2000      	movs	r0, #0
 801aca0:	f7f7 fff2 	bl	8012c88 <memp_malloc>
 801aca4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d007      	beq.n	801acbc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801acac:	2220      	movs	r2, #32
 801acae:	2100      	movs	r1, #0
 801acb0:	6878      	ldr	r0, [r7, #4]
 801acb2:	f003 fce9 	bl	801e688 <memset>
    pcb->ttl = UDP_TTL;
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	22ff      	movs	r2, #255	@ 0xff
 801acba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801acbc:	687b      	ldr	r3, [r7, #4]
}
 801acbe:	4618      	mov	r0, r3
 801acc0:	3708      	adds	r7, #8
 801acc2:	46bd      	mov	sp, r7
 801acc4:	bd80      	pop	{r7, pc}

0801acc6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801acc6:	b580      	push	{r7, lr}
 801acc8:	b084      	sub	sp, #16
 801acca:	af00      	add	r7, sp, #0
 801accc:	4603      	mov	r3, r0
 801acce:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801acd0:	f7ff ffe2 	bl	801ac98 <udp_new>
 801acd4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801acd6:	68fb      	ldr	r3, [r7, #12]
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3710      	adds	r7, #16
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}

0801ace0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ace0:	b480      	push	{r7}
 801ace2:	b085      	sub	sp, #20
 801ace4:	af00      	add	r7, sp, #0
 801ace6:	6078      	str	r0, [r7, #4]
 801ace8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d01e      	beq.n	801ad2e <udp_netif_ip_addr_changed+0x4e>
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d01a      	beq.n	801ad2e <udp_netif_ip_addr_changed+0x4e>
 801acf8:	683b      	ldr	r3, [r7, #0]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d017      	beq.n	801ad2e <udp_netif_ip_addr_changed+0x4e>
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d013      	beq.n	801ad2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ad06:	4b0d      	ldr	r3, [pc, #52]	@ (801ad3c <udp_netif_ip_addr_changed+0x5c>)
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	60fb      	str	r3, [r7, #12]
 801ad0c:	e00c      	b.n	801ad28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	681a      	ldr	r2, [r3, #0]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d103      	bne.n	801ad22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	681a      	ldr	r2, [r3, #0]
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	68db      	ldr	r3, [r3, #12]
 801ad26:	60fb      	str	r3, [r7, #12]
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d1ef      	bne.n	801ad0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ad2e:	bf00      	nop
 801ad30:	3714      	adds	r7, #20
 801ad32:	46bd      	mov	sp, r7
 801ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad38:	4770      	bx	lr
 801ad3a:	bf00      	nop
 801ad3c:	2000fd18 	.word	0x2000fd18

0801ad40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b082      	sub	sp, #8
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801ad48:	4915      	ldr	r1, [pc, #84]	@ (801ada0 <etharp_free_entry+0x60>)
 801ad4a:	687a      	ldr	r2, [r7, #4]
 801ad4c:	4613      	mov	r3, r2
 801ad4e:	005b      	lsls	r3, r3, #1
 801ad50:	4413      	add	r3, r2
 801ad52:	00db      	lsls	r3, r3, #3
 801ad54:	440b      	add	r3, r1
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d013      	beq.n	801ad84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801ad5c:	4910      	ldr	r1, [pc, #64]	@ (801ada0 <etharp_free_entry+0x60>)
 801ad5e:	687a      	ldr	r2, [r7, #4]
 801ad60:	4613      	mov	r3, r2
 801ad62:	005b      	lsls	r3, r3, #1
 801ad64:	4413      	add	r3, r2
 801ad66:	00db      	lsls	r3, r3, #3
 801ad68:	440b      	add	r3, r1
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f7f8 fea5 	bl	8013abc <pbuf_free>
    arp_table[i].q = NULL;
 801ad72:	490b      	ldr	r1, [pc, #44]	@ (801ada0 <etharp_free_entry+0x60>)
 801ad74:	687a      	ldr	r2, [r7, #4]
 801ad76:	4613      	mov	r3, r2
 801ad78:	005b      	lsls	r3, r3, #1
 801ad7a:	4413      	add	r3, r2
 801ad7c:	00db      	lsls	r3, r3, #3
 801ad7e:	440b      	add	r3, r1
 801ad80:	2200      	movs	r2, #0
 801ad82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ad84:	4906      	ldr	r1, [pc, #24]	@ (801ada0 <etharp_free_entry+0x60>)
 801ad86:	687a      	ldr	r2, [r7, #4]
 801ad88:	4613      	mov	r3, r2
 801ad8a:	005b      	lsls	r3, r3, #1
 801ad8c:	4413      	add	r3, r2
 801ad8e:	00db      	lsls	r3, r3, #3
 801ad90:	440b      	add	r3, r1
 801ad92:	3314      	adds	r3, #20
 801ad94:	2200      	movs	r2, #0
 801ad96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801ad98:	bf00      	nop
 801ad9a:	3708      	adds	r7, #8
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}
 801ada0:	2000fd1c 	.word	0x2000fd1c

0801ada4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ada4:	b580      	push	{r7, lr}
 801ada6:	b082      	sub	sp, #8
 801ada8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801adaa:	2300      	movs	r3, #0
 801adac:	607b      	str	r3, [r7, #4]
 801adae:	e096      	b.n	801aede <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801adb0:	494f      	ldr	r1, [pc, #316]	@ (801aef0 <etharp_tmr+0x14c>)
 801adb2:	687a      	ldr	r2, [r7, #4]
 801adb4:	4613      	mov	r3, r2
 801adb6:	005b      	lsls	r3, r3, #1
 801adb8:	4413      	add	r3, r2
 801adba:	00db      	lsls	r3, r3, #3
 801adbc:	440b      	add	r3, r1
 801adbe:	3314      	adds	r3, #20
 801adc0:	781b      	ldrb	r3, [r3, #0]
 801adc2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801adc4:	78fb      	ldrb	r3, [r7, #3]
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	f000 8086 	beq.w	801aed8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801adcc:	4948      	ldr	r1, [pc, #288]	@ (801aef0 <etharp_tmr+0x14c>)
 801adce:	687a      	ldr	r2, [r7, #4]
 801add0:	4613      	mov	r3, r2
 801add2:	005b      	lsls	r3, r3, #1
 801add4:	4413      	add	r3, r2
 801add6:	00db      	lsls	r3, r3, #3
 801add8:	440b      	add	r3, r1
 801adda:	3312      	adds	r3, #18
 801addc:	881b      	ldrh	r3, [r3, #0]
 801adde:	3301      	adds	r3, #1
 801ade0:	b298      	uxth	r0, r3
 801ade2:	4943      	ldr	r1, [pc, #268]	@ (801aef0 <etharp_tmr+0x14c>)
 801ade4:	687a      	ldr	r2, [r7, #4]
 801ade6:	4613      	mov	r3, r2
 801ade8:	005b      	lsls	r3, r3, #1
 801adea:	4413      	add	r3, r2
 801adec:	00db      	lsls	r3, r3, #3
 801adee:	440b      	add	r3, r1
 801adf0:	3312      	adds	r3, #18
 801adf2:	4602      	mov	r2, r0
 801adf4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801adf6:	493e      	ldr	r1, [pc, #248]	@ (801aef0 <etharp_tmr+0x14c>)
 801adf8:	687a      	ldr	r2, [r7, #4]
 801adfa:	4613      	mov	r3, r2
 801adfc:	005b      	lsls	r3, r3, #1
 801adfe:	4413      	add	r3, r2
 801ae00:	00db      	lsls	r3, r3, #3
 801ae02:	440b      	add	r3, r1
 801ae04:	3312      	adds	r3, #18
 801ae06:	881b      	ldrh	r3, [r3, #0]
 801ae08:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801ae0c:	d215      	bcs.n	801ae3a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ae0e:	4938      	ldr	r1, [pc, #224]	@ (801aef0 <etharp_tmr+0x14c>)
 801ae10:	687a      	ldr	r2, [r7, #4]
 801ae12:	4613      	mov	r3, r2
 801ae14:	005b      	lsls	r3, r3, #1
 801ae16:	4413      	add	r3, r2
 801ae18:	00db      	lsls	r3, r3, #3
 801ae1a:	440b      	add	r3, r1
 801ae1c:	3314      	adds	r3, #20
 801ae1e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d10e      	bne.n	801ae42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ae24:	4932      	ldr	r1, [pc, #200]	@ (801aef0 <etharp_tmr+0x14c>)
 801ae26:	687a      	ldr	r2, [r7, #4]
 801ae28:	4613      	mov	r3, r2
 801ae2a:	005b      	lsls	r3, r3, #1
 801ae2c:	4413      	add	r3, r2
 801ae2e:	00db      	lsls	r3, r3, #3
 801ae30:	440b      	add	r3, r1
 801ae32:	3312      	adds	r3, #18
 801ae34:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ae36:	2b04      	cmp	r3, #4
 801ae38:	d903      	bls.n	801ae42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f7ff ff80 	bl	801ad40 <etharp_free_entry>
 801ae40:	e04a      	b.n	801aed8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ae42:	492b      	ldr	r1, [pc, #172]	@ (801aef0 <etharp_tmr+0x14c>)
 801ae44:	687a      	ldr	r2, [r7, #4]
 801ae46:	4613      	mov	r3, r2
 801ae48:	005b      	lsls	r3, r3, #1
 801ae4a:	4413      	add	r3, r2
 801ae4c:	00db      	lsls	r3, r3, #3
 801ae4e:	440b      	add	r3, r1
 801ae50:	3314      	adds	r3, #20
 801ae52:	781b      	ldrb	r3, [r3, #0]
 801ae54:	2b03      	cmp	r3, #3
 801ae56:	d10a      	bne.n	801ae6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ae58:	4925      	ldr	r1, [pc, #148]	@ (801aef0 <etharp_tmr+0x14c>)
 801ae5a:	687a      	ldr	r2, [r7, #4]
 801ae5c:	4613      	mov	r3, r2
 801ae5e:	005b      	lsls	r3, r3, #1
 801ae60:	4413      	add	r3, r2
 801ae62:	00db      	lsls	r3, r3, #3
 801ae64:	440b      	add	r3, r1
 801ae66:	3314      	adds	r3, #20
 801ae68:	2204      	movs	r2, #4
 801ae6a:	701a      	strb	r2, [r3, #0]
 801ae6c:	e034      	b.n	801aed8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ae6e:	4920      	ldr	r1, [pc, #128]	@ (801aef0 <etharp_tmr+0x14c>)
 801ae70:	687a      	ldr	r2, [r7, #4]
 801ae72:	4613      	mov	r3, r2
 801ae74:	005b      	lsls	r3, r3, #1
 801ae76:	4413      	add	r3, r2
 801ae78:	00db      	lsls	r3, r3, #3
 801ae7a:	440b      	add	r3, r1
 801ae7c:	3314      	adds	r3, #20
 801ae7e:	781b      	ldrb	r3, [r3, #0]
 801ae80:	2b04      	cmp	r3, #4
 801ae82:	d10a      	bne.n	801ae9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ae84:	491a      	ldr	r1, [pc, #104]	@ (801aef0 <etharp_tmr+0x14c>)
 801ae86:	687a      	ldr	r2, [r7, #4]
 801ae88:	4613      	mov	r3, r2
 801ae8a:	005b      	lsls	r3, r3, #1
 801ae8c:	4413      	add	r3, r2
 801ae8e:	00db      	lsls	r3, r3, #3
 801ae90:	440b      	add	r3, r1
 801ae92:	3314      	adds	r3, #20
 801ae94:	2202      	movs	r2, #2
 801ae96:	701a      	strb	r2, [r3, #0]
 801ae98:	e01e      	b.n	801aed8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ae9a:	4915      	ldr	r1, [pc, #84]	@ (801aef0 <etharp_tmr+0x14c>)
 801ae9c:	687a      	ldr	r2, [r7, #4]
 801ae9e:	4613      	mov	r3, r2
 801aea0:	005b      	lsls	r3, r3, #1
 801aea2:	4413      	add	r3, r2
 801aea4:	00db      	lsls	r3, r3, #3
 801aea6:	440b      	add	r3, r1
 801aea8:	3314      	adds	r3, #20
 801aeaa:	781b      	ldrb	r3, [r3, #0]
 801aeac:	2b01      	cmp	r3, #1
 801aeae:	d113      	bne.n	801aed8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801aeb0:	490f      	ldr	r1, [pc, #60]	@ (801aef0 <etharp_tmr+0x14c>)
 801aeb2:	687a      	ldr	r2, [r7, #4]
 801aeb4:	4613      	mov	r3, r2
 801aeb6:	005b      	lsls	r3, r3, #1
 801aeb8:	4413      	add	r3, r2
 801aeba:	00db      	lsls	r3, r3, #3
 801aebc:	440b      	add	r3, r1
 801aebe:	3308      	adds	r3, #8
 801aec0:	6818      	ldr	r0, [r3, #0]
 801aec2:	687a      	ldr	r2, [r7, #4]
 801aec4:	4613      	mov	r3, r2
 801aec6:	005b      	lsls	r3, r3, #1
 801aec8:	4413      	add	r3, r2
 801aeca:	00db      	lsls	r3, r3, #3
 801aecc:	4a08      	ldr	r2, [pc, #32]	@ (801aef0 <etharp_tmr+0x14c>)
 801aece:	4413      	add	r3, r2
 801aed0:	3304      	adds	r3, #4
 801aed2:	4619      	mov	r1, r3
 801aed4:	f000 fe6e 	bl	801bbb4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	3301      	adds	r3, #1
 801aedc:	607b      	str	r3, [r7, #4]
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	2b09      	cmp	r3, #9
 801aee2:	f77f af65 	ble.w	801adb0 <etharp_tmr+0xc>
      }
    }
  }
}
 801aee6:	bf00      	nop
 801aee8:	bf00      	nop
 801aeea:	3708      	adds	r7, #8
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}
 801aef0:	2000fd1c 	.word	0x2000fd1c

0801aef4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b08a      	sub	sp, #40	@ 0x28
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	60f8      	str	r0, [r7, #12]
 801aefc:	460b      	mov	r3, r1
 801aefe:	607a      	str	r2, [r7, #4]
 801af00:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801af02:	230a      	movs	r3, #10
 801af04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801af06:	230a      	movs	r3, #10
 801af08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801af0a:	230a      	movs	r3, #10
 801af0c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801af0e:	2300      	movs	r3, #0
 801af10:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801af12:	230a      	movs	r3, #10
 801af14:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801af16:	2300      	movs	r3, #0
 801af18:	83bb      	strh	r3, [r7, #28]
 801af1a:	2300      	movs	r3, #0
 801af1c:	837b      	strh	r3, [r7, #26]
 801af1e:	2300      	movs	r3, #0
 801af20:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801af22:	2300      	movs	r3, #0
 801af24:	843b      	strh	r3, [r7, #32]
 801af26:	e0ae      	b.n	801b086 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801af28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af2c:	49a6      	ldr	r1, [pc, #664]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801af2e:	4613      	mov	r3, r2
 801af30:	005b      	lsls	r3, r3, #1
 801af32:	4413      	add	r3, r2
 801af34:	00db      	lsls	r3, r3, #3
 801af36:	440b      	add	r3, r1
 801af38:	3314      	adds	r3, #20
 801af3a:	781b      	ldrb	r3, [r3, #0]
 801af3c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801af3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801af42:	2b0a      	cmp	r3, #10
 801af44:	d105      	bne.n	801af52 <etharp_find_entry+0x5e>
 801af46:	7dfb      	ldrb	r3, [r7, #23]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d102      	bne.n	801af52 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801af4c:	8c3b      	ldrh	r3, [r7, #32]
 801af4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 801af50:	e095      	b.n	801b07e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801af52:	7dfb      	ldrb	r3, [r7, #23]
 801af54:	2b00      	cmp	r3, #0
 801af56:	f000 8092 	beq.w	801b07e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801af5a:	7dfb      	ldrb	r3, [r7, #23]
 801af5c:	2b01      	cmp	r3, #1
 801af5e:	d009      	beq.n	801af74 <etharp_find_entry+0x80>
 801af60:	7dfb      	ldrb	r3, [r7, #23]
 801af62:	2b01      	cmp	r3, #1
 801af64:	d806      	bhi.n	801af74 <etharp_find_entry+0x80>
 801af66:	4b99      	ldr	r3, [pc, #612]	@ (801b1cc <etharp_find_entry+0x2d8>)
 801af68:	f240 1223 	movw	r2, #291	@ 0x123
 801af6c:	4998      	ldr	r1, [pc, #608]	@ (801b1d0 <etharp_find_entry+0x2dc>)
 801af6e:	4899      	ldr	r0, [pc, #612]	@ (801b1d4 <etharp_find_entry+0x2e0>)
 801af70:	f003 f9f8 	bl	801e364 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d020      	beq.n	801afbc <etharp_find_entry+0xc8>
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	6819      	ldr	r1, [r3, #0]
 801af7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af82:	4891      	ldr	r0, [pc, #580]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801af84:	4613      	mov	r3, r2
 801af86:	005b      	lsls	r3, r3, #1
 801af88:	4413      	add	r3, r2
 801af8a:	00db      	lsls	r3, r3, #3
 801af8c:	4403      	add	r3, r0
 801af8e:	3304      	adds	r3, #4
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	4299      	cmp	r1, r3
 801af94:	d112      	bne.n	801afbc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d00c      	beq.n	801afb6 <etharp_find_entry+0xc2>
 801af9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afa0:	4989      	ldr	r1, [pc, #548]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801afa2:	4613      	mov	r3, r2
 801afa4:	005b      	lsls	r3, r3, #1
 801afa6:	4413      	add	r3, r2
 801afa8:	00db      	lsls	r3, r3, #3
 801afaa:	440b      	add	r3, r1
 801afac:	3308      	adds	r3, #8
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	687a      	ldr	r2, [r7, #4]
 801afb2:	429a      	cmp	r2, r3
 801afb4:	d102      	bne.n	801afbc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801afb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801afba:	e100      	b.n	801b1be <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801afbc:	7dfb      	ldrb	r3, [r7, #23]
 801afbe:	2b01      	cmp	r3, #1
 801afc0:	d140      	bne.n	801b044 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801afc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afc6:	4980      	ldr	r1, [pc, #512]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801afc8:	4613      	mov	r3, r2
 801afca:	005b      	lsls	r3, r3, #1
 801afcc:	4413      	add	r3, r2
 801afce:	00db      	lsls	r3, r3, #3
 801afd0:	440b      	add	r3, r1
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d01a      	beq.n	801b00e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801afd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afdc:	497a      	ldr	r1, [pc, #488]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801afde:	4613      	mov	r3, r2
 801afe0:	005b      	lsls	r3, r3, #1
 801afe2:	4413      	add	r3, r2
 801afe4:	00db      	lsls	r3, r3, #3
 801afe6:	440b      	add	r3, r1
 801afe8:	3312      	adds	r3, #18
 801afea:	881b      	ldrh	r3, [r3, #0]
 801afec:	8bba      	ldrh	r2, [r7, #28]
 801afee:	429a      	cmp	r2, r3
 801aff0:	d845      	bhi.n	801b07e <etharp_find_entry+0x18a>
            old_queue = i;
 801aff2:	8c3b      	ldrh	r3, [r7, #32]
 801aff4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801aff6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801affa:	4973      	ldr	r1, [pc, #460]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801affc:	4613      	mov	r3, r2
 801affe:	005b      	lsls	r3, r3, #1
 801b000:	4413      	add	r3, r2
 801b002:	00db      	lsls	r3, r3, #3
 801b004:	440b      	add	r3, r1
 801b006:	3312      	adds	r3, #18
 801b008:	881b      	ldrh	r3, [r3, #0]
 801b00a:	83bb      	strh	r3, [r7, #28]
 801b00c:	e037      	b.n	801b07e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b00e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b012:	496d      	ldr	r1, [pc, #436]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b014:	4613      	mov	r3, r2
 801b016:	005b      	lsls	r3, r3, #1
 801b018:	4413      	add	r3, r2
 801b01a:	00db      	lsls	r3, r3, #3
 801b01c:	440b      	add	r3, r1
 801b01e:	3312      	adds	r3, #18
 801b020:	881b      	ldrh	r3, [r3, #0]
 801b022:	8b7a      	ldrh	r2, [r7, #26]
 801b024:	429a      	cmp	r2, r3
 801b026:	d82a      	bhi.n	801b07e <etharp_find_entry+0x18a>
            old_pending = i;
 801b028:	8c3b      	ldrh	r3, [r7, #32]
 801b02a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801b02c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b030:	4965      	ldr	r1, [pc, #404]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b032:	4613      	mov	r3, r2
 801b034:	005b      	lsls	r3, r3, #1
 801b036:	4413      	add	r3, r2
 801b038:	00db      	lsls	r3, r3, #3
 801b03a:	440b      	add	r3, r1
 801b03c:	3312      	adds	r3, #18
 801b03e:	881b      	ldrh	r3, [r3, #0]
 801b040:	837b      	strh	r3, [r7, #26]
 801b042:	e01c      	b.n	801b07e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b044:	7dfb      	ldrb	r3, [r7, #23]
 801b046:	2b01      	cmp	r3, #1
 801b048:	d919      	bls.n	801b07e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b04a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b04e:	495e      	ldr	r1, [pc, #376]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b050:	4613      	mov	r3, r2
 801b052:	005b      	lsls	r3, r3, #1
 801b054:	4413      	add	r3, r2
 801b056:	00db      	lsls	r3, r3, #3
 801b058:	440b      	add	r3, r1
 801b05a:	3312      	adds	r3, #18
 801b05c:	881b      	ldrh	r3, [r3, #0]
 801b05e:	8b3a      	ldrh	r2, [r7, #24]
 801b060:	429a      	cmp	r2, r3
 801b062:	d80c      	bhi.n	801b07e <etharp_find_entry+0x18a>
            old_stable = i;
 801b064:	8c3b      	ldrh	r3, [r7, #32]
 801b066:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801b068:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b06c:	4956      	ldr	r1, [pc, #344]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b06e:	4613      	mov	r3, r2
 801b070:	005b      	lsls	r3, r3, #1
 801b072:	4413      	add	r3, r2
 801b074:	00db      	lsls	r3, r3, #3
 801b076:	440b      	add	r3, r1
 801b078:	3312      	adds	r3, #18
 801b07a:	881b      	ldrh	r3, [r3, #0]
 801b07c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b07e:	8c3b      	ldrh	r3, [r7, #32]
 801b080:	3301      	adds	r3, #1
 801b082:	b29b      	uxth	r3, r3
 801b084:	843b      	strh	r3, [r7, #32]
 801b086:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b08a:	2b09      	cmp	r3, #9
 801b08c:	f77f af4c 	ble.w	801af28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b090:	7afb      	ldrb	r3, [r7, #11]
 801b092:	f003 0302 	and.w	r3, r3, #2
 801b096:	2b00      	cmp	r3, #0
 801b098:	d108      	bne.n	801b0ac <etharp_find_entry+0x1b8>
 801b09a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b09e:	2b0a      	cmp	r3, #10
 801b0a0:	d107      	bne.n	801b0b2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b0a2:	7afb      	ldrb	r3, [r7, #11]
 801b0a4:	f003 0301 	and.w	r3, r3, #1
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d102      	bne.n	801b0b2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b0ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b0b0:	e085      	b.n	801b1be <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b0b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b0b6:	2b09      	cmp	r3, #9
 801b0b8:	dc02      	bgt.n	801b0c0 <etharp_find_entry+0x1cc>
    i = empty;
 801b0ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0bc:	843b      	strh	r3, [r7, #32]
 801b0be:	e039      	b.n	801b134 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b0c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801b0c4:	2b09      	cmp	r3, #9
 801b0c6:	dc14      	bgt.n	801b0f2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b0c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b0ca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b0cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b0d0:	493d      	ldr	r1, [pc, #244]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b0d2:	4613      	mov	r3, r2
 801b0d4:	005b      	lsls	r3, r3, #1
 801b0d6:	4413      	add	r3, r2
 801b0d8:	00db      	lsls	r3, r3, #3
 801b0da:	440b      	add	r3, r1
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d018      	beq.n	801b114 <etharp_find_entry+0x220>
 801b0e2:	4b3a      	ldr	r3, [pc, #232]	@ (801b1cc <etharp_find_entry+0x2d8>)
 801b0e4:	f240 126d 	movw	r2, #365	@ 0x16d
 801b0e8:	493b      	ldr	r1, [pc, #236]	@ (801b1d8 <etharp_find_entry+0x2e4>)
 801b0ea:	483a      	ldr	r0, [pc, #232]	@ (801b1d4 <etharp_find_entry+0x2e0>)
 801b0ec:	f003 f93a 	bl	801e364 <iprintf>
 801b0f0:	e010      	b.n	801b114 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b0f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b0f6:	2b09      	cmp	r3, #9
 801b0f8:	dc02      	bgt.n	801b100 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b0fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b0fc:	843b      	strh	r3, [r7, #32]
 801b0fe:	e009      	b.n	801b114 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b100:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b104:	2b09      	cmp	r3, #9
 801b106:	dc02      	bgt.n	801b10e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b108:	8bfb      	ldrh	r3, [r7, #30]
 801b10a:	843b      	strh	r3, [r7, #32]
 801b10c:	e002      	b.n	801b114 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b10e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b112:	e054      	b.n	801b1be <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b114:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b118:	2b09      	cmp	r3, #9
 801b11a:	dd06      	ble.n	801b12a <etharp_find_entry+0x236>
 801b11c:	4b2b      	ldr	r3, [pc, #172]	@ (801b1cc <etharp_find_entry+0x2d8>)
 801b11e:	f240 127f 	movw	r2, #383	@ 0x17f
 801b122:	492e      	ldr	r1, [pc, #184]	@ (801b1dc <etharp_find_entry+0x2e8>)
 801b124:	482b      	ldr	r0, [pc, #172]	@ (801b1d4 <etharp_find_entry+0x2e0>)
 801b126:	f003 f91d 	bl	801e364 <iprintf>
    etharp_free_entry(i);
 801b12a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b12e:	4618      	mov	r0, r3
 801b130:	f7ff fe06 	bl	801ad40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b134:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b138:	2b09      	cmp	r3, #9
 801b13a:	dd06      	ble.n	801b14a <etharp_find_entry+0x256>
 801b13c:	4b23      	ldr	r3, [pc, #140]	@ (801b1cc <etharp_find_entry+0x2d8>)
 801b13e:	f240 1283 	movw	r2, #387	@ 0x183
 801b142:	4926      	ldr	r1, [pc, #152]	@ (801b1dc <etharp_find_entry+0x2e8>)
 801b144:	4823      	ldr	r0, [pc, #140]	@ (801b1d4 <etharp_find_entry+0x2e0>)
 801b146:	f003 f90d 	bl	801e364 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b14a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b14e:	491e      	ldr	r1, [pc, #120]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b150:	4613      	mov	r3, r2
 801b152:	005b      	lsls	r3, r3, #1
 801b154:	4413      	add	r3, r2
 801b156:	00db      	lsls	r3, r3, #3
 801b158:	440b      	add	r3, r1
 801b15a:	3314      	adds	r3, #20
 801b15c:	781b      	ldrb	r3, [r3, #0]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d006      	beq.n	801b170 <etharp_find_entry+0x27c>
 801b162:	4b1a      	ldr	r3, [pc, #104]	@ (801b1cc <etharp_find_entry+0x2d8>)
 801b164:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801b168:	491d      	ldr	r1, [pc, #116]	@ (801b1e0 <etharp_find_entry+0x2ec>)
 801b16a:	481a      	ldr	r0, [pc, #104]	@ (801b1d4 <etharp_find_entry+0x2e0>)
 801b16c:	f003 f8fa 	bl	801e364 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d00b      	beq.n	801b18e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b176:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	6819      	ldr	r1, [r3, #0]
 801b17e:	4812      	ldr	r0, [pc, #72]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b180:	4613      	mov	r3, r2
 801b182:	005b      	lsls	r3, r3, #1
 801b184:	4413      	add	r3, r2
 801b186:	00db      	lsls	r3, r3, #3
 801b188:	4403      	add	r3, r0
 801b18a:	3304      	adds	r3, #4
 801b18c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b18e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b192:	490d      	ldr	r1, [pc, #52]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b194:	4613      	mov	r3, r2
 801b196:	005b      	lsls	r3, r3, #1
 801b198:	4413      	add	r3, r2
 801b19a:	00db      	lsls	r3, r3, #3
 801b19c:	440b      	add	r3, r1
 801b19e:	3312      	adds	r3, #18
 801b1a0:	2200      	movs	r2, #0
 801b1a2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b1a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b1a8:	4907      	ldr	r1, [pc, #28]	@ (801b1c8 <etharp_find_entry+0x2d4>)
 801b1aa:	4613      	mov	r3, r2
 801b1ac:	005b      	lsls	r3, r3, #1
 801b1ae:	4413      	add	r3, r2
 801b1b0:	00db      	lsls	r3, r3, #3
 801b1b2:	440b      	add	r3, r1
 801b1b4:	3308      	adds	r3, #8
 801b1b6:	687a      	ldr	r2, [r7, #4]
 801b1b8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b1ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b1be:	4618      	mov	r0, r3
 801b1c0:	3728      	adds	r7, #40	@ 0x28
 801b1c2:	46bd      	mov	sp, r7
 801b1c4:	bd80      	pop	{r7, pc}
 801b1c6:	bf00      	nop
 801b1c8:	2000fd1c 	.word	0x2000fd1c
 801b1cc:	08023cb8 	.word	0x08023cb8
 801b1d0:	08023cf0 	.word	0x08023cf0
 801b1d4:	08023d30 	.word	0x08023d30
 801b1d8:	08023d58 	.word	0x08023d58
 801b1dc:	08023d70 	.word	0x08023d70
 801b1e0:	08023d84 	.word	0x08023d84

0801b1e4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b088      	sub	sp, #32
 801b1e8:	af02      	add	r7, sp, #8
 801b1ea:	60f8      	str	r0, [r7, #12]
 801b1ec:	60b9      	str	r1, [r7, #8]
 801b1ee:	607a      	str	r2, [r7, #4]
 801b1f0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b1f8:	2b06      	cmp	r3, #6
 801b1fa:	d006      	beq.n	801b20a <etharp_update_arp_entry+0x26>
 801b1fc:	4b48      	ldr	r3, [pc, #288]	@ (801b320 <etharp_update_arp_entry+0x13c>)
 801b1fe:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801b202:	4948      	ldr	r1, [pc, #288]	@ (801b324 <etharp_update_arp_entry+0x140>)
 801b204:	4848      	ldr	r0, [pc, #288]	@ (801b328 <etharp_update_arp_entry+0x144>)
 801b206:	f003 f8ad 	bl	801e364 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b20a:	68bb      	ldr	r3, [r7, #8]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d012      	beq.n	801b236 <etharp_update_arp_entry+0x52>
 801b210:	68bb      	ldr	r3, [r7, #8]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	2b00      	cmp	r3, #0
 801b216:	d00e      	beq.n	801b236 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	68f9      	ldr	r1, [r7, #12]
 801b21e:	4618      	mov	r0, r3
 801b220:	f001 f8fe 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801b224:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b226:	2b00      	cmp	r3, #0
 801b228:	d105      	bne.n	801b236 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b232:	2be0      	cmp	r3, #224	@ 0xe0
 801b234:	d102      	bne.n	801b23c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b236:	f06f 030f 	mvn.w	r3, #15
 801b23a:	e06c      	b.n	801b316 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b23c:	78fb      	ldrb	r3, [r7, #3]
 801b23e:	68fa      	ldr	r2, [r7, #12]
 801b240:	4619      	mov	r1, r3
 801b242:	68b8      	ldr	r0, [r7, #8]
 801b244:	f7ff fe56 	bl	801aef4 <etharp_find_entry>
 801b248:	4603      	mov	r3, r0
 801b24a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b24c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b250:	2b00      	cmp	r3, #0
 801b252:	da02      	bge.n	801b25a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b254:	8afb      	ldrh	r3, [r7, #22]
 801b256:	b25b      	sxtb	r3, r3
 801b258:	e05d      	b.n	801b316 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b25a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b25e:	4933      	ldr	r1, [pc, #204]	@ (801b32c <etharp_update_arp_entry+0x148>)
 801b260:	4613      	mov	r3, r2
 801b262:	005b      	lsls	r3, r3, #1
 801b264:	4413      	add	r3, r2
 801b266:	00db      	lsls	r3, r3, #3
 801b268:	440b      	add	r3, r1
 801b26a:	3314      	adds	r3, #20
 801b26c:	2202      	movs	r2, #2
 801b26e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b270:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b274:	492d      	ldr	r1, [pc, #180]	@ (801b32c <etharp_update_arp_entry+0x148>)
 801b276:	4613      	mov	r3, r2
 801b278:	005b      	lsls	r3, r3, #1
 801b27a:	4413      	add	r3, r2
 801b27c:	00db      	lsls	r3, r3, #3
 801b27e:	440b      	add	r3, r1
 801b280:	3308      	adds	r3, #8
 801b282:	68fa      	ldr	r2, [r7, #12]
 801b284:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b286:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b28a:	4613      	mov	r3, r2
 801b28c:	005b      	lsls	r3, r3, #1
 801b28e:	4413      	add	r3, r2
 801b290:	00db      	lsls	r3, r3, #3
 801b292:	3308      	adds	r3, #8
 801b294:	4a25      	ldr	r2, [pc, #148]	@ (801b32c <etharp_update_arp_entry+0x148>)
 801b296:	4413      	add	r3, r2
 801b298:	3304      	adds	r3, #4
 801b29a:	2206      	movs	r2, #6
 801b29c:	6879      	ldr	r1, [r7, #4]
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f003 fac1 	bl	801e826 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b2a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b2a8:	4920      	ldr	r1, [pc, #128]	@ (801b32c <etharp_update_arp_entry+0x148>)
 801b2aa:	4613      	mov	r3, r2
 801b2ac:	005b      	lsls	r3, r3, #1
 801b2ae:	4413      	add	r3, r2
 801b2b0:	00db      	lsls	r3, r3, #3
 801b2b2:	440b      	add	r3, r1
 801b2b4:	3312      	adds	r3, #18
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b2ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b2be:	491b      	ldr	r1, [pc, #108]	@ (801b32c <etharp_update_arp_entry+0x148>)
 801b2c0:	4613      	mov	r3, r2
 801b2c2:	005b      	lsls	r3, r3, #1
 801b2c4:	4413      	add	r3, r2
 801b2c6:	00db      	lsls	r3, r3, #3
 801b2c8:	440b      	add	r3, r1
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d021      	beq.n	801b314 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b2d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b2d4:	4915      	ldr	r1, [pc, #84]	@ (801b32c <etharp_update_arp_entry+0x148>)
 801b2d6:	4613      	mov	r3, r2
 801b2d8:	005b      	lsls	r3, r3, #1
 801b2da:	4413      	add	r3, r2
 801b2dc:	00db      	lsls	r3, r3, #3
 801b2de:	440b      	add	r3, r1
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b2e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b2e8:	4910      	ldr	r1, [pc, #64]	@ (801b32c <etharp_update_arp_entry+0x148>)
 801b2ea:	4613      	mov	r3, r2
 801b2ec:	005b      	lsls	r3, r3, #1
 801b2ee:	4413      	add	r3, r2
 801b2f0:	00db      	lsls	r3, r3, #3
 801b2f2:	440b      	add	r3, r1
 801b2f4:	2200      	movs	r2, #0
 801b2f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b2fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b302:	9300      	str	r3, [sp, #0]
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	6939      	ldr	r1, [r7, #16]
 801b308:	68f8      	ldr	r0, [r7, #12]
 801b30a:	f002 f8d5 	bl	801d4b8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b30e:	6938      	ldr	r0, [r7, #16]
 801b310:	f7f8 fbd4 	bl	8013abc <pbuf_free>
  }
  return ERR_OK;
 801b314:	2300      	movs	r3, #0
}
 801b316:	4618      	mov	r0, r3
 801b318:	3718      	adds	r7, #24
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bd80      	pop	{r7, pc}
 801b31e:	bf00      	nop
 801b320:	08023cb8 	.word	0x08023cb8
 801b324:	08023db0 	.word	0x08023db0
 801b328:	08023d30 	.word	0x08023d30
 801b32c:	2000fd1c 	.word	0x2000fd1c

0801b330 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b084      	sub	sp, #16
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b338:	2300      	movs	r3, #0
 801b33a:	60fb      	str	r3, [r7, #12]
 801b33c:	e01e      	b.n	801b37c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b33e:	4913      	ldr	r1, [pc, #76]	@ (801b38c <etharp_cleanup_netif+0x5c>)
 801b340:	68fa      	ldr	r2, [r7, #12]
 801b342:	4613      	mov	r3, r2
 801b344:	005b      	lsls	r3, r3, #1
 801b346:	4413      	add	r3, r2
 801b348:	00db      	lsls	r3, r3, #3
 801b34a:	440b      	add	r3, r1
 801b34c:	3314      	adds	r3, #20
 801b34e:	781b      	ldrb	r3, [r3, #0]
 801b350:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b352:	7afb      	ldrb	r3, [r7, #11]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d00e      	beq.n	801b376 <etharp_cleanup_netif+0x46>
 801b358:	490c      	ldr	r1, [pc, #48]	@ (801b38c <etharp_cleanup_netif+0x5c>)
 801b35a:	68fa      	ldr	r2, [r7, #12]
 801b35c:	4613      	mov	r3, r2
 801b35e:	005b      	lsls	r3, r3, #1
 801b360:	4413      	add	r3, r2
 801b362:	00db      	lsls	r3, r3, #3
 801b364:	440b      	add	r3, r1
 801b366:	3308      	adds	r3, #8
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	687a      	ldr	r2, [r7, #4]
 801b36c:	429a      	cmp	r2, r3
 801b36e:	d102      	bne.n	801b376 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b370:	68f8      	ldr	r0, [r7, #12]
 801b372:	f7ff fce5 	bl	801ad40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	3301      	adds	r3, #1
 801b37a:	60fb      	str	r3, [r7, #12]
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	2b09      	cmp	r3, #9
 801b380:	dddd      	ble.n	801b33e <etharp_cleanup_netif+0xe>
    }
  }
}
 801b382:	bf00      	nop
 801b384:	bf00      	nop
 801b386:	3710      	adds	r7, #16
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd80      	pop	{r7, pc}
 801b38c:	2000fd1c 	.word	0x2000fd1c

0801b390 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b390:	b5b0      	push	{r4, r5, r7, lr}
 801b392:	b08a      	sub	sp, #40	@ 0x28
 801b394:	af04      	add	r7, sp, #16
 801b396:	6078      	str	r0, [r7, #4]
 801b398:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b39a:	683b      	ldr	r3, [r7, #0]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d107      	bne.n	801b3b0 <etharp_input+0x20>
 801b3a0:	4b3d      	ldr	r3, [pc, #244]	@ (801b498 <etharp_input+0x108>)
 801b3a2:	f240 228a 	movw	r2, #650	@ 0x28a
 801b3a6:	493d      	ldr	r1, [pc, #244]	@ (801b49c <etharp_input+0x10c>)
 801b3a8:	483d      	ldr	r0, [pc, #244]	@ (801b4a0 <etharp_input+0x110>)
 801b3aa:	f002 ffdb 	bl	801e364 <iprintf>
 801b3ae:	e06f      	b.n	801b490 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	685b      	ldr	r3, [r3, #4]
 801b3b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b3b6:	693b      	ldr	r3, [r7, #16]
 801b3b8:	881b      	ldrh	r3, [r3, #0]
 801b3ba:	b29b      	uxth	r3, r3
 801b3bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b3c0:	d10c      	bne.n	801b3dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b3c2:	693b      	ldr	r3, [r7, #16]
 801b3c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b3c6:	2b06      	cmp	r3, #6
 801b3c8:	d108      	bne.n	801b3dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b3ca:	693b      	ldr	r3, [r7, #16]
 801b3cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b3ce:	2b04      	cmp	r3, #4
 801b3d0:	d104      	bne.n	801b3dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b3d2:	693b      	ldr	r3, [r7, #16]
 801b3d4:	885b      	ldrh	r3, [r3, #2]
 801b3d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b3d8:	2b08      	cmp	r3, #8
 801b3da:	d003      	beq.n	801b3e4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b3dc:	6878      	ldr	r0, [r7, #4]
 801b3de:	f7f8 fb6d 	bl	8013abc <pbuf_free>
    return;
 801b3e2:	e055      	b.n	801b490 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b3e4:	693b      	ldr	r3, [r7, #16]
 801b3e6:	330e      	adds	r3, #14
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b3ec:	693b      	ldr	r3, [r7, #16]
 801b3ee:	3318      	adds	r3, #24
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b3f4:	683b      	ldr	r3, [r7, #0]
 801b3f6:	3304      	adds	r3, #4
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d102      	bne.n	801b404 <etharp_input+0x74>
    for_us = 0;
 801b3fe:	2300      	movs	r3, #0
 801b400:	75fb      	strb	r3, [r7, #23]
 801b402:	e009      	b.n	801b418 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b404:	68ba      	ldr	r2, [r7, #8]
 801b406:	683b      	ldr	r3, [r7, #0]
 801b408:	3304      	adds	r3, #4
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	429a      	cmp	r2, r3
 801b40e:	bf0c      	ite	eq
 801b410:	2301      	moveq	r3, #1
 801b412:	2300      	movne	r3, #0
 801b414:	b2db      	uxtb	r3, r3
 801b416:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b418:	693b      	ldr	r3, [r7, #16]
 801b41a:	f103 0208 	add.w	r2, r3, #8
 801b41e:	7dfb      	ldrb	r3, [r7, #23]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d001      	beq.n	801b428 <etharp_input+0x98>
 801b424:	2301      	movs	r3, #1
 801b426:	e000      	b.n	801b42a <etharp_input+0x9a>
 801b428:	2302      	movs	r3, #2
 801b42a:	f107 010c 	add.w	r1, r7, #12
 801b42e:	6838      	ldr	r0, [r7, #0]
 801b430:	f7ff fed8 	bl	801b1e4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b434:	693b      	ldr	r3, [r7, #16]
 801b436:	88db      	ldrh	r3, [r3, #6]
 801b438:	b29b      	uxth	r3, r3
 801b43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b43e:	d003      	beq.n	801b448 <etharp_input+0xb8>
 801b440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b444:	d01e      	beq.n	801b484 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b446:	e020      	b.n	801b48a <etharp_input+0xfa>
      if (for_us) {
 801b448:	7dfb      	ldrb	r3, [r7, #23]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d01c      	beq.n	801b488 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b44e:	683b      	ldr	r3, [r7, #0]
 801b450:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b454:	693b      	ldr	r3, [r7, #16]
 801b456:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b45a:	683b      	ldr	r3, [r7, #0]
 801b45c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b464:	693a      	ldr	r2, [r7, #16]
 801b466:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b468:	2102      	movs	r1, #2
 801b46a:	9103      	str	r1, [sp, #12]
 801b46c:	f107 010c 	add.w	r1, r7, #12
 801b470:	9102      	str	r1, [sp, #8]
 801b472:	9201      	str	r2, [sp, #4]
 801b474:	9300      	str	r3, [sp, #0]
 801b476:	462b      	mov	r3, r5
 801b478:	4622      	mov	r2, r4
 801b47a:	4601      	mov	r1, r0
 801b47c:	6838      	ldr	r0, [r7, #0]
 801b47e:	f000 faeb 	bl	801ba58 <etharp_raw>
      break;
 801b482:	e001      	b.n	801b488 <etharp_input+0xf8>
      break;
 801b484:	bf00      	nop
 801b486:	e000      	b.n	801b48a <etharp_input+0xfa>
      break;
 801b488:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b48a:	6878      	ldr	r0, [r7, #4]
 801b48c:	f7f8 fb16 	bl	8013abc <pbuf_free>
}
 801b490:	3718      	adds	r7, #24
 801b492:	46bd      	mov	sp, r7
 801b494:	bdb0      	pop	{r4, r5, r7, pc}
 801b496:	bf00      	nop
 801b498:	08023cb8 	.word	0x08023cb8
 801b49c:	08023e08 	.word	0x08023e08
 801b4a0:	08023d30 	.word	0x08023d30

0801b4a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b086      	sub	sp, #24
 801b4a8:	af02      	add	r7, sp, #8
 801b4aa:	60f8      	str	r0, [r7, #12]
 801b4ac:	60b9      	str	r1, [r7, #8]
 801b4ae:	4613      	mov	r3, r2
 801b4b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b4b2:	79fa      	ldrb	r2, [r7, #7]
 801b4b4:	4944      	ldr	r1, [pc, #272]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b4b6:	4613      	mov	r3, r2
 801b4b8:	005b      	lsls	r3, r3, #1
 801b4ba:	4413      	add	r3, r2
 801b4bc:	00db      	lsls	r3, r3, #3
 801b4be:	440b      	add	r3, r1
 801b4c0:	3314      	adds	r3, #20
 801b4c2:	781b      	ldrb	r3, [r3, #0]
 801b4c4:	2b01      	cmp	r3, #1
 801b4c6:	d806      	bhi.n	801b4d6 <etharp_output_to_arp_index+0x32>
 801b4c8:	4b40      	ldr	r3, [pc, #256]	@ (801b5cc <etharp_output_to_arp_index+0x128>)
 801b4ca:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b4ce:	4940      	ldr	r1, [pc, #256]	@ (801b5d0 <etharp_output_to_arp_index+0x12c>)
 801b4d0:	4840      	ldr	r0, [pc, #256]	@ (801b5d4 <etharp_output_to_arp_index+0x130>)
 801b4d2:	f002 ff47 	bl	801e364 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b4d6:	79fa      	ldrb	r2, [r7, #7]
 801b4d8:	493b      	ldr	r1, [pc, #236]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b4da:	4613      	mov	r3, r2
 801b4dc:	005b      	lsls	r3, r3, #1
 801b4de:	4413      	add	r3, r2
 801b4e0:	00db      	lsls	r3, r3, #3
 801b4e2:	440b      	add	r3, r1
 801b4e4:	3314      	adds	r3, #20
 801b4e6:	781b      	ldrb	r3, [r3, #0]
 801b4e8:	2b02      	cmp	r3, #2
 801b4ea:	d153      	bne.n	801b594 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b4ec:	79fa      	ldrb	r2, [r7, #7]
 801b4ee:	4936      	ldr	r1, [pc, #216]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b4f0:	4613      	mov	r3, r2
 801b4f2:	005b      	lsls	r3, r3, #1
 801b4f4:	4413      	add	r3, r2
 801b4f6:	00db      	lsls	r3, r3, #3
 801b4f8:	440b      	add	r3, r1
 801b4fa:	3312      	adds	r3, #18
 801b4fc:	881b      	ldrh	r3, [r3, #0]
 801b4fe:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b502:	d919      	bls.n	801b538 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b504:	79fa      	ldrb	r2, [r7, #7]
 801b506:	4613      	mov	r3, r2
 801b508:	005b      	lsls	r3, r3, #1
 801b50a:	4413      	add	r3, r2
 801b50c:	00db      	lsls	r3, r3, #3
 801b50e:	4a2e      	ldr	r2, [pc, #184]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b510:	4413      	add	r3, r2
 801b512:	3304      	adds	r3, #4
 801b514:	4619      	mov	r1, r3
 801b516:	68f8      	ldr	r0, [r7, #12]
 801b518:	f000 fb4c 	bl	801bbb4 <etharp_request>
 801b51c:	4603      	mov	r3, r0
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d138      	bne.n	801b594 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b522:	79fa      	ldrb	r2, [r7, #7]
 801b524:	4928      	ldr	r1, [pc, #160]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b526:	4613      	mov	r3, r2
 801b528:	005b      	lsls	r3, r3, #1
 801b52a:	4413      	add	r3, r2
 801b52c:	00db      	lsls	r3, r3, #3
 801b52e:	440b      	add	r3, r1
 801b530:	3314      	adds	r3, #20
 801b532:	2203      	movs	r2, #3
 801b534:	701a      	strb	r2, [r3, #0]
 801b536:	e02d      	b.n	801b594 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b538:	79fa      	ldrb	r2, [r7, #7]
 801b53a:	4923      	ldr	r1, [pc, #140]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b53c:	4613      	mov	r3, r2
 801b53e:	005b      	lsls	r3, r3, #1
 801b540:	4413      	add	r3, r2
 801b542:	00db      	lsls	r3, r3, #3
 801b544:	440b      	add	r3, r1
 801b546:	3312      	adds	r3, #18
 801b548:	881b      	ldrh	r3, [r3, #0]
 801b54a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b54e:	d321      	bcc.n	801b594 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b550:	79fa      	ldrb	r2, [r7, #7]
 801b552:	4613      	mov	r3, r2
 801b554:	005b      	lsls	r3, r3, #1
 801b556:	4413      	add	r3, r2
 801b558:	00db      	lsls	r3, r3, #3
 801b55a:	4a1b      	ldr	r2, [pc, #108]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b55c:	4413      	add	r3, r2
 801b55e:	1d19      	adds	r1, r3, #4
 801b560:	79fa      	ldrb	r2, [r7, #7]
 801b562:	4613      	mov	r3, r2
 801b564:	005b      	lsls	r3, r3, #1
 801b566:	4413      	add	r3, r2
 801b568:	00db      	lsls	r3, r3, #3
 801b56a:	3308      	adds	r3, #8
 801b56c:	4a16      	ldr	r2, [pc, #88]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b56e:	4413      	add	r3, r2
 801b570:	3304      	adds	r3, #4
 801b572:	461a      	mov	r2, r3
 801b574:	68f8      	ldr	r0, [r7, #12]
 801b576:	f000 fafb 	bl	801bb70 <etharp_request_dst>
 801b57a:	4603      	mov	r3, r0
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d109      	bne.n	801b594 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b580:	79fa      	ldrb	r2, [r7, #7]
 801b582:	4911      	ldr	r1, [pc, #68]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b584:	4613      	mov	r3, r2
 801b586:	005b      	lsls	r3, r3, #1
 801b588:	4413      	add	r3, r2
 801b58a:	00db      	lsls	r3, r3, #3
 801b58c:	440b      	add	r3, r1
 801b58e:	3314      	adds	r3, #20
 801b590:	2203      	movs	r2, #3
 801b592:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b59a:	79fa      	ldrb	r2, [r7, #7]
 801b59c:	4613      	mov	r3, r2
 801b59e:	005b      	lsls	r3, r3, #1
 801b5a0:	4413      	add	r3, r2
 801b5a2:	00db      	lsls	r3, r3, #3
 801b5a4:	3308      	adds	r3, #8
 801b5a6:	4a08      	ldr	r2, [pc, #32]	@ (801b5c8 <etharp_output_to_arp_index+0x124>)
 801b5a8:	4413      	add	r3, r2
 801b5aa:	3304      	adds	r3, #4
 801b5ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b5b0:	9200      	str	r2, [sp, #0]
 801b5b2:	460a      	mov	r2, r1
 801b5b4:	68b9      	ldr	r1, [r7, #8]
 801b5b6:	68f8      	ldr	r0, [r7, #12]
 801b5b8:	f001 ff7e 	bl	801d4b8 <ethernet_output>
 801b5bc:	4603      	mov	r3, r0
}
 801b5be:	4618      	mov	r0, r3
 801b5c0:	3710      	adds	r7, #16
 801b5c2:	46bd      	mov	sp, r7
 801b5c4:	bd80      	pop	{r7, pc}
 801b5c6:	bf00      	nop
 801b5c8:	2000fd1c 	.word	0x2000fd1c
 801b5cc:	08023cb8 	.word	0x08023cb8
 801b5d0:	08023e28 	.word	0x08023e28
 801b5d4:	08023d30 	.word	0x08023d30

0801b5d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b08a      	sub	sp, #40	@ 0x28
 801b5dc:	af02      	add	r7, sp, #8
 801b5de:	60f8      	str	r0, [r7, #12]
 801b5e0:	60b9      	str	r1, [r7, #8]
 801b5e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d106      	bne.n	801b5fc <etharp_output+0x24>
 801b5ee:	4b73      	ldr	r3, [pc, #460]	@ (801b7bc <etharp_output+0x1e4>)
 801b5f0:	f240 321e 	movw	r2, #798	@ 0x31e
 801b5f4:	4972      	ldr	r1, [pc, #456]	@ (801b7c0 <etharp_output+0x1e8>)
 801b5f6:	4873      	ldr	r0, [pc, #460]	@ (801b7c4 <etharp_output+0x1ec>)
 801b5f8:	f002 feb4 	bl	801e364 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d106      	bne.n	801b610 <etharp_output+0x38>
 801b602:	4b6e      	ldr	r3, [pc, #440]	@ (801b7bc <etharp_output+0x1e4>)
 801b604:	f240 321f 	movw	r2, #799	@ 0x31f
 801b608:	496f      	ldr	r1, [pc, #444]	@ (801b7c8 <etharp_output+0x1f0>)
 801b60a:	486e      	ldr	r0, [pc, #440]	@ (801b7c4 <etharp_output+0x1ec>)
 801b60c:	f002 feaa 	bl	801e364 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	2b00      	cmp	r3, #0
 801b614:	d106      	bne.n	801b624 <etharp_output+0x4c>
 801b616:	4b69      	ldr	r3, [pc, #420]	@ (801b7bc <etharp_output+0x1e4>)
 801b618:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b61c:	496b      	ldr	r1, [pc, #428]	@ (801b7cc <etharp_output+0x1f4>)
 801b61e:	4869      	ldr	r0, [pc, #420]	@ (801b7c4 <etharp_output+0x1ec>)
 801b620:	f002 fea0 	bl	801e364 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	68f9      	ldr	r1, [r7, #12]
 801b62a:	4618      	mov	r0, r3
 801b62c:	f000 fef8 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801b630:	4603      	mov	r3, r0
 801b632:	2b00      	cmp	r3, #0
 801b634:	d002      	beq.n	801b63c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b636:	4b66      	ldr	r3, [pc, #408]	@ (801b7d0 <etharp_output+0x1f8>)
 801b638:	61fb      	str	r3, [r7, #28]
 801b63a:	e0af      	b.n	801b79c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b644:	2be0      	cmp	r3, #224	@ 0xe0
 801b646:	d118      	bne.n	801b67a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b648:	2301      	movs	r3, #1
 801b64a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b64c:	2300      	movs	r3, #0
 801b64e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b650:	235e      	movs	r3, #94	@ 0x5e
 801b652:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	3301      	adds	r3, #1
 801b658:	781b      	ldrb	r3, [r3, #0]
 801b65a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	3302      	adds	r3, #2
 801b666:	781b      	ldrb	r3, [r3, #0]
 801b668:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	3303      	adds	r3, #3
 801b66e:	781b      	ldrb	r3, [r3, #0]
 801b670:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b672:	f107 0310 	add.w	r3, r7, #16
 801b676:	61fb      	str	r3, [r7, #28]
 801b678:	e090      	b.n	801b79c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	681a      	ldr	r2, [r3, #0]
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	3304      	adds	r3, #4
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	405a      	eors	r2, r3
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	3308      	adds	r3, #8
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	4013      	ands	r3, r2
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d012      	beq.n	801b6b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b698:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b69c:	4293      	cmp	r3, r2
 801b69e:	d00b      	beq.n	801b6b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	330c      	adds	r3, #12
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d003      	beq.n	801b6b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	330c      	adds	r3, #12
 801b6ae:	61bb      	str	r3, [r7, #24]
 801b6b0:	e002      	b.n	801b6b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b6b2:	f06f 0303 	mvn.w	r3, #3
 801b6b6:	e07d      	b.n	801b7b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b6b8:	4b46      	ldr	r3, [pc, #280]	@ (801b7d4 <etharp_output+0x1fc>)
 801b6ba:	781b      	ldrb	r3, [r3, #0]
 801b6bc:	4619      	mov	r1, r3
 801b6be:	4a46      	ldr	r2, [pc, #280]	@ (801b7d8 <etharp_output+0x200>)
 801b6c0:	460b      	mov	r3, r1
 801b6c2:	005b      	lsls	r3, r3, #1
 801b6c4:	440b      	add	r3, r1
 801b6c6:	00db      	lsls	r3, r3, #3
 801b6c8:	4413      	add	r3, r2
 801b6ca:	3314      	adds	r3, #20
 801b6cc:	781b      	ldrb	r3, [r3, #0]
 801b6ce:	2b01      	cmp	r3, #1
 801b6d0:	d925      	bls.n	801b71e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b6d2:	4b40      	ldr	r3, [pc, #256]	@ (801b7d4 <etharp_output+0x1fc>)
 801b6d4:	781b      	ldrb	r3, [r3, #0]
 801b6d6:	4619      	mov	r1, r3
 801b6d8:	4a3f      	ldr	r2, [pc, #252]	@ (801b7d8 <etharp_output+0x200>)
 801b6da:	460b      	mov	r3, r1
 801b6dc:	005b      	lsls	r3, r3, #1
 801b6de:	440b      	add	r3, r1
 801b6e0:	00db      	lsls	r3, r3, #3
 801b6e2:	4413      	add	r3, r2
 801b6e4:	3308      	adds	r3, #8
 801b6e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b6e8:	68fa      	ldr	r2, [r7, #12]
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	d117      	bne.n	801b71e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b6ee:	69bb      	ldr	r3, [r7, #24]
 801b6f0:	681a      	ldr	r2, [r3, #0]
 801b6f2:	4b38      	ldr	r3, [pc, #224]	@ (801b7d4 <etharp_output+0x1fc>)
 801b6f4:	781b      	ldrb	r3, [r3, #0]
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	4937      	ldr	r1, [pc, #220]	@ (801b7d8 <etharp_output+0x200>)
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	005b      	lsls	r3, r3, #1
 801b6fe:	4403      	add	r3, r0
 801b700:	00db      	lsls	r3, r3, #3
 801b702:	440b      	add	r3, r1
 801b704:	3304      	adds	r3, #4
 801b706:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b708:	429a      	cmp	r2, r3
 801b70a:	d108      	bne.n	801b71e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b70c:	4b31      	ldr	r3, [pc, #196]	@ (801b7d4 <etharp_output+0x1fc>)
 801b70e:	781b      	ldrb	r3, [r3, #0]
 801b710:	461a      	mov	r2, r3
 801b712:	68b9      	ldr	r1, [r7, #8]
 801b714:	68f8      	ldr	r0, [r7, #12]
 801b716:	f7ff fec5 	bl	801b4a4 <etharp_output_to_arp_index>
 801b71a:	4603      	mov	r3, r0
 801b71c:	e04a      	b.n	801b7b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b71e:	2300      	movs	r3, #0
 801b720:	75fb      	strb	r3, [r7, #23]
 801b722:	e031      	b.n	801b788 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b724:	7dfa      	ldrb	r2, [r7, #23]
 801b726:	492c      	ldr	r1, [pc, #176]	@ (801b7d8 <etharp_output+0x200>)
 801b728:	4613      	mov	r3, r2
 801b72a:	005b      	lsls	r3, r3, #1
 801b72c:	4413      	add	r3, r2
 801b72e:	00db      	lsls	r3, r3, #3
 801b730:	440b      	add	r3, r1
 801b732:	3314      	adds	r3, #20
 801b734:	781b      	ldrb	r3, [r3, #0]
 801b736:	2b01      	cmp	r3, #1
 801b738:	d923      	bls.n	801b782 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b73a:	7dfa      	ldrb	r2, [r7, #23]
 801b73c:	4926      	ldr	r1, [pc, #152]	@ (801b7d8 <etharp_output+0x200>)
 801b73e:	4613      	mov	r3, r2
 801b740:	005b      	lsls	r3, r3, #1
 801b742:	4413      	add	r3, r2
 801b744:	00db      	lsls	r3, r3, #3
 801b746:	440b      	add	r3, r1
 801b748:	3308      	adds	r3, #8
 801b74a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b74c:	68fa      	ldr	r2, [r7, #12]
 801b74e:	429a      	cmp	r2, r3
 801b750:	d117      	bne.n	801b782 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b752:	69bb      	ldr	r3, [r7, #24]
 801b754:	6819      	ldr	r1, [r3, #0]
 801b756:	7dfa      	ldrb	r2, [r7, #23]
 801b758:	481f      	ldr	r0, [pc, #124]	@ (801b7d8 <etharp_output+0x200>)
 801b75a:	4613      	mov	r3, r2
 801b75c:	005b      	lsls	r3, r3, #1
 801b75e:	4413      	add	r3, r2
 801b760:	00db      	lsls	r3, r3, #3
 801b762:	4403      	add	r3, r0
 801b764:	3304      	adds	r3, #4
 801b766:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b768:	4299      	cmp	r1, r3
 801b76a:	d10a      	bne.n	801b782 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b76c:	4a19      	ldr	r2, [pc, #100]	@ (801b7d4 <etharp_output+0x1fc>)
 801b76e:	7dfb      	ldrb	r3, [r7, #23]
 801b770:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b772:	7dfb      	ldrb	r3, [r7, #23]
 801b774:	461a      	mov	r2, r3
 801b776:	68b9      	ldr	r1, [r7, #8]
 801b778:	68f8      	ldr	r0, [r7, #12]
 801b77a:	f7ff fe93 	bl	801b4a4 <etharp_output_to_arp_index>
 801b77e:	4603      	mov	r3, r0
 801b780:	e018      	b.n	801b7b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b782:	7dfb      	ldrb	r3, [r7, #23]
 801b784:	3301      	adds	r3, #1
 801b786:	75fb      	strb	r3, [r7, #23]
 801b788:	7dfb      	ldrb	r3, [r7, #23]
 801b78a:	2b09      	cmp	r3, #9
 801b78c:	d9ca      	bls.n	801b724 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b78e:	68ba      	ldr	r2, [r7, #8]
 801b790:	69b9      	ldr	r1, [r7, #24]
 801b792:	68f8      	ldr	r0, [r7, #12]
 801b794:	f000 f822 	bl	801b7dc <etharp_query>
 801b798:	4603      	mov	r3, r0
 801b79a:	e00b      	b.n	801b7b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b79c:	68fb      	ldr	r3, [r7, #12]
 801b79e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b7a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b7a6:	9300      	str	r3, [sp, #0]
 801b7a8:	69fb      	ldr	r3, [r7, #28]
 801b7aa:	68b9      	ldr	r1, [r7, #8]
 801b7ac:	68f8      	ldr	r0, [r7, #12]
 801b7ae:	f001 fe83 	bl	801d4b8 <ethernet_output>
 801b7b2:	4603      	mov	r3, r0
}
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	3720      	adds	r7, #32
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	bd80      	pop	{r7, pc}
 801b7bc:	08023cb8 	.word	0x08023cb8
 801b7c0:	08023e08 	.word	0x08023e08
 801b7c4:	08023d30 	.word	0x08023d30
 801b7c8:	08023e58 	.word	0x08023e58
 801b7cc:	08023df8 	.word	0x08023df8
 801b7d0:	080246c8 	.word	0x080246c8
 801b7d4:	2000fe0c 	.word	0x2000fe0c
 801b7d8:	2000fd1c 	.word	0x2000fd1c

0801b7dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b7dc:	b580      	push	{r7, lr}
 801b7de:	b08c      	sub	sp, #48	@ 0x30
 801b7e0:	af02      	add	r7, sp, #8
 801b7e2:	60f8      	str	r0, [r7, #12]
 801b7e4:	60b9      	str	r1, [r7, #8]
 801b7e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	3326      	adds	r3, #38	@ 0x26
 801b7ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b7ee:	23ff      	movs	r3, #255	@ 0xff
 801b7f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b7f8:	68bb      	ldr	r3, [r7, #8]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	68f9      	ldr	r1, [r7, #12]
 801b7fe:	4618      	mov	r0, r3
 801b800:	f000 fe0e 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801b804:	4603      	mov	r3, r0
 801b806:	2b00      	cmp	r3, #0
 801b808:	d10c      	bne.n	801b824 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b812:	2be0      	cmp	r3, #224	@ 0xe0
 801b814:	d006      	beq.n	801b824 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b816:	68bb      	ldr	r3, [r7, #8]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d003      	beq.n	801b824 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b81c:	68bb      	ldr	r3, [r7, #8]
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d102      	bne.n	801b82a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b824:	f06f 030f 	mvn.w	r3, #15
 801b828:	e101      	b.n	801ba2e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b82a:	68fa      	ldr	r2, [r7, #12]
 801b82c:	2101      	movs	r1, #1
 801b82e:	68b8      	ldr	r0, [r7, #8]
 801b830:	f7ff fb60 	bl	801aef4 <etharp_find_entry>
 801b834:	4603      	mov	r3, r0
 801b836:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b838:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	da02      	bge.n	801b846 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b840:	8a7b      	ldrh	r3, [r7, #18]
 801b842:	b25b      	sxtb	r3, r3
 801b844:	e0f3      	b.n	801ba2e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b846:	8a7b      	ldrh	r3, [r7, #18]
 801b848:	2b7e      	cmp	r3, #126	@ 0x7e
 801b84a:	d906      	bls.n	801b85a <etharp_query+0x7e>
 801b84c:	4b7a      	ldr	r3, [pc, #488]	@ (801ba38 <etharp_query+0x25c>)
 801b84e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b852:	497a      	ldr	r1, [pc, #488]	@ (801ba3c <etharp_query+0x260>)
 801b854:	487a      	ldr	r0, [pc, #488]	@ (801ba40 <etharp_query+0x264>)
 801b856:	f002 fd85 	bl	801e364 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b85a:	8a7b      	ldrh	r3, [r7, #18]
 801b85c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b85e:	7c7a      	ldrb	r2, [r7, #17]
 801b860:	4978      	ldr	r1, [pc, #480]	@ (801ba44 <etharp_query+0x268>)
 801b862:	4613      	mov	r3, r2
 801b864:	005b      	lsls	r3, r3, #1
 801b866:	4413      	add	r3, r2
 801b868:	00db      	lsls	r3, r3, #3
 801b86a:	440b      	add	r3, r1
 801b86c:	3314      	adds	r3, #20
 801b86e:	781b      	ldrb	r3, [r3, #0]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d115      	bne.n	801b8a0 <etharp_query+0xc4>
    is_new_entry = 1;
 801b874:	2301      	movs	r3, #1
 801b876:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b878:	7c7a      	ldrb	r2, [r7, #17]
 801b87a:	4972      	ldr	r1, [pc, #456]	@ (801ba44 <etharp_query+0x268>)
 801b87c:	4613      	mov	r3, r2
 801b87e:	005b      	lsls	r3, r3, #1
 801b880:	4413      	add	r3, r2
 801b882:	00db      	lsls	r3, r3, #3
 801b884:	440b      	add	r3, r1
 801b886:	3314      	adds	r3, #20
 801b888:	2201      	movs	r2, #1
 801b88a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b88c:	7c7a      	ldrb	r2, [r7, #17]
 801b88e:	496d      	ldr	r1, [pc, #436]	@ (801ba44 <etharp_query+0x268>)
 801b890:	4613      	mov	r3, r2
 801b892:	005b      	lsls	r3, r3, #1
 801b894:	4413      	add	r3, r2
 801b896:	00db      	lsls	r3, r3, #3
 801b898:	440b      	add	r3, r1
 801b89a:	3308      	adds	r3, #8
 801b89c:	68fa      	ldr	r2, [r7, #12]
 801b89e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b8a0:	7c7a      	ldrb	r2, [r7, #17]
 801b8a2:	4968      	ldr	r1, [pc, #416]	@ (801ba44 <etharp_query+0x268>)
 801b8a4:	4613      	mov	r3, r2
 801b8a6:	005b      	lsls	r3, r3, #1
 801b8a8:	4413      	add	r3, r2
 801b8aa:	00db      	lsls	r3, r3, #3
 801b8ac:	440b      	add	r3, r1
 801b8ae:	3314      	adds	r3, #20
 801b8b0:	781b      	ldrb	r3, [r3, #0]
 801b8b2:	2b01      	cmp	r3, #1
 801b8b4:	d011      	beq.n	801b8da <etharp_query+0xfe>
 801b8b6:	7c7a      	ldrb	r2, [r7, #17]
 801b8b8:	4962      	ldr	r1, [pc, #392]	@ (801ba44 <etharp_query+0x268>)
 801b8ba:	4613      	mov	r3, r2
 801b8bc:	005b      	lsls	r3, r3, #1
 801b8be:	4413      	add	r3, r2
 801b8c0:	00db      	lsls	r3, r3, #3
 801b8c2:	440b      	add	r3, r1
 801b8c4:	3314      	adds	r3, #20
 801b8c6:	781b      	ldrb	r3, [r3, #0]
 801b8c8:	2b01      	cmp	r3, #1
 801b8ca:	d806      	bhi.n	801b8da <etharp_query+0xfe>
 801b8cc:	4b5a      	ldr	r3, [pc, #360]	@ (801ba38 <etharp_query+0x25c>)
 801b8ce:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b8d2:	495d      	ldr	r1, [pc, #372]	@ (801ba48 <etharp_query+0x26c>)
 801b8d4:	485a      	ldr	r0, [pc, #360]	@ (801ba40 <etharp_query+0x264>)
 801b8d6:	f002 fd45 	bl	801e364 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b8da:	6a3b      	ldr	r3, [r7, #32]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d102      	bne.n	801b8e6 <etharp_query+0x10a>
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d10c      	bne.n	801b900 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b8e6:	68b9      	ldr	r1, [r7, #8]
 801b8e8:	68f8      	ldr	r0, [r7, #12]
 801b8ea:	f000 f963 	bl	801bbb4 <etharp_request>
 801b8ee:	4603      	mov	r3, r0
 801b8f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d102      	bne.n	801b900 <etharp_query+0x124>
      return result;
 801b8fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b8fe:	e096      	b.n	801ba2e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d106      	bne.n	801b914 <etharp_query+0x138>
 801b906:	4b4c      	ldr	r3, [pc, #304]	@ (801ba38 <etharp_query+0x25c>)
 801b908:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b90c:	494f      	ldr	r1, [pc, #316]	@ (801ba4c <etharp_query+0x270>)
 801b90e:	484c      	ldr	r0, [pc, #304]	@ (801ba40 <etharp_query+0x264>)
 801b910:	f002 fd28 	bl	801e364 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b914:	7c7a      	ldrb	r2, [r7, #17]
 801b916:	494b      	ldr	r1, [pc, #300]	@ (801ba44 <etharp_query+0x268>)
 801b918:	4613      	mov	r3, r2
 801b91a:	005b      	lsls	r3, r3, #1
 801b91c:	4413      	add	r3, r2
 801b91e:	00db      	lsls	r3, r3, #3
 801b920:	440b      	add	r3, r1
 801b922:	3314      	adds	r3, #20
 801b924:	781b      	ldrb	r3, [r3, #0]
 801b926:	2b01      	cmp	r3, #1
 801b928:	d917      	bls.n	801b95a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b92a:	4a49      	ldr	r2, [pc, #292]	@ (801ba50 <etharp_query+0x274>)
 801b92c:	7c7b      	ldrb	r3, [r7, #17]
 801b92e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b930:	7c7a      	ldrb	r2, [r7, #17]
 801b932:	4613      	mov	r3, r2
 801b934:	005b      	lsls	r3, r3, #1
 801b936:	4413      	add	r3, r2
 801b938:	00db      	lsls	r3, r3, #3
 801b93a:	3308      	adds	r3, #8
 801b93c:	4a41      	ldr	r2, [pc, #260]	@ (801ba44 <etharp_query+0x268>)
 801b93e:	4413      	add	r3, r2
 801b940:	3304      	adds	r3, #4
 801b942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b946:	9200      	str	r2, [sp, #0]
 801b948:	697a      	ldr	r2, [r7, #20]
 801b94a:	6879      	ldr	r1, [r7, #4]
 801b94c:	68f8      	ldr	r0, [r7, #12]
 801b94e:	f001 fdb3 	bl	801d4b8 <ethernet_output>
 801b952:	4603      	mov	r3, r0
 801b954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b958:	e067      	b.n	801ba2a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b95a:	7c7a      	ldrb	r2, [r7, #17]
 801b95c:	4939      	ldr	r1, [pc, #228]	@ (801ba44 <etharp_query+0x268>)
 801b95e:	4613      	mov	r3, r2
 801b960:	005b      	lsls	r3, r3, #1
 801b962:	4413      	add	r3, r2
 801b964:	00db      	lsls	r3, r3, #3
 801b966:	440b      	add	r3, r1
 801b968:	3314      	adds	r3, #20
 801b96a:	781b      	ldrb	r3, [r3, #0]
 801b96c:	2b01      	cmp	r3, #1
 801b96e:	d15c      	bne.n	801ba2a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b970:	2300      	movs	r3, #0
 801b972:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b978:	e01c      	b.n	801b9b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b97a:	69fb      	ldr	r3, [r7, #28]
 801b97c:	895a      	ldrh	r2, [r3, #10]
 801b97e:	69fb      	ldr	r3, [r7, #28]
 801b980:	891b      	ldrh	r3, [r3, #8]
 801b982:	429a      	cmp	r2, r3
 801b984:	d10a      	bne.n	801b99c <etharp_query+0x1c0>
 801b986:	69fb      	ldr	r3, [r7, #28]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d006      	beq.n	801b99c <etharp_query+0x1c0>
 801b98e:	4b2a      	ldr	r3, [pc, #168]	@ (801ba38 <etharp_query+0x25c>)
 801b990:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b994:	492f      	ldr	r1, [pc, #188]	@ (801ba54 <etharp_query+0x278>)
 801b996:	482a      	ldr	r0, [pc, #168]	@ (801ba40 <etharp_query+0x264>)
 801b998:	f002 fce4 	bl	801e364 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b99c:	69fb      	ldr	r3, [r7, #28]
 801b99e:	7b1b      	ldrb	r3, [r3, #12]
 801b9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d002      	beq.n	801b9ae <etharp_query+0x1d2>
        copy_needed = 1;
 801b9a8:	2301      	movs	r3, #1
 801b9aa:	61bb      	str	r3, [r7, #24]
        break;
 801b9ac:	e005      	b.n	801b9ba <etharp_query+0x1de>
      }
      p = p->next;
 801b9ae:	69fb      	ldr	r3, [r7, #28]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b9b4:	69fb      	ldr	r3, [r7, #28]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d1df      	bne.n	801b97a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b9ba:	69bb      	ldr	r3, [r7, #24]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d007      	beq.n	801b9d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b9c0:	687a      	ldr	r2, [r7, #4]
 801b9c2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b9c6:	200e      	movs	r0, #14
 801b9c8:	f7f8 fc28 	bl	801421c <pbuf_clone>
 801b9cc:	61f8      	str	r0, [r7, #28]
 801b9ce:	e004      	b.n	801b9da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b9d4:	69f8      	ldr	r0, [r7, #28]
 801b9d6:	f7f8 f917 	bl	8013c08 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b9da:	69fb      	ldr	r3, [r7, #28]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d021      	beq.n	801ba24 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b9e0:	7c7a      	ldrb	r2, [r7, #17]
 801b9e2:	4918      	ldr	r1, [pc, #96]	@ (801ba44 <etharp_query+0x268>)
 801b9e4:	4613      	mov	r3, r2
 801b9e6:	005b      	lsls	r3, r3, #1
 801b9e8:	4413      	add	r3, r2
 801b9ea:	00db      	lsls	r3, r3, #3
 801b9ec:	440b      	add	r3, r1
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d00a      	beq.n	801ba0a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b9f4:	7c7a      	ldrb	r2, [r7, #17]
 801b9f6:	4913      	ldr	r1, [pc, #76]	@ (801ba44 <etharp_query+0x268>)
 801b9f8:	4613      	mov	r3, r2
 801b9fa:	005b      	lsls	r3, r3, #1
 801b9fc:	4413      	add	r3, r2
 801b9fe:	00db      	lsls	r3, r3, #3
 801ba00:	440b      	add	r3, r1
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4618      	mov	r0, r3
 801ba06:	f7f8 f859 	bl	8013abc <pbuf_free>
      }
      arp_table[i].q = p;
 801ba0a:	7c7a      	ldrb	r2, [r7, #17]
 801ba0c:	490d      	ldr	r1, [pc, #52]	@ (801ba44 <etharp_query+0x268>)
 801ba0e:	4613      	mov	r3, r2
 801ba10:	005b      	lsls	r3, r3, #1
 801ba12:	4413      	add	r3, r2
 801ba14:	00db      	lsls	r3, r3, #3
 801ba16:	440b      	add	r3, r1
 801ba18:	69fa      	ldr	r2, [r7, #28]
 801ba1a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ba22:	e002      	b.n	801ba2a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ba24:	23ff      	movs	r3, #255	@ 0xff
 801ba26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ba2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ba2e:	4618      	mov	r0, r3
 801ba30:	3728      	adds	r7, #40	@ 0x28
 801ba32:	46bd      	mov	sp, r7
 801ba34:	bd80      	pop	{r7, pc}
 801ba36:	bf00      	nop
 801ba38:	08023cb8 	.word	0x08023cb8
 801ba3c:	08023e64 	.word	0x08023e64
 801ba40:	08023d30 	.word	0x08023d30
 801ba44:	2000fd1c 	.word	0x2000fd1c
 801ba48:	08023e74 	.word	0x08023e74
 801ba4c:	08023e58 	.word	0x08023e58
 801ba50:	2000fe0c 	.word	0x2000fe0c
 801ba54:	08023e9c 	.word	0x08023e9c

0801ba58 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b08a      	sub	sp, #40	@ 0x28
 801ba5c:	af02      	add	r7, sp, #8
 801ba5e:	60f8      	str	r0, [r7, #12]
 801ba60:	60b9      	str	r1, [r7, #8]
 801ba62:	607a      	str	r2, [r7, #4]
 801ba64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ba66:	2300      	movs	r3, #0
 801ba68:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d106      	bne.n	801ba7e <etharp_raw+0x26>
 801ba70:	4b3a      	ldr	r3, [pc, #232]	@ (801bb5c <etharp_raw+0x104>)
 801ba72:	f240 4257 	movw	r2, #1111	@ 0x457
 801ba76:	493a      	ldr	r1, [pc, #232]	@ (801bb60 <etharp_raw+0x108>)
 801ba78:	483a      	ldr	r0, [pc, #232]	@ (801bb64 <etharp_raw+0x10c>)
 801ba7a:	f002 fc73 	bl	801e364 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ba7e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ba82:	211c      	movs	r1, #28
 801ba84:	200e      	movs	r0, #14
 801ba86:	f7f7 fd35 	bl	80134f4 <pbuf_alloc>
 801ba8a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ba8c:	69bb      	ldr	r3, [r7, #24]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d102      	bne.n	801ba98 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ba92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba96:	e05d      	b.n	801bb54 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ba98:	69bb      	ldr	r3, [r7, #24]
 801ba9a:	895b      	ldrh	r3, [r3, #10]
 801ba9c:	2b1b      	cmp	r3, #27
 801ba9e:	d806      	bhi.n	801baae <etharp_raw+0x56>
 801baa0:	4b2e      	ldr	r3, [pc, #184]	@ (801bb5c <etharp_raw+0x104>)
 801baa2:	f240 4262 	movw	r2, #1122	@ 0x462
 801baa6:	4930      	ldr	r1, [pc, #192]	@ (801bb68 <etharp_raw+0x110>)
 801baa8:	482e      	ldr	r0, [pc, #184]	@ (801bb64 <etharp_raw+0x10c>)
 801baaa:	f002 fc5b 	bl	801e364 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801baae:	69bb      	ldr	r3, [r7, #24]
 801bab0:	685b      	ldr	r3, [r3, #4]
 801bab2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801bab4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801bab6:	4618      	mov	r0, r3
 801bab8:	f7f6 f944 	bl	8011d44 <lwip_htons>
 801babc:	4603      	mov	r3, r0
 801babe:	461a      	mov	r2, r3
 801bac0:	697b      	ldr	r3, [r7, #20]
 801bac2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801baca:	2b06      	cmp	r3, #6
 801bacc:	d006      	beq.n	801badc <etharp_raw+0x84>
 801bace:	4b23      	ldr	r3, [pc, #140]	@ (801bb5c <etharp_raw+0x104>)
 801bad0:	f240 4269 	movw	r2, #1129	@ 0x469
 801bad4:	4925      	ldr	r1, [pc, #148]	@ (801bb6c <etharp_raw+0x114>)
 801bad6:	4823      	ldr	r0, [pc, #140]	@ (801bb64 <etharp_raw+0x10c>)
 801bad8:	f002 fc44 	bl	801e364 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801badc:	697b      	ldr	r3, [r7, #20]
 801bade:	3308      	adds	r3, #8
 801bae0:	2206      	movs	r2, #6
 801bae2:	6839      	ldr	r1, [r7, #0]
 801bae4:	4618      	mov	r0, r3
 801bae6:	f002 fe9e 	bl	801e826 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801baea:	697b      	ldr	r3, [r7, #20]
 801baec:	3312      	adds	r3, #18
 801baee:	2206      	movs	r2, #6
 801baf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801baf2:	4618      	mov	r0, r3
 801baf4:	f002 fe97 	bl	801e826 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801baf8:	697b      	ldr	r3, [r7, #20]
 801bafa:	330e      	adds	r3, #14
 801bafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bafe:	6812      	ldr	r2, [r2, #0]
 801bb00:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	3318      	adds	r3, #24
 801bb06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb08:	6812      	ldr	r2, [r2, #0]
 801bb0a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801bb0c:	697b      	ldr	r3, [r7, #20]
 801bb0e:	2200      	movs	r2, #0
 801bb10:	701a      	strb	r2, [r3, #0]
 801bb12:	2200      	movs	r2, #0
 801bb14:	f042 0201 	orr.w	r2, r2, #1
 801bb18:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801bb1a:	697b      	ldr	r3, [r7, #20]
 801bb1c:	2200      	movs	r2, #0
 801bb1e:	f042 0208 	orr.w	r2, r2, #8
 801bb22:	709a      	strb	r2, [r3, #2]
 801bb24:	2200      	movs	r2, #0
 801bb26:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	2206      	movs	r2, #6
 801bb2c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	2204      	movs	r2, #4
 801bb32:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801bb34:	f640 0306 	movw	r3, #2054	@ 0x806
 801bb38:	9300      	str	r3, [sp, #0]
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	68ba      	ldr	r2, [r7, #8]
 801bb3e:	69b9      	ldr	r1, [r7, #24]
 801bb40:	68f8      	ldr	r0, [r7, #12]
 801bb42:	f001 fcb9 	bl	801d4b8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801bb46:	69b8      	ldr	r0, [r7, #24]
 801bb48:	f7f7 ffb8 	bl	8013abc <pbuf_free>
  p = NULL;
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801bb50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bb54:	4618      	mov	r0, r3
 801bb56:	3720      	adds	r7, #32
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	bd80      	pop	{r7, pc}
 801bb5c:	08023cb8 	.word	0x08023cb8
 801bb60:	08023e08 	.word	0x08023e08
 801bb64:	08023d30 	.word	0x08023d30
 801bb68:	08023eb8 	.word	0x08023eb8
 801bb6c:	08023eec 	.word	0x08023eec

0801bb70 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801bb70:	b580      	push	{r7, lr}
 801bb72:	b088      	sub	sp, #32
 801bb74:	af04      	add	r7, sp, #16
 801bb76:	60f8      	str	r0, [r7, #12]
 801bb78:	60b9      	str	r1, [r7, #8]
 801bb7a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801bb8c:	2201      	movs	r2, #1
 801bb8e:	9203      	str	r2, [sp, #12]
 801bb90:	68ba      	ldr	r2, [r7, #8]
 801bb92:	9202      	str	r2, [sp, #8]
 801bb94:	4a06      	ldr	r2, [pc, #24]	@ (801bbb0 <etharp_request_dst+0x40>)
 801bb96:	9201      	str	r2, [sp, #4]
 801bb98:	9300      	str	r3, [sp, #0]
 801bb9a:	4603      	mov	r3, r0
 801bb9c:	687a      	ldr	r2, [r7, #4]
 801bb9e:	68f8      	ldr	r0, [r7, #12]
 801bba0:	f7ff ff5a 	bl	801ba58 <etharp_raw>
 801bba4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801bba6:	4618      	mov	r0, r3
 801bba8:	3710      	adds	r7, #16
 801bbaa:	46bd      	mov	sp, r7
 801bbac:	bd80      	pop	{r7, pc}
 801bbae:	bf00      	nop
 801bbb0:	080246d0 	.word	0x080246d0

0801bbb4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801bbb4:	b580      	push	{r7, lr}
 801bbb6:	b082      	sub	sp, #8
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
 801bbbc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801bbbe:	4a05      	ldr	r2, [pc, #20]	@ (801bbd4 <etharp_request+0x20>)
 801bbc0:	6839      	ldr	r1, [r7, #0]
 801bbc2:	6878      	ldr	r0, [r7, #4]
 801bbc4:	f7ff ffd4 	bl	801bb70 <etharp_request_dst>
 801bbc8:	4603      	mov	r3, r0
}
 801bbca:	4618      	mov	r0, r3
 801bbcc:	3708      	adds	r7, #8
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	bd80      	pop	{r7, pc}
 801bbd2:	bf00      	nop
 801bbd4:	080246c8 	.word	0x080246c8

0801bbd8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b08e      	sub	sp, #56	@ 0x38
 801bbdc:	af04      	add	r7, sp, #16
 801bbde:	6078      	str	r0, [r7, #4]
 801bbe0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801bbe2:	4b79      	ldr	r3, [pc, #484]	@ (801bdc8 <icmp_input+0x1f0>)
 801bbe4:	689b      	ldr	r3, [r3, #8]
 801bbe6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801bbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbea:	781b      	ldrb	r3, [r3, #0]
 801bbec:	f003 030f 	and.w	r3, r3, #15
 801bbf0:	b2db      	uxtb	r3, r3
 801bbf2:	009b      	lsls	r3, r3, #2
 801bbf4:	b2db      	uxtb	r3, r3
 801bbf6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801bbf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bbfa:	2b13      	cmp	r3, #19
 801bbfc:	f240 80cd 	bls.w	801bd9a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	895b      	ldrh	r3, [r3, #10]
 801bc04:	2b03      	cmp	r3, #3
 801bc06:	f240 80ca 	bls.w	801bd9e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	685b      	ldr	r3, [r3, #4]
 801bc0e:	781b      	ldrb	r3, [r3, #0]
 801bc10:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801bc14:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	f000 80b7 	beq.w	801bd8c <icmp_input+0x1b4>
 801bc1e:	2b08      	cmp	r3, #8
 801bc20:	f040 80b7 	bne.w	801bd92 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801bc24:	4b69      	ldr	r3, [pc, #420]	@ (801bdcc <icmp_input+0x1f4>)
 801bc26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bc28:	4b67      	ldr	r3, [pc, #412]	@ (801bdc8 <icmp_input+0x1f0>)
 801bc2a:	695b      	ldr	r3, [r3, #20]
 801bc2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bc30:	2be0      	cmp	r3, #224	@ 0xe0
 801bc32:	f000 80bb 	beq.w	801bdac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801bc36:	4b64      	ldr	r3, [pc, #400]	@ (801bdc8 <icmp_input+0x1f0>)
 801bc38:	695b      	ldr	r3, [r3, #20]
 801bc3a:	4a63      	ldr	r2, [pc, #396]	@ (801bdc8 <icmp_input+0x1f0>)
 801bc3c:	6812      	ldr	r2, [r2, #0]
 801bc3e:	4611      	mov	r1, r2
 801bc40:	4618      	mov	r0, r3
 801bc42:	f000 fbed 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801bc46:	4603      	mov	r3, r0
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	f040 80b1 	bne.w	801bdb0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	891b      	ldrh	r3, [r3, #8]
 801bc52:	2b07      	cmp	r3, #7
 801bc54:	f240 80a5 	bls.w	801bda2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bc58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bc5a:	330e      	adds	r3, #14
 801bc5c:	4619      	mov	r1, r3
 801bc5e:	6878      	ldr	r0, [r7, #4]
 801bc60:	f7f7 fe96 	bl	8013990 <pbuf_add_header>
 801bc64:	4603      	mov	r3, r0
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d04b      	beq.n	801bd02 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	891a      	ldrh	r2, [r3, #8]
 801bc6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bc70:	4413      	add	r3, r2
 801bc72:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	891b      	ldrh	r3, [r3, #8]
 801bc78:	8b7a      	ldrh	r2, [r7, #26]
 801bc7a:	429a      	cmp	r2, r3
 801bc7c:	f0c0 809a 	bcc.w	801bdb4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801bc80:	8b7b      	ldrh	r3, [r7, #26]
 801bc82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bc86:	4619      	mov	r1, r3
 801bc88:	200e      	movs	r0, #14
 801bc8a:	f7f7 fc33 	bl	80134f4 <pbuf_alloc>
 801bc8e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801bc90:	697b      	ldr	r3, [r7, #20]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	f000 8090 	beq.w	801bdb8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	895b      	ldrh	r3, [r3, #10]
 801bc9c:	461a      	mov	r2, r3
 801bc9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bca0:	3308      	adds	r3, #8
 801bca2:	429a      	cmp	r2, r3
 801bca4:	d203      	bcs.n	801bcae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801bca6:	6978      	ldr	r0, [r7, #20]
 801bca8:	f7f7 ff08 	bl	8013abc <pbuf_free>
          goto icmperr;
 801bcac:	e085      	b.n	801bdba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	685b      	ldr	r3, [r3, #4]
 801bcb2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801bcb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	f002 fdb5 	bl	801e826 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801bcbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bcbe:	4619      	mov	r1, r3
 801bcc0:	6978      	ldr	r0, [r7, #20]
 801bcc2:	f7f7 fe75 	bl	80139b0 <pbuf_remove_header>
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d009      	beq.n	801bce0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801bccc:	4b40      	ldr	r3, [pc, #256]	@ (801bdd0 <icmp_input+0x1f8>)
 801bcce:	22b6      	movs	r2, #182	@ 0xb6
 801bcd0:	4940      	ldr	r1, [pc, #256]	@ (801bdd4 <icmp_input+0x1fc>)
 801bcd2:	4841      	ldr	r0, [pc, #260]	@ (801bdd8 <icmp_input+0x200>)
 801bcd4:	f002 fb46 	bl	801e364 <iprintf>
          pbuf_free(r);
 801bcd8:	6978      	ldr	r0, [r7, #20]
 801bcda:	f7f7 feef 	bl	8013abc <pbuf_free>
          goto icmperr;
 801bcde:	e06c      	b.n	801bdba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801bce0:	6879      	ldr	r1, [r7, #4]
 801bce2:	6978      	ldr	r0, [r7, #20]
 801bce4:	f7f8 f81e 	bl	8013d24 <pbuf_copy>
 801bce8:	4603      	mov	r3, r0
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d003      	beq.n	801bcf6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801bcee:	6978      	ldr	r0, [r7, #20]
 801bcf0:	f7f7 fee4 	bl	8013abc <pbuf_free>
          goto icmperr;
 801bcf4:	e061      	b.n	801bdba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801bcf6:	6878      	ldr	r0, [r7, #4]
 801bcf8:	f7f7 fee0 	bl	8013abc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801bcfc:	697b      	ldr	r3, [r7, #20]
 801bcfe:	607b      	str	r3, [r7, #4]
 801bd00:	e00f      	b.n	801bd22 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bd02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bd04:	330e      	adds	r3, #14
 801bd06:	4619      	mov	r1, r3
 801bd08:	6878      	ldr	r0, [r7, #4]
 801bd0a:	f7f7 fe51 	bl	80139b0 <pbuf_remove_header>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d006      	beq.n	801bd22 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801bd14:	4b2e      	ldr	r3, [pc, #184]	@ (801bdd0 <icmp_input+0x1f8>)
 801bd16:	22c7      	movs	r2, #199	@ 0xc7
 801bd18:	4930      	ldr	r1, [pc, #192]	@ (801bddc <icmp_input+0x204>)
 801bd1a:	482f      	ldr	r0, [pc, #188]	@ (801bdd8 <icmp_input+0x200>)
 801bd1c:	f002 fb22 	bl	801e364 <iprintf>
          goto icmperr;
 801bd20:	e04b      	b.n	801bdba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	685b      	ldr	r3, [r3, #4]
 801bd26:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801bd28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bd2a:	4619      	mov	r1, r3
 801bd2c:	6878      	ldr	r0, [r7, #4]
 801bd2e:	f7f7 fe2f 	bl	8013990 <pbuf_add_header>
 801bd32:	4603      	mov	r3, r0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d12b      	bne.n	801bd90 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801bd3e:	69fb      	ldr	r3, [r7, #28]
 801bd40:	681a      	ldr	r2, [r3, #0]
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801bd46:	4b20      	ldr	r3, [pc, #128]	@ (801bdc8 <icmp_input+0x1f0>)
 801bd48:	691a      	ldr	r2, [r3, #16]
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801bd4e:	693b      	ldr	r3, [r7, #16]
 801bd50:	2200      	movs	r2, #0
 801bd52:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	2200      	movs	r2, #0
 801bd58:	709a      	strb	r2, [r3, #2]
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	22ff      	movs	r2, #255	@ 0xff
 801bd62:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	2200      	movs	r2, #0
 801bd68:	729a      	strb	r2, [r3, #10]
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bd6e:	683b      	ldr	r3, [r7, #0]
 801bd70:	9302      	str	r3, [sp, #8]
 801bd72:	2301      	movs	r3, #1
 801bd74:	9301      	str	r3, [sp, #4]
 801bd76:	2300      	movs	r3, #0
 801bd78:	9300      	str	r3, [sp, #0]
 801bd7a:	23ff      	movs	r3, #255	@ 0xff
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	69f9      	ldr	r1, [r7, #28]
 801bd80:	6878      	ldr	r0, [r7, #4]
 801bd82:	f000 fa75 	bl	801c270 <ip4_output_if>
 801bd86:	4603      	mov	r3, r0
 801bd88:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801bd8a:	e001      	b.n	801bd90 <icmp_input+0x1b8>
      break;
 801bd8c:	bf00      	nop
 801bd8e:	e000      	b.n	801bd92 <icmp_input+0x1ba>
      break;
 801bd90:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bd92:	6878      	ldr	r0, [r7, #4]
 801bd94:	f7f7 fe92 	bl	8013abc <pbuf_free>
  return;
 801bd98:	e013      	b.n	801bdc2 <icmp_input+0x1ea>
    goto lenerr;
 801bd9a:	bf00      	nop
 801bd9c:	e002      	b.n	801bda4 <icmp_input+0x1cc>
    goto lenerr;
 801bd9e:	bf00      	nop
 801bda0:	e000      	b.n	801bda4 <icmp_input+0x1cc>
        goto lenerr;
 801bda2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bda4:	6878      	ldr	r0, [r7, #4]
 801bda6:	f7f7 fe89 	bl	8013abc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bdaa:	e00a      	b.n	801bdc2 <icmp_input+0x1ea>
        goto icmperr;
 801bdac:	bf00      	nop
 801bdae:	e004      	b.n	801bdba <icmp_input+0x1e2>
        goto icmperr;
 801bdb0:	bf00      	nop
 801bdb2:	e002      	b.n	801bdba <icmp_input+0x1e2>
          goto icmperr;
 801bdb4:	bf00      	nop
 801bdb6:	e000      	b.n	801bdba <icmp_input+0x1e2>
          goto icmperr;
 801bdb8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801bdba:	6878      	ldr	r0, [r7, #4]
 801bdbc:	f7f7 fe7e 	bl	8013abc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bdc0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801bdc2:	3728      	adds	r7, #40	@ 0x28
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	bd80      	pop	{r7, pc}
 801bdc8:	2000a25c 	.word	0x2000a25c
 801bdcc:	2000a270 	.word	0x2000a270
 801bdd0:	08023f30 	.word	0x08023f30
 801bdd4:	08023f68 	.word	0x08023f68
 801bdd8:	08023fa0 	.word	0x08023fa0
 801bddc:	08023fc8 	.word	0x08023fc8

0801bde0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b082      	sub	sp, #8
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]
 801bde8:	460b      	mov	r3, r1
 801bdea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bdec:	78fb      	ldrb	r3, [r7, #3]
 801bdee:	461a      	mov	r2, r3
 801bdf0:	2103      	movs	r1, #3
 801bdf2:	6878      	ldr	r0, [r7, #4]
 801bdf4:	f000 f814 	bl	801be20 <icmp_send_response>
}
 801bdf8:	bf00      	nop
 801bdfa:	3708      	adds	r7, #8
 801bdfc:	46bd      	mov	sp, r7
 801bdfe:	bd80      	pop	{r7, pc}

0801be00 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801be00:	b580      	push	{r7, lr}
 801be02:	b082      	sub	sp, #8
 801be04:	af00      	add	r7, sp, #0
 801be06:	6078      	str	r0, [r7, #4]
 801be08:	460b      	mov	r3, r1
 801be0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801be0c:	78fb      	ldrb	r3, [r7, #3]
 801be0e:	461a      	mov	r2, r3
 801be10:	210b      	movs	r1, #11
 801be12:	6878      	ldr	r0, [r7, #4]
 801be14:	f000 f804 	bl	801be20 <icmp_send_response>
}
 801be18:	bf00      	nop
 801be1a:	3708      	adds	r7, #8
 801be1c:	46bd      	mov	sp, r7
 801be1e:	bd80      	pop	{r7, pc}

0801be20 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801be20:	b580      	push	{r7, lr}
 801be22:	b08c      	sub	sp, #48	@ 0x30
 801be24:	af04      	add	r7, sp, #16
 801be26:	6078      	str	r0, [r7, #4]
 801be28:	460b      	mov	r3, r1
 801be2a:	70fb      	strb	r3, [r7, #3]
 801be2c:	4613      	mov	r3, r2
 801be2e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801be30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801be34:	2124      	movs	r1, #36	@ 0x24
 801be36:	2022      	movs	r0, #34	@ 0x22
 801be38:	f7f7 fb5c 	bl	80134f4 <pbuf_alloc>
 801be3c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801be3e:	69fb      	ldr	r3, [r7, #28]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d04c      	beq.n	801bede <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801be44:	69fb      	ldr	r3, [r7, #28]
 801be46:	895b      	ldrh	r3, [r3, #10]
 801be48:	2b23      	cmp	r3, #35	@ 0x23
 801be4a:	d806      	bhi.n	801be5a <icmp_send_response+0x3a>
 801be4c:	4b26      	ldr	r3, [pc, #152]	@ (801bee8 <icmp_send_response+0xc8>)
 801be4e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801be52:	4926      	ldr	r1, [pc, #152]	@ (801beec <icmp_send_response+0xcc>)
 801be54:	4826      	ldr	r0, [pc, #152]	@ (801bef0 <icmp_send_response+0xd0>)
 801be56:	f002 fa85 	bl	801e364 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	685b      	ldr	r3, [r3, #4]
 801be5e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801be60:	69fb      	ldr	r3, [r7, #28]
 801be62:	685b      	ldr	r3, [r3, #4]
 801be64:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	78fa      	ldrb	r2, [r7, #3]
 801be6a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801be6c:	697b      	ldr	r3, [r7, #20]
 801be6e:	78ba      	ldrb	r2, [r7, #2]
 801be70:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801be72:	697b      	ldr	r3, [r7, #20]
 801be74:	2200      	movs	r2, #0
 801be76:	711a      	strb	r2, [r3, #4]
 801be78:	2200      	movs	r2, #0
 801be7a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801be7c:	697b      	ldr	r3, [r7, #20]
 801be7e:	2200      	movs	r2, #0
 801be80:	719a      	strb	r2, [r3, #6]
 801be82:	2200      	movs	r2, #0
 801be84:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801be86:	69fb      	ldr	r3, [r7, #28]
 801be88:	685b      	ldr	r3, [r3, #4]
 801be8a:	f103 0008 	add.w	r0, r3, #8
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	685b      	ldr	r3, [r3, #4]
 801be92:	221c      	movs	r2, #28
 801be94:	4619      	mov	r1, r3
 801be96:	f002 fcc6 	bl	801e826 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801be9a:	69bb      	ldr	r3, [r7, #24]
 801be9c:	68db      	ldr	r3, [r3, #12]
 801be9e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bea0:	f107 030c 	add.w	r3, r7, #12
 801bea4:	4618      	mov	r0, r3
 801bea6:	f000 f825 	bl	801bef4 <ip4_route>
 801beaa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801beac:	693b      	ldr	r3, [r7, #16]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d011      	beq.n	801bed6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801beb2:	697b      	ldr	r3, [r7, #20]
 801beb4:	2200      	movs	r2, #0
 801beb6:	709a      	strb	r2, [r3, #2]
 801beb8:	2200      	movs	r2, #0
 801beba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bebc:	f107 020c 	add.w	r2, r7, #12
 801bec0:	693b      	ldr	r3, [r7, #16]
 801bec2:	9302      	str	r3, [sp, #8]
 801bec4:	2301      	movs	r3, #1
 801bec6:	9301      	str	r3, [sp, #4]
 801bec8:	2300      	movs	r3, #0
 801beca:	9300      	str	r3, [sp, #0]
 801becc:	23ff      	movs	r3, #255	@ 0xff
 801bece:	2100      	movs	r1, #0
 801bed0:	69f8      	ldr	r0, [r7, #28]
 801bed2:	f000 f9cd 	bl	801c270 <ip4_output_if>
  }
  pbuf_free(q);
 801bed6:	69f8      	ldr	r0, [r7, #28]
 801bed8:	f7f7 fdf0 	bl	8013abc <pbuf_free>
 801bedc:	e000      	b.n	801bee0 <icmp_send_response+0xc0>
    return;
 801bede:	bf00      	nop
}
 801bee0:	3720      	adds	r7, #32
 801bee2:	46bd      	mov	sp, r7
 801bee4:	bd80      	pop	{r7, pc}
 801bee6:	bf00      	nop
 801bee8:	08023f30 	.word	0x08023f30
 801beec:	08023ffc 	.word	0x08023ffc
 801bef0:	08023fa0 	.word	0x08023fa0

0801bef4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801bef4:	b480      	push	{r7}
 801bef6:	b085      	sub	sp, #20
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801befc:	4b33      	ldr	r3, [pc, #204]	@ (801bfcc <ip4_route+0xd8>)
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	60fb      	str	r3, [r7, #12]
 801bf02:	e036      	b.n	801bf72 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bf0a:	f003 0301 	and.w	r3, r3, #1
 801bf0e:	b2db      	uxtb	r3, r3
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d02b      	beq.n	801bf6c <ip4_route+0x78>
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bf1a:	089b      	lsrs	r3, r3, #2
 801bf1c:	f003 0301 	and.w	r3, r3, #1
 801bf20:	b2db      	uxtb	r3, r3
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d022      	beq.n	801bf6c <ip4_route+0x78>
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	3304      	adds	r3, #4
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d01d      	beq.n	801bf6c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	681a      	ldr	r2, [r3, #0]
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	3304      	adds	r3, #4
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	405a      	eors	r2, r3
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	3308      	adds	r3, #8
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	4013      	ands	r3, r2
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	d101      	bne.n	801bf4c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	e038      	b.n	801bfbe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bf52:	f003 0302 	and.w	r3, r3, #2
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d108      	bne.n	801bf6c <ip4_route+0x78>
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	681a      	ldr	r2, [r3, #0]
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	330c      	adds	r3, #12
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	429a      	cmp	r2, r3
 801bf66:	d101      	bne.n	801bf6c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bf68:	68fb      	ldr	r3, [r7, #12]
 801bf6a:	e028      	b.n	801bfbe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bf6c:	68fb      	ldr	r3, [r7, #12]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	60fb      	str	r3, [r7, #12]
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d1c5      	bne.n	801bf04 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bf78:	4b15      	ldr	r3, [pc, #84]	@ (801bfd0 <ip4_route+0xdc>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d01a      	beq.n	801bfb6 <ip4_route+0xc2>
 801bf80:	4b13      	ldr	r3, [pc, #76]	@ (801bfd0 <ip4_route+0xdc>)
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bf88:	f003 0301 	and.w	r3, r3, #1
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d012      	beq.n	801bfb6 <ip4_route+0xc2>
 801bf90:	4b0f      	ldr	r3, [pc, #60]	@ (801bfd0 <ip4_route+0xdc>)
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bf98:	f003 0304 	and.w	r3, r3, #4
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d00a      	beq.n	801bfb6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bfa0:	4b0b      	ldr	r3, [pc, #44]	@ (801bfd0 <ip4_route+0xdc>)
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	3304      	adds	r3, #4
 801bfa6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d004      	beq.n	801bfb6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	b2db      	uxtb	r3, r3
 801bfb2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bfb4:	d101      	bne.n	801bfba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	e001      	b.n	801bfbe <ip4_route+0xca>
  }

  return netif_default;
 801bfba:	4b05      	ldr	r3, [pc, #20]	@ (801bfd0 <ip4_route+0xdc>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
}
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	3714      	adds	r7, #20
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfc8:	4770      	bx	lr
 801bfca:	bf00      	nop
 801bfcc:	2000fcb0 	.word	0x2000fcb0
 801bfd0:	2000fcb4 	.word	0x2000fcb4

0801bfd4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bfd4:	b580      	push	{r7, lr}
 801bfd6:	b082      	sub	sp, #8
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bfe2:	f003 0301 	and.w	r3, r3, #1
 801bfe6:	b2db      	uxtb	r3, r3
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d016      	beq.n	801c01a <ip4_input_accept+0x46>
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	3304      	adds	r3, #4
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d011      	beq.n	801c01a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bff6:	4b0b      	ldr	r3, [pc, #44]	@ (801c024 <ip4_input_accept+0x50>)
 801bff8:	695a      	ldr	r2, [r3, #20]
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	3304      	adds	r3, #4
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	429a      	cmp	r2, r3
 801c002:	d008      	beq.n	801c016 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c004:	4b07      	ldr	r3, [pc, #28]	@ (801c024 <ip4_input_accept+0x50>)
 801c006:	695b      	ldr	r3, [r3, #20]
 801c008:	6879      	ldr	r1, [r7, #4]
 801c00a:	4618      	mov	r0, r3
 801c00c:	f000 fa08 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801c010:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c012:	2b00      	cmp	r3, #0
 801c014:	d001      	beq.n	801c01a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c016:	2301      	movs	r3, #1
 801c018:	e000      	b.n	801c01c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c01a:	2300      	movs	r3, #0
}
 801c01c:	4618      	mov	r0, r3
 801c01e:	3708      	adds	r7, #8
 801c020:	46bd      	mov	sp, r7
 801c022:	bd80      	pop	{r7, pc}
 801c024:	2000a25c 	.word	0x2000a25c

0801c028 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	b086      	sub	sp, #24
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	6078      	str	r0, [r7, #4]
 801c030:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	685b      	ldr	r3, [r3, #4]
 801c036:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	781b      	ldrb	r3, [r3, #0]
 801c03c:	091b      	lsrs	r3, r3, #4
 801c03e:	b2db      	uxtb	r3, r3
 801c040:	2b04      	cmp	r3, #4
 801c042:	d004      	beq.n	801c04e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c044:	6878      	ldr	r0, [r7, #4]
 801c046:	f7f7 fd39 	bl	8013abc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c04a:	2300      	movs	r3, #0
 801c04c:	e107      	b.n	801c25e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c04e:	697b      	ldr	r3, [r7, #20]
 801c050:	781b      	ldrb	r3, [r3, #0]
 801c052:	f003 030f 	and.w	r3, r3, #15
 801c056:	b2db      	uxtb	r3, r3
 801c058:	009b      	lsls	r3, r3, #2
 801c05a:	b2db      	uxtb	r3, r3
 801c05c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c05e:	697b      	ldr	r3, [r7, #20]
 801c060:	885b      	ldrh	r3, [r3, #2]
 801c062:	b29b      	uxth	r3, r3
 801c064:	4618      	mov	r0, r3
 801c066:	f7f5 fe6d 	bl	8011d44 <lwip_htons>
 801c06a:	4603      	mov	r3, r0
 801c06c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	891b      	ldrh	r3, [r3, #8]
 801c072:	89ba      	ldrh	r2, [r7, #12]
 801c074:	429a      	cmp	r2, r3
 801c076:	d204      	bcs.n	801c082 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801c078:	89bb      	ldrh	r3, [r7, #12]
 801c07a:	4619      	mov	r1, r3
 801c07c:	6878      	ldr	r0, [r7, #4]
 801c07e:	f7f7 fb97 	bl	80137b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	895b      	ldrh	r3, [r3, #10]
 801c086:	89fa      	ldrh	r2, [r7, #14]
 801c088:	429a      	cmp	r2, r3
 801c08a:	d807      	bhi.n	801c09c <ip4_input+0x74>
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	891b      	ldrh	r3, [r3, #8]
 801c090:	89ba      	ldrh	r2, [r7, #12]
 801c092:	429a      	cmp	r2, r3
 801c094:	d802      	bhi.n	801c09c <ip4_input+0x74>
 801c096:	89fb      	ldrh	r3, [r7, #14]
 801c098:	2b13      	cmp	r3, #19
 801c09a:	d804      	bhi.n	801c0a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c09c:	6878      	ldr	r0, [r7, #4]
 801c09e:	f7f7 fd0d 	bl	8013abc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	e0db      	b.n	801c25e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c0a6:	697b      	ldr	r3, [r7, #20]
 801c0a8:	691b      	ldr	r3, [r3, #16]
 801c0aa:	4a6f      	ldr	r2, [pc, #444]	@ (801c268 <ip4_input+0x240>)
 801c0ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c0ae:	697b      	ldr	r3, [r7, #20]
 801c0b0:	68db      	ldr	r3, [r3, #12]
 801c0b2:	4a6d      	ldr	r2, [pc, #436]	@ (801c268 <ip4_input+0x240>)
 801c0b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c0b6:	4b6c      	ldr	r3, [pc, #432]	@ (801c268 <ip4_input+0x240>)
 801c0b8:	695b      	ldr	r3, [r3, #20]
 801c0ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c0be:	2be0      	cmp	r3, #224	@ 0xe0
 801c0c0:	d112      	bne.n	801c0e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c0c2:	683b      	ldr	r3, [r7, #0]
 801c0c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c0c8:	f003 0301 	and.w	r3, r3, #1
 801c0cc:	b2db      	uxtb	r3, r3
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d007      	beq.n	801c0e2 <ip4_input+0xba>
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	3304      	adds	r3, #4
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d002      	beq.n	801c0e2 <ip4_input+0xba>
      netif = inp;
 801c0dc:	683b      	ldr	r3, [r7, #0]
 801c0de:	613b      	str	r3, [r7, #16]
 801c0e0:	e02a      	b.n	801c138 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	613b      	str	r3, [r7, #16]
 801c0e6:	e027      	b.n	801c138 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c0e8:	6838      	ldr	r0, [r7, #0]
 801c0ea:	f7ff ff73 	bl	801bfd4 <ip4_input_accept>
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d002      	beq.n	801c0fa <ip4_input+0xd2>
      netif = inp;
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	613b      	str	r3, [r7, #16]
 801c0f8:	e01e      	b.n	801c138 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c0fa:	2300      	movs	r3, #0
 801c0fc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c0fe:	4b5a      	ldr	r3, [pc, #360]	@ (801c268 <ip4_input+0x240>)
 801c100:	695b      	ldr	r3, [r3, #20]
 801c102:	b2db      	uxtb	r3, r3
 801c104:	2b7f      	cmp	r3, #127	@ 0x7f
 801c106:	d017      	beq.n	801c138 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c108:	4b58      	ldr	r3, [pc, #352]	@ (801c26c <ip4_input+0x244>)
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	613b      	str	r3, [r7, #16]
 801c10e:	e00e      	b.n	801c12e <ip4_input+0x106>
          if (netif == inp) {
 801c110:	693a      	ldr	r2, [r7, #16]
 801c112:	683b      	ldr	r3, [r7, #0]
 801c114:	429a      	cmp	r2, r3
 801c116:	d006      	beq.n	801c126 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c118:	6938      	ldr	r0, [r7, #16]
 801c11a:	f7ff ff5b 	bl	801bfd4 <ip4_input_accept>
 801c11e:	4603      	mov	r3, r0
 801c120:	2b00      	cmp	r3, #0
 801c122:	d108      	bne.n	801c136 <ip4_input+0x10e>
 801c124:	e000      	b.n	801c128 <ip4_input+0x100>
            continue;
 801c126:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c128:	693b      	ldr	r3, [r7, #16]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	613b      	str	r3, [r7, #16]
 801c12e:	693b      	ldr	r3, [r7, #16]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d1ed      	bne.n	801c110 <ip4_input+0xe8>
 801c134:	e000      	b.n	801c138 <ip4_input+0x110>
            break;
 801c136:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c138:	4b4b      	ldr	r3, [pc, #300]	@ (801c268 <ip4_input+0x240>)
 801c13a:	691b      	ldr	r3, [r3, #16]
 801c13c:	6839      	ldr	r1, [r7, #0]
 801c13e:	4618      	mov	r0, r3
 801c140:	f000 f96e 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801c144:	4603      	mov	r3, r0
 801c146:	2b00      	cmp	r3, #0
 801c148:	d105      	bne.n	801c156 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c14a:	4b47      	ldr	r3, [pc, #284]	@ (801c268 <ip4_input+0x240>)
 801c14c:	691b      	ldr	r3, [r3, #16]
 801c14e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c152:	2be0      	cmp	r3, #224	@ 0xe0
 801c154:	d104      	bne.n	801c160 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c156:	6878      	ldr	r0, [r7, #4]
 801c158:	f7f7 fcb0 	bl	8013abc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c15c:	2300      	movs	r3, #0
 801c15e:	e07e      	b.n	801c25e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c160:	693b      	ldr	r3, [r7, #16]
 801c162:	2b00      	cmp	r3, #0
 801c164:	d104      	bne.n	801c170 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c166:	6878      	ldr	r0, [r7, #4]
 801c168:	f7f7 fca8 	bl	8013abc <pbuf_free>
    return ERR_OK;
 801c16c:	2300      	movs	r3, #0
 801c16e:	e076      	b.n	801c25e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	88db      	ldrh	r3, [r3, #6]
 801c174:	b29b      	uxth	r3, r3
 801c176:	461a      	mov	r2, r3
 801c178:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801c17c:	4013      	ands	r3, r2
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d00b      	beq.n	801c19a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c182:	6878      	ldr	r0, [r7, #4]
 801c184:	f000 fdd0 	bl	801cd28 <ip4_reass>
 801c188:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d101      	bne.n	801c194 <ip4_input+0x16c>
      return ERR_OK;
 801c190:	2300      	movs	r3, #0
 801c192:	e064      	b.n	801c25e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	685b      	ldr	r3, [r3, #4]
 801c198:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c19a:	4a33      	ldr	r2, [pc, #204]	@ (801c268 <ip4_input+0x240>)
 801c19c:	693b      	ldr	r3, [r7, #16]
 801c19e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c1a0:	4a31      	ldr	r2, [pc, #196]	@ (801c268 <ip4_input+0x240>)
 801c1a2:	683b      	ldr	r3, [r7, #0]
 801c1a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c1a6:	4a30      	ldr	r2, [pc, #192]	@ (801c268 <ip4_input+0x240>)
 801c1a8:	697b      	ldr	r3, [r7, #20]
 801c1aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c1ac:	697b      	ldr	r3, [r7, #20]
 801c1ae:	781b      	ldrb	r3, [r3, #0]
 801c1b0:	f003 030f 	and.w	r3, r3, #15
 801c1b4:	b2db      	uxtb	r3, r3
 801c1b6:	009b      	lsls	r3, r3, #2
 801c1b8:	b2db      	uxtb	r3, r3
 801c1ba:	461a      	mov	r2, r3
 801c1bc:	4b2a      	ldr	r3, [pc, #168]	@ (801c268 <ip4_input+0x240>)
 801c1be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c1c0:	89fb      	ldrh	r3, [r7, #14]
 801c1c2:	4619      	mov	r1, r3
 801c1c4:	6878      	ldr	r0, [r7, #4]
 801c1c6:	f7f7 fbf3 	bl	80139b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c1ca:	697b      	ldr	r3, [r7, #20]
 801c1cc:	7a5b      	ldrb	r3, [r3, #9]
 801c1ce:	2b11      	cmp	r3, #17
 801c1d0:	d006      	beq.n	801c1e0 <ip4_input+0x1b8>
 801c1d2:	2b11      	cmp	r3, #17
 801c1d4:	dc13      	bgt.n	801c1fe <ip4_input+0x1d6>
 801c1d6:	2b01      	cmp	r3, #1
 801c1d8:	d00c      	beq.n	801c1f4 <ip4_input+0x1cc>
 801c1da:	2b06      	cmp	r3, #6
 801c1dc:	d005      	beq.n	801c1ea <ip4_input+0x1c2>
 801c1de:	e00e      	b.n	801c1fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c1e0:	6839      	ldr	r1, [r7, #0]
 801c1e2:	6878      	ldr	r0, [r7, #4]
 801c1e4:	f7fe f970 	bl	801a4c8 <udp_input>
        break;
 801c1e8:	e026      	b.n	801c238 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c1ea:	6839      	ldr	r1, [r7, #0]
 801c1ec:	6878      	ldr	r0, [r7, #4]
 801c1ee:	f7f9 fd2f 	bl	8015c50 <tcp_input>
        break;
 801c1f2:	e021      	b.n	801c238 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c1f4:	6839      	ldr	r1, [r7, #0]
 801c1f6:	6878      	ldr	r0, [r7, #4]
 801c1f8:	f7ff fcee 	bl	801bbd8 <icmp_input>
        break;
 801c1fc:	e01c      	b.n	801c238 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c1fe:	4b1a      	ldr	r3, [pc, #104]	@ (801c268 <ip4_input+0x240>)
 801c200:	695b      	ldr	r3, [r3, #20]
 801c202:	6939      	ldr	r1, [r7, #16]
 801c204:	4618      	mov	r0, r3
 801c206:	f000 f90b 	bl	801c420 <ip4_addr_isbroadcast_u32>
 801c20a:	4603      	mov	r3, r0
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d10f      	bne.n	801c230 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c210:	4b15      	ldr	r3, [pc, #84]	@ (801c268 <ip4_input+0x240>)
 801c212:	695b      	ldr	r3, [r3, #20]
 801c214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c218:	2be0      	cmp	r3, #224	@ 0xe0
 801c21a:	d009      	beq.n	801c230 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c21c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c220:	4619      	mov	r1, r3
 801c222:	6878      	ldr	r0, [r7, #4]
 801c224:	f7f7 fc37 	bl	8013a96 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c228:	2102      	movs	r1, #2
 801c22a:	6878      	ldr	r0, [r7, #4]
 801c22c:	f7ff fdd8 	bl	801bde0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c230:	6878      	ldr	r0, [r7, #4]
 801c232:	f7f7 fc43 	bl	8013abc <pbuf_free>
        break;
 801c236:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c238:	4b0b      	ldr	r3, [pc, #44]	@ (801c268 <ip4_input+0x240>)
 801c23a:	2200      	movs	r2, #0
 801c23c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c23e:	4b0a      	ldr	r3, [pc, #40]	@ (801c268 <ip4_input+0x240>)
 801c240:	2200      	movs	r2, #0
 801c242:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c244:	4b08      	ldr	r3, [pc, #32]	@ (801c268 <ip4_input+0x240>)
 801c246:	2200      	movs	r2, #0
 801c248:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c24a:	4b07      	ldr	r3, [pc, #28]	@ (801c268 <ip4_input+0x240>)
 801c24c:	2200      	movs	r2, #0
 801c24e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c250:	4b05      	ldr	r3, [pc, #20]	@ (801c268 <ip4_input+0x240>)
 801c252:	2200      	movs	r2, #0
 801c254:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c256:	4b04      	ldr	r3, [pc, #16]	@ (801c268 <ip4_input+0x240>)
 801c258:	2200      	movs	r2, #0
 801c25a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c25c:	2300      	movs	r3, #0
}
 801c25e:	4618      	mov	r0, r3
 801c260:	3718      	adds	r7, #24
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	2000a25c 	.word	0x2000a25c
 801c26c:	2000fcb0 	.word	0x2000fcb0

0801c270 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b08a      	sub	sp, #40	@ 0x28
 801c274:	af04      	add	r7, sp, #16
 801c276:	60f8      	str	r0, [r7, #12]
 801c278:	60b9      	str	r1, [r7, #8]
 801c27a:	607a      	str	r2, [r7, #4]
 801c27c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c27e:	68bb      	ldr	r3, [r7, #8]
 801c280:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d009      	beq.n	801c29c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c288:	68bb      	ldr	r3, [r7, #8]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d003      	beq.n	801c296 <ip4_output_if+0x26>
 801c28e:	68bb      	ldr	r3, [r7, #8]
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d102      	bne.n	801c29c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c298:	3304      	adds	r3, #4
 801c29a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c29c:	78fa      	ldrb	r2, [r7, #3]
 801c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2a0:	9302      	str	r3, [sp, #8]
 801c2a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c2a6:	9301      	str	r3, [sp, #4]
 801c2a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c2ac:	9300      	str	r3, [sp, #0]
 801c2ae:	4613      	mov	r3, r2
 801c2b0:	687a      	ldr	r2, [r7, #4]
 801c2b2:	6979      	ldr	r1, [r7, #20]
 801c2b4:	68f8      	ldr	r0, [r7, #12]
 801c2b6:	f000 f805 	bl	801c2c4 <ip4_output_if_src>
 801c2ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	3718      	adds	r7, #24
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bd80      	pop	{r7, pc}

0801c2c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c2c4:	b580      	push	{r7, lr}
 801c2c6:	b088      	sub	sp, #32
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	60f8      	str	r0, [r7, #12]
 801c2cc:	60b9      	str	r1, [r7, #8]
 801c2ce:	607a      	str	r2, [r7, #4]
 801c2d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	7b9b      	ldrb	r3, [r3, #14]
 801c2d6:	2b01      	cmp	r3, #1
 801c2d8:	d006      	beq.n	801c2e8 <ip4_output_if_src+0x24>
 801c2da:	4b4b      	ldr	r3, [pc, #300]	@ (801c408 <ip4_output_if_src+0x144>)
 801c2dc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c2e0:	494a      	ldr	r1, [pc, #296]	@ (801c40c <ip4_output_if_src+0x148>)
 801c2e2:	484b      	ldr	r0, [pc, #300]	@ (801c410 <ip4_output_if_src+0x14c>)
 801c2e4:	f002 f83e 	bl	801e364 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d060      	beq.n	801c3b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c2ee:	2314      	movs	r3, #20
 801c2f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c2f2:	2114      	movs	r1, #20
 801c2f4:	68f8      	ldr	r0, [r7, #12]
 801c2f6:	f7f7 fb4b 	bl	8013990 <pbuf_add_header>
 801c2fa:	4603      	mov	r3, r0
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d002      	beq.n	801c306 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c300:	f06f 0301 	mvn.w	r3, #1
 801c304:	e07c      	b.n	801c400 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	685b      	ldr	r3, [r3, #4]
 801c30a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	895b      	ldrh	r3, [r3, #10]
 801c310:	2b13      	cmp	r3, #19
 801c312:	d806      	bhi.n	801c322 <ip4_output_if_src+0x5e>
 801c314:	4b3c      	ldr	r3, [pc, #240]	@ (801c408 <ip4_output_if_src+0x144>)
 801c316:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c31a:	493e      	ldr	r1, [pc, #248]	@ (801c414 <ip4_output_if_src+0x150>)
 801c31c:	483c      	ldr	r0, [pc, #240]	@ (801c410 <ip4_output_if_src+0x14c>)
 801c31e:	f002 f821 	bl	801e364 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c322:	69fb      	ldr	r3, [r7, #28]
 801c324:	78fa      	ldrb	r2, [r7, #3]
 801c326:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c328:	69fb      	ldr	r3, [r7, #28]
 801c32a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c32e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	681a      	ldr	r2, [r3, #0]
 801c334:	69fb      	ldr	r3, [r7, #28]
 801c336:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c338:	8b7b      	ldrh	r3, [r7, #26]
 801c33a:	089b      	lsrs	r3, r3, #2
 801c33c:	b29b      	uxth	r3, r3
 801c33e:	b2db      	uxtb	r3, r3
 801c340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c344:	b2da      	uxtb	r2, r3
 801c346:	69fb      	ldr	r3, [r7, #28]
 801c348:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c34a:	69fb      	ldr	r3, [r7, #28]
 801c34c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c350:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	891b      	ldrh	r3, [r3, #8]
 801c356:	4618      	mov	r0, r3
 801c358:	f7f5 fcf4 	bl	8011d44 <lwip_htons>
 801c35c:	4603      	mov	r3, r0
 801c35e:	461a      	mov	r2, r3
 801c360:	69fb      	ldr	r3, [r7, #28]
 801c362:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c364:	69fb      	ldr	r3, [r7, #28]
 801c366:	2200      	movs	r2, #0
 801c368:	719a      	strb	r2, [r3, #6]
 801c36a:	2200      	movs	r2, #0
 801c36c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c36e:	4b2a      	ldr	r3, [pc, #168]	@ (801c418 <ip4_output_if_src+0x154>)
 801c370:	881b      	ldrh	r3, [r3, #0]
 801c372:	4618      	mov	r0, r3
 801c374:	f7f5 fce6 	bl	8011d44 <lwip_htons>
 801c378:	4603      	mov	r3, r0
 801c37a:	461a      	mov	r2, r3
 801c37c:	69fb      	ldr	r3, [r7, #28]
 801c37e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c380:	4b25      	ldr	r3, [pc, #148]	@ (801c418 <ip4_output_if_src+0x154>)
 801c382:	881b      	ldrh	r3, [r3, #0]
 801c384:	3301      	adds	r3, #1
 801c386:	b29a      	uxth	r2, r3
 801c388:	4b23      	ldr	r3, [pc, #140]	@ (801c418 <ip4_output_if_src+0x154>)
 801c38a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d104      	bne.n	801c39c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c392:	4b22      	ldr	r3, [pc, #136]	@ (801c41c <ip4_output_if_src+0x158>)
 801c394:	681a      	ldr	r2, [r3, #0]
 801c396:	69fb      	ldr	r3, [r7, #28]
 801c398:	60da      	str	r2, [r3, #12]
 801c39a:	e003      	b.n	801c3a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	681a      	ldr	r2, [r3, #0]
 801c3a0:	69fb      	ldr	r3, [r7, #28]
 801c3a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c3a4:	69fb      	ldr	r3, [r7, #28]
 801c3a6:	2200      	movs	r2, #0
 801c3a8:	729a      	strb	r2, [r3, #10]
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	72da      	strb	r2, [r3, #11]
 801c3ae:	e00f      	b.n	801c3d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	895b      	ldrh	r3, [r3, #10]
 801c3b4:	2b13      	cmp	r3, #19
 801c3b6:	d802      	bhi.n	801c3be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c3b8:	f06f 0301 	mvn.w	r3, #1
 801c3bc:	e020      	b.n	801c400 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	685b      	ldr	r3, [r3, #4]
 801c3c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c3c4:	69fb      	ldr	r3, [r7, #28]
 801c3c6:	691b      	ldr	r3, [r3, #16]
 801c3c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c3ca:	f107 0314 	add.w	r3, r7, #20
 801c3ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d00c      	beq.n	801c3f2 <ip4_output_if_src+0x12e>
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	891a      	ldrh	r2, [r3, #8]
 801c3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c3e0:	429a      	cmp	r2, r3
 801c3e2:	d906      	bls.n	801c3f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c3e4:	687a      	ldr	r2, [r7, #4]
 801c3e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c3e8:	68f8      	ldr	r0, [r7, #12]
 801c3ea:	f000 fe91 	bl	801d110 <ip4_frag>
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	e006      	b.n	801c400 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3f4:	695b      	ldr	r3, [r3, #20]
 801c3f6:	687a      	ldr	r2, [r7, #4]
 801c3f8:	68f9      	ldr	r1, [r7, #12]
 801c3fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c3fc:	4798      	blx	r3
 801c3fe:	4603      	mov	r3, r0
}
 801c400:	4618      	mov	r0, r3
 801c402:	3720      	adds	r7, #32
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}
 801c408:	08024028 	.word	0x08024028
 801c40c:	0802405c 	.word	0x0802405c
 801c410:	08024068 	.word	0x08024068
 801c414:	08024090 	.word	0x08024090
 801c418:	2000fe0e 	.word	0x2000fe0e
 801c41c:	080246c4 	.word	0x080246c4

0801c420 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c420:	b480      	push	{r7}
 801c422:	b085      	sub	sp, #20
 801c424:	af00      	add	r7, sp, #0
 801c426:	6078      	str	r0, [r7, #4]
 801c428:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c434:	d002      	beq.n	801c43c <ip4_addr_isbroadcast_u32+0x1c>
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d101      	bne.n	801c440 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c43c:	2301      	movs	r3, #1
 801c43e:	e02a      	b.n	801c496 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c446:	f003 0302 	and.w	r3, r3, #2
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d101      	bne.n	801c452 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c44e:	2300      	movs	r3, #0
 801c450:	e021      	b.n	801c496 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c452:	683b      	ldr	r3, [r7, #0]
 801c454:	3304      	adds	r3, #4
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	687a      	ldr	r2, [r7, #4]
 801c45a:	429a      	cmp	r2, r3
 801c45c:	d101      	bne.n	801c462 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c45e:	2300      	movs	r3, #0
 801c460:	e019      	b.n	801c496 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c462:	68fa      	ldr	r2, [r7, #12]
 801c464:	683b      	ldr	r3, [r7, #0]
 801c466:	3304      	adds	r3, #4
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	405a      	eors	r2, r3
 801c46c:	683b      	ldr	r3, [r7, #0]
 801c46e:	3308      	adds	r3, #8
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	4013      	ands	r3, r2
 801c474:	2b00      	cmp	r3, #0
 801c476:	d10d      	bne.n	801c494 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c478:	683b      	ldr	r3, [r7, #0]
 801c47a:	3308      	adds	r3, #8
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	43da      	mvns	r2, r3
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c484:	683b      	ldr	r3, [r7, #0]
 801c486:	3308      	adds	r3, #8
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c48c:	429a      	cmp	r2, r3
 801c48e:	d101      	bne.n	801c494 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c490:	2301      	movs	r3, #1
 801c492:	e000      	b.n	801c496 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c494:	2300      	movs	r3, #0
  }
}
 801c496:	4618      	mov	r0, r3
 801c498:	3714      	adds	r7, #20
 801c49a:	46bd      	mov	sp, r7
 801c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4a0:	4770      	bx	lr

0801c4a2 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801c4a2:	b580      	push	{r7, lr}
 801c4a4:	b084      	sub	sp, #16
 801c4a6:	af00      	add	r7, sp, #0
 801c4a8:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 801c4aa:	f107 030c 	add.w	r3, r7, #12
 801c4ae:	4619      	mov	r1, r3
 801c4b0:	6878      	ldr	r0, [r7, #4]
 801c4b2:	f000 f80b 	bl	801c4cc <ip4addr_aton>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d001      	beq.n	801c4c0 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	e001      	b.n	801c4c4 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801c4c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	3710      	adds	r7, #16
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bd80      	pop	{r7, pc}

0801c4cc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b08a      	sub	sp, #40	@ 0x28
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
 801c4d4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801c4d6:	f107 030c 	add.w	r3, r7, #12
 801c4da:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	781b      	ldrb	r3, [r3, #0]
 801c4e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801c4e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	4a89      	ldr	r2, [pc, #548]	@ (801c710 <ip4addr_aton+0x244>)
 801c4ec:	4413      	add	r3, r2
 801c4ee:	781b      	ldrb	r3, [r3, #0]
 801c4f0:	f003 0304 	and.w	r3, r3, #4
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d101      	bne.n	801c4fc <ip4addr_aton+0x30>
      return 0;
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	e105      	b.n	801c708 <ip4addr_aton+0x23c>
    }
    val = 0;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801c500:	230a      	movs	r3, #10
 801c502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801c506:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c50a:	2b30      	cmp	r3, #48	@ 0x30
 801c50c:	d11c      	bne.n	801c548 <ip4addr_aton+0x7c>
      c = *++cp;
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	3301      	adds	r3, #1
 801c512:	607b      	str	r3, [r7, #4]
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	781b      	ldrb	r3, [r3, #0]
 801c518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801c51c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c520:	2b78      	cmp	r3, #120	@ 0x78
 801c522:	d003      	beq.n	801c52c <ip4addr_aton+0x60>
 801c524:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c528:	2b58      	cmp	r3, #88	@ 0x58
 801c52a:	d10a      	bne.n	801c542 <ip4addr_aton+0x76>
        base = 16;
 801c52c:	2310      	movs	r3, #16
 801c52e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	3301      	adds	r3, #1
 801c536:	607b      	str	r3, [r7, #4]
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	781b      	ldrb	r3, [r3, #0]
 801c53c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801c540:	e002      	b.n	801c548 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801c542:	2308      	movs	r3, #8
 801c544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801c548:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c54c:	3301      	adds	r3, #1
 801c54e:	4a70      	ldr	r2, [pc, #448]	@ (801c710 <ip4addr_aton+0x244>)
 801c550:	4413      	add	r3, r2
 801c552:	781b      	ldrb	r3, [r3, #0]
 801c554:	f003 0304 	and.w	r3, r3, #4
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d011      	beq.n	801c580 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801c55c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c562:	fb03 f202 	mul.w	r2, r3, r2
 801c566:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c56a:	4413      	add	r3, r2
 801c56c:	3b30      	subs	r3, #48	@ 0x30
 801c56e:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	3301      	adds	r3, #1
 801c574:	607b      	str	r3, [r7, #4]
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	781b      	ldrb	r3, [r3, #0]
 801c57a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801c57e:	e7e3      	b.n	801c548 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801c580:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c584:	2b10      	cmp	r3, #16
 801c586:	d127      	bne.n	801c5d8 <ip4addr_aton+0x10c>
 801c588:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c58c:	3301      	adds	r3, #1
 801c58e:	4a60      	ldr	r2, [pc, #384]	@ (801c710 <ip4addr_aton+0x244>)
 801c590:	4413      	add	r3, r2
 801c592:	781b      	ldrb	r3, [r3, #0]
 801c594:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d01d      	beq.n	801c5d8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c59e:	011b      	lsls	r3, r3, #4
 801c5a0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c5a4:	f102 010a 	add.w	r1, r2, #10
 801c5a8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801c5ac:	3201      	adds	r2, #1
 801c5ae:	4858      	ldr	r0, [pc, #352]	@ (801c710 <ip4addr_aton+0x244>)
 801c5b0:	4402      	add	r2, r0
 801c5b2:	7812      	ldrb	r2, [r2, #0]
 801c5b4:	f002 0203 	and.w	r2, r2, #3
 801c5b8:	2a02      	cmp	r2, #2
 801c5ba:	d101      	bne.n	801c5c0 <ip4addr_aton+0xf4>
 801c5bc:	2261      	movs	r2, #97	@ 0x61
 801c5be:	e000      	b.n	801c5c2 <ip4addr_aton+0xf6>
 801c5c0:	2241      	movs	r2, #65	@ 0x41
 801c5c2:	1a8a      	subs	r2, r1, r2
 801c5c4:	4313      	orrs	r3, r2
 801c5c6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	3301      	adds	r3, #1
 801c5cc:	607b      	str	r3, [r7, #4]
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	781b      	ldrb	r3, [r3, #0]
 801c5d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801c5d6:	e7b7      	b.n	801c548 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801c5d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c5dc:	2b2e      	cmp	r3, #46	@ 0x2e
 801c5de:	d114      	bne.n	801c60a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801c5e0:	f107 030c 	add.w	r3, r7, #12
 801c5e4:	330c      	adds	r3, #12
 801c5e6:	69fa      	ldr	r2, [r7, #28]
 801c5e8:	429a      	cmp	r2, r3
 801c5ea:	d301      	bcc.n	801c5f0 <ip4addr_aton+0x124>
        return 0;
 801c5ec:	2300      	movs	r3, #0
 801c5ee:	e08b      	b.n	801c708 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801c5f0:	69fb      	ldr	r3, [r7, #28]
 801c5f2:	1d1a      	adds	r2, r3, #4
 801c5f4:	61fa      	str	r2, [r7, #28]
 801c5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5f8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	3301      	adds	r3, #1
 801c5fe:	607b      	str	r3, [r7, #4]
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	781b      	ldrb	r3, [r3, #0]
 801c604:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801c608:	e76c      	b.n	801c4e4 <ip4addr_aton+0x18>
    } else {
      break;
 801c60a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801c60c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c610:	2b00      	cmp	r3, #0
 801c612:	d00b      	beq.n	801c62c <ip4addr_aton+0x160>
 801c614:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801c618:	3301      	adds	r3, #1
 801c61a:	4a3d      	ldr	r2, [pc, #244]	@ (801c710 <ip4addr_aton+0x244>)
 801c61c:	4413      	add	r3, r2
 801c61e:	781b      	ldrb	r3, [r3, #0]
 801c620:	f003 0308 	and.w	r3, r3, #8
 801c624:	2b00      	cmp	r3, #0
 801c626:	d101      	bne.n	801c62c <ip4addr_aton+0x160>
    return 0;
 801c628:	2300      	movs	r3, #0
 801c62a:	e06d      	b.n	801c708 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801c62c:	f107 030c 	add.w	r3, r7, #12
 801c630:	69fa      	ldr	r2, [r7, #28]
 801c632:	1ad3      	subs	r3, r2, r3
 801c634:	109b      	asrs	r3, r3, #2
 801c636:	3301      	adds	r3, #1
 801c638:	2b04      	cmp	r3, #4
 801c63a:	d853      	bhi.n	801c6e4 <ip4addr_aton+0x218>
 801c63c:	a201      	add	r2, pc, #4	@ (adr r2, 801c644 <ip4addr_aton+0x178>)
 801c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c642:	bf00      	nop
 801c644:	0801c659 	.word	0x0801c659
 801c648:	0801c6f3 	.word	0x0801c6f3
 801c64c:	0801c65d 	.word	0x0801c65d
 801c650:	0801c67f 	.word	0x0801c67f
 801c654:	0801c6ad 	.word	0x0801c6ad

    case 0:
      return 0;       /* initial nondigit */
 801c658:	2300      	movs	r3, #0
 801c65a:	e055      	b.n	801c708 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801c65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c65e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c662:	d301      	bcc.n	801c668 <ip4addr_aton+0x19c>
        return 0;
 801c664:	2300      	movs	r3, #0
 801c666:	e04f      	b.n	801c708 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	2bff      	cmp	r3, #255	@ 0xff
 801c66c:	d901      	bls.n	801c672 <ip4addr_aton+0x1a6>
        return 0;
 801c66e:	2300      	movs	r3, #0
 801c670:	e04a      	b.n	801c708 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	061b      	lsls	r3, r3, #24
 801c676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c678:	4313      	orrs	r3, r2
 801c67a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801c67c:	e03a      	b.n	801c6f4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c684:	d301      	bcc.n	801c68a <ip4addr_aton+0x1be>
        return 0;
 801c686:	2300      	movs	r3, #0
 801c688:	e03e      	b.n	801c708 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	2bff      	cmp	r3, #255	@ 0xff
 801c68e:	d802      	bhi.n	801c696 <ip4addr_aton+0x1ca>
 801c690:	693b      	ldr	r3, [r7, #16]
 801c692:	2bff      	cmp	r3, #255	@ 0xff
 801c694:	d901      	bls.n	801c69a <ip4addr_aton+0x1ce>
        return 0;
 801c696:	2300      	movs	r3, #0
 801c698:	e036      	b.n	801c708 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	061a      	lsls	r2, r3, #24
 801c69e:	693b      	ldr	r3, [r7, #16]
 801c6a0:	041b      	lsls	r3, r3, #16
 801c6a2:	4313      	orrs	r3, r2
 801c6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6a6:	4313      	orrs	r3, r2
 801c6a8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801c6aa:	e023      	b.n	801c6f4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6ae:	2bff      	cmp	r3, #255	@ 0xff
 801c6b0:	d901      	bls.n	801c6b6 <ip4addr_aton+0x1ea>
        return 0;
 801c6b2:	2300      	movs	r3, #0
 801c6b4:	e028      	b.n	801c708 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	2bff      	cmp	r3, #255	@ 0xff
 801c6ba:	d805      	bhi.n	801c6c8 <ip4addr_aton+0x1fc>
 801c6bc:	693b      	ldr	r3, [r7, #16]
 801c6be:	2bff      	cmp	r3, #255	@ 0xff
 801c6c0:	d802      	bhi.n	801c6c8 <ip4addr_aton+0x1fc>
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	2bff      	cmp	r3, #255	@ 0xff
 801c6c6:	d901      	bls.n	801c6cc <ip4addr_aton+0x200>
        return 0;
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	e01d      	b.n	801c708 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	061a      	lsls	r2, r3, #24
 801c6d0:	693b      	ldr	r3, [r7, #16]
 801c6d2:	041b      	lsls	r3, r3, #16
 801c6d4:	431a      	orrs	r2, r3
 801c6d6:	697b      	ldr	r3, [r7, #20]
 801c6d8:	021b      	lsls	r3, r3, #8
 801c6da:	4313      	orrs	r3, r2
 801c6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6de:	4313      	orrs	r3, r2
 801c6e0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801c6e2:	e007      	b.n	801c6f4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801c6e4:	4b0b      	ldr	r3, [pc, #44]	@ (801c714 <ip4addr_aton+0x248>)
 801c6e6:	22f9      	movs	r2, #249	@ 0xf9
 801c6e8:	490b      	ldr	r1, [pc, #44]	@ (801c718 <ip4addr_aton+0x24c>)
 801c6ea:	480c      	ldr	r0, [pc, #48]	@ (801c71c <ip4addr_aton+0x250>)
 801c6ec:	f001 fe3a 	bl	801e364 <iprintf>
      break;
 801c6f0:	e000      	b.n	801c6f4 <ip4addr_aton+0x228>
      break;
 801c6f2:	bf00      	nop
  }
  if (addr) {
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d005      	beq.n	801c706 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801c6fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c6fc:	f7f5 fb37 	bl	8011d6e <lwip_htonl>
 801c700:	4602      	mov	r2, r0
 801c702:	683b      	ldr	r3, [r7, #0]
 801c704:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801c706:	2301      	movs	r3, #1
}
 801c708:	4618      	mov	r0, r3
 801c70a:	3728      	adds	r7, #40	@ 0x28
 801c70c:	46bd      	mov	sp, r7
 801c70e:	bd80      	pop	{r7, pc}
 801c710:	08024745 	.word	0x08024745
 801c714:	080240c0 	.word	0x080240c0
 801c718:	080240fc 	.word	0x080240fc
 801c71c:	08024108 	.word	0x08024108

0801c720 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c720:	b580      	push	{r7, lr}
 801c722:	b084      	sub	sp, #16
 801c724:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c726:	2300      	movs	r3, #0
 801c728:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c72a:	4b12      	ldr	r3, [pc, #72]	@ (801c774 <ip_reass_tmr+0x54>)
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c730:	e018      	b.n	801c764 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	7fdb      	ldrb	r3, [r3, #31]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d00b      	beq.n	801c752 <ip_reass_tmr+0x32>
      r->timer--;
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	7fdb      	ldrb	r3, [r3, #31]
 801c73e:	3b01      	subs	r3, #1
 801c740:	b2da      	uxtb	r2, r3
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	60fb      	str	r3, [r7, #12]
 801c750:	e008      	b.n	801c764 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c75c:	68b9      	ldr	r1, [r7, #8]
 801c75e:	6878      	ldr	r0, [r7, #4]
 801c760:	f000 f80a 	bl	801c778 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d1e3      	bne.n	801c732 <ip_reass_tmr+0x12>
    }
  }
}
 801c76a:	bf00      	nop
 801c76c:	bf00      	nop
 801c76e:	3710      	adds	r7, #16
 801c770:	46bd      	mov	sp, r7
 801c772:	bd80      	pop	{r7, pc}
 801c774:	2000fe10 	.word	0x2000fe10

0801c778 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b088      	sub	sp, #32
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
 801c780:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c782:	2300      	movs	r3, #0
 801c784:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c786:	683a      	ldr	r2, [r7, #0]
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	429a      	cmp	r2, r3
 801c78c:	d105      	bne.n	801c79a <ip_reass_free_complete_datagram+0x22>
 801c78e:	4b45      	ldr	r3, [pc, #276]	@ (801c8a4 <ip_reass_free_complete_datagram+0x12c>)
 801c790:	22ab      	movs	r2, #171	@ 0xab
 801c792:	4945      	ldr	r1, [pc, #276]	@ (801c8a8 <ip_reass_free_complete_datagram+0x130>)
 801c794:	4845      	ldr	r0, [pc, #276]	@ (801c8ac <ip_reass_free_complete_datagram+0x134>)
 801c796:	f001 fde5 	bl	801e364 <iprintf>
  if (prev != NULL) {
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d00a      	beq.n	801c7b6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	687a      	ldr	r2, [r7, #4]
 801c7a6:	429a      	cmp	r2, r3
 801c7a8:	d005      	beq.n	801c7b6 <ip_reass_free_complete_datagram+0x3e>
 801c7aa:	4b3e      	ldr	r3, [pc, #248]	@ (801c8a4 <ip_reass_free_complete_datagram+0x12c>)
 801c7ac:	22ad      	movs	r2, #173	@ 0xad
 801c7ae:	4940      	ldr	r1, [pc, #256]	@ (801c8b0 <ip_reass_free_complete_datagram+0x138>)
 801c7b0:	483e      	ldr	r0, [pc, #248]	@ (801c8ac <ip_reass_free_complete_datagram+0x134>)
 801c7b2:	f001 fdd7 	bl	801e364 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	685b      	ldr	r3, [r3, #4]
 801c7ba:	685b      	ldr	r3, [r3, #4]
 801c7bc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	889b      	ldrh	r3, [r3, #4]
 801c7c2:	b29b      	uxth	r3, r3
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d12a      	bne.n	801c81e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	685b      	ldr	r3, [r3, #4]
 801c7cc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	681a      	ldr	r2, [r3, #0]
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c7d6:	69bb      	ldr	r3, [r7, #24]
 801c7d8:	6858      	ldr	r0, [r3, #4]
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	3308      	adds	r3, #8
 801c7de:	2214      	movs	r2, #20
 801c7e0:	4619      	mov	r1, r3
 801c7e2:	f002 f820 	bl	801e826 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c7e6:	2101      	movs	r1, #1
 801c7e8:	69b8      	ldr	r0, [r7, #24]
 801c7ea:	f7ff fb09 	bl	801be00 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c7ee:	69b8      	ldr	r0, [r7, #24]
 801c7f0:	f7f7 f9f2 	bl	8013bd8 <pbuf_clen>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c7f8:	8bfa      	ldrh	r2, [r7, #30]
 801c7fa:	8a7b      	ldrh	r3, [r7, #18]
 801c7fc:	4413      	add	r3, r2
 801c7fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c802:	db05      	blt.n	801c810 <ip_reass_free_complete_datagram+0x98>
 801c804:	4b27      	ldr	r3, [pc, #156]	@ (801c8a4 <ip_reass_free_complete_datagram+0x12c>)
 801c806:	22bc      	movs	r2, #188	@ 0xbc
 801c808:	492a      	ldr	r1, [pc, #168]	@ (801c8b4 <ip_reass_free_complete_datagram+0x13c>)
 801c80a:	4828      	ldr	r0, [pc, #160]	@ (801c8ac <ip_reass_free_complete_datagram+0x134>)
 801c80c:	f001 fdaa 	bl	801e364 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c810:	8bfa      	ldrh	r2, [r7, #30]
 801c812:	8a7b      	ldrh	r3, [r7, #18]
 801c814:	4413      	add	r3, r2
 801c816:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c818:	69b8      	ldr	r0, [r7, #24]
 801c81a:	f7f7 f94f 	bl	8013abc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	685b      	ldr	r3, [r3, #4]
 801c822:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c824:	e01f      	b.n	801c866 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c826:	69bb      	ldr	r3, [r7, #24]
 801c828:	685b      	ldr	r3, [r3, #4]
 801c82a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c82c:	69bb      	ldr	r3, [r7, #24]
 801c82e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c836:	68f8      	ldr	r0, [r7, #12]
 801c838:	f7f7 f9ce 	bl	8013bd8 <pbuf_clen>
 801c83c:	4603      	mov	r3, r0
 801c83e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c840:	8bfa      	ldrh	r2, [r7, #30]
 801c842:	8a7b      	ldrh	r3, [r7, #18]
 801c844:	4413      	add	r3, r2
 801c846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c84a:	db05      	blt.n	801c858 <ip_reass_free_complete_datagram+0xe0>
 801c84c:	4b15      	ldr	r3, [pc, #84]	@ (801c8a4 <ip_reass_free_complete_datagram+0x12c>)
 801c84e:	22cc      	movs	r2, #204	@ 0xcc
 801c850:	4918      	ldr	r1, [pc, #96]	@ (801c8b4 <ip_reass_free_complete_datagram+0x13c>)
 801c852:	4816      	ldr	r0, [pc, #88]	@ (801c8ac <ip_reass_free_complete_datagram+0x134>)
 801c854:	f001 fd86 	bl	801e364 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c858:	8bfa      	ldrh	r2, [r7, #30]
 801c85a:	8a7b      	ldrh	r3, [r7, #18]
 801c85c:	4413      	add	r3, r2
 801c85e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c860:	68f8      	ldr	r0, [r7, #12]
 801c862:	f7f7 f92b 	bl	8013abc <pbuf_free>
  while (p != NULL) {
 801c866:	69bb      	ldr	r3, [r7, #24]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d1dc      	bne.n	801c826 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c86c:	6839      	ldr	r1, [r7, #0]
 801c86e:	6878      	ldr	r0, [r7, #4]
 801c870:	f000 f8c2 	bl	801c9f8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c874:	4b10      	ldr	r3, [pc, #64]	@ (801c8b8 <ip_reass_free_complete_datagram+0x140>)
 801c876:	881b      	ldrh	r3, [r3, #0]
 801c878:	8bfa      	ldrh	r2, [r7, #30]
 801c87a:	429a      	cmp	r2, r3
 801c87c:	d905      	bls.n	801c88a <ip_reass_free_complete_datagram+0x112>
 801c87e:	4b09      	ldr	r3, [pc, #36]	@ (801c8a4 <ip_reass_free_complete_datagram+0x12c>)
 801c880:	22d2      	movs	r2, #210	@ 0xd2
 801c882:	490e      	ldr	r1, [pc, #56]	@ (801c8bc <ip_reass_free_complete_datagram+0x144>)
 801c884:	4809      	ldr	r0, [pc, #36]	@ (801c8ac <ip_reass_free_complete_datagram+0x134>)
 801c886:	f001 fd6d 	bl	801e364 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c88a:	4b0b      	ldr	r3, [pc, #44]	@ (801c8b8 <ip_reass_free_complete_datagram+0x140>)
 801c88c:	881a      	ldrh	r2, [r3, #0]
 801c88e:	8bfb      	ldrh	r3, [r7, #30]
 801c890:	1ad3      	subs	r3, r2, r3
 801c892:	b29a      	uxth	r2, r3
 801c894:	4b08      	ldr	r3, [pc, #32]	@ (801c8b8 <ip_reass_free_complete_datagram+0x140>)
 801c896:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c898:	8bfb      	ldrh	r3, [r7, #30]
}
 801c89a:	4618      	mov	r0, r3
 801c89c:	3720      	adds	r7, #32
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	bd80      	pop	{r7, pc}
 801c8a2:	bf00      	nop
 801c8a4:	08024130 	.word	0x08024130
 801c8a8:	0802416c 	.word	0x0802416c
 801c8ac:	08024178 	.word	0x08024178
 801c8b0:	080241a0 	.word	0x080241a0
 801c8b4:	080241b4 	.word	0x080241b4
 801c8b8:	2000fe14 	.word	0x2000fe14
 801c8bc:	080241d4 	.word	0x080241d4

0801c8c0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b08a      	sub	sp, #40	@ 0x28
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
 801c8c8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c8ce:	2300      	movs	r3, #0
 801c8d0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c8da:	2300      	movs	r3, #0
 801c8dc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c8de:	4b28      	ldr	r3, [pc, #160]	@ (801c980 <ip_reass_remove_oldest_datagram+0xc0>)
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c8e4:	e030      	b.n	801c948 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8e8:	695a      	ldr	r2, [r3, #20]
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	68db      	ldr	r3, [r3, #12]
 801c8ee:	429a      	cmp	r2, r3
 801c8f0:	d10c      	bne.n	801c90c <ip_reass_remove_oldest_datagram+0x4c>
 801c8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8f4:	699a      	ldr	r2, [r3, #24]
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	691b      	ldr	r3, [r3, #16]
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	d106      	bne.n	801c90c <ip_reass_remove_oldest_datagram+0x4c>
 801c8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c900:	899a      	ldrh	r2, [r3, #12]
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	889b      	ldrh	r3, [r3, #4]
 801c906:	b29b      	uxth	r3, r3
 801c908:	429a      	cmp	r2, r3
 801c90a:	d014      	beq.n	801c936 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c90c:	693b      	ldr	r3, [r7, #16]
 801c90e:	3301      	adds	r3, #1
 801c910:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c912:	6a3b      	ldr	r3, [r7, #32]
 801c914:	2b00      	cmp	r3, #0
 801c916:	d104      	bne.n	801c922 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c91a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c91c:	69fb      	ldr	r3, [r7, #28]
 801c91e:	61bb      	str	r3, [r7, #24]
 801c920:	e009      	b.n	801c936 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c924:	7fda      	ldrb	r2, [r3, #31]
 801c926:	6a3b      	ldr	r3, [r7, #32]
 801c928:	7fdb      	ldrb	r3, [r3, #31]
 801c92a:	429a      	cmp	r2, r3
 801c92c:	d803      	bhi.n	801c936 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c930:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c932:	69fb      	ldr	r3, [r7, #28]
 801c934:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d001      	beq.n	801c942 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c940:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d1cb      	bne.n	801c8e6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c94e:	6a3b      	ldr	r3, [r7, #32]
 801c950:	2b00      	cmp	r3, #0
 801c952:	d008      	beq.n	801c966 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c954:	69b9      	ldr	r1, [r7, #24]
 801c956:	6a38      	ldr	r0, [r7, #32]
 801c958:	f7ff ff0e 	bl	801c778 <ip_reass_free_complete_datagram>
 801c95c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c95e:	697a      	ldr	r2, [r7, #20]
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	4413      	add	r3, r2
 801c964:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c966:	697a      	ldr	r2, [r7, #20]
 801c968:	683b      	ldr	r3, [r7, #0]
 801c96a:	429a      	cmp	r2, r3
 801c96c:	da02      	bge.n	801c974 <ip_reass_remove_oldest_datagram+0xb4>
 801c96e:	693b      	ldr	r3, [r7, #16]
 801c970:	2b01      	cmp	r3, #1
 801c972:	dcac      	bgt.n	801c8ce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c974:	697b      	ldr	r3, [r7, #20]
}
 801c976:	4618      	mov	r0, r3
 801c978:	3728      	adds	r7, #40	@ 0x28
 801c97a:	46bd      	mov	sp, r7
 801c97c:	bd80      	pop	{r7, pc}
 801c97e:	bf00      	nop
 801c980:	2000fe10 	.word	0x2000fe10

0801c984 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c984:	b580      	push	{r7, lr}
 801c986:	b084      	sub	sp, #16
 801c988:	af00      	add	r7, sp, #0
 801c98a:	6078      	str	r0, [r7, #4]
 801c98c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c98e:	2004      	movs	r0, #4
 801c990:	f7f6 f97a 	bl	8012c88 <memp_malloc>
 801c994:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d110      	bne.n	801c9be <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c99c:	6839      	ldr	r1, [r7, #0]
 801c99e:	6878      	ldr	r0, [r7, #4]
 801c9a0:	f7ff ff8e 	bl	801c8c0 <ip_reass_remove_oldest_datagram>
 801c9a4:	4602      	mov	r2, r0
 801c9a6:	683b      	ldr	r3, [r7, #0]
 801c9a8:	4293      	cmp	r3, r2
 801c9aa:	dc03      	bgt.n	801c9b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c9ac:	2004      	movs	r0, #4
 801c9ae:	f7f6 f96b 	bl	8012c88 <memp_malloc>
 801c9b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d101      	bne.n	801c9be <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c9ba:	2300      	movs	r3, #0
 801c9bc:	e016      	b.n	801c9ec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c9be:	2220      	movs	r2, #32
 801c9c0:	2100      	movs	r1, #0
 801c9c2:	68f8      	ldr	r0, [r7, #12]
 801c9c4:	f001 fe60 	bl	801e688 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	220f      	movs	r2, #15
 801c9cc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c9ce:	4b09      	ldr	r3, [pc, #36]	@ (801c9f4 <ip_reass_enqueue_new_datagram+0x70>)
 801c9d0:	681a      	ldr	r2, [r3, #0]
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c9d6:	4a07      	ldr	r2, [pc, #28]	@ (801c9f4 <ip_reass_enqueue_new_datagram+0x70>)
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	3308      	adds	r3, #8
 801c9e0:	2214      	movs	r2, #20
 801c9e2:	6879      	ldr	r1, [r7, #4]
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	f001 ff1e 	bl	801e826 <memcpy>
  return ipr;
 801c9ea:	68fb      	ldr	r3, [r7, #12]
}
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	3710      	adds	r7, #16
 801c9f0:	46bd      	mov	sp, r7
 801c9f2:	bd80      	pop	{r7, pc}
 801c9f4:	2000fe10 	.word	0x2000fe10

0801c9f8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b082      	sub	sp, #8
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	6078      	str	r0, [r7, #4]
 801ca00:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ca02:	4b10      	ldr	r3, [pc, #64]	@ (801ca44 <ip_reass_dequeue_datagram+0x4c>)
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	687a      	ldr	r2, [r7, #4]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d104      	bne.n	801ca16 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	4a0c      	ldr	r2, [pc, #48]	@ (801ca44 <ip_reass_dequeue_datagram+0x4c>)
 801ca12:	6013      	str	r3, [r2, #0]
 801ca14:	e00d      	b.n	801ca32 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ca16:	683b      	ldr	r3, [r7, #0]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d106      	bne.n	801ca2a <ip_reass_dequeue_datagram+0x32>
 801ca1c:	4b0a      	ldr	r3, [pc, #40]	@ (801ca48 <ip_reass_dequeue_datagram+0x50>)
 801ca1e:	f240 1245 	movw	r2, #325	@ 0x145
 801ca22:	490a      	ldr	r1, [pc, #40]	@ (801ca4c <ip_reass_dequeue_datagram+0x54>)
 801ca24:	480a      	ldr	r0, [pc, #40]	@ (801ca50 <ip_reass_dequeue_datagram+0x58>)
 801ca26:	f001 fc9d 	bl	801e364 <iprintf>
    prev->next = ipr->next;
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	681a      	ldr	r2, [r3, #0]
 801ca2e:	683b      	ldr	r3, [r7, #0]
 801ca30:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ca32:	6879      	ldr	r1, [r7, #4]
 801ca34:	2004      	movs	r0, #4
 801ca36:	f7f6 f99d 	bl	8012d74 <memp_free>
}
 801ca3a:	bf00      	nop
 801ca3c:	3708      	adds	r7, #8
 801ca3e:	46bd      	mov	sp, r7
 801ca40:	bd80      	pop	{r7, pc}
 801ca42:	bf00      	nop
 801ca44:	2000fe10 	.word	0x2000fe10
 801ca48:	08024130 	.word	0x08024130
 801ca4c:	080241f8 	.word	0x080241f8
 801ca50:	08024178 	.word	0x08024178

0801ca54 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ca54:	b580      	push	{r7, lr}
 801ca56:	b08c      	sub	sp, #48	@ 0x30
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	60f8      	str	r0, [r7, #12]
 801ca5c:	60b9      	str	r1, [r7, #8]
 801ca5e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ca60:	2300      	movs	r3, #0
 801ca62:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ca64:	2301      	movs	r3, #1
 801ca66:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ca68:	68bb      	ldr	r3, [r7, #8]
 801ca6a:	685b      	ldr	r3, [r3, #4]
 801ca6c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ca6e:	69fb      	ldr	r3, [r7, #28]
 801ca70:	885b      	ldrh	r3, [r3, #2]
 801ca72:	b29b      	uxth	r3, r3
 801ca74:	4618      	mov	r0, r3
 801ca76:	f7f5 f965 	bl	8011d44 <lwip_htons>
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ca7e:	69fb      	ldr	r3, [r7, #28]
 801ca80:	781b      	ldrb	r3, [r3, #0]
 801ca82:	f003 030f 	and.w	r3, r3, #15
 801ca86:	b2db      	uxtb	r3, r3
 801ca88:	009b      	lsls	r3, r3, #2
 801ca8a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ca8c:	7e7b      	ldrb	r3, [r7, #25]
 801ca8e:	b29b      	uxth	r3, r3
 801ca90:	8b7a      	ldrh	r2, [r7, #26]
 801ca92:	429a      	cmp	r2, r3
 801ca94:	d202      	bcs.n	801ca9c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ca96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ca9a:	e135      	b.n	801cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ca9c:	7e7b      	ldrb	r3, [r7, #25]
 801ca9e:	b29b      	uxth	r3, r3
 801caa0:	8b7a      	ldrh	r2, [r7, #26]
 801caa2:	1ad3      	subs	r3, r2, r3
 801caa4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801caa6:	69fb      	ldr	r3, [r7, #28]
 801caa8:	88db      	ldrh	r3, [r3, #6]
 801caaa:	b29b      	uxth	r3, r3
 801caac:	4618      	mov	r0, r3
 801caae:	f7f5 f949 	bl	8011d44 <lwip_htons>
 801cab2:	4603      	mov	r3, r0
 801cab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cab8:	b29b      	uxth	r3, r3
 801caba:	00db      	lsls	r3, r3, #3
 801cabc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801cabe:	68bb      	ldr	r3, [r7, #8]
 801cac0:	685b      	ldr	r3, [r3, #4]
 801cac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801cac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cac6:	2200      	movs	r2, #0
 801cac8:	701a      	strb	r2, [r3, #0]
 801caca:	2200      	movs	r2, #0
 801cacc:	705a      	strb	r2, [r3, #1]
 801cace:	2200      	movs	r2, #0
 801cad0:	709a      	strb	r2, [r3, #2]
 801cad2:	2200      	movs	r2, #0
 801cad4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cad8:	8afa      	ldrh	r2, [r7, #22]
 801cada:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801cadc:	8afa      	ldrh	r2, [r7, #22]
 801cade:	8b7b      	ldrh	r3, [r7, #26]
 801cae0:	4413      	add	r3, r2
 801cae2:	b29a      	uxth	r2, r3
 801cae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cae6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801cae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801caea:	88db      	ldrh	r3, [r3, #6]
 801caec:	b29b      	uxth	r3, r3
 801caee:	8afa      	ldrh	r2, [r7, #22]
 801caf0:	429a      	cmp	r2, r3
 801caf2:	d902      	bls.n	801cafa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801caf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801caf8:	e106      	b.n	801cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	685b      	ldr	r3, [r3, #4]
 801cafe:	627b      	str	r3, [r7, #36]	@ 0x24
 801cb00:	e068      	b.n	801cbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb04:	685b      	ldr	r3, [r3, #4]
 801cb06:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801cb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb0a:	889b      	ldrh	r3, [r3, #4]
 801cb0c:	b29a      	uxth	r2, r3
 801cb0e:	693b      	ldr	r3, [r7, #16]
 801cb10:	889b      	ldrh	r3, [r3, #4]
 801cb12:	b29b      	uxth	r3, r3
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d235      	bcs.n	801cb84 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cb1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801cb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d020      	beq.n	801cb66 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801cb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb26:	889b      	ldrh	r3, [r3, #4]
 801cb28:	b29a      	uxth	r2, r3
 801cb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb2c:	88db      	ldrh	r3, [r3, #6]
 801cb2e:	b29b      	uxth	r3, r3
 801cb30:	429a      	cmp	r2, r3
 801cb32:	d307      	bcc.n	801cb44 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801cb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb36:	88db      	ldrh	r3, [r3, #6]
 801cb38:	b29a      	uxth	r2, r3
 801cb3a:	693b      	ldr	r3, [r7, #16]
 801cb3c:	889b      	ldrh	r3, [r3, #4]
 801cb3e:	b29b      	uxth	r3, r3
 801cb40:	429a      	cmp	r2, r3
 801cb42:	d902      	bls.n	801cb4a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cb44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cb48:	e0de      	b.n	801cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801cb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb4c:	68ba      	ldr	r2, [r7, #8]
 801cb4e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801cb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb52:	88db      	ldrh	r3, [r3, #6]
 801cb54:	b29a      	uxth	r2, r3
 801cb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb58:	889b      	ldrh	r3, [r3, #4]
 801cb5a:	b29b      	uxth	r3, r3
 801cb5c:	429a      	cmp	r2, r3
 801cb5e:	d03d      	beq.n	801cbdc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cb60:	2300      	movs	r3, #0
 801cb62:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801cb64:	e03a      	b.n	801cbdc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801cb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb68:	88db      	ldrh	r3, [r3, #6]
 801cb6a:	b29a      	uxth	r2, r3
 801cb6c:	693b      	ldr	r3, [r7, #16]
 801cb6e:	889b      	ldrh	r3, [r3, #4]
 801cb70:	b29b      	uxth	r3, r3
 801cb72:	429a      	cmp	r2, r3
 801cb74:	d902      	bls.n	801cb7c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cb76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cb7a:	e0c5      	b.n	801cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	68ba      	ldr	r2, [r7, #8]
 801cb80:	605a      	str	r2, [r3, #4]
      break;
 801cb82:	e02b      	b.n	801cbdc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801cb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb86:	889b      	ldrh	r3, [r3, #4]
 801cb88:	b29a      	uxth	r2, r3
 801cb8a:	693b      	ldr	r3, [r7, #16]
 801cb8c:	889b      	ldrh	r3, [r3, #4]
 801cb8e:	b29b      	uxth	r3, r3
 801cb90:	429a      	cmp	r2, r3
 801cb92:	d102      	bne.n	801cb9a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cb94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cb98:	e0b6      	b.n	801cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801cb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb9c:	889b      	ldrh	r3, [r3, #4]
 801cb9e:	b29a      	uxth	r2, r3
 801cba0:	693b      	ldr	r3, [r7, #16]
 801cba2:	88db      	ldrh	r3, [r3, #6]
 801cba4:	b29b      	uxth	r3, r3
 801cba6:	429a      	cmp	r2, r3
 801cba8:	d202      	bcs.n	801cbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cbaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cbae:	e0ab      	b.n	801cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801cbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d009      	beq.n	801cbca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801cbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb8:	88db      	ldrh	r3, [r3, #6]
 801cbba:	b29a      	uxth	r2, r3
 801cbbc:	693b      	ldr	r3, [r7, #16]
 801cbbe:	889b      	ldrh	r3, [r3, #4]
 801cbc0:	b29b      	uxth	r3, r3
 801cbc2:	429a      	cmp	r2, r3
 801cbc4:	d001      	beq.n	801cbca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cbc6:	2300      	movs	r3, #0
 801cbc8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801cbca:	693b      	ldr	r3, [r7, #16]
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801cbd0:	693b      	ldr	r3, [r7, #16]
 801cbd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801cbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d193      	bne.n	801cb02 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801cbda:	e000      	b.n	801cbde <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801cbdc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d12d      	bne.n	801cc40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801cbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d01c      	beq.n	801cc24 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbec:	88db      	ldrh	r3, [r3, #6]
 801cbee:	b29a      	uxth	r2, r3
 801cbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbf2:	889b      	ldrh	r3, [r3, #4]
 801cbf4:	b29b      	uxth	r3, r3
 801cbf6:	429a      	cmp	r2, r3
 801cbf8:	d906      	bls.n	801cc08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801cbfa:	4b45      	ldr	r3, [pc, #276]	@ (801cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cbfc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801cc00:	4944      	ldr	r1, [pc, #272]	@ (801cd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801cc02:	4845      	ldr	r0, [pc, #276]	@ (801cd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cc04:	f001 fbae 	bl	801e364 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc0a:	68ba      	ldr	r2, [r7, #8]
 801cc0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801cc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc10:	88db      	ldrh	r3, [r3, #6]
 801cc12:	b29a      	uxth	r2, r3
 801cc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc16:	889b      	ldrh	r3, [r3, #4]
 801cc18:	b29b      	uxth	r3, r3
 801cc1a:	429a      	cmp	r2, r3
 801cc1c:	d010      	beq.n	801cc40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801cc1e:	2300      	movs	r3, #0
 801cc20:	623b      	str	r3, [r7, #32]
 801cc22:	e00d      	b.n	801cc40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	685b      	ldr	r3, [r3, #4]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d006      	beq.n	801cc3a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801cc2c:	4b38      	ldr	r3, [pc, #224]	@ (801cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cc2e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801cc32:	493a      	ldr	r1, [pc, #232]	@ (801cd1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801cc34:	4838      	ldr	r0, [pc, #224]	@ (801cd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cc36:	f001 fb95 	bl	801e364 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	68ba      	ldr	r2, [r7, #8]
 801cc3e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d105      	bne.n	801cc52 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	7f9b      	ldrb	r3, [r3, #30]
 801cc4a:	f003 0301 	and.w	r3, r3, #1
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d059      	beq.n	801cd06 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801cc52:	6a3b      	ldr	r3, [r7, #32]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d04f      	beq.n	801ccf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	685b      	ldr	r3, [r3, #4]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d006      	beq.n	801cc6e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	685b      	ldr	r3, [r3, #4]
 801cc64:	685b      	ldr	r3, [r3, #4]
 801cc66:	889b      	ldrh	r3, [r3, #4]
 801cc68:	b29b      	uxth	r3, r3
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d002      	beq.n	801cc74 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801cc6e:	2300      	movs	r3, #0
 801cc70:	623b      	str	r3, [r7, #32]
 801cc72:	e041      	b.n	801ccf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801cc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc76:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801cc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801cc7e:	e012      	b.n	801cca6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801cc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc82:	685b      	ldr	r3, [r3, #4]
 801cc84:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801cc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc88:	88db      	ldrh	r3, [r3, #6]
 801cc8a:	b29a      	uxth	r2, r3
 801cc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc8e:	889b      	ldrh	r3, [r3, #4]
 801cc90:	b29b      	uxth	r3, r3
 801cc92:	429a      	cmp	r2, r3
 801cc94:	d002      	beq.n	801cc9c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801cc96:	2300      	movs	r3, #0
 801cc98:	623b      	str	r3, [r7, #32]
            break;
 801cc9a:	e007      	b.n	801ccac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801cc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801cca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801cca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d1e9      	bne.n	801cc80 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ccac:	6a3b      	ldr	r3, [r7, #32]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d022      	beq.n	801ccf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	685b      	ldr	r3, [r3, #4]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d106      	bne.n	801ccc8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ccba:	4b15      	ldr	r3, [pc, #84]	@ (801cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ccbc:	f240 12df 	movw	r2, #479	@ 0x1df
 801ccc0:	4917      	ldr	r1, [pc, #92]	@ (801cd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ccc2:	4815      	ldr	r0, [pc, #84]	@ (801cd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ccc4:	f001 fb4e 	bl	801e364 <iprintf>
          LWIP_ASSERT("sanity check",
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	685b      	ldr	r3, [r3, #4]
 801cccc:	685b      	ldr	r3, [r3, #4]
 801ccce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ccd0:	429a      	cmp	r2, r3
 801ccd2:	d106      	bne.n	801cce2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ccd4:	4b0e      	ldr	r3, [pc, #56]	@ (801cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ccd6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801ccda:	4911      	ldr	r1, [pc, #68]	@ (801cd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ccdc:	480e      	ldr	r0, [pc, #56]	@ (801cd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ccde:	f001 fb41 	bl	801e364 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801cce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d006      	beq.n	801ccf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ccea:	4b09      	ldr	r3, [pc, #36]	@ (801cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ccec:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801ccf0:	490c      	ldr	r1, [pc, #48]	@ (801cd24 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ccf2:	4809      	ldr	r0, [pc, #36]	@ (801cd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ccf4:	f001 fb36 	bl	801e364 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ccf8:	6a3b      	ldr	r3, [r7, #32]
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	bf14      	ite	ne
 801ccfe:	2301      	movne	r3, #1
 801cd00:	2300      	moveq	r3, #0
 801cd02:	b2db      	uxtb	r3, r3
 801cd04:	e000      	b.n	801cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801cd06:	2300      	movs	r3, #0
}
 801cd08:	4618      	mov	r0, r3
 801cd0a:	3730      	adds	r7, #48	@ 0x30
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	bd80      	pop	{r7, pc}
 801cd10:	08024130 	.word	0x08024130
 801cd14:	08024214 	.word	0x08024214
 801cd18:	08024178 	.word	0x08024178
 801cd1c:	08024234 	.word	0x08024234
 801cd20:	0802426c 	.word	0x0802426c
 801cd24:	0802427c 	.word	0x0802427c

0801cd28 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b08e      	sub	sp, #56	@ 0x38
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	685b      	ldr	r3, [r3, #4]
 801cd34:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801cd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd38:	781b      	ldrb	r3, [r3, #0]
 801cd3a:	f003 030f 	and.w	r3, r3, #15
 801cd3e:	b2db      	uxtb	r3, r3
 801cd40:	009b      	lsls	r3, r3, #2
 801cd42:	b2db      	uxtb	r3, r3
 801cd44:	2b14      	cmp	r3, #20
 801cd46:	f040 8171 	bne.w	801d02c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801cd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd4c:	88db      	ldrh	r3, [r3, #6]
 801cd4e:	b29b      	uxth	r3, r3
 801cd50:	4618      	mov	r0, r3
 801cd52:	f7f4 fff7 	bl	8011d44 <lwip_htons>
 801cd56:	4603      	mov	r3, r0
 801cd58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cd5c:	b29b      	uxth	r3, r3
 801cd5e:	00db      	lsls	r3, r3, #3
 801cd60:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801cd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd64:	885b      	ldrh	r3, [r3, #2]
 801cd66:	b29b      	uxth	r3, r3
 801cd68:	4618      	mov	r0, r3
 801cd6a:	f7f4 ffeb 	bl	8011d44 <lwip_htons>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801cd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd74:	781b      	ldrb	r3, [r3, #0]
 801cd76:	f003 030f 	and.w	r3, r3, #15
 801cd7a:	b2db      	uxtb	r3, r3
 801cd7c:	009b      	lsls	r3, r3, #2
 801cd7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801cd82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801cd86:	b29b      	uxth	r3, r3
 801cd88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cd8a:	429a      	cmp	r2, r3
 801cd8c:	f0c0 8150 	bcc.w	801d030 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801cd90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801cd94:	b29b      	uxth	r3, r3
 801cd96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cd98:	1ad3      	subs	r3, r2, r3
 801cd9a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801cd9c:	6878      	ldr	r0, [r7, #4]
 801cd9e:	f7f6 ff1b 	bl	8013bd8 <pbuf_clen>
 801cda2:	4603      	mov	r3, r0
 801cda4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801cda6:	4b8c      	ldr	r3, [pc, #560]	@ (801cfd8 <ip4_reass+0x2b0>)
 801cda8:	881b      	ldrh	r3, [r3, #0]
 801cdaa:	461a      	mov	r2, r3
 801cdac:	8c3b      	ldrh	r3, [r7, #32]
 801cdae:	4413      	add	r3, r2
 801cdb0:	2b0a      	cmp	r3, #10
 801cdb2:	dd10      	ble.n	801cdd6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cdb4:	8c3b      	ldrh	r3, [r7, #32]
 801cdb6:	4619      	mov	r1, r3
 801cdb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cdba:	f7ff fd81 	bl	801c8c0 <ip_reass_remove_oldest_datagram>
 801cdbe:	4603      	mov	r3, r0
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	f000 8137 	beq.w	801d034 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801cdc6:	4b84      	ldr	r3, [pc, #528]	@ (801cfd8 <ip4_reass+0x2b0>)
 801cdc8:	881b      	ldrh	r3, [r3, #0]
 801cdca:	461a      	mov	r2, r3
 801cdcc:	8c3b      	ldrh	r3, [r7, #32]
 801cdce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cdd0:	2b0a      	cmp	r3, #10
 801cdd2:	f300 812f 	bgt.w	801d034 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cdd6:	4b81      	ldr	r3, [pc, #516]	@ (801cfdc <ip4_reass+0x2b4>)
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	633b      	str	r3, [r7, #48]	@ 0x30
 801cddc:	e015      	b.n	801ce0a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801cdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cde0:	695a      	ldr	r2, [r3, #20]
 801cde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cde4:	68db      	ldr	r3, [r3, #12]
 801cde6:	429a      	cmp	r2, r3
 801cde8:	d10c      	bne.n	801ce04 <ip4_reass+0xdc>
 801cdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cdec:	699a      	ldr	r2, [r3, #24]
 801cdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cdf0:	691b      	ldr	r3, [r3, #16]
 801cdf2:	429a      	cmp	r2, r3
 801cdf4:	d106      	bne.n	801ce04 <ip4_reass+0xdc>
 801cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cdf8:	899a      	ldrh	r2, [r3, #12]
 801cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cdfc:	889b      	ldrh	r3, [r3, #4]
 801cdfe:	b29b      	uxth	r3, r3
 801ce00:	429a      	cmp	r2, r3
 801ce02:	d006      	beq.n	801ce12 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ce04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	633b      	str	r3, [r7, #48]	@ 0x30
 801ce0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d1e6      	bne.n	801cdde <ip4_reass+0xb6>
 801ce10:	e000      	b.n	801ce14 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ce12:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d109      	bne.n	801ce2e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ce1a:	8c3b      	ldrh	r3, [r7, #32]
 801ce1c:	4619      	mov	r1, r3
 801ce1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ce20:	f7ff fdb0 	bl	801c984 <ip_reass_enqueue_new_datagram>
 801ce24:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ce26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d11c      	bne.n	801ce66 <ip4_reass+0x13e>
      goto nullreturn;
 801ce2c:	e105      	b.n	801d03a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ce2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce30:	88db      	ldrh	r3, [r3, #6]
 801ce32:	b29b      	uxth	r3, r3
 801ce34:	4618      	mov	r0, r3
 801ce36:	f7f4 ff85 	bl	8011d44 <lwip_htons>
 801ce3a:	4603      	mov	r3, r0
 801ce3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d110      	bne.n	801ce66 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce46:	89db      	ldrh	r3, [r3, #14]
 801ce48:	4618      	mov	r0, r3
 801ce4a:	f7f4 ff7b 	bl	8011d44 <lwip_htons>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d006      	beq.n	801ce66 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ce58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce5a:	3308      	adds	r3, #8
 801ce5c:	2214      	movs	r2, #20
 801ce5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ce60:	4618      	mov	r0, r3
 801ce62:	f001 fce0 	bl	801e826 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ce66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce68:	88db      	ldrh	r3, [r3, #6]
 801ce6a:	b29b      	uxth	r3, r3
 801ce6c:	f003 0320 	and.w	r3, r3, #32
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	bf0c      	ite	eq
 801ce74:	2301      	moveq	r3, #1
 801ce76:	2300      	movne	r3, #0
 801ce78:	b2db      	uxtb	r3, r3
 801ce7a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ce7c:	69fb      	ldr	r3, [r7, #28]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d00e      	beq.n	801cea0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ce82:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ce84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ce86:	4413      	add	r3, r2
 801ce88:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ce8a:	8b7a      	ldrh	r2, [r7, #26]
 801ce8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ce8e:	429a      	cmp	r2, r3
 801ce90:	f0c0 80a0 	bcc.w	801cfd4 <ip4_reass+0x2ac>
 801ce94:	8b7b      	ldrh	r3, [r7, #26]
 801ce96:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801ce9a:	4293      	cmp	r3, r2
 801ce9c:	f200 809a 	bhi.w	801cfd4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801cea0:	69fa      	ldr	r2, [r7, #28]
 801cea2:	6879      	ldr	r1, [r7, #4]
 801cea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cea6:	f7ff fdd5 	bl	801ca54 <ip_reass_chain_frag_into_datagram_and_validate>
 801ceaa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ceac:	697b      	ldr	r3, [r7, #20]
 801ceae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ceb2:	f000 809b 	beq.w	801cfec <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ceb6:	4b48      	ldr	r3, [pc, #288]	@ (801cfd8 <ip4_reass+0x2b0>)
 801ceb8:	881a      	ldrh	r2, [r3, #0]
 801ceba:	8c3b      	ldrh	r3, [r7, #32]
 801cebc:	4413      	add	r3, r2
 801cebe:	b29a      	uxth	r2, r3
 801cec0:	4b45      	ldr	r3, [pc, #276]	@ (801cfd8 <ip4_reass+0x2b0>)
 801cec2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801cec4:	69fb      	ldr	r3, [r7, #28]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d00d      	beq.n	801cee6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ceca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cecc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cece:	4413      	add	r3, r2
 801ced0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ced4:	8a7a      	ldrh	r2, [r7, #18]
 801ced6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ced8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ceda:	7f9b      	ldrb	r3, [r3, #30]
 801cedc:	f043 0301 	orr.w	r3, r3, #1
 801cee0:	b2da      	uxtb	r2, r3
 801cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cee4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801cee6:	697b      	ldr	r3, [r7, #20]
 801cee8:	2b01      	cmp	r3, #1
 801ceea:	d171      	bne.n	801cfd0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ceec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ceee:	8b9b      	ldrh	r3, [r3, #28]
 801cef0:	3314      	adds	r3, #20
 801cef2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cef6:	685b      	ldr	r3, [r3, #4]
 801cef8:	685b      	ldr	r3, [r3, #4]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf00:	685b      	ldr	r3, [r3, #4]
 801cf02:	685b      	ldr	r3, [r3, #4]
 801cf04:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf08:	3308      	adds	r3, #8
 801cf0a:	2214      	movs	r2, #20
 801cf0c:	4619      	mov	r1, r3
 801cf0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cf10:	f001 fc89 	bl	801e826 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801cf14:	8a3b      	ldrh	r3, [r7, #16]
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7f4 ff14 	bl	8011d44 <lwip_htons>
 801cf1c:	4603      	mov	r3, r0
 801cf1e:	461a      	mov	r2, r3
 801cf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf22:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf26:	2200      	movs	r2, #0
 801cf28:	719a      	strb	r2, [r3, #6]
 801cf2a:	2200      	movs	r2, #0
 801cf2c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801cf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf30:	2200      	movs	r2, #0
 801cf32:	729a      	strb	r2, [r3, #10]
 801cf34:	2200      	movs	r2, #0
 801cf36:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801cf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf3a:	685b      	ldr	r3, [r3, #4]
 801cf3c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801cf3e:	e00d      	b.n	801cf5c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801cf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf42:	685b      	ldr	r3, [r3, #4]
 801cf44:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801cf46:	2114      	movs	r1, #20
 801cf48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801cf4a:	f7f6 fd31 	bl	80139b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801cf4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cf50:	6878      	ldr	r0, [r7, #4]
 801cf52:	f7f6 fe81 	bl	8013c58 <pbuf_cat>
      r = iprh->next_pbuf;
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801cf5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d1ee      	bne.n	801cf40 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801cf62:	4b1e      	ldr	r3, [pc, #120]	@ (801cfdc <ip4_reass+0x2b4>)
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cf68:	429a      	cmp	r2, r3
 801cf6a:	d102      	bne.n	801cf72 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801cf6c:	2300      	movs	r3, #0
 801cf6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cf70:	e010      	b.n	801cf94 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cf72:	4b1a      	ldr	r3, [pc, #104]	@ (801cfdc <ip4_reass+0x2b4>)
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cf78:	e007      	b.n	801cf8a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801cf7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cf80:	429a      	cmp	r2, r3
 801cf82:	d006      	beq.n	801cf92 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cf84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cf8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d1f4      	bne.n	801cf7a <ip4_reass+0x252>
 801cf90:	e000      	b.n	801cf94 <ip4_reass+0x26c>
          break;
 801cf92:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801cf94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cf96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cf98:	f7ff fd2e 	bl	801c9f8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801cf9c:	6878      	ldr	r0, [r7, #4]
 801cf9e:	f7f6 fe1b 	bl	8013bd8 <pbuf_clen>
 801cfa2:	4603      	mov	r3, r0
 801cfa4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801cfa6:	4b0c      	ldr	r3, [pc, #48]	@ (801cfd8 <ip4_reass+0x2b0>)
 801cfa8:	881b      	ldrh	r3, [r3, #0]
 801cfaa:	8c3a      	ldrh	r2, [r7, #32]
 801cfac:	429a      	cmp	r2, r3
 801cfae:	d906      	bls.n	801cfbe <ip4_reass+0x296>
 801cfb0:	4b0b      	ldr	r3, [pc, #44]	@ (801cfe0 <ip4_reass+0x2b8>)
 801cfb2:	f240 229b 	movw	r2, #667	@ 0x29b
 801cfb6:	490b      	ldr	r1, [pc, #44]	@ (801cfe4 <ip4_reass+0x2bc>)
 801cfb8:	480b      	ldr	r0, [pc, #44]	@ (801cfe8 <ip4_reass+0x2c0>)
 801cfba:	f001 f9d3 	bl	801e364 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801cfbe:	4b06      	ldr	r3, [pc, #24]	@ (801cfd8 <ip4_reass+0x2b0>)
 801cfc0:	881a      	ldrh	r2, [r3, #0]
 801cfc2:	8c3b      	ldrh	r3, [r7, #32]
 801cfc4:	1ad3      	subs	r3, r2, r3
 801cfc6:	b29a      	uxth	r2, r3
 801cfc8:	4b03      	ldr	r3, [pc, #12]	@ (801cfd8 <ip4_reass+0x2b0>)
 801cfca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	e038      	b.n	801d042 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801cfd0:	2300      	movs	r3, #0
 801cfd2:	e036      	b.n	801d042 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801cfd4:	bf00      	nop
 801cfd6:	e00a      	b.n	801cfee <ip4_reass+0x2c6>
 801cfd8:	2000fe14 	.word	0x2000fe14
 801cfdc:	2000fe10 	.word	0x2000fe10
 801cfe0:	08024130 	.word	0x08024130
 801cfe4:	080242a0 	.word	0x080242a0
 801cfe8:	08024178 	.word	0x08024178
    goto nullreturn_ipr;
 801cfec:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801cfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d106      	bne.n	801d002 <ip4_reass+0x2da>
 801cff4:	4b15      	ldr	r3, [pc, #84]	@ (801d04c <ip4_reass+0x324>)
 801cff6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801cffa:	4915      	ldr	r1, [pc, #84]	@ (801d050 <ip4_reass+0x328>)
 801cffc:	4815      	ldr	r0, [pc, #84]	@ (801d054 <ip4_reass+0x32c>)
 801cffe:	f001 f9b1 	bl	801e364 <iprintf>
  if (ipr->p == NULL) {
 801d002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d004:	685b      	ldr	r3, [r3, #4]
 801d006:	2b00      	cmp	r3, #0
 801d008:	d116      	bne.n	801d038 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d00a:	4b13      	ldr	r3, [pc, #76]	@ (801d058 <ip4_reass+0x330>)
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d010:	429a      	cmp	r2, r3
 801d012:	d006      	beq.n	801d022 <ip4_reass+0x2fa>
 801d014:	4b0d      	ldr	r3, [pc, #52]	@ (801d04c <ip4_reass+0x324>)
 801d016:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801d01a:	4910      	ldr	r1, [pc, #64]	@ (801d05c <ip4_reass+0x334>)
 801d01c:	480d      	ldr	r0, [pc, #52]	@ (801d054 <ip4_reass+0x32c>)
 801d01e:	f001 f9a1 	bl	801e364 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d022:	2100      	movs	r1, #0
 801d024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d026:	f7ff fce7 	bl	801c9f8 <ip_reass_dequeue_datagram>
 801d02a:	e006      	b.n	801d03a <ip4_reass+0x312>
    goto nullreturn;
 801d02c:	bf00      	nop
 801d02e:	e004      	b.n	801d03a <ip4_reass+0x312>
    goto nullreturn;
 801d030:	bf00      	nop
 801d032:	e002      	b.n	801d03a <ip4_reass+0x312>
      goto nullreturn;
 801d034:	bf00      	nop
 801d036:	e000      	b.n	801d03a <ip4_reass+0x312>
  }

nullreturn:
 801d038:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d03a:	6878      	ldr	r0, [r7, #4]
 801d03c:	f7f6 fd3e 	bl	8013abc <pbuf_free>
  return NULL;
 801d040:	2300      	movs	r3, #0
}
 801d042:	4618      	mov	r0, r3
 801d044:	3738      	adds	r7, #56	@ 0x38
 801d046:	46bd      	mov	sp, r7
 801d048:	bd80      	pop	{r7, pc}
 801d04a:	bf00      	nop
 801d04c:	08024130 	.word	0x08024130
 801d050:	080242bc 	.word	0x080242bc
 801d054:	08024178 	.word	0x08024178
 801d058:	2000fe10 	.word	0x2000fe10
 801d05c:	080242c8 	.word	0x080242c8

0801d060 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d060:	b580      	push	{r7, lr}
 801d062:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d064:	2005      	movs	r0, #5
 801d066:	f7f5 fe0f 	bl	8012c88 <memp_malloc>
 801d06a:	4603      	mov	r3, r0
}
 801d06c:	4618      	mov	r0, r3
 801d06e:	bd80      	pop	{r7, pc}

0801d070 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b082      	sub	sp, #8
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d106      	bne.n	801d08c <ip_frag_free_pbuf_custom_ref+0x1c>
 801d07e:	4b07      	ldr	r3, [pc, #28]	@ (801d09c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d080:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801d084:	4906      	ldr	r1, [pc, #24]	@ (801d0a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d086:	4807      	ldr	r0, [pc, #28]	@ (801d0a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d088:	f001 f96c 	bl	801e364 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d08c:	6879      	ldr	r1, [r7, #4]
 801d08e:	2005      	movs	r0, #5
 801d090:	f7f5 fe70 	bl	8012d74 <memp_free>
}
 801d094:	bf00      	nop
 801d096:	3708      	adds	r7, #8
 801d098:	46bd      	mov	sp, r7
 801d09a:	bd80      	pop	{r7, pc}
 801d09c:	08024130 	.word	0x08024130
 801d0a0:	080242e8 	.word	0x080242e8
 801d0a4:	08024178 	.word	0x08024178

0801d0a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d0a8:	b580      	push	{r7, lr}
 801d0aa:	b084      	sub	sp, #16
 801d0ac:	af00      	add	r7, sp, #0
 801d0ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d106      	bne.n	801d0c8 <ipfrag_free_pbuf_custom+0x20>
 801d0ba:	4b11      	ldr	r3, [pc, #68]	@ (801d100 <ipfrag_free_pbuf_custom+0x58>)
 801d0bc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801d0c0:	4910      	ldr	r1, [pc, #64]	@ (801d104 <ipfrag_free_pbuf_custom+0x5c>)
 801d0c2:	4811      	ldr	r0, [pc, #68]	@ (801d108 <ipfrag_free_pbuf_custom+0x60>)
 801d0c4:	f001 f94e 	bl	801e364 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d0c8:	68fa      	ldr	r2, [r7, #12]
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	429a      	cmp	r2, r3
 801d0ce:	d006      	beq.n	801d0de <ipfrag_free_pbuf_custom+0x36>
 801d0d0:	4b0b      	ldr	r3, [pc, #44]	@ (801d100 <ipfrag_free_pbuf_custom+0x58>)
 801d0d2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801d0d6:	490d      	ldr	r1, [pc, #52]	@ (801d10c <ipfrag_free_pbuf_custom+0x64>)
 801d0d8:	480b      	ldr	r0, [pc, #44]	@ (801d108 <ipfrag_free_pbuf_custom+0x60>)
 801d0da:	f001 f943 	bl	801e364 <iprintf>
  if (pcr->original != NULL) {
 801d0de:	68fb      	ldr	r3, [r7, #12]
 801d0e0:	695b      	ldr	r3, [r3, #20]
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d004      	beq.n	801d0f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	695b      	ldr	r3, [r3, #20]
 801d0ea:	4618      	mov	r0, r3
 801d0ec:	f7f6 fce6 	bl	8013abc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d0f0:	68f8      	ldr	r0, [r7, #12]
 801d0f2:	f7ff ffbd 	bl	801d070 <ip_frag_free_pbuf_custom_ref>
}
 801d0f6:	bf00      	nop
 801d0f8:	3710      	adds	r7, #16
 801d0fa:	46bd      	mov	sp, r7
 801d0fc:	bd80      	pop	{r7, pc}
 801d0fe:	bf00      	nop
 801d100:	08024130 	.word	0x08024130
 801d104:	080242f4 	.word	0x080242f4
 801d108:	08024178 	.word	0x08024178
 801d10c:	08024300 	.word	0x08024300

0801d110 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d110:	b580      	push	{r7, lr}
 801d112:	b094      	sub	sp, #80	@ 0x50
 801d114:	af02      	add	r7, sp, #8
 801d116:	60f8      	str	r0, [r7, #12]
 801d118:	60b9      	str	r1, [r7, #8]
 801d11a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d11c:	2300      	movs	r3, #0
 801d11e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d122:	68bb      	ldr	r3, [r7, #8]
 801d124:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d126:	3b14      	subs	r3, #20
 801d128:	2b00      	cmp	r3, #0
 801d12a:	da00      	bge.n	801d12e <ip4_frag+0x1e>
 801d12c:	3307      	adds	r3, #7
 801d12e:	10db      	asrs	r3, r3, #3
 801d130:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d132:	2314      	movs	r3, #20
 801d134:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	685b      	ldr	r3, [r3, #4]
 801d13a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801d13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d13e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d142:	781b      	ldrb	r3, [r3, #0]
 801d144:	f003 030f 	and.w	r3, r3, #15
 801d148:	b2db      	uxtb	r3, r3
 801d14a:	009b      	lsls	r3, r3, #2
 801d14c:	b2db      	uxtb	r3, r3
 801d14e:	2b14      	cmp	r3, #20
 801d150:	d002      	beq.n	801d158 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d152:	f06f 0305 	mvn.w	r3, #5
 801d156:	e110      	b.n	801d37a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	895b      	ldrh	r3, [r3, #10]
 801d15c:	2b13      	cmp	r3, #19
 801d15e:	d809      	bhi.n	801d174 <ip4_frag+0x64>
 801d160:	4b88      	ldr	r3, [pc, #544]	@ (801d384 <ip4_frag+0x274>)
 801d162:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801d166:	4988      	ldr	r1, [pc, #544]	@ (801d388 <ip4_frag+0x278>)
 801d168:	4888      	ldr	r0, [pc, #544]	@ (801d38c <ip4_frag+0x27c>)
 801d16a:	f001 f8fb 	bl	801e364 <iprintf>
 801d16e:	f06f 0305 	mvn.w	r3, #5
 801d172:	e102      	b.n	801d37a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d176:	88db      	ldrh	r3, [r3, #6]
 801d178:	b29b      	uxth	r3, r3
 801d17a:	4618      	mov	r0, r3
 801d17c:	f7f4 fde2 	bl	8011d44 <lwip_htons>
 801d180:	4603      	mov	r3, r0
 801d182:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801d184:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d186:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d18a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d18e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d194:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	891b      	ldrh	r3, [r3, #8]
 801d19a:	3b14      	subs	r3, #20
 801d19c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801d1a0:	e0e1      	b.n	801d366 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d1a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d1a4:	00db      	lsls	r3, r3, #3
 801d1a6:	b29b      	uxth	r3, r3
 801d1a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d1ac:	4293      	cmp	r3, r2
 801d1ae:	bf28      	it	cs
 801d1b0:	4613      	movcs	r3, r2
 801d1b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d1b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d1b8:	2114      	movs	r1, #20
 801d1ba:	200e      	movs	r0, #14
 801d1bc:	f7f6 f99a 	bl	80134f4 <pbuf_alloc>
 801d1c0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801d1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	f000 80d5 	beq.w	801d374 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1cc:	895b      	ldrh	r3, [r3, #10]
 801d1ce:	2b13      	cmp	r3, #19
 801d1d0:	d806      	bhi.n	801d1e0 <ip4_frag+0xd0>
 801d1d2:	4b6c      	ldr	r3, [pc, #432]	@ (801d384 <ip4_frag+0x274>)
 801d1d4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801d1d8:	496d      	ldr	r1, [pc, #436]	@ (801d390 <ip4_frag+0x280>)
 801d1da:	486c      	ldr	r0, [pc, #432]	@ (801d38c <ip4_frag+0x27c>)
 801d1dc:	f001 f8c2 	bl	801e364 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1e2:	685b      	ldr	r3, [r3, #4]
 801d1e4:	2214      	movs	r2, #20
 801d1e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	f001 fb1c 	bl	801e826 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1f0:	685b      	ldr	r3, [r3, #4]
 801d1f2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801d1f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d1f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801d1fa:	e064      	b.n	801d2c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	895a      	ldrh	r2, [r3, #10]
 801d200:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d202:	1ad3      	subs	r3, r2, r3
 801d204:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	895b      	ldrh	r3, [r3, #10]
 801d20a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d20c:	429a      	cmp	r2, r3
 801d20e:	d906      	bls.n	801d21e <ip4_frag+0x10e>
 801d210:	4b5c      	ldr	r3, [pc, #368]	@ (801d384 <ip4_frag+0x274>)
 801d212:	f240 322d 	movw	r2, #813	@ 0x32d
 801d216:	495f      	ldr	r1, [pc, #380]	@ (801d394 <ip4_frag+0x284>)
 801d218:	485c      	ldr	r0, [pc, #368]	@ (801d38c <ip4_frag+0x27c>)
 801d21a:	f001 f8a3 	bl	801e364 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d21e:	8bfa      	ldrh	r2, [r7, #30]
 801d220:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d224:	4293      	cmp	r3, r2
 801d226:	bf28      	it	cs
 801d228:	4613      	movcs	r3, r2
 801d22a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d22e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d232:	2b00      	cmp	r3, #0
 801d234:	d105      	bne.n	801d242 <ip4_frag+0x132>
        poff = 0;
 801d236:	2300      	movs	r3, #0
 801d238:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	60fb      	str	r3, [r7, #12]
        continue;
 801d240:	e041      	b.n	801d2c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d242:	f7ff ff0d 	bl	801d060 <ip_frag_alloc_pbuf_custom_ref>
 801d246:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d248:	69bb      	ldr	r3, [r7, #24]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d103      	bne.n	801d256 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d24e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d250:	f7f6 fc34 	bl	8013abc <pbuf_free>
        goto memerr;
 801d254:	e08f      	b.n	801d376 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d256:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d25c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d25e:	4413      	add	r3, r2
 801d260:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801d264:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801d268:	9201      	str	r2, [sp, #4]
 801d26a:	9300      	str	r3, [sp, #0]
 801d26c:	4603      	mov	r3, r0
 801d26e:	2241      	movs	r2, #65	@ 0x41
 801d270:	2000      	movs	r0, #0
 801d272:	f7f6 fa69 	bl	8013748 <pbuf_alloced_custom>
 801d276:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d278:	697b      	ldr	r3, [r7, #20]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d106      	bne.n	801d28c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d27e:	69b8      	ldr	r0, [r7, #24]
 801d280:	f7ff fef6 	bl	801d070 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d284:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d286:	f7f6 fc19 	bl	8013abc <pbuf_free>
        goto memerr;
 801d28a:	e074      	b.n	801d376 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d28c:	68f8      	ldr	r0, [r7, #12]
 801d28e:	f7f6 fcbb 	bl	8013c08 <pbuf_ref>
      pcr->original = p;
 801d292:	69bb      	ldr	r3, [r7, #24]
 801d294:	68fa      	ldr	r2, [r7, #12]
 801d296:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d298:	69bb      	ldr	r3, [r7, #24]
 801d29a:	4a3f      	ldr	r2, [pc, #252]	@ (801d398 <ip4_frag+0x288>)
 801d29c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d29e:	6979      	ldr	r1, [r7, #20]
 801d2a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d2a2:	f7f6 fcd9 	bl	8013c58 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d2a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801d2aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d2ae:	1ad3      	subs	r3, r2, r3
 801d2b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801d2b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d004      	beq.n	801d2c6 <ip4_frag+0x1b6>
        poff = 0;
 801d2bc:	2300      	movs	r3, #0
 801d2be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d2c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d196      	bne.n	801d1fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d2ce:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d2d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d2d4:	4413      	add	r3, r2
 801d2d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d2d8:	68bb      	ldr	r3, [r7, #8]
 801d2da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d2dc:	f1a3 0213 	sub.w	r2, r3, #19
 801d2e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d2e4:	429a      	cmp	r2, r3
 801d2e6:	bfcc      	ite	gt
 801d2e8:	2301      	movgt	r3, #1
 801d2ea:	2300      	movle	r3, #0
 801d2ec:	b2db      	uxtb	r3, r3
 801d2ee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d2f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801d2f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d2f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801d2fa:	6a3b      	ldr	r3, [r7, #32]
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d002      	beq.n	801d306 <ip4_frag+0x1f6>
 801d300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d302:	2b00      	cmp	r3, #0
 801d304:	d003      	beq.n	801d30e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d306:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d308:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801d30c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d30e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d310:	4618      	mov	r0, r3
 801d312:	f7f4 fd17 	bl	8011d44 <lwip_htons>
 801d316:	4603      	mov	r3, r0
 801d318:	461a      	mov	r2, r3
 801d31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d31c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d31e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d320:	3314      	adds	r3, #20
 801d322:	b29b      	uxth	r3, r3
 801d324:	4618      	mov	r0, r3
 801d326:	f7f4 fd0d 	bl	8011d44 <lwip_htons>
 801d32a:	4603      	mov	r3, r0
 801d32c:	461a      	mov	r2, r3
 801d32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d330:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d334:	2200      	movs	r2, #0
 801d336:	729a      	strb	r2, [r3, #10]
 801d338:	2200      	movs	r2, #0
 801d33a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d33c:	68bb      	ldr	r3, [r7, #8]
 801d33e:	695b      	ldr	r3, [r3, #20]
 801d340:	687a      	ldr	r2, [r7, #4]
 801d342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d344:	68b8      	ldr	r0, [r7, #8]
 801d346:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d348:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d34a:	f7f6 fbb7 	bl	8013abc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d34e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d352:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d354:	1ad3      	subs	r3, r2, r3
 801d356:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801d35a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801d35e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d360:	4413      	add	r3, r2
 801d362:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801d366:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	f47f af19 	bne.w	801d1a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d370:	2300      	movs	r3, #0
 801d372:	e002      	b.n	801d37a <ip4_frag+0x26a>
      goto memerr;
 801d374:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801d37a:	4618      	mov	r0, r3
 801d37c:	3748      	adds	r7, #72	@ 0x48
 801d37e:	46bd      	mov	sp, r7
 801d380:	bd80      	pop	{r7, pc}
 801d382:	bf00      	nop
 801d384:	08024130 	.word	0x08024130
 801d388:	0802430c 	.word	0x0802430c
 801d38c:	08024178 	.word	0x08024178
 801d390:	08024328 	.word	0x08024328
 801d394:	08024348 	.word	0x08024348
 801d398:	0801d0a9 	.word	0x0801d0a9

0801d39c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b086      	sub	sp, #24
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	6078      	str	r0, [r7, #4]
 801d3a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d3a6:	230e      	movs	r3, #14
 801d3a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	895b      	ldrh	r3, [r3, #10]
 801d3ae:	2b0e      	cmp	r3, #14
 801d3b0:	d96e      	bls.n	801d490 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	7bdb      	ldrb	r3, [r3, #15]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d106      	bne.n	801d3c8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d3ba:	683b      	ldr	r3, [r7, #0]
 801d3bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d3c0:	3301      	adds	r3, #1
 801d3c2:	b2da      	uxtb	r2, r3
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	685b      	ldr	r3, [r3, #4]
 801d3cc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d3ce:	693b      	ldr	r3, [r7, #16]
 801d3d0:	7b1a      	ldrb	r2, [r3, #12]
 801d3d2:	7b5b      	ldrb	r3, [r3, #13]
 801d3d4:	021b      	lsls	r3, r3, #8
 801d3d6:	4313      	orrs	r3, r2
 801d3d8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d3da:	693b      	ldr	r3, [r7, #16]
 801d3dc:	781b      	ldrb	r3, [r3, #0]
 801d3de:	f003 0301 	and.w	r3, r3, #1
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d023      	beq.n	801d42e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d3e6:	693b      	ldr	r3, [r7, #16]
 801d3e8:	781b      	ldrb	r3, [r3, #0]
 801d3ea:	2b01      	cmp	r3, #1
 801d3ec:	d10f      	bne.n	801d40e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d3ee:	693b      	ldr	r3, [r7, #16]
 801d3f0:	785b      	ldrb	r3, [r3, #1]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d11b      	bne.n	801d42e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d3f6:	693b      	ldr	r3, [r7, #16]
 801d3f8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d3fa:	2b5e      	cmp	r3, #94	@ 0x5e
 801d3fc:	d117      	bne.n	801d42e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	7b5b      	ldrb	r3, [r3, #13]
 801d402:	f043 0310 	orr.w	r3, r3, #16
 801d406:	b2da      	uxtb	r2, r3
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	735a      	strb	r2, [r3, #13]
 801d40c:	e00f      	b.n	801d42e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d40e:	693b      	ldr	r3, [r7, #16]
 801d410:	2206      	movs	r2, #6
 801d412:	4928      	ldr	r1, [pc, #160]	@ (801d4b4 <ethernet_input+0x118>)
 801d414:	4618      	mov	r0, r3
 801d416:	f001 f90d 	bl	801e634 <memcmp>
 801d41a:	4603      	mov	r3, r0
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d106      	bne.n	801d42e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	7b5b      	ldrb	r3, [r3, #13]
 801d424:	f043 0308 	orr.w	r3, r3, #8
 801d428:	b2da      	uxtb	r2, r3
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d42e:	89fb      	ldrh	r3, [r7, #14]
 801d430:	2b08      	cmp	r3, #8
 801d432:	d003      	beq.n	801d43c <ethernet_input+0xa0>
 801d434:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d438:	d014      	beq.n	801d464 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d43a:	e032      	b.n	801d4a2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d43c:	683b      	ldr	r3, [r7, #0]
 801d43e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d442:	f003 0308 	and.w	r3, r3, #8
 801d446:	2b00      	cmp	r3, #0
 801d448:	d024      	beq.n	801d494 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d44a:	8afb      	ldrh	r3, [r7, #22]
 801d44c:	4619      	mov	r1, r3
 801d44e:	6878      	ldr	r0, [r7, #4]
 801d450:	f7f6 faae 	bl	80139b0 <pbuf_remove_header>
 801d454:	4603      	mov	r3, r0
 801d456:	2b00      	cmp	r3, #0
 801d458:	d11e      	bne.n	801d498 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d45a:	6839      	ldr	r1, [r7, #0]
 801d45c:	6878      	ldr	r0, [r7, #4]
 801d45e:	f7fe fde3 	bl	801c028 <ip4_input>
      break;
 801d462:	e013      	b.n	801d48c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d464:	683b      	ldr	r3, [r7, #0]
 801d466:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d46a:	f003 0308 	and.w	r3, r3, #8
 801d46e:	2b00      	cmp	r3, #0
 801d470:	d014      	beq.n	801d49c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d472:	8afb      	ldrh	r3, [r7, #22]
 801d474:	4619      	mov	r1, r3
 801d476:	6878      	ldr	r0, [r7, #4]
 801d478:	f7f6 fa9a 	bl	80139b0 <pbuf_remove_header>
 801d47c:	4603      	mov	r3, r0
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d10e      	bne.n	801d4a0 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d482:	6839      	ldr	r1, [r7, #0]
 801d484:	6878      	ldr	r0, [r7, #4]
 801d486:	f7fd ff83 	bl	801b390 <etharp_input>
      break;
 801d48a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d48c:	2300      	movs	r3, #0
 801d48e:	e00c      	b.n	801d4aa <ethernet_input+0x10e>
    goto free_and_return;
 801d490:	bf00      	nop
 801d492:	e006      	b.n	801d4a2 <ethernet_input+0x106>
        goto free_and_return;
 801d494:	bf00      	nop
 801d496:	e004      	b.n	801d4a2 <ethernet_input+0x106>
        goto free_and_return;
 801d498:	bf00      	nop
 801d49a:	e002      	b.n	801d4a2 <ethernet_input+0x106>
        goto free_and_return;
 801d49c:	bf00      	nop
 801d49e:	e000      	b.n	801d4a2 <ethernet_input+0x106>
        goto free_and_return;
 801d4a0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d4a2:	6878      	ldr	r0, [r7, #4]
 801d4a4:	f7f6 fb0a 	bl	8013abc <pbuf_free>
  return ERR_OK;
 801d4a8:	2300      	movs	r3, #0
}
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	3718      	adds	r7, #24
 801d4ae:	46bd      	mov	sp, r7
 801d4b0:	bd80      	pop	{r7, pc}
 801d4b2:	bf00      	nop
 801d4b4:	080246c8 	.word	0x080246c8

0801d4b8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	b086      	sub	sp, #24
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	60f8      	str	r0, [r7, #12]
 801d4c0:	60b9      	str	r1, [r7, #8]
 801d4c2:	607a      	str	r2, [r7, #4]
 801d4c4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d4c6:	8c3b      	ldrh	r3, [r7, #32]
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7f4 fc3b 	bl	8011d44 <lwip_htons>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d4d2:	210e      	movs	r1, #14
 801d4d4:	68b8      	ldr	r0, [r7, #8]
 801d4d6:	f7f6 fa5b 	bl	8013990 <pbuf_add_header>
 801d4da:	4603      	mov	r3, r0
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d125      	bne.n	801d52c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d4e0:	68bb      	ldr	r3, [r7, #8]
 801d4e2:	685b      	ldr	r3, [r3, #4]
 801d4e4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d4e6:	693b      	ldr	r3, [r7, #16]
 801d4e8:	8afa      	ldrh	r2, [r7, #22]
 801d4ea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d4ec:	693b      	ldr	r3, [r7, #16]
 801d4ee:	2206      	movs	r2, #6
 801d4f0:	6839      	ldr	r1, [r7, #0]
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	f001 f997 	bl	801e826 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d4f8:	693b      	ldr	r3, [r7, #16]
 801d4fa:	3306      	adds	r3, #6
 801d4fc:	2206      	movs	r2, #6
 801d4fe:	6879      	ldr	r1, [r7, #4]
 801d500:	4618      	mov	r0, r3
 801d502:	f001 f990 	bl	801e826 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d50c:	2b06      	cmp	r3, #6
 801d50e:	d006      	beq.n	801d51e <ethernet_output+0x66>
 801d510:	4b0a      	ldr	r3, [pc, #40]	@ (801d53c <ethernet_output+0x84>)
 801d512:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d516:	490a      	ldr	r1, [pc, #40]	@ (801d540 <ethernet_output+0x88>)
 801d518:	480a      	ldr	r0, [pc, #40]	@ (801d544 <ethernet_output+0x8c>)
 801d51a:	f000 ff23 	bl	801e364 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	699b      	ldr	r3, [r3, #24]
 801d522:	68b9      	ldr	r1, [r7, #8]
 801d524:	68f8      	ldr	r0, [r7, #12]
 801d526:	4798      	blx	r3
 801d528:	4603      	mov	r3, r0
 801d52a:	e002      	b.n	801d532 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d52c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d52e:	f06f 0301 	mvn.w	r3, #1
}
 801d532:	4618      	mov	r0, r3
 801d534:	3718      	adds	r7, #24
 801d536:	46bd      	mov	sp, r7
 801d538:	bd80      	pop	{r7, pc}
 801d53a:	bf00      	nop
 801d53c:	08024358 	.word	0x08024358
 801d540:	08024390 	.word	0x08024390
 801d544:	080243c4 	.word	0x080243c4

0801d548 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b082      	sub	sp, #8
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
 801d550:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801d552:	683b      	ldr	r3, [r7, #0]
 801d554:	2200      	movs	r2, #0
 801d556:	2104      	movs	r1, #4
 801d558:	4618      	mov	r0, r3
 801d55a:	f7ee fe8d 	bl	800c278 <osMessageQueueNew>
 801d55e:	4602      	mov	r2, r0
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d102      	bne.n	801d572 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801d56c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d570:	e000      	b.n	801d574 <sys_mbox_new+0x2c>

  return ERR_OK;
 801d572:	2300      	movs	r3, #0
}
 801d574:	4618      	mov	r0, r3
 801d576:	3708      	adds	r7, #8
 801d578:	46bd      	mov	sp, r7
 801d57a:	bd80      	pop	{r7, pc}

0801d57c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801d57c:	b580      	push	{r7, lr}
 801d57e:	b082      	sub	sp, #8
 801d580:	af00      	add	r7, sp, #0
 801d582:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	4618      	mov	r0, r3
 801d58a:	f7ee ffa7 	bl	800c4dc <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	4618      	mov	r0, r3
 801d594:	f7ee ffc2 	bl	800c51c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801d598:	bf00      	nop
 801d59a:	3708      	adds	r7, #8
 801d59c:	46bd      	mov	sp, r7
 801d59e:	bd80      	pop	{r7, pc}

0801d5a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b084      	sub	sp, #16
 801d5a4:	af00      	add	r7, sp, #0
 801d5a6:	6078      	str	r0, [r7, #4]
 801d5a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	6818      	ldr	r0, [r3, #0]
 801d5ae:	4639      	mov	r1, r7
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	f7ee fed4 	bl	800c360 <osMessageQueuePut>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d102      	bne.n	801d5c4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801d5be:	2300      	movs	r3, #0
 801d5c0:	73fb      	strb	r3, [r7, #15]
 801d5c2:	e001      	b.n	801d5c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d5c4:	23ff      	movs	r3, #255	@ 0xff
 801d5c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	3710      	adds	r7, #16
 801d5d0:	46bd      	mov	sp, r7
 801d5d2:	bd80      	pop	{r7, pc}

0801d5d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d5d4:	b580      	push	{r7, lr}
 801d5d6:	b086      	sub	sp, #24
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	60f8      	str	r0, [r7, #12]
 801d5dc:	60b9      	str	r1, [r7, #8]
 801d5de:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801d5e0:	f7ee fb36 	bl	800bc50 <osKernelGetTickCount>
 801d5e4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d013      	beq.n	801d614 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	6818      	ldr	r0, [r3, #0]
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	2200      	movs	r2, #0
 801d5f4:	68b9      	ldr	r1, [r7, #8]
 801d5f6:	f7ee ff13 	bl	800c420 <osMessageQueueGet>
 801d5fa:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801d5fc:	693b      	ldr	r3, [r7, #16]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d105      	bne.n	801d60e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801d602:	f7ee fb25 	bl	800bc50 <osKernelGetTickCount>
 801d606:	4602      	mov	r2, r0
 801d608:	697b      	ldr	r3, [r7, #20]
 801d60a:	1ad3      	subs	r3, r2, r3
 801d60c:	e00f      	b.n	801d62e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d60e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d612:	e00c      	b.n	801d62e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	6818      	ldr	r0, [r3, #0]
 801d618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d61c:	2200      	movs	r2, #0
 801d61e:	68b9      	ldr	r1, [r7, #8]
 801d620:	f7ee fefe 	bl	800c420 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801d624:	f7ee fb14 	bl	800bc50 <osKernelGetTickCount>
 801d628:	4602      	mov	r2, r0
 801d62a:	697b      	ldr	r3, [r7, #20]
 801d62c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d62e:	4618      	mov	r0, r3
 801d630:	3718      	adds	r7, #24
 801d632:	46bd      	mov	sp, r7
 801d634:	bd80      	pop	{r7, pc}

0801d636 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801d636:	b580      	push	{r7, lr}
 801d638:	b082      	sub	sp, #8
 801d63a:	af00      	add	r7, sp, #0
 801d63c:	6078      	str	r0, [r7, #4]
 801d63e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	6818      	ldr	r0, [r3, #0]
 801d644:	2300      	movs	r3, #0
 801d646:	2200      	movs	r2, #0
 801d648:	6839      	ldr	r1, [r7, #0]
 801d64a:	f7ee fee9 	bl	800c420 <osMessageQueueGet>
 801d64e:	4603      	mov	r3, r0
 801d650:	2b00      	cmp	r3, #0
 801d652:	d101      	bne.n	801d658 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801d654:	2300      	movs	r3, #0
 801d656:	e001      	b.n	801d65c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801d658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801d65c:	4618      	mov	r0, r3
 801d65e:	3708      	adds	r7, #8
 801d660:	46bd      	mov	sp, r7
 801d662:	bd80      	pop	{r7, pc}

0801d664 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d664:	b480      	push	{r7}
 801d666:	b083      	sub	sp, #12
 801d668:	af00      	add	r7, sp, #0
 801d66a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	2b00      	cmp	r3, #0
 801d672:	d101      	bne.n	801d678 <sys_mbox_valid+0x14>
    return 0;
 801d674:	2300      	movs	r3, #0
 801d676:	e000      	b.n	801d67a <sys_mbox_valid+0x16>
  else
    return 1;
 801d678:	2301      	movs	r3, #1
}
 801d67a:	4618      	mov	r0, r3
 801d67c:	370c      	adds	r7, #12
 801d67e:	46bd      	mov	sp, r7
 801d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d684:	4770      	bx	lr

0801d686 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801d686:	b480      	push	{r7}
 801d688:	b083      	sub	sp, #12
 801d68a:	af00      	add	r7, sp, #0
 801d68c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	2200      	movs	r2, #0
 801d692:	601a      	str	r2, [r3, #0]
}
 801d694:	bf00      	nop
 801d696:	370c      	adds	r7, #12
 801d698:	46bd      	mov	sp, r7
 801d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d69e:	4770      	bx	lr

0801d6a0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	b082      	sub	sp, #8
 801d6a4:	af00      	add	r7, sp, #0
 801d6a6:	6078      	str	r0, [r7, #4]
 801d6a8:	460b      	mov	r3, r1
 801d6aa:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801d6ac:	78fb      	ldrb	r3, [r7, #3]
 801d6ae:	2200      	movs	r2, #0
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801d6b6:	f7ee fc9b 	bl	800bff0 <osSemaphoreNew>
 801d6ba:	4602      	mov	r2, r0
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d102      	bne.n	801d6ce <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d6c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d6cc:	e009      	b.n	801d6e2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801d6ce:	78fb      	ldrb	r3, [r7, #3]
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d105      	bne.n	801d6e0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	681b      	ldr	r3, [r3, #0]
 801d6d8:	2100      	movs	r1, #0
 801d6da:	4618      	mov	r0, r3
 801d6dc:	f7ee fd12 	bl	800c104 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801d6e0:	2300      	movs	r3, #0
}
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	3708      	adds	r7, #8
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	bd80      	pop	{r7, pc}

0801d6ea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801d6ea:	b580      	push	{r7, lr}
 801d6ec:	b084      	sub	sp, #16
 801d6ee:	af00      	add	r7, sp, #0
 801d6f0:	6078      	str	r0, [r7, #4]
 801d6f2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801d6f4:	f7ee faac 	bl	800bc50 <osKernelGetTickCount>
 801d6f8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801d6fa:	683b      	ldr	r3, [r7, #0]
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d011      	beq.n	801d724 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	6839      	ldr	r1, [r7, #0]
 801d706:	4618      	mov	r0, r3
 801d708:	f7ee fcfc 	bl	800c104 <osSemaphoreAcquire>
 801d70c:	4603      	mov	r3, r0
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d105      	bne.n	801d71e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801d712:	f7ee fa9d 	bl	800bc50 <osKernelGetTickCount>
 801d716:	4602      	mov	r2, r0
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	1ad3      	subs	r3, r2, r3
 801d71c:	e012      	b.n	801d744 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d71e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d722:	e00f      	b.n	801d744 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801d724:	bf00      	nop
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d72e:	4618      	mov	r0, r3
 801d730:	f7ee fce8 	bl	800c104 <osSemaphoreAcquire>
 801d734:	4603      	mov	r3, r0
 801d736:	2b00      	cmp	r3, #0
 801d738:	d1f5      	bne.n	801d726 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801d73a:	f7ee fa89 	bl	800bc50 <osKernelGetTickCount>
 801d73e:	4602      	mov	r2, r0
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d744:	4618      	mov	r0, r3
 801d746:	3710      	adds	r7, #16
 801d748:	46bd      	mov	sp, r7
 801d74a:	bd80      	pop	{r7, pc}

0801d74c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801d74c:	b580      	push	{r7, lr}
 801d74e:	b082      	sub	sp, #8
 801d750:	af00      	add	r7, sp, #0
 801d752:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	4618      	mov	r0, r3
 801d75a:	f7ee fd25 	bl	800c1a8 <osSemaphoreRelease>
}
 801d75e:	bf00      	nop
 801d760:	3708      	adds	r7, #8
 801d762:	46bd      	mov	sp, r7
 801d764:	bd80      	pop	{r7, pc}

0801d766 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801d766:	b580      	push	{r7, lr}
 801d768:	b082      	sub	sp, #8
 801d76a:	af00      	add	r7, sp, #0
 801d76c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	4618      	mov	r0, r3
 801d774:	f7ee fd5c 	bl	800c230 <osSemaphoreDelete>
}
 801d778:	bf00      	nop
 801d77a:	3708      	adds	r7, #8
 801d77c:	46bd      	mov	sp, r7
 801d77e:	bd80      	pop	{r7, pc}

0801d780 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801d780:	b480      	push	{r7}
 801d782:	b083      	sub	sp, #12
 801d784:	af00      	add	r7, sp, #0
 801d786:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d101      	bne.n	801d794 <sys_sem_valid+0x14>
    return 0;
 801d790:	2300      	movs	r3, #0
 801d792:	e000      	b.n	801d796 <sys_sem_valid+0x16>
  else
    return 1;
 801d794:	2301      	movs	r3, #1
}
 801d796:	4618      	mov	r0, r3
 801d798:	370c      	adds	r7, #12
 801d79a:	46bd      	mov	sp, r7
 801d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7a0:	4770      	bx	lr

0801d7a2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801d7a2:	b480      	push	{r7}
 801d7a4:	b083      	sub	sp, #12
 801d7a6:	af00      	add	r7, sp, #0
 801d7a8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	2200      	movs	r2, #0
 801d7ae:	601a      	str	r2, [r3, #0]
}
 801d7b0:	bf00      	nop
 801d7b2:	370c      	adds	r7, #12
 801d7b4:	46bd      	mov	sp, r7
 801d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ba:	4770      	bx	lr

0801d7bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d7bc:	b580      	push	{r7, lr}
 801d7be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d7c0:	2000      	movs	r0, #0
 801d7c2:	f7ee fb07 	bl	800bdd4 <osMutexNew>
 801d7c6:	4603      	mov	r3, r0
 801d7c8:	4a01      	ldr	r2, [pc, #4]	@ (801d7d0 <sys_init+0x14>)
 801d7ca:	6013      	str	r3, [r2, #0]
#endif
}
 801d7cc:	bf00      	nop
 801d7ce:	bd80      	pop	{r7, pc}
 801d7d0:	2000fe18 	.word	0x2000fe18

0801d7d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d7d4:	b580      	push	{r7, lr}
 801d7d6:	b082      	sub	sp, #8
 801d7d8:	af00      	add	r7, sp, #0
 801d7da:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d7dc:	2000      	movs	r0, #0
 801d7de:	f7ee faf9 	bl	800bdd4 <osMutexNew>
 801d7e2:	4602      	mov	r2, r0
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d102      	bne.n	801d7f6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d7f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d7f4:	e000      	b.n	801d7f8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d7f6:	2300      	movs	r3, #0
}
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	3708      	adds	r7, #8
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	bd80      	pop	{r7, pc}

0801d800 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d800:	b580      	push	{r7, lr}
 801d802:	b082      	sub	sp, #8
 801d804:	af00      	add	r7, sp, #0
 801d806:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d810:	4618      	mov	r0, r3
 801d812:	f7ee fb65 	bl	800bee0 <osMutexAcquire>
#endif
}
 801d816:	bf00      	nop
 801d818:	3708      	adds	r7, #8
 801d81a:	46bd      	mov	sp, r7
 801d81c:	bd80      	pop	{r7, pc}

0801d81e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d81e:	b580      	push	{r7, lr}
 801d820:	b082      	sub	sp, #8
 801d822:	af00      	add	r7, sp, #0
 801d824:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	4618      	mov	r0, r3
 801d82c:	f7ee fba3 	bl	800bf76 <osMutexRelease>
}
 801d830:	bf00      	nop
 801d832:	3708      	adds	r7, #8
 801d834:	46bd      	mov	sp, r7
 801d836:	bd80      	pop	{r7, pc}

0801d838 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d838:	b580      	push	{r7, lr}
 801d83a:	b08e      	sub	sp, #56	@ 0x38
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	60f8      	str	r0, [r7, #12]
 801d840:	60b9      	str	r1, [r7, #8]
 801d842:	607a      	str	r2, [r7, #4]
 801d844:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d846:	f107 0314 	add.w	r3, r7, #20
 801d84a:	2224      	movs	r2, #36	@ 0x24
 801d84c:	2100      	movs	r1, #0
 801d84e:	4618      	mov	r0, r3
 801d850:	f000 ff1a 	bl	801e688 <memset>
 801d854:	68fb      	ldr	r3, [r7, #12]
 801d856:	617b      	str	r3, [r7, #20]
 801d858:	683b      	ldr	r3, [r7, #0]
 801d85a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d85c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d860:	f107 0314 	add.w	r3, r7, #20
 801d864:	461a      	mov	r2, r3
 801d866:	6879      	ldr	r1, [r7, #4]
 801d868:	68b8      	ldr	r0, [r7, #8]
 801d86a:	f7ee fa06 	bl	800bc7a <osThreadNew>
 801d86e:	4603      	mov	r3, r0
#endif
}
 801d870:	4618      	mov	r0, r3
 801d872:	3738      	adds	r7, #56	@ 0x38
 801d874:	46bd      	mov	sp, r7
 801d876:	bd80      	pop	{r7, pc}

0801d878 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d878:	b580      	push	{r7, lr}
 801d87a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d87c:	4b04      	ldr	r3, [pc, #16]	@ (801d890 <sys_arch_protect+0x18>)
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d884:	4618      	mov	r0, r3
 801d886:	f7ee fb2b 	bl	800bee0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d88a:	2301      	movs	r3, #1
}
 801d88c:	4618      	mov	r0, r3
 801d88e:	bd80      	pop	{r7, pc}
 801d890:	2000fe18 	.word	0x2000fe18

0801d894 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b082      	sub	sp, #8
 801d898:	af00      	add	r7, sp, #0
 801d89a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d89c:	4b04      	ldr	r3, [pc, #16]	@ (801d8b0 <sys_arch_unprotect+0x1c>)
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	4618      	mov	r0, r3
 801d8a2:	f7ee fb68 	bl	800bf76 <osMutexRelease>
}
 801d8a6:	bf00      	nop
 801d8a8:	3708      	adds	r7, #8
 801d8aa:	46bd      	mov	sp, r7
 801d8ac:	bd80      	pop	{r7, pc}
 801d8ae:	bf00      	nop
 801d8b0:	2000fe18 	.word	0x2000fe18

0801d8b4 <rand>:
 801d8b4:	4b16      	ldr	r3, [pc, #88]	@ (801d910 <rand+0x5c>)
 801d8b6:	b510      	push	{r4, lr}
 801d8b8:	681c      	ldr	r4, [r3, #0]
 801d8ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d8bc:	b9b3      	cbnz	r3, 801d8ec <rand+0x38>
 801d8be:	2018      	movs	r0, #24
 801d8c0:	f001 fe74 	bl	801f5ac <malloc>
 801d8c4:	4602      	mov	r2, r0
 801d8c6:	6320      	str	r0, [r4, #48]	@ 0x30
 801d8c8:	b920      	cbnz	r0, 801d8d4 <rand+0x20>
 801d8ca:	4b12      	ldr	r3, [pc, #72]	@ (801d914 <rand+0x60>)
 801d8cc:	4812      	ldr	r0, [pc, #72]	@ (801d918 <rand+0x64>)
 801d8ce:	2152      	movs	r1, #82	@ 0x52
 801d8d0:	f000 ffb8 	bl	801e844 <__assert_func>
 801d8d4:	4911      	ldr	r1, [pc, #68]	@ (801d91c <rand+0x68>)
 801d8d6:	4b12      	ldr	r3, [pc, #72]	@ (801d920 <rand+0x6c>)
 801d8d8:	e9c0 1300 	strd	r1, r3, [r0]
 801d8dc:	4b11      	ldr	r3, [pc, #68]	@ (801d924 <rand+0x70>)
 801d8de:	6083      	str	r3, [r0, #8]
 801d8e0:	230b      	movs	r3, #11
 801d8e2:	8183      	strh	r3, [r0, #12]
 801d8e4:	2100      	movs	r1, #0
 801d8e6:	2001      	movs	r0, #1
 801d8e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d8ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d8ee:	480e      	ldr	r0, [pc, #56]	@ (801d928 <rand+0x74>)
 801d8f0:	690b      	ldr	r3, [r1, #16]
 801d8f2:	694c      	ldr	r4, [r1, #20]
 801d8f4:	4a0d      	ldr	r2, [pc, #52]	@ (801d92c <rand+0x78>)
 801d8f6:	4358      	muls	r0, r3
 801d8f8:	fb02 0004 	mla	r0, r2, r4, r0
 801d8fc:	fba3 3202 	umull	r3, r2, r3, r2
 801d900:	3301      	adds	r3, #1
 801d902:	eb40 0002 	adc.w	r0, r0, r2
 801d906:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d90a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d90e:	bd10      	pop	{r4, pc}
 801d910:	2000003c 	.word	0x2000003c
 801d914:	080246d6 	.word	0x080246d6
 801d918:	080246ed 	.word	0x080246ed
 801d91c:	abcd330e 	.word	0xabcd330e
 801d920:	e66d1234 	.word	0xe66d1234
 801d924:	0005deec 	.word	0x0005deec
 801d928:	5851f42d 	.word	0x5851f42d
 801d92c:	4c957f2d 	.word	0x4c957f2d

0801d930 <__cvt>:
 801d930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d934:	ec57 6b10 	vmov	r6, r7, d0
 801d938:	2f00      	cmp	r7, #0
 801d93a:	460c      	mov	r4, r1
 801d93c:	4619      	mov	r1, r3
 801d93e:	463b      	mov	r3, r7
 801d940:	bfbb      	ittet	lt
 801d942:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d946:	461f      	movlt	r7, r3
 801d948:	2300      	movge	r3, #0
 801d94a:	232d      	movlt	r3, #45	@ 0x2d
 801d94c:	700b      	strb	r3, [r1, #0]
 801d94e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d950:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d954:	4691      	mov	r9, r2
 801d956:	f023 0820 	bic.w	r8, r3, #32
 801d95a:	bfbc      	itt	lt
 801d95c:	4632      	movlt	r2, r6
 801d95e:	4616      	movlt	r6, r2
 801d960:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d964:	d005      	beq.n	801d972 <__cvt+0x42>
 801d966:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d96a:	d100      	bne.n	801d96e <__cvt+0x3e>
 801d96c:	3401      	adds	r4, #1
 801d96e:	2102      	movs	r1, #2
 801d970:	e000      	b.n	801d974 <__cvt+0x44>
 801d972:	2103      	movs	r1, #3
 801d974:	ab03      	add	r3, sp, #12
 801d976:	9301      	str	r3, [sp, #4]
 801d978:	ab02      	add	r3, sp, #8
 801d97a:	9300      	str	r3, [sp, #0]
 801d97c:	ec47 6b10 	vmov	d0, r6, r7
 801d980:	4653      	mov	r3, sl
 801d982:	4622      	mov	r2, r4
 801d984:	f001 f804 	bl	801e990 <_dtoa_r>
 801d988:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d98c:	4605      	mov	r5, r0
 801d98e:	d119      	bne.n	801d9c4 <__cvt+0x94>
 801d990:	f019 0f01 	tst.w	r9, #1
 801d994:	d00e      	beq.n	801d9b4 <__cvt+0x84>
 801d996:	eb00 0904 	add.w	r9, r0, r4
 801d99a:	2200      	movs	r2, #0
 801d99c:	2300      	movs	r3, #0
 801d99e:	4630      	mov	r0, r6
 801d9a0:	4639      	mov	r1, r7
 801d9a2:	f7e3 f8a1 	bl	8000ae8 <__aeabi_dcmpeq>
 801d9a6:	b108      	cbz	r0, 801d9ac <__cvt+0x7c>
 801d9a8:	f8cd 900c 	str.w	r9, [sp, #12]
 801d9ac:	2230      	movs	r2, #48	@ 0x30
 801d9ae:	9b03      	ldr	r3, [sp, #12]
 801d9b0:	454b      	cmp	r3, r9
 801d9b2:	d31e      	bcc.n	801d9f2 <__cvt+0xc2>
 801d9b4:	9b03      	ldr	r3, [sp, #12]
 801d9b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d9b8:	1b5b      	subs	r3, r3, r5
 801d9ba:	4628      	mov	r0, r5
 801d9bc:	6013      	str	r3, [r2, #0]
 801d9be:	b004      	add	sp, #16
 801d9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d9c8:	eb00 0904 	add.w	r9, r0, r4
 801d9cc:	d1e5      	bne.n	801d99a <__cvt+0x6a>
 801d9ce:	7803      	ldrb	r3, [r0, #0]
 801d9d0:	2b30      	cmp	r3, #48	@ 0x30
 801d9d2:	d10a      	bne.n	801d9ea <__cvt+0xba>
 801d9d4:	2200      	movs	r2, #0
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	4630      	mov	r0, r6
 801d9da:	4639      	mov	r1, r7
 801d9dc:	f7e3 f884 	bl	8000ae8 <__aeabi_dcmpeq>
 801d9e0:	b918      	cbnz	r0, 801d9ea <__cvt+0xba>
 801d9e2:	f1c4 0401 	rsb	r4, r4, #1
 801d9e6:	f8ca 4000 	str.w	r4, [sl]
 801d9ea:	f8da 3000 	ldr.w	r3, [sl]
 801d9ee:	4499      	add	r9, r3
 801d9f0:	e7d3      	b.n	801d99a <__cvt+0x6a>
 801d9f2:	1c59      	adds	r1, r3, #1
 801d9f4:	9103      	str	r1, [sp, #12]
 801d9f6:	701a      	strb	r2, [r3, #0]
 801d9f8:	e7d9      	b.n	801d9ae <__cvt+0x7e>

0801d9fa <__exponent>:
 801d9fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d9fc:	2900      	cmp	r1, #0
 801d9fe:	bfba      	itte	lt
 801da00:	4249      	neglt	r1, r1
 801da02:	232d      	movlt	r3, #45	@ 0x2d
 801da04:	232b      	movge	r3, #43	@ 0x2b
 801da06:	2909      	cmp	r1, #9
 801da08:	7002      	strb	r2, [r0, #0]
 801da0a:	7043      	strb	r3, [r0, #1]
 801da0c:	dd29      	ble.n	801da62 <__exponent+0x68>
 801da0e:	f10d 0307 	add.w	r3, sp, #7
 801da12:	461d      	mov	r5, r3
 801da14:	270a      	movs	r7, #10
 801da16:	461a      	mov	r2, r3
 801da18:	fbb1 f6f7 	udiv	r6, r1, r7
 801da1c:	fb07 1416 	mls	r4, r7, r6, r1
 801da20:	3430      	adds	r4, #48	@ 0x30
 801da22:	f802 4c01 	strb.w	r4, [r2, #-1]
 801da26:	460c      	mov	r4, r1
 801da28:	2c63      	cmp	r4, #99	@ 0x63
 801da2a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801da2e:	4631      	mov	r1, r6
 801da30:	dcf1      	bgt.n	801da16 <__exponent+0x1c>
 801da32:	3130      	adds	r1, #48	@ 0x30
 801da34:	1e94      	subs	r4, r2, #2
 801da36:	f803 1c01 	strb.w	r1, [r3, #-1]
 801da3a:	1c41      	adds	r1, r0, #1
 801da3c:	4623      	mov	r3, r4
 801da3e:	42ab      	cmp	r3, r5
 801da40:	d30a      	bcc.n	801da58 <__exponent+0x5e>
 801da42:	f10d 0309 	add.w	r3, sp, #9
 801da46:	1a9b      	subs	r3, r3, r2
 801da48:	42ac      	cmp	r4, r5
 801da4a:	bf88      	it	hi
 801da4c:	2300      	movhi	r3, #0
 801da4e:	3302      	adds	r3, #2
 801da50:	4403      	add	r3, r0
 801da52:	1a18      	subs	r0, r3, r0
 801da54:	b003      	add	sp, #12
 801da56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da58:	f813 6b01 	ldrb.w	r6, [r3], #1
 801da5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 801da60:	e7ed      	b.n	801da3e <__exponent+0x44>
 801da62:	2330      	movs	r3, #48	@ 0x30
 801da64:	3130      	adds	r1, #48	@ 0x30
 801da66:	7083      	strb	r3, [r0, #2]
 801da68:	70c1      	strb	r1, [r0, #3]
 801da6a:	1d03      	adds	r3, r0, #4
 801da6c:	e7f1      	b.n	801da52 <__exponent+0x58>
	...

0801da70 <_printf_float>:
 801da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da74:	b08d      	sub	sp, #52	@ 0x34
 801da76:	460c      	mov	r4, r1
 801da78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801da7c:	4616      	mov	r6, r2
 801da7e:	461f      	mov	r7, r3
 801da80:	4605      	mov	r5, r0
 801da82:	f000 fe09 	bl	801e698 <_localeconv_r>
 801da86:	6803      	ldr	r3, [r0, #0]
 801da88:	9304      	str	r3, [sp, #16]
 801da8a:	4618      	mov	r0, r3
 801da8c:	f7e2 fc00 	bl	8000290 <strlen>
 801da90:	2300      	movs	r3, #0
 801da92:	930a      	str	r3, [sp, #40]	@ 0x28
 801da94:	f8d8 3000 	ldr.w	r3, [r8]
 801da98:	9005      	str	r0, [sp, #20]
 801da9a:	3307      	adds	r3, #7
 801da9c:	f023 0307 	bic.w	r3, r3, #7
 801daa0:	f103 0208 	add.w	r2, r3, #8
 801daa4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801daa8:	f8d4 b000 	ldr.w	fp, [r4]
 801daac:	f8c8 2000 	str.w	r2, [r8]
 801dab0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dab4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dab8:	9307      	str	r3, [sp, #28]
 801daba:	f8cd 8018 	str.w	r8, [sp, #24]
 801dabe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dac6:	4b9c      	ldr	r3, [pc, #624]	@ (801dd38 <_printf_float+0x2c8>)
 801dac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dacc:	f7e3 f83e 	bl	8000b4c <__aeabi_dcmpun>
 801dad0:	bb70      	cbnz	r0, 801db30 <_printf_float+0xc0>
 801dad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dad6:	4b98      	ldr	r3, [pc, #608]	@ (801dd38 <_printf_float+0x2c8>)
 801dad8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dadc:	f7e3 f818 	bl	8000b10 <__aeabi_dcmple>
 801dae0:	bb30      	cbnz	r0, 801db30 <_printf_float+0xc0>
 801dae2:	2200      	movs	r2, #0
 801dae4:	2300      	movs	r3, #0
 801dae6:	4640      	mov	r0, r8
 801dae8:	4649      	mov	r1, r9
 801daea:	f7e3 f807 	bl	8000afc <__aeabi_dcmplt>
 801daee:	b110      	cbz	r0, 801daf6 <_printf_float+0x86>
 801daf0:	232d      	movs	r3, #45	@ 0x2d
 801daf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801daf6:	4a91      	ldr	r2, [pc, #580]	@ (801dd3c <_printf_float+0x2cc>)
 801daf8:	4b91      	ldr	r3, [pc, #580]	@ (801dd40 <_printf_float+0x2d0>)
 801dafa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801dafe:	bf94      	ite	ls
 801db00:	4690      	movls	r8, r2
 801db02:	4698      	movhi	r8, r3
 801db04:	2303      	movs	r3, #3
 801db06:	6123      	str	r3, [r4, #16]
 801db08:	f02b 0304 	bic.w	r3, fp, #4
 801db0c:	6023      	str	r3, [r4, #0]
 801db0e:	f04f 0900 	mov.w	r9, #0
 801db12:	9700      	str	r7, [sp, #0]
 801db14:	4633      	mov	r3, r6
 801db16:	aa0b      	add	r2, sp, #44	@ 0x2c
 801db18:	4621      	mov	r1, r4
 801db1a:	4628      	mov	r0, r5
 801db1c:	f000 f9d2 	bl	801dec4 <_printf_common>
 801db20:	3001      	adds	r0, #1
 801db22:	f040 808d 	bne.w	801dc40 <_printf_float+0x1d0>
 801db26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801db2a:	b00d      	add	sp, #52	@ 0x34
 801db2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db30:	4642      	mov	r2, r8
 801db32:	464b      	mov	r3, r9
 801db34:	4640      	mov	r0, r8
 801db36:	4649      	mov	r1, r9
 801db38:	f7e3 f808 	bl	8000b4c <__aeabi_dcmpun>
 801db3c:	b140      	cbz	r0, 801db50 <_printf_float+0xe0>
 801db3e:	464b      	mov	r3, r9
 801db40:	2b00      	cmp	r3, #0
 801db42:	bfbc      	itt	lt
 801db44:	232d      	movlt	r3, #45	@ 0x2d
 801db46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801db4a:	4a7e      	ldr	r2, [pc, #504]	@ (801dd44 <_printf_float+0x2d4>)
 801db4c:	4b7e      	ldr	r3, [pc, #504]	@ (801dd48 <_printf_float+0x2d8>)
 801db4e:	e7d4      	b.n	801dafa <_printf_float+0x8a>
 801db50:	6863      	ldr	r3, [r4, #4]
 801db52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801db56:	9206      	str	r2, [sp, #24]
 801db58:	1c5a      	adds	r2, r3, #1
 801db5a:	d13b      	bne.n	801dbd4 <_printf_float+0x164>
 801db5c:	2306      	movs	r3, #6
 801db5e:	6063      	str	r3, [r4, #4]
 801db60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801db64:	2300      	movs	r3, #0
 801db66:	6022      	str	r2, [r4, #0]
 801db68:	9303      	str	r3, [sp, #12]
 801db6a:	ab0a      	add	r3, sp, #40	@ 0x28
 801db6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801db70:	ab09      	add	r3, sp, #36	@ 0x24
 801db72:	9300      	str	r3, [sp, #0]
 801db74:	6861      	ldr	r1, [r4, #4]
 801db76:	ec49 8b10 	vmov	d0, r8, r9
 801db7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801db7e:	4628      	mov	r0, r5
 801db80:	f7ff fed6 	bl	801d930 <__cvt>
 801db84:	9b06      	ldr	r3, [sp, #24]
 801db86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801db88:	2b47      	cmp	r3, #71	@ 0x47
 801db8a:	4680      	mov	r8, r0
 801db8c:	d129      	bne.n	801dbe2 <_printf_float+0x172>
 801db8e:	1cc8      	adds	r0, r1, #3
 801db90:	db02      	blt.n	801db98 <_printf_float+0x128>
 801db92:	6863      	ldr	r3, [r4, #4]
 801db94:	4299      	cmp	r1, r3
 801db96:	dd41      	ble.n	801dc1c <_printf_float+0x1ac>
 801db98:	f1aa 0a02 	sub.w	sl, sl, #2
 801db9c:	fa5f fa8a 	uxtb.w	sl, sl
 801dba0:	3901      	subs	r1, #1
 801dba2:	4652      	mov	r2, sl
 801dba4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801dba8:	9109      	str	r1, [sp, #36]	@ 0x24
 801dbaa:	f7ff ff26 	bl	801d9fa <__exponent>
 801dbae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dbb0:	1813      	adds	r3, r2, r0
 801dbb2:	2a01      	cmp	r2, #1
 801dbb4:	4681      	mov	r9, r0
 801dbb6:	6123      	str	r3, [r4, #16]
 801dbb8:	dc02      	bgt.n	801dbc0 <_printf_float+0x150>
 801dbba:	6822      	ldr	r2, [r4, #0]
 801dbbc:	07d2      	lsls	r2, r2, #31
 801dbbe:	d501      	bpl.n	801dbc4 <_printf_float+0x154>
 801dbc0:	3301      	adds	r3, #1
 801dbc2:	6123      	str	r3, [r4, #16]
 801dbc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d0a2      	beq.n	801db12 <_printf_float+0xa2>
 801dbcc:	232d      	movs	r3, #45	@ 0x2d
 801dbce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dbd2:	e79e      	b.n	801db12 <_printf_float+0xa2>
 801dbd4:	9a06      	ldr	r2, [sp, #24]
 801dbd6:	2a47      	cmp	r2, #71	@ 0x47
 801dbd8:	d1c2      	bne.n	801db60 <_printf_float+0xf0>
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d1c0      	bne.n	801db60 <_printf_float+0xf0>
 801dbde:	2301      	movs	r3, #1
 801dbe0:	e7bd      	b.n	801db5e <_printf_float+0xee>
 801dbe2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dbe6:	d9db      	bls.n	801dba0 <_printf_float+0x130>
 801dbe8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801dbec:	d118      	bne.n	801dc20 <_printf_float+0x1b0>
 801dbee:	2900      	cmp	r1, #0
 801dbf0:	6863      	ldr	r3, [r4, #4]
 801dbf2:	dd0b      	ble.n	801dc0c <_printf_float+0x19c>
 801dbf4:	6121      	str	r1, [r4, #16]
 801dbf6:	b913      	cbnz	r3, 801dbfe <_printf_float+0x18e>
 801dbf8:	6822      	ldr	r2, [r4, #0]
 801dbfa:	07d0      	lsls	r0, r2, #31
 801dbfc:	d502      	bpl.n	801dc04 <_printf_float+0x194>
 801dbfe:	3301      	adds	r3, #1
 801dc00:	440b      	add	r3, r1
 801dc02:	6123      	str	r3, [r4, #16]
 801dc04:	65a1      	str	r1, [r4, #88]	@ 0x58
 801dc06:	f04f 0900 	mov.w	r9, #0
 801dc0a:	e7db      	b.n	801dbc4 <_printf_float+0x154>
 801dc0c:	b913      	cbnz	r3, 801dc14 <_printf_float+0x1a4>
 801dc0e:	6822      	ldr	r2, [r4, #0]
 801dc10:	07d2      	lsls	r2, r2, #31
 801dc12:	d501      	bpl.n	801dc18 <_printf_float+0x1a8>
 801dc14:	3302      	adds	r3, #2
 801dc16:	e7f4      	b.n	801dc02 <_printf_float+0x192>
 801dc18:	2301      	movs	r3, #1
 801dc1a:	e7f2      	b.n	801dc02 <_printf_float+0x192>
 801dc1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801dc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc22:	4299      	cmp	r1, r3
 801dc24:	db05      	blt.n	801dc32 <_printf_float+0x1c2>
 801dc26:	6823      	ldr	r3, [r4, #0]
 801dc28:	6121      	str	r1, [r4, #16]
 801dc2a:	07d8      	lsls	r0, r3, #31
 801dc2c:	d5ea      	bpl.n	801dc04 <_printf_float+0x194>
 801dc2e:	1c4b      	adds	r3, r1, #1
 801dc30:	e7e7      	b.n	801dc02 <_printf_float+0x192>
 801dc32:	2900      	cmp	r1, #0
 801dc34:	bfd4      	ite	le
 801dc36:	f1c1 0202 	rsble	r2, r1, #2
 801dc3a:	2201      	movgt	r2, #1
 801dc3c:	4413      	add	r3, r2
 801dc3e:	e7e0      	b.n	801dc02 <_printf_float+0x192>
 801dc40:	6823      	ldr	r3, [r4, #0]
 801dc42:	055a      	lsls	r2, r3, #21
 801dc44:	d407      	bmi.n	801dc56 <_printf_float+0x1e6>
 801dc46:	6923      	ldr	r3, [r4, #16]
 801dc48:	4642      	mov	r2, r8
 801dc4a:	4631      	mov	r1, r6
 801dc4c:	4628      	mov	r0, r5
 801dc4e:	47b8      	blx	r7
 801dc50:	3001      	adds	r0, #1
 801dc52:	d12b      	bne.n	801dcac <_printf_float+0x23c>
 801dc54:	e767      	b.n	801db26 <_printf_float+0xb6>
 801dc56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dc5a:	f240 80dd 	bls.w	801de18 <_printf_float+0x3a8>
 801dc5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801dc62:	2200      	movs	r2, #0
 801dc64:	2300      	movs	r3, #0
 801dc66:	f7e2 ff3f 	bl	8000ae8 <__aeabi_dcmpeq>
 801dc6a:	2800      	cmp	r0, #0
 801dc6c:	d033      	beq.n	801dcd6 <_printf_float+0x266>
 801dc6e:	4a37      	ldr	r2, [pc, #220]	@ (801dd4c <_printf_float+0x2dc>)
 801dc70:	2301      	movs	r3, #1
 801dc72:	4631      	mov	r1, r6
 801dc74:	4628      	mov	r0, r5
 801dc76:	47b8      	blx	r7
 801dc78:	3001      	adds	r0, #1
 801dc7a:	f43f af54 	beq.w	801db26 <_printf_float+0xb6>
 801dc7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801dc82:	4543      	cmp	r3, r8
 801dc84:	db02      	blt.n	801dc8c <_printf_float+0x21c>
 801dc86:	6823      	ldr	r3, [r4, #0]
 801dc88:	07d8      	lsls	r0, r3, #31
 801dc8a:	d50f      	bpl.n	801dcac <_printf_float+0x23c>
 801dc8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dc90:	4631      	mov	r1, r6
 801dc92:	4628      	mov	r0, r5
 801dc94:	47b8      	blx	r7
 801dc96:	3001      	adds	r0, #1
 801dc98:	f43f af45 	beq.w	801db26 <_printf_float+0xb6>
 801dc9c:	f04f 0900 	mov.w	r9, #0
 801dca0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801dca4:	f104 0a1a 	add.w	sl, r4, #26
 801dca8:	45c8      	cmp	r8, r9
 801dcaa:	dc09      	bgt.n	801dcc0 <_printf_float+0x250>
 801dcac:	6823      	ldr	r3, [r4, #0]
 801dcae:	079b      	lsls	r3, r3, #30
 801dcb0:	f100 8103 	bmi.w	801deba <_printf_float+0x44a>
 801dcb4:	68e0      	ldr	r0, [r4, #12]
 801dcb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dcb8:	4298      	cmp	r0, r3
 801dcba:	bfb8      	it	lt
 801dcbc:	4618      	movlt	r0, r3
 801dcbe:	e734      	b.n	801db2a <_printf_float+0xba>
 801dcc0:	2301      	movs	r3, #1
 801dcc2:	4652      	mov	r2, sl
 801dcc4:	4631      	mov	r1, r6
 801dcc6:	4628      	mov	r0, r5
 801dcc8:	47b8      	blx	r7
 801dcca:	3001      	adds	r0, #1
 801dccc:	f43f af2b 	beq.w	801db26 <_printf_float+0xb6>
 801dcd0:	f109 0901 	add.w	r9, r9, #1
 801dcd4:	e7e8      	b.n	801dca8 <_printf_float+0x238>
 801dcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	dc39      	bgt.n	801dd50 <_printf_float+0x2e0>
 801dcdc:	4a1b      	ldr	r2, [pc, #108]	@ (801dd4c <_printf_float+0x2dc>)
 801dcde:	2301      	movs	r3, #1
 801dce0:	4631      	mov	r1, r6
 801dce2:	4628      	mov	r0, r5
 801dce4:	47b8      	blx	r7
 801dce6:	3001      	adds	r0, #1
 801dce8:	f43f af1d 	beq.w	801db26 <_printf_float+0xb6>
 801dcec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801dcf0:	ea59 0303 	orrs.w	r3, r9, r3
 801dcf4:	d102      	bne.n	801dcfc <_printf_float+0x28c>
 801dcf6:	6823      	ldr	r3, [r4, #0]
 801dcf8:	07d9      	lsls	r1, r3, #31
 801dcfa:	d5d7      	bpl.n	801dcac <_printf_float+0x23c>
 801dcfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd00:	4631      	mov	r1, r6
 801dd02:	4628      	mov	r0, r5
 801dd04:	47b8      	blx	r7
 801dd06:	3001      	adds	r0, #1
 801dd08:	f43f af0d 	beq.w	801db26 <_printf_float+0xb6>
 801dd0c:	f04f 0a00 	mov.w	sl, #0
 801dd10:	f104 0b1a 	add.w	fp, r4, #26
 801dd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd16:	425b      	negs	r3, r3
 801dd18:	4553      	cmp	r3, sl
 801dd1a:	dc01      	bgt.n	801dd20 <_printf_float+0x2b0>
 801dd1c:	464b      	mov	r3, r9
 801dd1e:	e793      	b.n	801dc48 <_printf_float+0x1d8>
 801dd20:	2301      	movs	r3, #1
 801dd22:	465a      	mov	r2, fp
 801dd24:	4631      	mov	r1, r6
 801dd26:	4628      	mov	r0, r5
 801dd28:	47b8      	blx	r7
 801dd2a:	3001      	adds	r0, #1
 801dd2c:	f43f aefb 	beq.w	801db26 <_printf_float+0xb6>
 801dd30:	f10a 0a01 	add.w	sl, sl, #1
 801dd34:	e7ee      	b.n	801dd14 <_printf_float+0x2a4>
 801dd36:	bf00      	nop
 801dd38:	7fefffff 	.word	0x7fefffff
 801dd3c:	08024846 	.word	0x08024846
 801dd40:	0802484a 	.word	0x0802484a
 801dd44:	0802484e 	.word	0x0802484e
 801dd48:	08024852 	.word	0x08024852
 801dd4c:	08024856 	.word	0x08024856
 801dd50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801dd52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801dd56:	4553      	cmp	r3, sl
 801dd58:	bfa8      	it	ge
 801dd5a:	4653      	movge	r3, sl
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	4699      	mov	r9, r3
 801dd60:	dc36      	bgt.n	801ddd0 <_printf_float+0x360>
 801dd62:	f04f 0b00 	mov.w	fp, #0
 801dd66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dd6a:	f104 021a 	add.w	r2, r4, #26
 801dd6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801dd70:	9306      	str	r3, [sp, #24]
 801dd72:	eba3 0309 	sub.w	r3, r3, r9
 801dd76:	455b      	cmp	r3, fp
 801dd78:	dc31      	bgt.n	801ddde <_printf_float+0x36e>
 801dd7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd7c:	459a      	cmp	sl, r3
 801dd7e:	dc3a      	bgt.n	801ddf6 <_printf_float+0x386>
 801dd80:	6823      	ldr	r3, [r4, #0]
 801dd82:	07da      	lsls	r2, r3, #31
 801dd84:	d437      	bmi.n	801ddf6 <_printf_float+0x386>
 801dd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd88:	ebaa 0903 	sub.w	r9, sl, r3
 801dd8c:	9b06      	ldr	r3, [sp, #24]
 801dd8e:	ebaa 0303 	sub.w	r3, sl, r3
 801dd92:	4599      	cmp	r9, r3
 801dd94:	bfa8      	it	ge
 801dd96:	4699      	movge	r9, r3
 801dd98:	f1b9 0f00 	cmp.w	r9, #0
 801dd9c:	dc33      	bgt.n	801de06 <_printf_float+0x396>
 801dd9e:	f04f 0800 	mov.w	r8, #0
 801dda2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dda6:	f104 0b1a 	add.w	fp, r4, #26
 801ddaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddac:	ebaa 0303 	sub.w	r3, sl, r3
 801ddb0:	eba3 0309 	sub.w	r3, r3, r9
 801ddb4:	4543      	cmp	r3, r8
 801ddb6:	f77f af79 	ble.w	801dcac <_printf_float+0x23c>
 801ddba:	2301      	movs	r3, #1
 801ddbc:	465a      	mov	r2, fp
 801ddbe:	4631      	mov	r1, r6
 801ddc0:	4628      	mov	r0, r5
 801ddc2:	47b8      	blx	r7
 801ddc4:	3001      	adds	r0, #1
 801ddc6:	f43f aeae 	beq.w	801db26 <_printf_float+0xb6>
 801ddca:	f108 0801 	add.w	r8, r8, #1
 801ddce:	e7ec      	b.n	801ddaa <_printf_float+0x33a>
 801ddd0:	4642      	mov	r2, r8
 801ddd2:	4631      	mov	r1, r6
 801ddd4:	4628      	mov	r0, r5
 801ddd6:	47b8      	blx	r7
 801ddd8:	3001      	adds	r0, #1
 801ddda:	d1c2      	bne.n	801dd62 <_printf_float+0x2f2>
 801dddc:	e6a3      	b.n	801db26 <_printf_float+0xb6>
 801ddde:	2301      	movs	r3, #1
 801dde0:	4631      	mov	r1, r6
 801dde2:	4628      	mov	r0, r5
 801dde4:	9206      	str	r2, [sp, #24]
 801dde6:	47b8      	blx	r7
 801dde8:	3001      	adds	r0, #1
 801ddea:	f43f ae9c 	beq.w	801db26 <_printf_float+0xb6>
 801ddee:	9a06      	ldr	r2, [sp, #24]
 801ddf0:	f10b 0b01 	add.w	fp, fp, #1
 801ddf4:	e7bb      	b.n	801dd6e <_printf_float+0x2fe>
 801ddf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ddfa:	4631      	mov	r1, r6
 801ddfc:	4628      	mov	r0, r5
 801ddfe:	47b8      	blx	r7
 801de00:	3001      	adds	r0, #1
 801de02:	d1c0      	bne.n	801dd86 <_printf_float+0x316>
 801de04:	e68f      	b.n	801db26 <_printf_float+0xb6>
 801de06:	9a06      	ldr	r2, [sp, #24]
 801de08:	464b      	mov	r3, r9
 801de0a:	4442      	add	r2, r8
 801de0c:	4631      	mov	r1, r6
 801de0e:	4628      	mov	r0, r5
 801de10:	47b8      	blx	r7
 801de12:	3001      	adds	r0, #1
 801de14:	d1c3      	bne.n	801dd9e <_printf_float+0x32e>
 801de16:	e686      	b.n	801db26 <_printf_float+0xb6>
 801de18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801de1c:	f1ba 0f01 	cmp.w	sl, #1
 801de20:	dc01      	bgt.n	801de26 <_printf_float+0x3b6>
 801de22:	07db      	lsls	r3, r3, #31
 801de24:	d536      	bpl.n	801de94 <_printf_float+0x424>
 801de26:	2301      	movs	r3, #1
 801de28:	4642      	mov	r2, r8
 801de2a:	4631      	mov	r1, r6
 801de2c:	4628      	mov	r0, r5
 801de2e:	47b8      	blx	r7
 801de30:	3001      	adds	r0, #1
 801de32:	f43f ae78 	beq.w	801db26 <_printf_float+0xb6>
 801de36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801de3a:	4631      	mov	r1, r6
 801de3c:	4628      	mov	r0, r5
 801de3e:	47b8      	blx	r7
 801de40:	3001      	adds	r0, #1
 801de42:	f43f ae70 	beq.w	801db26 <_printf_float+0xb6>
 801de46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801de4a:	2200      	movs	r2, #0
 801de4c:	2300      	movs	r3, #0
 801de4e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801de52:	f7e2 fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 801de56:	b9c0      	cbnz	r0, 801de8a <_printf_float+0x41a>
 801de58:	4653      	mov	r3, sl
 801de5a:	f108 0201 	add.w	r2, r8, #1
 801de5e:	4631      	mov	r1, r6
 801de60:	4628      	mov	r0, r5
 801de62:	47b8      	blx	r7
 801de64:	3001      	adds	r0, #1
 801de66:	d10c      	bne.n	801de82 <_printf_float+0x412>
 801de68:	e65d      	b.n	801db26 <_printf_float+0xb6>
 801de6a:	2301      	movs	r3, #1
 801de6c:	465a      	mov	r2, fp
 801de6e:	4631      	mov	r1, r6
 801de70:	4628      	mov	r0, r5
 801de72:	47b8      	blx	r7
 801de74:	3001      	adds	r0, #1
 801de76:	f43f ae56 	beq.w	801db26 <_printf_float+0xb6>
 801de7a:	f108 0801 	add.w	r8, r8, #1
 801de7e:	45d0      	cmp	r8, sl
 801de80:	dbf3      	blt.n	801de6a <_printf_float+0x3fa>
 801de82:	464b      	mov	r3, r9
 801de84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801de88:	e6df      	b.n	801dc4a <_printf_float+0x1da>
 801de8a:	f04f 0800 	mov.w	r8, #0
 801de8e:	f104 0b1a 	add.w	fp, r4, #26
 801de92:	e7f4      	b.n	801de7e <_printf_float+0x40e>
 801de94:	2301      	movs	r3, #1
 801de96:	4642      	mov	r2, r8
 801de98:	e7e1      	b.n	801de5e <_printf_float+0x3ee>
 801de9a:	2301      	movs	r3, #1
 801de9c:	464a      	mov	r2, r9
 801de9e:	4631      	mov	r1, r6
 801dea0:	4628      	mov	r0, r5
 801dea2:	47b8      	blx	r7
 801dea4:	3001      	adds	r0, #1
 801dea6:	f43f ae3e 	beq.w	801db26 <_printf_float+0xb6>
 801deaa:	f108 0801 	add.w	r8, r8, #1
 801deae:	68e3      	ldr	r3, [r4, #12]
 801deb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801deb2:	1a5b      	subs	r3, r3, r1
 801deb4:	4543      	cmp	r3, r8
 801deb6:	dcf0      	bgt.n	801de9a <_printf_float+0x42a>
 801deb8:	e6fc      	b.n	801dcb4 <_printf_float+0x244>
 801deba:	f04f 0800 	mov.w	r8, #0
 801debe:	f104 0919 	add.w	r9, r4, #25
 801dec2:	e7f4      	b.n	801deae <_printf_float+0x43e>

0801dec4 <_printf_common>:
 801dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dec8:	4616      	mov	r6, r2
 801deca:	4698      	mov	r8, r3
 801decc:	688a      	ldr	r2, [r1, #8]
 801dece:	690b      	ldr	r3, [r1, #16]
 801ded0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ded4:	4293      	cmp	r3, r2
 801ded6:	bfb8      	it	lt
 801ded8:	4613      	movlt	r3, r2
 801deda:	6033      	str	r3, [r6, #0]
 801dedc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801dee0:	4607      	mov	r7, r0
 801dee2:	460c      	mov	r4, r1
 801dee4:	b10a      	cbz	r2, 801deea <_printf_common+0x26>
 801dee6:	3301      	adds	r3, #1
 801dee8:	6033      	str	r3, [r6, #0]
 801deea:	6823      	ldr	r3, [r4, #0]
 801deec:	0699      	lsls	r1, r3, #26
 801deee:	bf42      	ittt	mi
 801def0:	6833      	ldrmi	r3, [r6, #0]
 801def2:	3302      	addmi	r3, #2
 801def4:	6033      	strmi	r3, [r6, #0]
 801def6:	6825      	ldr	r5, [r4, #0]
 801def8:	f015 0506 	ands.w	r5, r5, #6
 801defc:	d106      	bne.n	801df0c <_printf_common+0x48>
 801defe:	f104 0a19 	add.w	sl, r4, #25
 801df02:	68e3      	ldr	r3, [r4, #12]
 801df04:	6832      	ldr	r2, [r6, #0]
 801df06:	1a9b      	subs	r3, r3, r2
 801df08:	42ab      	cmp	r3, r5
 801df0a:	dc26      	bgt.n	801df5a <_printf_common+0x96>
 801df0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801df10:	6822      	ldr	r2, [r4, #0]
 801df12:	3b00      	subs	r3, #0
 801df14:	bf18      	it	ne
 801df16:	2301      	movne	r3, #1
 801df18:	0692      	lsls	r2, r2, #26
 801df1a:	d42b      	bmi.n	801df74 <_printf_common+0xb0>
 801df1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801df20:	4641      	mov	r1, r8
 801df22:	4638      	mov	r0, r7
 801df24:	47c8      	blx	r9
 801df26:	3001      	adds	r0, #1
 801df28:	d01e      	beq.n	801df68 <_printf_common+0xa4>
 801df2a:	6823      	ldr	r3, [r4, #0]
 801df2c:	6922      	ldr	r2, [r4, #16]
 801df2e:	f003 0306 	and.w	r3, r3, #6
 801df32:	2b04      	cmp	r3, #4
 801df34:	bf02      	ittt	eq
 801df36:	68e5      	ldreq	r5, [r4, #12]
 801df38:	6833      	ldreq	r3, [r6, #0]
 801df3a:	1aed      	subeq	r5, r5, r3
 801df3c:	68a3      	ldr	r3, [r4, #8]
 801df3e:	bf0c      	ite	eq
 801df40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801df44:	2500      	movne	r5, #0
 801df46:	4293      	cmp	r3, r2
 801df48:	bfc4      	itt	gt
 801df4a:	1a9b      	subgt	r3, r3, r2
 801df4c:	18ed      	addgt	r5, r5, r3
 801df4e:	2600      	movs	r6, #0
 801df50:	341a      	adds	r4, #26
 801df52:	42b5      	cmp	r5, r6
 801df54:	d11a      	bne.n	801df8c <_printf_common+0xc8>
 801df56:	2000      	movs	r0, #0
 801df58:	e008      	b.n	801df6c <_printf_common+0xa8>
 801df5a:	2301      	movs	r3, #1
 801df5c:	4652      	mov	r2, sl
 801df5e:	4641      	mov	r1, r8
 801df60:	4638      	mov	r0, r7
 801df62:	47c8      	blx	r9
 801df64:	3001      	adds	r0, #1
 801df66:	d103      	bne.n	801df70 <_printf_common+0xac>
 801df68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df70:	3501      	adds	r5, #1
 801df72:	e7c6      	b.n	801df02 <_printf_common+0x3e>
 801df74:	18e1      	adds	r1, r4, r3
 801df76:	1c5a      	adds	r2, r3, #1
 801df78:	2030      	movs	r0, #48	@ 0x30
 801df7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801df7e:	4422      	add	r2, r4
 801df80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801df84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801df88:	3302      	adds	r3, #2
 801df8a:	e7c7      	b.n	801df1c <_printf_common+0x58>
 801df8c:	2301      	movs	r3, #1
 801df8e:	4622      	mov	r2, r4
 801df90:	4641      	mov	r1, r8
 801df92:	4638      	mov	r0, r7
 801df94:	47c8      	blx	r9
 801df96:	3001      	adds	r0, #1
 801df98:	d0e6      	beq.n	801df68 <_printf_common+0xa4>
 801df9a:	3601      	adds	r6, #1
 801df9c:	e7d9      	b.n	801df52 <_printf_common+0x8e>
	...

0801dfa0 <_printf_i>:
 801dfa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dfa4:	7e0f      	ldrb	r7, [r1, #24]
 801dfa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dfa8:	2f78      	cmp	r7, #120	@ 0x78
 801dfaa:	4691      	mov	r9, r2
 801dfac:	4680      	mov	r8, r0
 801dfae:	460c      	mov	r4, r1
 801dfb0:	469a      	mov	sl, r3
 801dfb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dfb6:	d807      	bhi.n	801dfc8 <_printf_i+0x28>
 801dfb8:	2f62      	cmp	r7, #98	@ 0x62
 801dfba:	d80a      	bhi.n	801dfd2 <_printf_i+0x32>
 801dfbc:	2f00      	cmp	r7, #0
 801dfbe:	f000 80d2 	beq.w	801e166 <_printf_i+0x1c6>
 801dfc2:	2f58      	cmp	r7, #88	@ 0x58
 801dfc4:	f000 80b9 	beq.w	801e13a <_printf_i+0x19a>
 801dfc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dfcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801dfd0:	e03a      	b.n	801e048 <_printf_i+0xa8>
 801dfd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801dfd6:	2b15      	cmp	r3, #21
 801dfd8:	d8f6      	bhi.n	801dfc8 <_printf_i+0x28>
 801dfda:	a101      	add	r1, pc, #4	@ (adr r1, 801dfe0 <_printf_i+0x40>)
 801dfdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dfe0:	0801e039 	.word	0x0801e039
 801dfe4:	0801e04d 	.word	0x0801e04d
 801dfe8:	0801dfc9 	.word	0x0801dfc9
 801dfec:	0801dfc9 	.word	0x0801dfc9
 801dff0:	0801dfc9 	.word	0x0801dfc9
 801dff4:	0801dfc9 	.word	0x0801dfc9
 801dff8:	0801e04d 	.word	0x0801e04d
 801dffc:	0801dfc9 	.word	0x0801dfc9
 801e000:	0801dfc9 	.word	0x0801dfc9
 801e004:	0801dfc9 	.word	0x0801dfc9
 801e008:	0801dfc9 	.word	0x0801dfc9
 801e00c:	0801e14d 	.word	0x0801e14d
 801e010:	0801e077 	.word	0x0801e077
 801e014:	0801e107 	.word	0x0801e107
 801e018:	0801dfc9 	.word	0x0801dfc9
 801e01c:	0801dfc9 	.word	0x0801dfc9
 801e020:	0801e16f 	.word	0x0801e16f
 801e024:	0801dfc9 	.word	0x0801dfc9
 801e028:	0801e077 	.word	0x0801e077
 801e02c:	0801dfc9 	.word	0x0801dfc9
 801e030:	0801dfc9 	.word	0x0801dfc9
 801e034:	0801e10f 	.word	0x0801e10f
 801e038:	6833      	ldr	r3, [r6, #0]
 801e03a:	1d1a      	adds	r2, r3, #4
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	6032      	str	r2, [r6, #0]
 801e040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e048:	2301      	movs	r3, #1
 801e04a:	e09d      	b.n	801e188 <_printf_i+0x1e8>
 801e04c:	6833      	ldr	r3, [r6, #0]
 801e04e:	6820      	ldr	r0, [r4, #0]
 801e050:	1d19      	adds	r1, r3, #4
 801e052:	6031      	str	r1, [r6, #0]
 801e054:	0606      	lsls	r6, r0, #24
 801e056:	d501      	bpl.n	801e05c <_printf_i+0xbc>
 801e058:	681d      	ldr	r5, [r3, #0]
 801e05a:	e003      	b.n	801e064 <_printf_i+0xc4>
 801e05c:	0645      	lsls	r5, r0, #25
 801e05e:	d5fb      	bpl.n	801e058 <_printf_i+0xb8>
 801e060:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e064:	2d00      	cmp	r5, #0
 801e066:	da03      	bge.n	801e070 <_printf_i+0xd0>
 801e068:	232d      	movs	r3, #45	@ 0x2d
 801e06a:	426d      	negs	r5, r5
 801e06c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e070:	4859      	ldr	r0, [pc, #356]	@ (801e1d8 <_printf_i+0x238>)
 801e072:	230a      	movs	r3, #10
 801e074:	e011      	b.n	801e09a <_printf_i+0xfa>
 801e076:	6821      	ldr	r1, [r4, #0]
 801e078:	6833      	ldr	r3, [r6, #0]
 801e07a:	0608      	lsls	r0, r1, #24
 801e07c:	f853 5b04 	ldr.w	r5, [r3], #4
 801e080:	d402      	bmi.n	801e088 <_printf_i+0xe8>
 801e082:	0649      	lsls	r1, r1, #25
 801e084:	bf48      	it	mi
 801e086:	b2ad      	uxthmi	r5, r5
 801e088:	2f6f      	cmp	r7, #111	@ 0x6f
 801e08a:	4853      	ldr	r0, [pc, #332]	@ (801e1d8 <_printf_i+0x238>)
 801e08c:	6033      	str	r3, [r6, #0]
 801e08e:	bf14      	ite	ne
 801e090:	230a      	movne	r3, #10
 801e092:	2308      	moveq	r3, #8
 801e094:	2100      	movs	r1, #0
 801e096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e09a:	6866      	ldr	r6, [r4, #4]
 801e09c:	60a6      	str	r6, [r4, #8]
 801e09e:	2e00      	cmp	r6, #0
 801e0a0:	bfa2      	ittt	ge
 801e0a2:	6821      	ldrge	r1, [r4, #0]
 801e0a4:	f021 0104 	bicge.w	r1, r1, #4
 801e0a8:	6021      	strge	r1, [r4, #0]
 801e0aa:	b90d      	cbnz	r5, 801e0b0 <_printf_i+0x110>
 801e0ac:	2e00      	cmp	r6, #0
 801e0ae:	d04b      	beq.n	801e148 <_printf_i+0x1a8>
 801e0b0:	4616      	mov	r6, r2
 801e0b2:	fbb5 f1f3 	udiv	r1, r5, r3
 801e0b6:	fb03 5711 	mls	r7, r3, r1, r5
 801e0ba:	5dc7      	ldrb	r7, [r0, r7]
 801e0bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e0c0:	462f      	mov	r7, r5
 801e0c2:	42bb      	cmp	r3, r7
 801e0c4:	460d      	mov	r5, r1
 801e0c6:	d9f4      	bls.n	801e0b2 <_printf_i+0x112>
 801e0c8:	2b08      	cmp	r3, #8
 801e0ca:	d10b      	bne.n	801e0e4 <_printf_i+0x144>
 801e0cc:	6823      	ldr	r3, [r4, #0]
 801e0ce:	07df      	lsls	r7, r3, #31
 801e0d0:	d508      	bpl.n	801e0e4 <_printf_i+0x144>
 801e0d2:	6923      	ldr	r3, [r4, #16]
 801e0d4:	6861      	ldr	r1, [r4, #4]
 801e0d6:	4299      	cmp	r1, r3
 801e0d8:	bfde      	ittt	le
 801e0da:	2330      	movle	r3, #48	@ 0x30
 801e0dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e0e0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801e0e4:	1b92      	subs	r2, r2, r6
 801e0e6:	6122      	str	r2, [r4, #16]
 801e0e8:	f8cd a000 	str.w	sl, [sp]
 801e0ec:	464b      	mov	r3, r9
 801e0ee:	aa03      	add	r2, sp, #12
 801e0f0:	4621      	mov	r1, r4
 801e0f2:	4640      	mov	r0, r8
 801e0f4:	f7ff fee6 	bl	801dec4 <_printf_common>
 801e0f8:	3001      	adds	r0, #1
 801e0fa:	d14a      	bne.n	801e192 <_printf_i+0x1f2>
 801e0fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e100:	b004      	add	sp, #16
 801e102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e106:	6823      	ldr	r3, [r4, #0]
 801e108:	f043 0320 	orr.w	r3, r3, #32
 801e10c:	6023      	str	r3, [r4, #0]
 801e10e:	4833      	ldr	r0, [pc, #204]	@ (801e1dc <_printf_i+0x23c>)
 801e110:	2778      	movs	r7, #120	@ 0x78
 801e112:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e116:	6823      	ldr	r3, [r4, #0]
 801e118:	6831      	ldr	r1, [r6, #0]
 801e11a:	061f      	lsls	r7, r3, #24
 801e11c:	f851 5b04 	ldr.w	r5, [r1], #4
 801e120:	d402      	bmi.n	801e128 <_printf_i+0x188>
 801e122:	065f      	lsls	r7, r3, #25
 801e124:	bf48      	it	mi
 801e126:	b2ad      	uxthmi	r5, r5
 801e128:	6031      	str	r1, [r6, #0]
 801e12a:	07d9      	lsls	r1, r3, #31
 801e12c:	bf44      	itt	mi
 801e12e:	f043 0320 	orrmi.w	r3, r3, #32
 801e132:	6023      	strmi	r3, [r4, #0]
 801e134:	b11d      	cbz	r5, 801e13e <_printf_i+0x19e>
 801e136:	2310      	movs	r3, #16
 801e138:	e7ac      	b.n	801e094 <_printf_i+0xf4>
 801e13a:	4827      	ldr	r0, [pc, #156]	@ (801e1d8 <_printf_i+0x238>)
 801e13c:	e7e9      	b.n	801e112 <_printf_i+0x172>
 801e13e:	6823      	ldr	r3, [r4, #0]
 801e140:	f023 0320 	bic.w	r3, r3, #32
 801e144:	6023      	str	r3, [r4, #0]
 801e146:	e7f6      	b.n	801e136 <_printf_i+0x196>
 801e148:	4616      	mov	r6, r2
 801e14a:	e7bd      	b.n	801e0c8 <_printf_i+0x128>
 801e14c:	6833      	ldr	r3, [r6, #0]
 801e14e:	6825      	ldr	r5, [r4, #0]
 801e150:	6961      	ldr	r1, [r4, #20]
 801e152:	1d18      	adds	r0, r3, #4
 801e154:	6030      	str	r0, [r6, #0]
 801e156:	062e      	lsls	r6, r5, #24
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	d501      	bpl.n	801e160 <_printf_i+0x1c0>
 801e15c:	6019      	str	r1, [r3, #0]
 801e15e:	e002      	b.n	801e166 <_printf_i+0x1c6>
 801e160:	0668      	lsls	r0, r5, #25
 801e162:	d5fb      	bpl.n	801e15c <_printf_i+0x1bc>
 801e164:	8019      	strh	r1, [r3, #0]
 801e166:	2300      	movs	r3, #0
 801e168:	6123      	str	r3, [r4, #16]
 801e16a:	4616      	mov	r6, r2
 801e16c:	e7bc      	b.n	801e0e8 <_printf_i+0x148>
 801e16e:	6833      	ldr	r3, [r6, #0]
 801e170:	1d1a      	adds	r2, r3, #4
 801e172:	6032      	str	r2, [r6, #0]
 801e174:	681e      	ldr	r6, [r3, #0]
 801e176:	6862      	ldr	r2, [r4, #4]
 801e178:	2100      	movs	r1, #0
 801e17a:	4630      	mov	r0, r6
 801e17c:	f7e2 f838 	bl	80001f0 <memchr>
 801e180:	b108      	cbz	r0, 801e186 <_printf_i+0x1e6>
 801e182:	1b80      	subs	r0, r0, r6
 801e184:	6060      	str	r0, [r4, #4]
 801e186:	6863      	ldr	r3, [r4, #4]
 801e188:	6123      	str	r3, [r4, #16]
 801e18a:	2300      	movs	r3, #0
 801e18c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e190:	e7aa      	b.n	801e0e8 <_printf_i+0x148>
 801e192:	6923      	ldr	r3, [r4, #16]
 801e194:	4632      	mov	r2, r6
 801e196:	4649      	mov	r1, r9
 801e198:	4640      	mov	r0, r8
 801e19a:	47d0      	blx	sl
 801e19c:	3001      	adds	r0, #1
 801e19e:	d0ad      	beq.n	801e0fc <_printf_i+0x15c>
 801e1a0:	6823      	ldr	r3, [r4, #0]
 801e1a2:	079b      	lsls	r3, r3, #30
 801e1a4:	d413      	bmi.n	801e1ce <_printf_i+0x22e>
 801e1a6:	68e0      	ldr	r0, [r4, #12]
 801e1a8:	9b03      	ldr	r3, [sp, #12]
 801e1aa:	4298      	cmp	r0, r3
 801e1ac:	bfb8      	it	lt
 801e1ae:	4618      	movlt	r0, r3
 801e1b0:	e7a6      	b.n	801e100 <_printf_i+0x160>
 801e1b2:	2301      	movs	r3, #1
 801e1b4:	4632      	mov	r2, r6
 801e1b6:	4649      	mov	r1, r9
 801e1b8:	4640      	mov	r0, r8
 801e1ba:	47d0      	blx	sl
 801e1bc:	3001      	adds	r0, #1
 801e1be:	d09d      	beq.n	801e0fc <_printf_i+0x15c>
 801e1c0:	3501      	adds	r5, #1
 801e1c2:	68e3      	ldr	r3, [r4, #12]
 801e1c4:	9903      	ldr	r1, [sp, #12]
 801e1c6:	1a5b      	subs	r3, r3, r1
 801e1c8:	42ab      	cmp	r3, r5
 801e1ca:	dcf2      	bgt.n	801e1b2 <_printf_i+0x212>
 801e1cc:	e7eb      	b.n	801e1a6 <_printf_i+0x206>
 801e1ce:	2500      	movs	r5, #0
 801e1d0:	f104 0619 	add.w	r6, r4, #25
 801e1d4:	e7f5      	b.n	801e1c2 <_printf_i+0x222>
 801e1d6:	bf00      	nop
 801e1d8:	08024858 	.word	0x08024858
 801e1dc:	08024869 	.word	0x08024869

0801e1e0 <std>:
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	b510      	push	{r4, lr}
 801e1e4:	4604      	mov	r4, r0
 801e1e6:	e9c0 3300 	strd	r3, r3, [r0]
 801e1ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e1ee:	6083      	str	r3, [r0, #8]
 801e1f0:	8181      	strh	r1, [r0, #12]
 801e1f2:	6643      	str	r3, [r0, #100]	@ 0x64
 801e1f4:	81c2      	strh	r2, [r0, #14]
 801e1f6:	6183      	str	r3, [r0, #24]
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	2208      	movs	r2, #8
 801e1fc:	305c      	adds	r0, #92	@ 0x5c
 801e1fe:	f000 fa43 	bl	801e688 <memset>
 801e202:	4b0d      	ldr	r3, [pc, #52]	@ (801e238 <std+0x58>)
 801e204:	6263      	str	r3, [r4, #36]	@ 0x24
 801e206:	4b0d      	ldr	r3, [pc, #52]	@ (801e23c <std+0x5c>)
 801e208:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e20a:	4b0d      	ldr	r3, [pc, #52]	@ (801e240 <std+0x60>)
 801e20c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e20e:	4b0d      	ldr	r3, [pc, #52]	@ (801e244 <std+0x64>)
 801e210:	6323      	str	r3, [r4, #48]	@ 0x30
 801e212:	4b0d      	ldr	r3, [pc, #52]	@ (801e248 <std+0x68>)
 801e214:	6224      	str	r4, [r4, #32]
 801e216:	429c      	cmp	r4, r3
 801e218:	d006      	beq.n	801e228 <std+0x48>
 801e21a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e21e:	4294      	cmp	r4, r2
 801e220:	d002      	beq.n	801e228 <std+0x48>
 801e222:	33d0      	adds	r3, #208	@ 0xd0
 801e224:	429c      	cmp	r4, r3
 801e226:	d105      	bne.n	801e234 <std+0x54>
 801e228:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e230:	f000 baf6 	b.w	801e820 <__retarget_lock_init_recursive>
 801e234:	bd10      	pop	{r4, pc}
 801e236:	bf00      	nop
 801e238:	0801e485 	.word	0x0801e485
 801e23c:	0801e4a7 	.word	0x0801e4a7
 801e240:	0801e4df 	.word	0x0801e4df
 801e244:	0801e503 	.word	0x0801e503
 801e248:	2000fe1c 	.word	0x2000fe1c

0801e24c <stdio_exit_handler>:
 801e24c:	4a02      	ldr	r2, [pc, #8]	@ (801e258 <stdio_exit_handler+0xc>)
 801e24e:	4903      	ldr	r1, [pc, #12]	@ (801e25c <stdio_exit_handler+0x10>)
 801e250:	4803      	ldr	r0, [pc, #12]	@ (801e260 <stdio_exit_handler+0x14>)
 801e252:	f000 b869 	b.w	801e328 <_fwalk_sglue>
 801e256:	bf00      	nop
 801e258:	20000030 	.word	0x20000030
 801e25c:	08020459 	.word	0x08020459
 801e260:	20000040 	.word	0x20000040

0801e264 <cleanup_stdio>:
 801e264:	6841      	ldr	r1, [r0, #4]
 801e266:	4b0c      	ldr	r3, [pc, #48]	@ (801e298 <cleanup_stdio+0x34>)
 801e268:	4299      	cmp	r1, r3
 801e26a:	b510      	push	{r4, lr}
 801e26c:	4604      	mov	r4, r0
 801e26e:	d001      	beq.n	801e274 <cleanup_stdio+0x10>
 801e270:	f002 f8f2 	bl	8020458 <_fflush_r>
 801e274:	68a1      	ldr	r1, [r4, #8]
 801e276:	4b09      	ldr	r3, [pc, #36]	@ (801e29c <cleanup_stdio+0x38>)
 801e278:	4299      	cmp	r1, r3
 801e27a:	d002      	beq.n	801e282 <cleanup_stdio+0x1e>
 801e27c:	4620      	mov	r0, r4
 801e27e:	f002 f8eb 	bl	8020458 <_fflush_r>
 801e282:	68e1      	ldr	r1, [r4, #12]
 801e284:	4b06      	ldr	r3, [pc, #24]	@ (801e2a0 <cleanup_stdio+0x3c>)
 801e286:	4299      	cmp	r1, r3
 801e288:	d004      	beq.n	801e294 <cleanup_stdio+0x30>
 801e28a:	4620      	mov	r0, r4
 801e28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e290:	f002 b8e2 	b.w	8020458 <_fflush_r>
 801e294:	bd10      	pop	{r4, pc}
 801e296:	bf00      	nop
 801e298:	2000fe1c 	.word	0x2000fe1c
 801e29c:	2000fe84 	.word	0x2000fe84
 801e2a0:	2000feec 	.word	0x2000feec

0801e2a4 <global_stdio_init.part.0>:
 801e2a4:	b510      	push	{r4, lr}
 801e2a6:	4b0b      	ldr	r3, [pc, #44]	@ (801e2d4 <global_stdio_init.part.0+0x30>)
 801e2a8:	4c0b      	ldr	r4, [pc, #44]	@ (801e2d8 <global_stdio_init.part.0+0x34>)
 801e2aa:	4a0c      	ldr	r2, [pc, #48]	@ (801e2dc <global_stdio_init.part.0+0x38>)
 801e2ac:	601a      	str	r2, [r3, #0]
 801e2ae:	4620      	mov	r0, r4
 801e2b0:	2200      	movs	r2, #0
 801e2b2:	2104      	movs	r1, #4
 801e2b4:	f7ff ff94 	bl	801e1e0 <std>
 801e2b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e2bc:	2201      	movs	r2, #1
 801e2be:	2109      	movs	r1, #9
 801e2c0:	f7ff ff8e 	bl	801e1e0 <std>
 801e2c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e2c8:	2202      	movs	r2, #2
 801e2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2ce:	2112      	movs	r1, #18
 801e2d0:	f7ff bf86 	b.w	801e1e0 <std>
 801e2d4:	2000ff54 	.word	0x2000ff54
 801e2d8:	2000fe1c 	.word	0x2000fe1c
 801e2dc:	0801e24d 	.word	0x0801e24d

0801e2e0 <__sfp_lock_acquire>:
 801e2e0:	4801      	ldr	r0, [pc, #4]	@ (801e2e8 <__sfp_lock_acquire+0x8>)
 801e2e2:	f000 ba9e 	b.w	801e822 <__retarget_lock_acquire_recursive>
 801e2e6:	bf00      	nop
 801e2e8:	2000ff5d 	.word	0x2000ff5d

0801e2ec <__sfp_lock_release>:
 801e2ec:	4801      	ldr	r0, [pc, #4]	@ (801e2f4 <__sfp_lock_release+0x8>)
 801e2ee:	f000 ba99 	b.w	801e824 <__retarget_lock_release_recursive>
 801e2f2:	bf00      	nop
 801e2f4:	2000ff5d 	.word	0x2000ff5d

0801e2f8 <__sinit>:
 801e2f8:	b510      	push	{r4, lr}
 801e2fa:	4604      	mov	r4, r0
 801e2fc:	f7ff fff0 	bl	801e2e0 <__sfp_lock_acquire>
 801e300:	6a23      	ldr	r3, [r4, #32]
 801e302:	b11b      	cbz	r3, 801e30c <__sinit+0x14>
 801e304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e308:	f7ff bff0 	b.w	801e2ec <__sfp_lock_release>
 801e30c:	4b04      	ldr	r3, [pc, #16]	@ (801e320 <__sinit+0x28>)
 801e30e:	6223      	str	r3, [r4, #32]
 801e310:	4b04      	ldr	r3, [pc, #16]	@ (801e324 <__sinit+0x2c>)
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	2b00      	cmp	r3, #0
 801e316:	d1f5      	bne.n	801e304 <__sinit+0xc>
 801e318:	f7ff ffc4 	bl	801e2a4 <global_stdio_init.part.0>
 801e31c:	e7f2      	b.n	801e304 <__sinit+0xc>
 801e31e:	bf00      	nop
 801e320:	0801e265 	.word	0x0801e265
 801e324:	2000ff54 	.word	0x2000ff54

0801e328 <_fwalk_sglue>:
 801e328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e32c:	4607      	mov	r7, r0
 801e32e:	4688      	mov	r8, r1
 801e330:	4614      	mov	r4, r2
 801e332:	2600      	movs	r6, #0
 801e334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e338:	f1b9 0901 	subs.w	r9, r9, #1
 801e33c:	d505      	bpl.n	801e34a <_fwalk_sglue+0x22>
 801e33e:	6824      	ldr	r4, [r4, #0]
 801e340:	2c00      	cmp	r4, #0
 801e342:	d1f7      	bne.n	801e334 <_fwalk_sglue+0xc>
 801e344:	4630      	mov	r0, r6
 801e346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e34a:	89ab      	ldrh	r3, [r5, #12]
 801e34c:	2b01      	cmp	r3, #1
 801e34e:	d907      	bls.n	801e360 <_fwalk_sglue+0x38>
 801e350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e354:	3301      	adds	r3, #1
 801e356:	d003      	beq.n	801e360 <_fwalk_sglue+0x38>
 801e358:	4629      	mov	r1, r5
 801e35a:	4638      	mov	r0, r7
 801e35c:	47c0      	blx	r8
 801e35e:	4306      	orrs	r6, r0
 801e360:	3568      	adds	r5, #104	@ 0x68
 801e362:	e7e9      	b.n	801e338 <_fwalk_sglue+0x10>

0801e364 <iprintf>:
 801e364:	b40f      	push	{r0, r1, r2, r3}
 801e366:	b507      	push	{r0, r1, r2, lr}
 801e368:	4906      	ldr	r1, [pc, #24]	@ (801e384 <iprintf+0x20>)
 801e36a:	ab04      	add	r3, sp, #16
 801e36c:	6808      	ldr	r0, [r1, #0]
 801e36e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e372:	6881      	ldr	r1, [r0, #8]
 801e374:	9301      	str	r3, [sp, #4]
 801e376:	f001 fed3 	bl	8020120 <_vfiprintf_r>
 801e37a:	b003      	add	sp, #12
 801e37c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e380:	b004      	add	sp, #16
 801e382:	4770      	bx	lr
 801e384:	2000003c 	.word	0x2000003c

0801e388 <_puts_r>:
 801e388:	6a03      	ldr	r3, [r0, #32]
 801e38a:	b570      	push	{r4, r5, r6, lr}
 801e38c:	6884      	ldr	r4, [r0, #8]
 801e38e:	4605      	mov	r5, r0
 801e390:	460e      	mov	r6, r1
 801e392:	b90b      	cbnz	r3, 801e398 <_puts_r+0x10>
 801e394:	f7ff ffb0 	bl	801e2f8 <__sinit>
 801e398:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e39a:	07db      	lsls	r3, r3, #31
 801e39c:	d405      	bmi.n	801e3aa <_puts_r+0x22>
 801e39e:	89a3      	ldrh	r3, [r4, #12]
 801e3a0:	0598      	lsls	r0, r3, #22
 801e3a2:	d402      	bmi.n	801e3aa <_puts_r+0x22>
 801e3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e3a6:	f000 fa3c 	bl	801e822 <__retarget_lock_acquire_recursive>
 801e3aa:	89a3      	ldrh	r3, [r4, #12]
 801e3ac:	0719      	lsls	r1, r3, #28
 801e3ae:	d502      	bpl.n	801e3b6 <_puts_r+0x2e>
 801e3b0:	6923      	ldr	r3, [r4, #16]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d135      	bne.n	801e422 <_puts_r+0x9a>
 801e3b6:	4621      	mov	r1, r4
 801e3b8:	4628      	mov	r0, r5
 801e3ba:	f000 f8e5 	bl	801e588 <__swsetup_r>
 801e3be:	b380      	cbz	r0, 801e422 <_puts_r+0x9a>
 801e3c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801e3c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e3c6:	07da      	lsls	r2, r3, #31
 801e3c8:	d405      	bmi.n	801e3d6 <_puts_r+0x4e>
 801e3ca:	89a3      	ldrh	r3, [r4, #12]
 801e3cc:	059b      	lsls	r3, r3, #22
 801e3ce:	d402      	bmi.n	801e3d6 <_puts_r+0x4e>
 801e3d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e3d2:	f000 fa27 	bl	801e824 <__retarget_lock_release_recursive>
 801e3d6:	4628      	mov	r0, r5
 801e3d8:	bd70      	pop	{r4, r5, r6, pc}
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	da04      	bge.n	801e3e8 <_puts_r+0x60>
 801e3de:	69a2      	ldr	r2, [r4, #24]
 801e3e0:	429a      	cmp	r2, r3
 801e3e2:	dc17      	bgt.n	801e414 <_puts_r+0x8c>
 801e3e4:	290a      	cmp	r1, #10
 801e3e6:	d015      	beq.n	801e414 <_puts_r+0x8c>
 801e3e8:	6823      	ldr	r3, [r4, #0]
 801e3ea:	1c5a      	adds	r2, r3, #1
 801e3ec:	6022      	str	r2, [r4, #0]
 801e3ee:	7019      	strb	r1, [r3, #0]
 801e3f0:	68a3      	ldr	r3, [r4, #8]
 801e3f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e3f6:	3b01      	subs	r3, #1
 801e3f8:	60a3      	str	r3, [r4, #8]
 801e3fa:	2900      	cmp	r1, #0
 801e3fc:	d1ed      	bne.n	801e3da <_puts_r+0x52>
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	da11      	bge.n	801e426 <_puts_r+0x9e>
 801e402:	4622      	mov	r2, r4
 801e404:	210a      	movs	r1, #10
 801e406:	4628      	mov	r0, r5
 801e408:	f000 f87f 	bl	801e50a <__swbuf_r>
 801e40c:	3001      	adds	r0, #1
 801e40e:	d0d7      	beq.n	801e3c0 <_puts_r+0x38>
 801e410:	250a      	movs	r5, #10
 801e412:	e7d7      	b.n	801e3c4 <_puts_r+0x3c>
 801e414:	4622      	mov	r2, r4
 801e416:	4628      	mov	r0, r5
 801e418:	f000 f877 	bl	801e50a <__swbuf_r>
 801e41c:	3001      	adds	r0, #1
 801e41e:	d1e7      	bne.n	801e3f0 <_puts_r+0x68>
 801e420:	e7ce      	b.n	801e3c0 <_puts_r+0x38>
 801e422:	3e01      	subs	r6, #1
 801e424:	e7e4      	b.n	801e3f0 <_puts_r+0x68>
 801e426:	6823      	ldr	r3, [r4, #0]
 801e428:	1c5a      	adds	r2, r3, #1
 801e42a:	6022      	str	r2, [r4, #0]
 801e42c:	220a      	movs	r2, #10
 801e42e:	701a      	strb	r2, [r3, #0]
 801e430:	e7ee      	b.n	801e410 <_puts_r+0x88>
	...

0801e434 <puts>:
 801e434:	4b02      	ldr	r3, [pc, #8]	@ (801e440 <puts+0xc>)
 801e436:	4601      	mov	r1, r0
 801e438:	6818      	ldr	r0, [r3, #0]
 801e43a:	f7ff bfa5 	b.w	801e388 <_puts_r>
 801e43e:	bf00      	nop
 801e440:	2000003c 	.word	0x2000003c

0801e444 <siprintf>:
 801e444:	b40e      	push	{r1, r2, r3}
 801e446:	b500      	push	{lr}
 801e448:	b09c      	sub	sp, #112	@ 0x70
 801e44a:	ab1d      	add	r3, sp, #116	@ 0x74
 801e44c:	9002      	str	r0, [sp, #8]
 801e44e:	9006      	str	r0, [sp, #24]
 801e450:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e454:	4809      	ldr	r0, [pc, #36]	@ (801e47c <siprintf+0x38>)
 801e456:	9107      	str	r1, [sp, #28]
 801e458:	9104      	str	r1, [sp, #16]
 801e45a:	4909      	ldr	r1, [pc, #36]	@ (801e480 <siprintf+0x3c>)
 801e45c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e460:	9105      	str	r1, [sp, #20]
 801e462:	6800      	ldr	r0, [r0, #0]
 801e464:	9301      	str	r3, [sp, #4]
 801e466:	a902      	add	r1, sp, #8
 801e468:	f001 fd34 	bl	801fed4 <_svfiprintf_r>
 801e46c:	9b02      	ldr	r3, [sp, #8]
 801e46e:	2200      	movs	r2, #0
 801e470:	701a      	strb	r2, [r3, #0]
 801e472:	b01c      	add	sp, #112	@ 0x70
 801e474:	f85d eb04 	ldr.w	lr, [sp], #4
 801e478:	b003      	add	sp, #12
 801e47a:	4770      	bx	lr
 801e47c:	2000003c 	.word	0x2000003c
 801e480:	ffff0208 	.word	0xffff0208

0801e484 <__sread>:
 801e484:	b510      	push	{r4, lr}
 801e486:	460c      	mov	r4, r1
 801e488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e48c:	f000 f980 	bl	801e790 <_read_r>
 801e490:	2800      	cmp	r0, #0
 801e492:	bfab      	itete	ge
 801e494:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e496:	89a3      	ldrhlt	r3, [r4, #12]
 801e498:	181b      	addge	r3, r3, r0
 801e49a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e49e:	bfac      	ite	ge
 801e4a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e4a2:	81a3      	strhlt	r3, [r4, #12]
 801e4a4:	bd10      	pop	{r4, pc}

0801e4a6 <__swrite>:
 801e4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4aa:	461f      	mov	r7, r3
 801e4ac:	898b      	ldrh	r3, [r1, #12]
 801e4ae:	05db      	lsls	r3, r3, #23
 801e4b0:	4605      	mov	r5, r0
 801e4b2:	460c      	mov	r4, r1
 801e4b4:	4616      	mov	r6, r2
 801e4b6:	d505      	bpl.n	801e4c4 <__swrite+0x1e>
 801e4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4bc:	2302      	movs	r3, #2
 801e4be:	2200      	movs	r2, #0
 801e4c0:	f000 f954 	bl	801e76c <_lseek_r>
 801e4c4:	89a3      	ldrh	r3, [r4, #12]
 801e4c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e4ce:	81a3      	strh	r3, [r4, #12]
 801e4d0:	4632      	mov	r2, r6
 801e4d2:	463b      	mov	r3, r7
 801e4d4:	4628      	mov	r0, r5
 801e4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e4da:	f000 b96b 	b.w	801e7b4 <_write_r>

0801e4de <__sseek>:
 801e4de:	b510      	push	{r4, lr}
 801e4e0:	460c      	mov	r4, r1
 801e4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4e6:	f000 f941 	bl	801e76c <_lseek_r>
 801e4ea:	1c43      	adds	r3, r0, #1
 801e4ec:	89a3      	ldrh	r3, [r4, #12]
 801e4ee:	bf15      	itete	ne
 801e4f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e4f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e4f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e4fa:	81a3      	strheq	r3, [r4, #12]
 801e4fc:	bf18      	it	ne
 801e4fe:	81a3      	strhne	r3, [r4, #12]
 801e500:	bd10      	pop	{r4, pc}

0801e502 <__sclose>:
 801e502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e506:	f000 b8cb 	b.w	801e6a0 <_close_r>

0801e50a <__swbuf_r>:
 801e50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e50c:	460e      	mov	r6, r1
 801e50e:	4614      	mov	r4, r2
 801e510:	4605      	mov	r5, r0
 801e512:	b118      	cbz	r0, 801e51c <__swbuf_r+0x12>
 801e514:	6a03      	ldr	r3, [r0, #32]
 801e516:	b90b      	cbnz	r3, 801e51c <__swbuf_r+0x12>
 801e518:	f7ff feee 	bl	801e2f8 <__sinit>
 801e51c:	69a3      	ldr	r3, [r4, #24]
 801e51e:	60a3      	str	r3, [r4, #8]
 801e520:	89a3      	ldrh	r3, [r4, #12]
 801e522:	071a      	lsls	r2, r3, #28
 801e524:	d501      	bpl.n	801e52a <__swbuf_r+0x20>
 801e526:	6923      	ldr	r3, [r4, #16]
 801e528:	b943      	cbnz	r3, 801e53c <__swbuf_r+0x32>
 801e52a:	4621      	mov	r1, r4
 801e52c:	4628      	mov	r0, r5
 801e52e:	f000 f82b 	bl	801e588 <__swsetup_r>
 801e532:	b118      	cbz	r0, 801e53c <__swbuf_r+0x32>
 801e534:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801e538:	4638      	mov	r0, r7
 801e53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e53c:	6823      	ldr	r3, [r4, #0]
 801e53e:	6922      	ldr	r2, [r4, #16]
 801e540:	1a98      	subs	r0, r3, r2
 801e542:	6963      	ldr	r3, [r4, #20]
 801e544:	b2f6      	uxtb	r6, r6
 801e546:	4283      	cmp	r3, r0
 801e548:	4637      	mov	r7, r6
 801e54a:	dc05      	bgt.n	801e558 <__swbuf_r+0x4e>
 801e54c:	4621      	mov	r1, r4
 801e54e:	4628      	mov	r0, r5
 801e550:	f001 ff82 	bl	8020458 <_fflush_r>
 801e554:	2800      	cmp	r0, #0
 801e556:	d1ed      	bne.n	801e534 <__swbuf_r+0x2a>
 801e558:	68a3      	ldr	r3, [r4, #8]
 801e55a:	3b01      	subs	r3, #1
 801e55c:	60a3      	str	r3, [r4, #8]
 801e55e:	6823      	ldr	r3, [r4, #0]
 801e560:	1c5a      	adds	r2, r3, #1
 801e562:	6022      	str	r2, [r4, #0]
 801e564:	701e      	strb	r6, [r3, #0]
 801e566:	6962      	ldr	r2, [r4, #20]
 801e568:	1c43      	adds	r3, r0, #1
 801e56a:	429a      	cmp	r2, r3
 801e56c:	d004      	beq.n	801e578 <__swbuf_r+0x6e>
 801e56e:	89a3      	ldrh	r3, [r4, #12]
 801e570:	07db      	lsls	r3, r3, #31
 801e572:	d5e1      	bpl.n	801e538 <__swbuf_r+0x2e>
 801e574:	2e0a      	cmp	r6, #10
 801e576:	d1df      	bne.n	801e538 <__swbuf_r+0x2e>
 801e578:	4621      	mov	r1, r4
 801e57a:	4628      	mov	r0, r5
 801e57c:	f001 ff6c 	bl	8020458 <_fflush_r>
 801e580:	2800      	cmp	r0, #0
 801e582:	d0d9      	beq.n	801e538 <__swbuf_r+0x2e>
 801e584:	e7d6      	b.n	801e534 <__swbuf_r+0x2a>
	...

0801e588 <__swsetup_r>:
 801e588:	b538      	push	{r3, r4, r5, lr}
 801e58a:	4b29      	ldr	r3, [pc, #164]	@ (801e630 <__swsetup_r+0xa8>)
 801e58c:	4605      	mov	r5, r0
 801e58e:	6818      	ldr	r0, [r3, #0]
 801e590:	460c      	mov	r4, r1
 801e592:	b118      	cbz	r0, 801e59c <__swsetup_r+0x14>
 801e594:	6a03      	ldr	r3, [r0, #32]
 801e596:	b90b      	cbnz	r3, 801e59c <__swsetup_r+0x14>
 801e598:	f7ff feae 	bl	801e2f8 <__sinit>
 801e59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5a0:	0719      	lsls	r1, r3, #28
 801e5a2:	d422      	bmi.n	801e5ea <__swsetup_r+0x62>
 801e5a4:	06da      	lsls	r2, r3, #27
 801e5a6:	d407      	bmi.n	801e5b8 <__swsetup_r+0x30>
 801e5a8:	2209      	movs	r2, #9
 801e5aa:	602a      	str	r2, [r5, #0]
 801e5ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e5b0:	81a3      	strh	r3, [r4, #12]
 801e5b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e5b6:	e033      	b.n	801e620 <__swsetup_r+0x98>
 801e5b8:	0758      	lsls	r0, r3, #29
 801e5ba:	d512      	bpl.n	801e5e2 <__swsetup_r+0x5a>
 801e5bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e5be:	b141      	cbz	r1, 801e5d2 <__swsetup_r+0x4a>
 801e5c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e5c4:	4299      	cmp	r1, r3
 801e5c6:	d002      	beq.n	801e5ce <__swsetup_r+0x46>
 801e5c8:	4628      	mov	r0, r5
 801e5ca:	f000 ffa5 	bl	801f518 <_free_r>
 801e5ce:	2300      	movs	r3, #0
 801e5d0:	6363      	str	r3, [r4, #52]	@ 0x34
 801e5d2:	89a3      	ldrh	r3, [r4, #12]
 801e5d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e5d8:	81a3      	strh	r3, [r4, #12]
 801e5da:	2300      	movs	r3, #0
 801e5dc:	6063      	str	r3, [r4, #4]
 801e5de:	6923      	ldr	r3, [r4, #16]
 801e5e0:	6023      	str	r3, [r4, #0]
 801e5e2:	89a3      	ldrh	r3, [r4, #12]
 801e5e4:	f043 0308 	orr.w	r3, r3, #8
 801e5e8:	81a3      	strh	r3, [r4, #12]
 801e5ea:	6923      	ldr	r3, [r4, #16]
 801e5ec:	b94b      	cbnz	r3, 801e602 <__swsetup_r+0x7a>
 801e5ee:	89a3      	ldrh	r3, [r4, #12]
 801e5f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e5f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e5f8:	d003      	beq.n	801e602 <__swsetup_r+0x7a>
 801e5fa:	4621      	mov	r1, r4
 801e5fc:	4628      	mov	r0, r5
 801e5fe:	f001 ff8b 	bl	8020518 <__smakebuf_r>
 801e602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e606:	f013 0201 	ands.w	r2, r3, #1
 801e60a:	d00a      	beq.n	801e622 <__swsetup_r+0x9a>
 801e60c:	2200      	movs	r2, #0
 801e60e:	60a2      	str	r2, [r4, #8]
 801e610:	6962      	ldr	r2, [r4, #20]
 801e612:	4252      	negs	r2, r2
 801e614:	61a2      	str	r2, [r4, #24]
 801e616:	6922      	ldr	r2, [r4, #16]
 801e618:	b942      	cbnz	r2, 801e62c <__swsetup_r+0xa4>
 801e61a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e61e:	d1c5      	bne.n	801e5ac <__swsetup_r+0x24>
 801e620:	bd38      	pop	{r3, r4, r5, pc}
 801e622:	0799      	lsls	r1, r3, #30
 801e624:	bf58      	it	pl
 801e626:	6962      	ldrpl	r2, [r4, #20]
 801e628:	60a2      	str	r2, [r4, #8]
 801e62a:	e7f4      	b.n	801e616 <__swsetup_r+0x8e>
 801e62c:	2000      	movs	r0, #0
 801e62e:	e7f7      	b.n	801e620 <__swsetup_r+0x98>
 801e630:	2000003c 	.word	0x2000003c

0801e634 <memcmp>:
 801e634:	b510      	push	{r4, lr}
 801e636:	3901      	subs	r1, #1
 801e638:	4402      	add	r2, r0
 801e63a:	4290      	cmp	r0, r2
 801e63c:	d101      	bne.n	801e642 <memcmp+0xe>
 801e63e:	2000      	movs	r0, #0
 801e640:	e005      	b.n	801e64e <memcmp+0x1a>
 801e642:	7803      	ldrb	r3, [r0, #0]
 801e644:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e648:	42a3      	cmp	r3, r4
 801e64a:	d001      	beq.n	801e650 <memcmp+0x1c>
 801e64c:	1b18      	subs	r0, r3, r4
 801e64e:	bd10      	pop	{r4, pc}
 801e650:	3001      	adds	r0, #1
 801e652:	e7f2      	b.n	801e63a <memcmp+0x6>

0801e654 <memmove>:
 801e654:	4288      	cmp	r0, r1
 801e656:	b510      	push	{r4, lr}
 801e658:	eb01 0402 	add.w	r4, r1, r2
 801e65c:	d902      	bls.n	801e664 <memmove+0x10>
 801e65e:	4284      	cmp	r4, r0
 801e660:	4623      	mov	r3, r4
 801e662:	d807      	bhi.n	801e674 <memmove+0x20>
 801e664:	1e43      	subs	r3, r0, #1
 801e666:	42a1      	cmp	r1, r4
 801e668:	d008      	beq.n	801e67c <memmove+0x28>
 801e66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e66e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e672:	e7f8      	b.n	801e666 <memmove+0x12>
 801e674:	4402      	add	r2, r0
 801e676:	4601      	mov	r1, r0
 801e678:	428a      	cmp	r2, r1
 801e67a:	d100      	bne.n	801e67e <memmove+0x2a>
 801e67c:	bd10      	pop	{r4, pc}
 801e67e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e686:	e7f7      	b.n	801e678 <memmove+0x24>

0801e688 <memset>:
 801e688:	4402      	add	r2, r0
 801e68a:	4603      	mov	r3, r0
 801e68c:	4293      	cmp	r3, r2
 801e68e:	d100      	bne.n	801e692 <memset+0xa>
 801e690:	4770      	bx	lr
 801e692:	f803 1b01 	strb.w	r1, [r3], #1
 801e696:	e7f9      	b.n	801e68c <memset+0x4>

0801e698 <_localeconv_r>:
 801e698:	4800      	ldr	r0, [pc, #0]	@ (801e69c <_localeconv_r+0x4>)
 801e69a:	4770      	bx	lr
 801e69c:	2000017c 	.word	0x2000017c

0801e6a0 <_close_r>:
 801e6a0:	b538      	push	{r3, r4, r5, lr}
 801e6a2:	4d06      	ldr	r5, [pc, #24]	@ (801e6bc <_close_r+0x1c>)
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	4604      	mov	r4, r0
 801e6a8:	4608      	mov	r0, r1
 801e6aa:	602b      	str	r3, [r5, #0]
 801e6ac:	f7e4 f8f6 	bl	800289c <_close>
 801e6b0:	1c43      	adds	r3, r0, #1
 801e6b2:	d102      	bne.n	801e6ba <_close_r+0x1a>
 801e6b4:	682b      	ldr	r3, [r5, #0]
 801e6b6:	b103      	cbz	r3, 801e6ba <_close_r+0x1a>
 801e6b8:	6023      	str	r3, [r4, #0]
 801e6ba:	bd38      	pop	{r3, r4, r5, pc}
 801e6bc:	2000ff58 	.word	0x2000ff58

0801e6c0 <_reclaim_reent>:
 801e6c0:	4b29      	ldr	r3, [pc, #164]	@ (801e768 <_reclaim_reent+0xa8>)
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	4283      	cmp	r3, r0
 801e6c6:	b570      	push	{r4, r5, r6, lr}
 801e6c8:	4604      	mov	r4, r0
 801e6ca:	d04b      	beq.n	801e764 <_reclaim_reent+0xa4>
 801e6cc:	69c3      	ldr	r3, [r0, #28]
 801e6ce:	b1ab      	cbz	r3, 801e6fc <_reclaim_reent+0x3c>
 801e6d0:	68db      	ldr	r3, [r3, #12]
 801e6d2:	b16b      	cbz	r3, 801e6f0 <_reclaim_reent+0x30>
 801e6d4:	2500      	movs	r5, #0
 801e6d6:	69e3      	ldr	r3, [r4, #28]
 801e6d8:	68db      	ldr	r3, [r3, #12]
 801e6da:	5959      	ldr	r1, [r3, r5]
 801e6dc:	2900      	cmp	r1, #0
 801e6de:	d13b      	bne.n	801e758 <_reclaim_reent+0x98>
 801e6e0:	3504      	adds	r5, #4
 801e6e2:	2d80      	cmp	r5, #128	@ 0x80
 801e6e4:	d1f7      	bne.n	801e6d6 <_reclaim_reent+0x16>
 801e6e6:	69e3      	ldr	r3, [r4, #28]
 801e6e8:	4620      	mov	r0, r4
 801e6ea:	68d9      	ldr	r1, [r3, #12]
 801e6ec:	f000 ff14 	bl	801f518 <_free_r>
 801e6f0:	69e3      	ldr	r3, [r4, #28]
 801e6f2:	6819      	ldr	r1, [r3, #0]
 801e6f4:	b111      	cbz	r1, 801e6fc <_reclaim_reent+0x3c>
 801e6f6:	4620      	mov	r0, r4
 801e6f8:	f000 ff0e 	bl	801f518 <_free_r>
 801e6fc:	6961      	ldr	r1, [r4, #20]
 801e6fe:	b111      	cbz	r1, 801e706 <_reclaim_reent+0x46>
 801e700:	4620      	mov	r0, r4
 801e702:	f000 ff09 	bl	801f518 <_free_r>
 801e706:	69e1      	ldr	r1, [r4, #28]
 801e708:	b111      	cbz	r1, 801e710 <_reclaim_reent+0x50>
 801e70a:	4620      	mov	r0, r4
 801e70c:	f000 ff04 	bl	801f518 <_free_r>
 801e710:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e712:	b111      	cbz	r1, 801e71a <_reclaim_reent+0x5a>
 801e714:	4620      	mov	r0, r4
 801e716:	f000 feff 	bl	801f518 <_free_r>
 801e71a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e71c:	b111      	cbz	r1, 801e724 <_reclaim_reent+0x64>
 801e71e:	4620      	mov	r0, r4
 801e720:	f000 fefa 	bl	801f518 <_free_r>
 801e724:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e726:	b111      	cbz	r1, 801e72e <_reclaim_reent+0x6e>
 801e728:	4620      	mov	r0, r4
 801e72a:	f000 fef5 	bl	801f518 <_free_r>
 801e72e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e730:	b111      	cbz	r1, 801e738 <_reclaim_reent+0x78>
 801e732:	4620      	mov	r0, r4
 801e734:	f000 fef0 	bl	801f518 <_free_r>
 801e738:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e73a:	b111      	cbz	r1, 801e742 <_reclaim_reent+0x82>
 801e73c:	4620      	mov	r0, r4
 801e73e:	f000 feeb 	bl	801f518 <_free_r>
 801e742:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e744:	b111      	cbz	r1, 801e74c <_reclaim_reent+0x8c>
 801e746:	4620      	mov	r0, r4
 801e748:	f000 fee6 	bl	801f518 <_free_r>
 801e74c:	6a23      	ldr	r3, [r4, #32]
 801e74e:	b14b      	cbz	r3, 801e764 <_reclaim_reent+0xa4>
 801e750:	4620      	mov	r0, r4
 801e752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e756:	4718      	bx	r3
 801e758:	680e      	ldr	r6, [r1, #0]
 801e75a:	4620      	mov	r0, r4
 801e75c:	f000 fedc 	bl	801f518 <_free_r>
 801e760:	4631      	mov	r1, r6
 801e762:	e7bb      	b.n	801e6dc <_reclaim_reent+0x1c>
 801e764:	bd70      	pop	{r4, r5, r6, pc}
 801e766:	bf00      	nop
 801e768:	2000003c 	.word	0x2000003c

0801e76c <_lseek_r>:
 801e76c:	b538      	push	{r3, r4, r5, lr}
 801e76e:	4d07      	ldr	r5, [pc, #28]	@ (801e78c <_lseek_r+0x20>)
 801e770:	4604      	mov	r4, r0
 801e772:	4608      	mov	r0, r1
 801e774:	4611      	mov	r1, r2
 801e776:	2200      	movs	r2, #0
 801e778:	602a      	str	r2, [r5, #0]
 801e77a:	461a      	mov	r2, r3
 801e77c:	f7e4 f8b5 	bl	80028ea <_lseek>
 801e780:	1c43      	adds	r3, r0, #1
 801e782:	d102      	bne.n	801e78a <_lseek_r+0x1e>
 801e784:	682b      	ldr	r3, [r5, #0]
 801e786:	b103      	cbz	r3, 801e78a <_lseek_r+0x1e>
 801e788:	6023      	str	r3, [r4, #0]
 801e78a:	bd38      	pop	{r3, r4, r5, pc}
 801e78c:	2000ff58 	.word	0x2000ff58

0801e790 <_read_r>:
 801e790:	b538      	push	{r3, r4, r5, lr}
 801e792:	4d07      	ldr	r5, [pc, #28]	@ (801e7b0 <_read_r+0x20>)
 801e794:	4604      	mov	r4, r0
 801e796:	4608      	mov	r0, r1
 801e798:	4611      	mov	r1, r2
 801e79a:	2200      	movs	r2, #0
 801e79c:	602a      	str	r2, [r5, #0]
 801e79e:	461a      	mov	r2, r3
 801e7a0:	f7e4 f843 	bl	800282a <_read>
 801e7a4:	1c43      	adds	r3, r0, #1
 801e7a6:	d102      	bne.n	801e7ae <_read_r+0x1e>
 801e7a8:	682b      	ldr	r3, [r5, #0]
 801e7aa:	b103      	cbz	r3, 801e7ae <_read_r+0x1e>
 801e7ac:	6023      	str	r3, [r4, #0]
 801e7ae:	bd38      	pop	{r3, r4, r5, pc}
 801e7b0:	2000ff58 	.word	0x2000ff58

0801e7b4 <_write_r>:
 801e7b4:	b538      	push	{r3, r4, r5, lr}
 801e7b6:	4d07      	ldr	r5, [pc, #28]	@ (801e7d4 <_write_r+0x20>)
 801e7b8:	4604      	mov	r4, r0
 801e7ba:	4608      	mov	r0, r1
 801e7bc:	4611      	mov	r1, r2
 801e7be:	2200      	movs	r2, #0
 801e7c0:	602a      	str	r2, [r5, #0]
 801e7c2:	461a      	mov	r2, r3
 801e7c4:	f7e4 f84e 	bl	8002864 <_write>
 801e7c8:	1c43      	adds	r3, r0, #1
 801e7ca:	d102      	bne.n	801e7d2 <_write_r+0x1e>
 801e7cc:	682b      	ldr	r3, [r5, #0]
 801e7ce:	b103      	cbz	r3, 801e7d2 <_write_r+0x1e>
 801e7d0:	6023      	str	r3, [r4, #0]
 801e7d2:	bd38      	pop	{r3, r4, r5, pc}
 801e7d4:	2000ff58 	.word	0x2000ff58

0801e7d8 <__libc_init_array>:
 801e7d8:	b570      	push	{r4, r5, r6, lr}
 801e7da:	4d0d      	ldr	r5, [pc, #52]	@ (801e810 <__libc_init_array+0x38>)
 801e7dc:	4c0d      	ldr	r4, [pc, #52]	@ (801e814 <__libc_init_array+0x3c>)
 801e7de:	1b64      	subs	r4, r4, r5
 801e7e0:	10a4      	asrs	r4, r4, #2
 801e7e2:	2600      	movs	r6, #0
 801e7e4:	42a6      	cmp	r6, r4
 801e7e6:	d109      	bne.n	801e7fc <__libc_init_array+0x24>
 801e7e8:	4d0b      	ldr	r5, [pc, #44]	@ (801e818 <__libc_init_array+0x40>)
 801e7ea:	4c0c      	ldr	r4, [pc, #48]	@ (801e81c <__libc_init_array+0x44>)
 801e7ec:	f001 ffb6 	bl	802075c <_init>
 801e7f0:	1b64      	subs	r4, r4, r5
 801e7f2:	10a4      	asrs	r4, r4, #2
 801e7f4:	2600      	movs	r6, #0
 801e7f6:	42a6      	cmp	r6, r4
 801e7f8:	d105      	bne.n	801e806 <__libc_init_array+0x2e>
 801e7fa:	bd70      	pop	{r4, r5, r6, pc}
 801e7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801e800:	4798      	blx	r3
 801e802:	3601      	adds	r6, #1
 801e804:	e7ee      	b.n	801e7e4 <__libc_init_array+0xc>
 801e806:	f855 3b04 	ldr.w	r3, [r5], #4
 801e80a:	4798      	blx	r3
 801e80c:	3601      	adds	r6, #1
 801e80e:	e7f2      	b.n	801e7f6 <__libc_init_array+0x1e>
 801e810:	08024aac 	.word	0x08024aac
 801e814:	08024aac 	.word	0x08024aac
 801e818:	08024aac 	.word	0x08024aac
 801e81c:	08024ab0 	.word	0x08024ab0

0801e820 <__retarget_lock_init_recursive>:
 801e820:	4770      	bx	lr

0801e822 <__retarget_lock_acquire_recursive>:
 801e822:	4770      	bx	lr

0801e824 <__retarget_lock_release_recursive>:
 801e824:	4770      	bx	lr

0801e826 <memcpy>:
 801e826:	440a      	add	r2, r1
 801e828:	4291      	cmp	r1, r2
 801e82a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801e82e:	d100      	bne.n	801e832 <memcpy+0xc>
 801e830:	4770      	bx	lr
 801e832:	b510      	push	{r4, lr}
 801e834:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e838:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e83c:	4291      	cmp	r1, r2
 801e83e:	d1f9      	bne.n	801e834 <memcpy+0xe>
 801e840:	bd10      	pop	{r4, pc}
	...

0801e844 <__assert_func>:
 801e844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e846:	4614      	mov	r4, r2
 801e848:	461a      	mov	r2, r3
 801e84a:	4b09      	ldr	r3, [pc, #36]	@ (801e870 <__assert_func+0x2c>)
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	4605      	mov	r5, r0
 801e850:	68d8      	ldr	r0, [r3, #12]
 801e852:	b954      	cbnz	r4, 801e86a <__assert_func+0x26>
 801e854:	4b07      	ldr	r3, [pc, #28]	@ (801e874 <__assert_func+0x30>)
 801e856:	461c      	mov	r4, r3
 801e858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e85c:	9100      	str	r1, [sp, #0]
 801e85e:	462b      	mov	r3, r5
 801e860:	4905      	ldr	r1, [pc, #20]	@ (801e878 <__assert_func+0x34>)
 801e862:	f001 fe21 	bl	80204a8 <fiprintf>
 801e866:	f001 fec5 	bl	80205f4 <abort>
 801e86a:	4b04      	ldr	r3, [pc, #16]	@ (801e87c <__assert_func+0x38>)
 801e86c:	e7f4      	b.n	801e858 <__assert_func+0x14>
 801e86e:	bf00      	nop
 801e870:	2000003c 	.word	0x2000003c
 801e874:	080248b5 	.word	0x080248b5
 801e878:	08024887 	.word	0x08024887
 801e87c:	0802487a 	.word	0x0802487a

0801e880 <quorem>:
 801e880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e884:	6903      	ldr	r3, [r0, #16]
 801e886:	690c      	ldr	r4, [r1, #16]
 801e888:	42a3      	cmp	r3, r4
 801e88a:	4607      	mov	r7, r0
 801e88c:	db7e      	blt.n	801e98c <quorem+0x10c>
 801e88e:	3c01      	subs	r4, #1
 801e890:	f101 0814 	add.w	r8, r1, #20
 801e894:	00a3      	lsls	r3, r4, #2
 801e896:	f100 0514 	add.w	r5, r0, #20
 801e89a:	9300      	str	r3, [sp, #0]
 801e89c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e8a0:	9301      	str	r3, [sp, #4]
 801e8a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e8a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e8aa:	3301      	adds	r3, #1
 801e8ac:	429a      	cmp	r2, r3
 801e8ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e8b2:	fbb2 f6f3 	udiv	r6, r2, r3
 801e8b6:	d32e      	bcc.n	801e916 <quorem+0x96>
 801e8b8:	f04f 0a00 	mov.w	sl, #0
 801e8bc:	46c4      	mov	ip, r8
 801e8be:	46ae      	mov	lr, r5
 801e8c0:	46d3      	mov	fp, sl
 801e8c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e8c6:	b298      	uxth	r0, r3
 801e8c8:	fb06 a000 	mla	r0, r6, r0, sl
 801e8cc:	0c02      	lsrs	r2, r0, #16
 801e8ce:	0c1b      	lsrs	r3, r3, #16
 801e8d0:	fb06 2303 	mla	r3, r6, r3, r2
 801e8d4:	f8de 2000 	ldr.w	r2, [lr]
 801e8d8:	b280      	uxth	r0, r0
 801e8da:	b292      	uxth	r2, r2
 801e8dc:	1a12      	subs	r2, r2, r0
 801e8de:	445a      	add	r2, fp
 801e8e0:	f8de 0000 	ldr.w	r0, [lr]
 801e8e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e8e8:	b29b      	uxth	r3, r3
 801e8ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e8ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e8f2:	b292      	uxth	r2, r2
 801e8f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e8f8:	45e1      	cmp	r9, ip
 801e8fa:	f84e 2b04 	str.w	r2, [lr], #4
 801e8fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e902:	d2de      	bcs.n	801e8c2 <quorem+0x42>
 801e904:	9b00      	ldr	r3, [sp, #0]
 801e906:	58eb      	ldr	r3, [r5, r3]
 801e908:	b92b      	cbnz	r3, 801e916 <quorem+0x96>
 801e90a:	9b01      	ldr	r3, [sp, #4]
 801e90c:	3b04      	subs	r3, #4
 801e90e:	429d      	cmp	r5, r3
 801e910:	461a      	mov	r2, r3
 801e912:	d32f      	bcc.n	801e974 <quorem+0xf4>
 801e914:	613c      	str	r4, [r7, #16]
 801e916:	4638      	mov	r0, r7
 801e918:	f001 f978 	bl	801fc0c <__mcmp>
 801e91c:	2800      	cmp	r0, #0
 801e91e:	db25      	blt.n	801e96c <quorem+0xec>
 801e920:	4629      	mov	r1, r5
 801e922:	2000      	movs	r0, #0
 801e924:	f858 2b04 	ldr.w	r2, [r8], #4
 801e928:	f8d1 c000 	ldr.w	ip, [r1]
 801e92c:	fa1f fe82 	uxth.w	lr, r2
 801e930:	fa1f f38c 	uxth.w	r3, ip
 801e934:	eba3 030e 	sub.w	r3, r3, lr
 801e938:	4403      	add	r3, r0
 801e93a:	0c12      	lsrs	r2, r2, #16
 801e93c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e940:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e944:	b29b      	uxth	r3, r3
 801e946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e94a:	45c1      	cmp	r9, r8
 801e94c:	f841 3b04 	str.w	r3, [r1], #4
 801e950:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e954:	d2e6      	bcs.n	801e924 <quorem+0xa4>
 801e956:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e95a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e95e:	b922      	cbnz	r2, 801e96a <quorem+0xea>
 801e960:	3b04      	subs	r3, #4
 801e962:	429d      	cmp	r5, r3
 801e964:	461a      	mov	r2, r3
 801e966:	d30b      	bcc.n	801e980 <quorem+0x100>
 801e968:	613c      	str	r4, [r7, #16]
 801e96a:	3601      	adds	r6, #1
 801e96c:	4630      	mov	r0, r6
 801e96e:	b003      	add	sp, #12
 801e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e974:	6812      	ldr	r2, [r2, #0]
 801e976:	3b04      	subs	r3, #4
 801e978:	2a00      	cmp	r2, #0
 801e97a:	d1cb      	bne.n	801e914 <quorem+0x94>
 801e97c:	3c01      	subs	r4, #1
 801e97e:	e7c6      	b.n	801e90e <quorem+0x8e>
 801e980:	6812      	ldr	r2, [r2, #0]
 801e982:	3b04      	subs	r3, #4
 801e984:	2a00      	cmp	r2, #0
 801e986:	d1ef      	bne.n	801e968 <quorem+0xe8>
 801e988:	3c01      	subs	r4, #1
 801e98a:	e7ea      	b.n	801e962 <quorem+0xe2>
 801e98c:	2000      	movs	r0, #0
 801e98e:	e7ee      	b.n	801e96e <quorem+0xee>

0801e990 <_dtoa_r>:
 801e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e994:	69c7      	ldr	r7, [r0, #28]
 801e996:	b099      	sub	sp, #100	@ 0x64
 801e998:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e99c:	ec55 4b10 	vmov	r4, r5, d0
 801e9a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e9a2:	9109      	str	r1, [sp, #36]	@ 0x24
 801e9a4:	4683      	mov	fp, r0
 801e9a6:	920e      	str	r2, [sp, #56]	@ 0x38
 801e9a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e9aa:	b97f      	cbnz	r7, 801e9cc <_dtoa_r+0x3c>
 801e9ac:	2010      	movs	r0, #16
 801e9ae:	f000 fdfd 	bl	801f5ac <malloc>
 801e9b2:	4602      	mov	r2, r0
 801e9b4:	f8cb 001c 	str.w	r0, [fp, #28]
 801e9b8:	b920      	cbnz	r0, 801e9c4 <_dtoa_r+0x34>
 801e9ba:	4ba7      	ldr	r3, [pc, #668]	@ (801ec58 <_dtoa_r+0x2c8>)
 801e9bc:	21ef      	movs	r1, #239	@ 0xef
 801e9be:	48a7      	ldr	r0, [pc, #668]	@ (801ec5c <_dtoa_r+0x2cc>)
 801e9c0:	f7ff ff40 	bl	801e844 <__assert_func>
 801e9c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801e9c8:	6007      	str	r7, [r0, #0]
 801e9ca:	60c7      	str	r7, [r0, #12]
 801e9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e9d0:	6819      	ldr	r1, [r3, #0]
 801e9d2:	b159      	cbz	r1, 801e9ec <_dtoa_r+0x5c>
 801e9d4:	685a      	ldr	r2, [r3, #4]
 801e9d6:	604a      	str	r2, [r1, #4]
 801e9d8:	2301      	movs	r3, #1
 801e9da:	4093      	lsls	r3, r2
 801e9dc:	608b      	str	r3, [r1, #8]
 801e9de:	4658      	mov	r0, fp
 801e9e0:	f000 feda 	bl	801f798 <_Bfree>
 801e9e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e9e8:	2200      	movs	r2, #0
 801e9ea:	601a      	str	r2, [r3, #0]
 801e9ec:	1e2b      	subs	r3, r5, #0
 801e9ee:	bfb9      	ittee	lt
 801e9f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e9f4:	9303      	strlt	r3, [sp, #12]
 801e9f6:	2300      	movge	r3, #0
 801e9f8:	6033      	strge	r3, [r6, #0]
 801e9fa:	9f03      	ldr	r7, [sp, #12]
 801e9fc:	4b98      	ldr	r3, [pc, #608]	@ (801ec60 <_dtoa_r+0x2d0>)
 801e9fe:	bfbc      	itt	lt
 801ea00:	2201      	movlt	r2, #1
 801ea02:	6032      	strlt	r2, [r6, #0]
 801ea04:	43bb      	bics	r3, r7
 801ea06:	d112      	bne.n	801ea2e <_dtoa_r+0x9e>
 801ea08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ea0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ea0e:	6013      	str	r3, [r2, #0]
 801ea10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ea14:	4323      	orrs	r3, r4
 801ea16:	f000 854d 	beq.w	801f4b4 <_dtoa_r+0xb24>
 801ea1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ea1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801ec74 <_dtoa_r+0x2e4>
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	f000 854f 	beq.w	801f4c4 <_dtoa_r+0xb34>
 801ea26:	f10a 0303 	add.w	r3, sl, #3
 801ea2a:	f000 bd49 	b.w	801f4c0 <_dtoa_r+0xb30>
 801ea2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ea32:	2200      	movs	r2, #0
 801ea34:	ec51 0b17 	vmov	r0, r1, d7
 801ea38:	2300      	movs	r3, #0
 801ea3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ea3e:	f7e2 f853 	bl	8000ae8 <__aeabi_dcmpeq>
 801ea42:	4680      	mov	r8, r0
 801ea44:	b158      	cbz	r0, 801ea5e <_dtoa_r+0xce>
 801ea46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ea48:	2301      	movs	r3, #1
 801ea4a:	6013      	str	r3, [r2, #0]
 801ea4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ea4e:	b113      	cbz	r3, 801ea56 <_dtoa_r+0xc6>
 801ea50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ea52:	4b84      	ldr	r3, [pc, #528]	@ (801ec64 <_dtoa_r+0x2d4>)
 801ea54:	6013      	str	r3, [r2, #0]
 801ea56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801ec78 <_dtoa_r+0x2e8>
 801ea5a:	f000 bd33 	b.w	801f4c4 <_dtoa_r+0xb34>
 801ea5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ea62:	aa16      	add	r2, sp, #88	@ 0x58
 801ea64:	a917      	add	r1, sp, #92	@ 0x5c
 801ea66:	4658      	mov	r0, fp
 801ea68:	f001 f980 	bl	801fd6c <__d2b>
 801ea6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ea70:	4681      	mov	r9, r0
 801ea72:	2e00      	cmp	r6, #0
 801ea74:	d077      	beq.n	801eb66 <_dtoa_r+0x1d6>
 801ea76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ea78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801ea7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ea80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ea84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ea88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ea8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ea90:	4619      	mov	r1, r3
 801ea92:	2200      	movs	r2, #0
 801ea94:	4b74      	ldr	r3, [pc, #464]	@ (801ec68 <_dtoa_r+0x2d8>)
 801ea96:	f7e1 fc07 	bl	80002a8 <__aeabi_dsub>
 801ea9a:	a369      	add	r3, pc, #420	@ (adr r3, 801ec40 <_dtoa_r+0x2b0>)
 801ea9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa0:	f7e1 fdba 	bl	8000618 <__aeabi_dmul>
 801eaa4:	a368      	add	r3, pc, #416	@ (adr r3, 801ec48 <_dtoa_r+0x2b8>)
 801eaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaaa:	f7e1 fbff 	bl	80002ac <__adddf3>
 801eaae:	4604      	mov	r4, r0
 801eab0:	4630      	mov	r0, r6
 801eab2:	460d      	mov	r5, r1
 801eab4:	f7e1 fd46 	bl	8000544 <__aeabi_i2d>
 801eab8:	a365      	add	r3, pc, #404	@ (adr r3, 801ec50 <_dtoa_r+0x2c0>)
 801eaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eabe:	f7e1 fdab 	bl	8000618 <__aeabi_dmul>
 801eac2:	4602      	mov	r2, r0
 801eac4:	460b      	mov	r3, r1
 801eac6:	4620      	mov	r0, r4
 801eac8:	4629      	mov	r1, r5
 801eaca:	f7e1 fbef 	bl	80002ac <__adddf3>
 801eace:	4604      	mov	r4, r0
 801ead0:	460d      	mov	r5, r1
 801ead2:	f7e2 f851 	bl	8000b78 <__aeabi_d2iz>
 801ead6:	2200      	movs	r2, #0
 801ead8:	4607      	mov	r7, r0
 801eada:	2300      	movs	r3, #0
 801eadc:	4620      	mov	r0, r4
 801eade:	4629      	mov	r1, r5
 801eae0:	f7e2 f80c 	bl	8000afc <__aeabi_dcmplt>
 801eae4:	b140      	cbz	r0, 801eaf8 <_dtoa_r+0x168>
 801eae6:	4638      	mov	r0, r7
 801eae8:	f7e1 fd2c 	bl	8000544 <__aeabi_i2d>
 801eaec:	4622      	mov	r2, r4
 801eaee:	462b      	mov	r3, r5
 801eaf0:	f7e1 fffa 	bl	8000ae8 <__aeabi_dcmpeq>
 801eaf4:	b900      	cbnz	r0, 801eaf8 <_dtoa_r+0x168>
 801eaf6:	3f01      	subs	r7, #1
 801eaf8:	2f16      	cmp	r7, #22
 801eafa:	d851      	bhi.n	801eba0 <_dtoa_r+0x210>
 801eafc:	4b5b      	ldr	r3, [pc, #364]	@ (801ec6c <_dtoa_r+0x2dc>)
 801eafe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801eb0a:	f7e1 fff7 	bl	8000afc <__aeabi_dcmplt>
 801eb0e:	2800      	cmp	r0, #0
 801eb10:	d048      	beq.n	801eba4 <_dtoa_r+0x214>
 801eb12:	3f01      	subs	r7, #1
 801eb14:	2300      	movs	r3, #0
 801eb16:	9312      	str	r3, [sp, #72]	@ 0x48
 801eb18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801eb1a:	1b9b      	subs	r3, r3, r6
 801eb1c:	1e5a      	subs	r2, r3, #1
 801eb1e:	bf44      	itt	mi
 801eb20:	f1c3 0801 	rsbmi	r8, r3, #1
 801eb24:	2300      	movmi	r3, #0
 801eb26:	9208      	str	r2, [sp, #32]
 801eb28:	bf54      	ite	pl
 801eb2a:	f04f 0800 	movpl.w	r8, #0
 801eb2e:	9308      	strmi	r3, [sp, #32]
 801eb30:	2f00      	cmp	r7, #0
 801eb32:	db39      	blt.n	801eba8 <_dtoa_r+0x218>
 801eb34:	9b08      	ldr	r3, [sp, #32]
 801eb36:	970f      	str	r7, [sp, #60]	@ 0x3c
 801eb38:	443b      	add	r3, r7
 801eb3a:	9308      	str	r3, [sp, #32]
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	930a      	str	r3, [sp, #40]	@ 0x28
 801eb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb42:	2b09      	cmp	r3, #9
 801eb44:	d864      	bhi.n	801ec10 <_dtoa_r+0x280>
 801eb46:	2b05      	cmp	r3, #5
 801eb48:	bfc4      	itt	gt
 801eb4a:	3b04      	subgt	r3, #4
 801eb4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801eb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb50:	f1a3 0302 	sub.w	r3, r3, #2
 801eb54:	bfcc      	ite	gt
 801eb56:	2400      	movgt	r4, #0
 801eb58:	2401      	movle	r4, #1
 801eb5a:	2b03      	cmp	r3, #3
 801eb5c:	d863      	bhi.n	801ec26 <_dtoa_r+0x296>
 801eb5e:	e8df f003 	tbb	[pc, r3]
 801eb62:	372a      	.short	0x372a
 801eb64:	5535      	.short	0x5535
 801eb66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801eb6a:	441e      	add	r6, r3
 801eb6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801eb70:	2b20      	cmp	r3, #32
 801eb72:	bfc1      	itttt	gt
 801eb74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801eb78:	409f      	lslgt	r7, r3
 801eb7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801eb7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801eb82:	bfd6      	itet	le
 801eb84:	f1c3 0320 	rsble	r3, r3, #32
 801eb88:	ea47 0003 	orrgt.w	r0, r7, r3
 801eb8c:	fa04 f003 	lslle.w	r0, r4, r3
 801eb90:	f7e1 fcc8 	bl	8000524 <__aeabi_ui2d>
 801eb94:	2201      	movs	r2, #1
 801eb96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801eb9a:	3e01      	subs	r6, #1
 801eb9c:	9214      	str	r2, [sp, #80]	@ 0x50
 801eb9e:	e777      	b.n	801ea90 <_dtoa_r+0x100>
 801eba0:	2301      	movs	r3, #1
 801eba2:	e7b8      	b.n	801eb16 <_dtoa_r+0x186>
 801eba4:	9012      	str	r0, [sp, #72]	@ 0x48
 801eba6:	e7b7      	b.n	801eb18 <_dtoa_r+0x188>
 801eba8:	427b      	negs	r3, r7
 801ebaa:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebac:	2300      	movs	r3, #0
 801ebae:	eba8 0807 	sub.w	r8, r8, r7
 801ebb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ebb4:	e7c4      	b.n	801eb40 <_dtoa_r+0x1b0>
 801ebb6:	2300      	movs	r3, #0
 801ebb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	dc35      	bgt.n	801ec2c <_dtoa_r+0x29c>
 801ebc0:	2301      	movs	r3, #1
 801ebc2:	9300      	str	r3, [sp, #0]
 801ebc4:	9307      	str	r3, [sp, #28]
 801ebc6:	461a      	mov	r2, r3
 801ebc8:	920e      	str	r2, [sp, #56]	@ 0x38
 801ebca:	e00b      	b.n	801ebe4 <_dtoa_r+0x254>
 801ebcc:	2301      	movs	r3, #1
 801ebce:	e7f3      	b.n	801ebb8 <_dtoa_r+0x228>
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebd6:	18fb      	adds	r3, r7, r3
 801ebd8:	9300      	str	r3, [sp, #0]
 801ebda:	3301      	adds	r3, #1
 801ebdc:	2b01      	cmp	r3, #1
 801ebde:	9307      	str	r3, [sp, #28]
 801ebe0:	bfb8      	it	lt
 801ebe2:	2301      	movlt	r3, #1
 801ebe4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ebe8:	2100      	movs	r1, #0
 801ebea:	2204      	movs	r2, #4
 801ebec:	f102 0514 	add.w	r5, r2, #20
 801ebf0:	429d      	cmp	r5, r3
 801ebf2:	d91f      	bls.n	801ec34 <_dtoa_r+0x2a4>
 801ebf4:	6041      	str	r1, [r0, #4]
 801ebf6:	4658      	mov	r0, fp
 801ebf8:	f000 fd8e 	bl	801f718 <_Balloc>
 801ebfc:	4682      	mov	sl, r0
 801ebfe:	2800      	cmp	r0, #0
 801ec00:	d13c      	bne.n	801ec7c <_dtoa_r+0x2ec>
 801ec02:	4b1b      	ldr	r3, [pc, #108]	@ (801ec70 <_dtoa_r+0x2e0>)
 801ec04:	4602      	mov	r2, r0
 801ec06:	f240 11af 	movw	r1, #431	@ 0x1af
 801ec0a:	e6d8      	b.n	801e9be <_dtoa_r+0x2e>
 801ec0c:	2301      	movs	r3, #1
 801ec0e:	e7e0      	b.n	801ebd2 <_dtoa_r+0x242>
 801ec10:	2401      	movs	r4, #1
 801ec12:	2300      	movs	r3, #0
 801ec14:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec16:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ec18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ec1c:	9300      	str	r3, [sp, #0]
 801ec1e:	9307      	str	r3, [sp, #28]
 801ec20:	2200      	movs	r2, #0
 801ec22:	2312      	movs	r3, #18
 801ec24:	e7d0      	b.n	801ebc8 <_dtoa_r+0x238>
 801ec26:	2301      	movs	r3, #1
 801ec28:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec2a:	e7f5      	b.n	801ec18 <_dtoa_r+0x288>
 801ec2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec2e:	9300      	str	r3, [sp, #0]
 801ec30:	9307      	str	r3, [sp, #28]
 801ec32:	e7d7      	b.n	801ebe4 <_dtoa_r+0x254>
 801ec34:	3101      	adds	r1, #1
 801ec36:	0052      	lsls	r2, r2, #1
 801ec38:	e7d8      	b.n	801ebec <_dtoa_r+0x25c>
 801ec3a:	bf00      	nop
 801ec3c:	f3af 8000 	nop.w
 801ec40:	636f4361 	.word	0x636f4361
 801ec44:	3fd287a7 	.word	0x3fd287a7
 801ec48:	8b60c8b3 	.word	0x8b60c8b3
 801ec4c:	3fc68a28 	.word	0x3fc68a28
 801ec50:	509f79fb 	.word	0x509f79fb
 801ec54:	3fd34413 	.word	0x3fd34413
 801ec58:	080246d6 	.word	0x080246d6
 801ec5c:	080248c3 	.word	0x080248c3
 801ec60:	7ff00000 	.word	0x7ff00000
 801ec64:	08024857 	.word	0x08024857
 801ec68:	3ff80000 	.word	0x3ff80000
 801ec6c:	080249c0 	.word	0x080249c0
 801ec70:	0802491b 	.word	0x0802491b
 801ec74:	080248bf 	.word	0x080248bf
 801ec78:	08024856 	.word	0x08024856
 801ec7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ec80:	6018      	str	r0, [r3, #0]
 801ec82:	9b07      	ldr	r3, [sp, #28]
 801ec84:	2b0e      	cmp	r3, #14
 801ec86:	f200 80a4 	bhi.w	801edd2 <_dtoa_r+0x442>
 801ec8a:	2c00      	cmp	r4, #0
 801ec8c:	f000 80a1 	beq.w	801edd2 <_dtoa_r+0x442>
 801ec90:	2f00      	cmp	r7, #0
 801ec92:	dd33      	ble.n	801ecfc <_dtoa_r+0x36c>
 801ec94:	4bad      	ldr	r3, [pc, #692]	@ (801ef4c <_dtoa_r+0x5bc>)
 801ec96:	f007 020f 	and.w	r2, r7, #15
 801ec9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ec9e:	ed93 7b00 	vldr	d7, [r3]
 801eca2:	05f8      	lsls	r0, r7, #23
 801eca4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801eca8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ecac:	d516      	bpl.n	801ecdc <_dtoa_r+0x34c>
 801ecae:	4ba8      	ldr	r3, [pc, #672]	@ (801ef50 <_dtoa_r+0x5c0>)
 801ecb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ecb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ecb8:	f7e1 fdd8 	bl	800086c <__aeabi_ddiv>
 801ecbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecc0:	f004 040f 	and.w	r4, r4, #15
 801ecc4:	2603      	movs	r6, #3
 801ecc6:	4da2      	ldr	r5, [pc, #648]	@ (801ef50 <_dtoa_r+0x5c0>)
 801ecc8:	b954      	cbnz	r4, 801ece0 <_dtoa_r+0x350>
 801ecca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ecce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ecd2:	f7e1 fdcb 	bl	800086c <__aeabi_ddiv>
 801ecd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecda:	e028      	b.n	801ed2e <_dtoa_r+0x39e>
 801ecdc:	2602      	movs	r6, #2
 801ecde:	e7f2      	b.n	801ecc6 <_dtoa_r+0x336>
 801ece0:	07e1      	lsls	r1, r4, #31
 801ece2:	d508      	bpl.n	801ecf6 <_dtoa_r+0x366>
 801ece4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ece8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ecec:	f7e1 fc94 	bl	8000618 <__aeabi_dmul>
 801ecf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ecf4:	3601      	adds	r6, #1
 801ecf6:	1064      	asrs	r4, r4, #1
 801ecf8:	3508      	adds	r5, #8
 801ecfa:	e7e5      	b.n	801ecc8 <_dtoa_r+0x338>
 801ecfc:	f000 80d2 	beq.w	801eea4 <_dtoa_r+0x514>
 801ed00:	427c      	negs	r4, r7
 801ed02:	4b92      	ldr	r3, [pc, #584]	@ (801ef4c <_dtoa_r+0x5bc>)
 801ed04:	4d92      	ldr	r5, [pc, #584]	@ (801ef50 <_dtoa_r+0x5c0>)
 801ed06:	f004 020f 	and.w	r2, r4, #15
 801ed0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ed16:	f7e1 fc7f 	bl	8000618 <__aeabi_dmul>
 801ed1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed1e:	1124      	asrs	r4, r4, #4
 801ed20:	2300      	movs	r3, #0
 801ed22:	2602      	movs	r6, #2
 801ed24:	2c00      	cmp	r4, #0
 801ed26:	f040 80b2 	bne.w	801ee8e <_dtoa_r+0x4fe>
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d1d3      	bne.n	801ecd6 <_dtoa_r+0x346>
 801ed2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ed30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	f000 80b7 	beq.w	801eea8 <_dtoa_r+0x518>
 801ed3a:	4b86      	ldr	r3, [pc, #536]	@ (801ef54 <_dtoa_r+0x5c4>)
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	4620      	mov	r0, r4
 801ed40:	4629      	mov	r1, r5
 801ed42:	f7e1 fedb 	bl	8000afc <__aeabi_dcmplt>
 801ed46:	2800      	cmp	r0, #0
 801ed48:	f000 80ae 	beq.w	801eea8 <_dtoa_r+0x518>
 801ed4c:	9b07      	ldr	r3, [sp, #28]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	f000 80aa 	beq.w	801eea8 <_dtoa_r+0x518>
 801ed54:	9b00      	ldr	r3, [sp, #0]
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	dd37      	ble.n	801edca <_dtoa_r+0x43a>
 801ed5a:	1e7b      	subs	r3, r7, #1
 801ed5c:	9304      	str	r3, [sp, #16]
 801ed5e:	4620      	mov	r0, r4
 801ed60:	4b7d      	ldr	r3, [pc, #500]	@ (801ef58 <_dtoa_r+0x5c8>)
 801ed62:	2200      	movs	r2, #0
 801ed64:	4629      	mov	r1, r5
 801ed66:	f7e1 fc57 	bl	8000618 <__aeabi_dmul>
 801ed6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed6e:	9c00      	ldr	r4, [sp, #0]
 801ed70:	3601      	adds	r6, #1
 801ed72:	4630      	mov	r0, r6
 801ed74:	f7e1 fbe6 	bl	8000544 <__aeabi_i2d>
 801ed78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed7c:	f7e1 fc4c 	bl	8000618 <__aeabi_dmul>
 801ed80:	4b76      	ldr	r3, [pc, #472]	@ (801ef5c <_dtoa_r+0x5cc>)
 801ed82:	2200      	movs	r2, #0
 801ed84:	f7e1 fa92 	bl	80002ac <__adddf3>
 801ed88:	4605      	mov	r5, r0
 801ed8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ed8e:	2c00      	cmp	r4, #0
 801ed90:	f040 808d 	bne.w	801eeae <_dtoa_r+0x51e>
 801ed94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed98:	4b71      	ldr	r3, [pc, #452]	@ (801ef60 <_dtoa_r+0x5d0>)
 801ed9a:	2200      	movs	r2, #0
 801ed9c:	f7e1 fa84 	bl	80002a8 <__aeabi_dsub>
 801eda0:	4602      	mov	r2, r0
 801eda2:	460b      	mov	r3, r1
 801eda4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eda8:	462a      	mov	r2, r5
 801edaa:	4633      	mov	r3, r6
 801edac:	f7e1 fec4 	bl	8000b38 <__aeabi_dcmpgt>
 801edb0:	2800      	cmp	r0, #0
 801edb2:	f040 828b 	bne.w	801f2cc <_dtoa_r+0x93c>
 801edb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edba:	462a      	mov	r2, r5
 801edbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801edc0:	f7e1 fe9c 	bl	8000afc <__aeabi_dcmplt>
 801edc4:	2800      	cmp	r0, #0
 801edc6:	f040 8128 	bne.w	801f01a <_dtoa_r+0x68a>
 801edca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801edce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801edd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	f2c0 815a 	blt.w	801f08e <_dtoa_r+0x6fe>
 801edda:	2f0e      	cmp	r7, #14
 801eddc:	f300 8157 	bgt.w	801f08e <_dtoa_r+0x6fe>
 801ede0:	4b5a      	ldr	r3, [pc, #360]	@ (801ef4c <_dtoa_r+0x5bc>)
 801ede2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ede6:	ed93 7b00 	vldr	d7, [r3]
 801edea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801edec:	2b00      	cmp	r3, #0
 801edee:	ed8d 7b00 	vstr	d7, [sp]
 801edf2:	da03      	bge.n	801edfc <_dtoa_r+0x46c>
 801edf4:	9b07      	ldr	r3, [sp, #28]
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	f340 8101 	ble.w	801effe <_dtoa_r+0x66e>
 801edfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ee00:	4656      	mov	r6, sl
 801ee02:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ee06:	4620      	mov	r0, r4
 801ee08:	4629      	mov	r1, r5
 801ee0a:	f7e1 fd2f 	bl	800086c <__aeabi_ddiv>
 801ee0e:	f7e1 feb3 	bl	8000b78 <__aeabi_d2iz>
 801ee12:	4680      	mov	r8, r0
 801ee14:	f7e1 fb96 	bl	8000544 <__aeabi_i2d>
 801ee18:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ee1c:	f7e1 fbfc 	bl	8000618 <__aeabi_dmul>
 801ee20:	4602      	mov	r2, r0
 801ee22:	460b      	mov	r3, r1
 801ee24:	4620      	mov	r0, r4
 801ee26:	4629      	mov	r1, r5
 801ee28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ee2c:	f7e1 fa3c 	bl	80002a8 <__aeabi_dsub>
 801ee30:	f806 4b01 	strb.w	r4, [r6], #1
 801ee34:	9d07      	ldr	r5, [sp, #28]
 801ee36:	eba6 040a 	sub.w	r4, r6, sl
 801ee3a:	42a5      	cmp	r5, r4
 801ee3c:	4602      	mov	r2, r0
 801ee3e:	460b      	mov	r3, r1
 801ee40:	f040 8117 	bne.w	801f072 <_dtoa_r+0x6e2>
 801ee44:	f7e1 fa32 	bl	80002ac <__adddf3>
 801ee48:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ee4c:	4604      	mov	r4, r0
 801ee4e:	460d      	mov	r5, r1
 801ee50:	f7e1 fe72 	bl	8000b38 <__aeabi_dcmpgt>
 801ee54:	2800      	cmp	r0, #0
 801ee56:	f040 80f9 	bne.w	801f04c <_dtoa_r+0x6bc>
 801ee5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ee5e:	4620      	mov	r0, r4
 801ee60:	4629      	mov	r1, r5
 801ee62:	f7e1 fe41 	bl	8000ae8 <__aeabi_dcmpeq>
 801ee66:	b118      	cbz	r0, 801ee70 <_dtoa_r+0x4e0>
 801ee68:	f018 0f01 	tst.w	r8, #1
 801ee6c:	f040 80ee 	bne.w	801f04c <_dtoa_r+0x6bc>
 801ee70:	4649      	mov	r1, r9
 801ee72:	4658      	mov	r0, fp
 801ee74:	f000 fc90 	bl	801f798 <_Bfree>
 801ee78:	2300      	movs	r3, #0
 801ee7a:	7033      	strb	r3, [r6, #0]
 801ee7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee7e:	3701      	adds	r7, #1
 801ee80:	601f      	str	r7, [r3, #0]
 801ee82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	f000 831d 	beq.w	801f4c4 <_dtoa_r+0xb34>
 801ee8a:	601e      	str	r6, [r3, #0]
 801ee8c:	e31a      	b.n	801f4c4 <_dtoa_r+0xb34>
 801ee8e:	07e2      	lsls	r2, r4, #31
 801ee90:	d505      	bpl.n	801ee9e <_dtoa_r+0x50e>
 801ee92:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ee96:	f7e1 fbbf 	bl	8000618 <__aeabi_dmul>
 801ee9a:	3601      	adds	r6, #1
 801ee9c:	2301      	movs	r3, #1
 801ee9e:	1064      	asrs	r4, r4, #1
 801eea0:	3508      	adds	r5, #8
 801eea2:	e73f      	b.n	801ed24 <_dtoa_r+0x394>
 801eea4:	2602      	movs	r6, #2
 801eea6:	e742      	b.n	801ed2e <_dtoa_r+0x39e>
 801eea8:	9c07      	ldr	r4, [sp, #28]
 801eeaa:	9704      	str	r7, [sp, #16]
 801eeac:	e761      	b.n	801ed72 <_dtoa_r+0x3e2>
 801eeae:	4b27      	ldr	r3, [pc, #156]	@ (801ef4c <_dtoa_r+0x5bc>)
 801eeb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801eeb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801eeb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801eeba:	4454      	add	r4, sl
 801eebc:	2900      	cmp	r1, #0
 801eebe:	d053      	beq.n	801ef68 <_dtoa_r+0x5d8>
 801eec0:	4928      	ldr	r1, [pc, #160]	@ (801ef64 <_dtoa_r+0x5d4>)
 801eec2:	2000      	movs	r0, #0
 801eec4:	f7e1 fcd2 	bl	800086c <__aeabi_ddiv>
 801eec8:	4633      	mov	r3, r6
 801eeca:	462a      	mov	r2, r5
 801eecc:	f7e1 f9ec 	bl	80002a8 <__aeabi_dsub>
 801eed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801eed4:	4656      	mov	r6, sl
 801eed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eeda:	f7e1 fe4d 	bl	8000b78 <__aeabi_d2iz>
 801eede:	4605      	mov	r5, r0
 801eee0:	f7e1 fb30 	bl	8000544 <__aeabi_i2d>
 801eee4:	4602      	mov	r2, r0
 801eee6:	460b      	mov	r3, r1
 801eee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eeec:	f7e1 f9dc 	bl	80002a8 <__aeabi_dsub>
 801eef0:	3530      	adds	r5, #48	@ 0x30
 801eef2:	4602      	mov	r2, r0
 801eef4:	460b      	mov	r3, r1
 801eef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eefa:	f806 5b01 	strb.w	r5, [r6], #1
 801eefe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ef02:	f7e1 fdfb 	bl	8000afc <__aeabi_dcmplt>
 801ef06:	2800      	cmp	r0, #0
 801ef08:	d171      	bne.n	801efee <_dtoa_r+0x65e>
 801ef0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ef0e:	4911      	ldr	r1, [pc, #68]	@ (801ef54 <_dtoa_r+0x5c4>)
 801ef10:	2000      	movs	r0, #0
 801ef12:	f7e1 f9c9 	bl	80002a8 <__aeabi_dsub>
 801ef16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ef1a:	f7e1 fdef 	bl	8000afc <__aeabi_dcmplt>
 801ef1e:	2800      	cmp	r0, #0
 801ef20:	f040 8095 	bne.w	801f04e <_dtoa_r+0x6be>
 801ef24:	42a6      	cmp	r6, r4
 801ef26:	f43f af50 	beq.w	801edca <_dtoa_r+0x43a>
 801ef2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ef2e:	4b0a      	ldr	r3, [pc, #40]	@ (801ef58 <_dtoa_r+0x5c8>)
 801ef30:	2200      	movs	r2, #0
 801ef32:	f7e1 fb71 	bl	8000618 <__aeabi_dmul>
 801ef36:	4b08      	ldr	r3, [pc, #32]	@ (801ef58 <_dtoa_r+0x5c8>)
 801ef38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ef3c:	2200      	movs	r2, #0
 801ef3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef42:	f7e1 fb69 	bl	8000618 <__aeabi_dmul>
 801ef46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef4a:	e7c4      	b.n	801eed6 <_dtoa_r+0x546>
 801ef4c:	080249c0 	.word	0x080249c0
 801ef50:	08024998 	.word	0x08024998
 801ef54:	3ff00000 	.word	0x3ff00000
 801ef58:	40240000 	.word	0x40240000
 801ef5c:	401c0000 	.word	0x401c0000
 801ef60:	40140000 	.word	0x40140000
 801ef64:	3fe00000 	.word	0x3fe00000
 801ef68:	4631      	mov	r1, r6
 801ef6a:	4628      	mov	r0, r5
 801ef6c:	f7e1 fb54 	bl	8000618 <__aeabi_dmul>
 801ef70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ef74:	9415      	str	r4, [sp, #84]	@ 0x54
 801ef76:	4656      	mov	r6, sl
 801ef78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef7c:	f7e1 fdfc 	bl	8000b78 <__aeabi_d2iz>
 801ef80:	4605      	mov	r5, r0
 801ef82:	f7e1 fadf 	bl	8000544 <__aeabi_i2d>
 801ef86:	4602      	mov	r2, r0
 801ef88:	460b      	mov	r3, r1
 801ef8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef8e:	f7e1 f98b 	bl	80002a8 <__aeabi_dsub>
 801ef92:	3530      	adds	r5, #48	@ 0x30
 801ef94:	f806 5b01 	strb.w	r5, [r6], #1
 801ef98:	4602      	mov	r2, r0
 801ef9a:	460b      	mov	r3, r1
 801ef9c:	42a6      	cmp	r6, r4
 801ef9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801efa2:	f04f 0200 	mov.w	r2, #0
 801efa6:	d124      	bne.n	801eff2 <_dtoa_r+0x662>
 801efa8:	4bac      	ldr	r3, [pc, #688]	@ (801f25c <_dtoa_r+0x8cc>)
 801efaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801efae:	f7e1 f97d 	bl	80002ac <__adddf3>
 801efb2:	4602      	mov	r2, r0
 801efb4:	460b      	mov	r3, r1
 801efb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efba:	f7e1 fdbd 	bl	8000b38 <__aeabi_dcmpgt>
 801efbe:	2800      	cmp	r0, #0
 801efc0:	d145      	bne.n	801f04e <_dtoa_r+0x6be>
 801efc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801efc6:	49a5      	ldr	r1, [pc, #660]	@ (801f25c <_dtoa_r+0x8cc>)
 801efc8:	2000      	movs	r0, #0
 801efca:	f7e1 f96d 	bl	80002a8 <__aeabi_dsub>
 801efce:	4602      	mov	r2, r0
 801efd0:	460b      	mov	r3, r1
 801efd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efd6:	f7e1 fd91 	bl	8000afc <__aeabi_dcmplt>
 801efda:	2800      	cmp	r0, #0
 801efdc:	f43f aef5 	beq.w	801edca <_dtoa_r+0x43a>
 801efe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801efe2:	1e73      	subs	r3, r6, #1
 801efe4:	9315      	str	r3, [sp, #84]	@ 0x54
 801efe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801efea:	2b30      	cmp	r3, #48	@ 0x30
 801efec:	d0f8      	beq.n	801efe0 <_dtoa_r+0x650>
 801efee:	9f04      	ldr	r7, [sp, #16]
 801eff0:	e73e      	b.n	801ee70 <_dtoa_r+0x4e0>
 801eff2:	4b9b      	ldr	r3, [pc, #620]	@ (801f260 <_dtoa_r+0x8d0>)
 801eff4:	f7e1 fb10 	bl	8000618 <__aeabi_dmul>
 801eff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801effc:	e7bc      	b.n	801ef78 <_dtoa_r+0x5e8>
 801effe:	d10c      	bne.n	801f01a <_dtoa_r+0x68a>
 801f000:	4b98      	ldr	r3, [pc, #608]	@ (801f264 <_dtoa_r+0x8d4>)
 801f002:	2200      	movs	r2, #0
 801f004:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f008:	f7e1 fb06 	bl	8000618 <__aeabi_dmul>
 801f00c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f010:	f7e1 fd88 	bl	8000b24 <__aeabi_dcmpge>
 801f014:	2800      	cmp	r0, #0
 801f016:	f000 8157 	beq.w	801f2c8 <_dtoa_r+0x938>
 801f01a:	2400      	movs	r4, #0
 801f01c:	4625      	mov	r5, r4
 801f01e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f020:	43db      	mvns	r3, r3
 801f022:	9304      	str	r3, [sp, #16]
 801f024:	4656      	mov	r6, sl
 801f026:	2700      	movs	r7, #0
 801f028:	4621      	mov	r1, r4
 801f02a:	4658      	mov	r0, fp
 801f02c:	f000 fbb4 	bl	801f798 <_Bfree>
 801f030:	2d00      	cmp	r5, #0
 801f032:	d0dc      	beq.n	801efee <_dtoa_r+0x65e>
 801f034:	b12f      	cbz	r7, 801f042 <_dtoa_r+0x6b2>
 801f036:	42af      	cmp	r7, r5
 801f038:	d003      	beq.n	801f042 <_dtoa_r+0x6b2>
 801f03a:	4639      	mov	r1, r7
 801f03c:	4658      	mov	r0, fp
 801f03e:	f000 fbab 	bl	801f798 <_Bfree>
 801f042:	4629      	mov	r1, r5
 801f044:	4658      	mov	r0, fp
 801f046:	f000 fba7 	bl	801f798 <_Bfree>
 801f04a:	e7d0      	b.n	801efee <_dtoa_r+0x65e>
 801f04c:	9704      	str	r7, [sp, #16]
 801f04e:	4633      	mov	r3, r6
 801f050:	461e      	mov	r6, r3
 801f052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f056:	2a39      	cmp	r2, #57	@ 0x39
 801f058:	d107      	bne.n	801f06a <_dtoa_r+0x6da>
 801f05a:	459a      	cmp	sl, r3
 801f05c:	d1f8      	bne.n	801f050 <_dtoa_r+0x6c0>
 801f05e:	9a04      	ldr	r2, [sp, #16]
 801f060:	3201      	adds	r2, #1
 801f062:	9204      	str	r2, [sp, #16]
 801f064:	2230      	movs	r2, #48	@ 0x30
 801f066:	f88a 2000 	strb.w	r2, [sl]
 801f06a:	781a      	ldrb	r2, [r3, #0]
 801f06c:	3201      	adds	r2, #1
 801f06e:	701a      	strb	r2, [r3, #0]
 801f070:	e7bd      	b.n	801efee <_dtoa_r+0x65e>
 801f072:	4b7b      	ldr	r3, [pc, #492]	@ (801f260 <_dtoa_r+0x8d0>)
 801f074:	2200      	movs	r2, #0
 801f076:	f7e1 facf 	bl	8000618 <__aeabi_dmul>
 801f07a:	2200      	movs	r2, #0
 801f07c:	2300      	movs	r3, #0
 801f07e:	4604      	mov	r4, r0
 801f080:	460d      	mov	r5, r1
 801f082:	f7e1 fd31 	bl	8000ae8 <__aeabi_dcmpeq>
 801f086:	2800      	cmp	r0, #0
 801f088:	f43f aebb 	beq.w	801ee02 <_dtoa_r+0x472>
 801f08c:	e6f0      	b.n	801ee70 <_dtoa_r+0x4e0>
 801f08e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f090:	2a00      	cmp	r2, #0
 801f092:	f000 80db 	beq.w	801f24c <_dtoa_r+0x8bc>
 801f096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f098:	2a01      	cmp	r2, #1
 801f09a:	f300 80bf 	bgt.w	801f21c <_dtoa_r+0x88c>
 801f09e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f0a0:	2a00      	cmp	r2, #0
 801f0a2:	f000 80b7 	beq.w	801f214 <_dtoa_r+0x884>
 801f0a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f0aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f0ac:	4646      	mov	r6, r8
 801f0ae:	9a08      	ldr	r2, [sp, #32]
 801f0b0:	2101      	movs	r1, #1
 801f0b2:	441a      	add	r2, r3
 801f0b4:	4658      	mov	r0, fp
 801f0b6:	4498      	add	r8, r3
 801f0b8:	9208      	str	r2, [sp, #32]
 801f0ba:	f000 fc21 	bl	801f900 <__i2b>
 801f0be:	4605      	mov	r5, r0
 801f0c0:	b15e      	cbz	r6, 801f0da <_dtoa_r+0x74a>
 801f0c2:	9b08      	ldr	r3, [sp, #32]
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	dd08      	ble.n	801f0da <_dtoa_r+0x74a>
 801f0c8:	42b3      	cmp	r3, r6
 801f0ca:	9a08      	ldr	r2, [sp, #32]
 801f0cc:	bfa8      	it	ge
 801f0ce:	4633      	movge	r3, r6
 801f0d0:	eba8 0803 	sub.w	r8, r8, r3
 801f0d4:	1af6      	subs	r6, r6, r3
 801f0d6:	1ad3      	subs	r3, r2, r3
 801f0d8:	9308      	str	r3, [sp, #32]
 801f0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0dc:	b1f3      	cbz	r3, 801f11c <_dtoa_r+0x78c>
 801f0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	f000 80b7 	beq.w	801f254 <_dtoa_r+0x8c4>
 801f0e6:	b18c      	cbz	r4, 801f10c <_dtoa_r+0x77c>
 801f0e8:	4629      	mov	r1, r5
 801f0ea:	4622      	mov	r2, r4
 801f0ec:	4658      	mov	r0, fp
 801f0ee:	f000 fcc7 	bl	801fa80 <__pow5mult>
 801f0f2:	464a      	mov	r2, r9
 801f0f4:	4601      	mov	r1, r0
 801f0f6:	4605      	mov	r5, r0
 801f0f8:	4658      	mov	r0, fp
 801f0fa:	f000 fc17 	bl	801f92c <__multiply>
 801f0fe:	4649      	mov	r1, r9
 801f100:	9004      	str	r0, [sp, #16]
 801f102:	4658      	mov	r0, fp
 801f104:	f000 fb48 	bl	801f798 <_Bfree>
 801f108:	9b04      	ldr	r3, [sp, #16]
 801f10a:	4699      	mov	r9, r3
 801f10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f10e:	1b1a      	subs	r2, r3, r4
 801f110:	d004      	beq.n	801f11c <_dtoa_r+0x78c>
 801f112:	4649      	mov	r1, r9
 801f114:	4658      	mov	r0, fp
 801f116:	f000 fcb3 	bl	801fa80 <__pow5mult>
 801f11a:	4681      	mov	r9, r0
 801f11c:	2101      	movs	r1, #1
 801f11e:	4658      	mov	r0, fp
 801f120:	f000 fbee 	bl	801f900 <__i2b>
 801f124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f126:	4604      	mov	r4, r0
 801f128:	2b00      	cmp	r3, #0
 801f12a:	f000 81cf 	beq.w	801f4cc <_dtoa_r+0xb3c>
 801f12e:	461a      	mov	r2, r3
 801f130:	4601      	mov	r1, r0
 801f132:	4658      	mov	r0, fp
 801f134:	f000 fca4 	bl	801fa80 <__pow5mult>
 801f138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f13a:	2b01      	cmp	r3, #1
 801f13c:	4604      	mov	r4, r0
 801f13e:	f300 8095 	bgt.w	801f26c <_dtoa_r+0x8dc>
 801f142:	9b02      	ldr	r3, [sp, #8]
 801f144:	2b00      	cmp	r3, #0
 801f146:	f040 8087 	bne.w	801f258 <_dtoa_r+0x8c8>
 801f14a:	9b03      	ldr	r3, [sp, #12]
 801f14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f150:	2b00      	cmp	r3, #0
 801f152:	f040 8089 	bne.w	801f268 <_dtoa_r+0x8d8>
 801f156:	9b03      	ldr	r3, [sp, #12]
 801f158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f15c:	0d1b      	lsrs	r3, r3, #20
 801f15e:	051b      	lsls	r3, r3, #20
 801f160:	b12b      	cbz	r3, 801f16e <_dtoa_r+0x7de>
 801f162:	9b08      	ldr	r3, [sp, #32]
 801f164:	3301      	adds	r3, #1
 801f166:	9308      	str	r3, [sp, #32]
 801f168:	f108 0801 	add.w	r8, r8, #1
 801f16c:	2301      	movs	r3, #1
 801f16e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f172:	2b00      	cmp	r3, #0
 801f174:	f000 81b0 	beq.w	801f4d8 <_dtoa_r+0xb48>
 801f178:	6923      	ldr	r3, [r4, #16]
 801f17a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f17e:	6918      	ldr	r0, [r3, #16]
 801f180:	f000 fb72 	bl	801f868 <__hi0bits>
 801f184:	f1c0 0020 	rsb	r0, r0, #32
 801f188:	9b08      	ldr	r3, [sp, #32]
 801f18a:	4418      	add	r0, r3
 801f18c:	f010 001f 	ands.w	r0, r0, #31
 801f190:	d077      	beq.n	801f282 <_dtoa_r+0x8f2>
 801f192:	f1c0 0320 	rsb	r3, r0, #32
 801f196:	2b04      	cmp	r3, #4
 801f198:	dd6b      	ble.n	801f272 <_dtoa_r+0x8e2>
 801f19a:	9b08      	ldr	r3, [sp, #32]
 801f19c:	f1c0 001c 	rsb	r0, r0, #28
 801f1a0:	4403      	add	r3, r0
 801f1a2:	4480      	add	r8, r0
 801f1a4:	4406      	add	r6, r0
 801f1a6:	9308      	str	r3, [sp, #32]
 801f1a8:	f1b8 0f00 	cmp.w	r8, #0
 801f1ac:	dd05      	ble.n	801f1ba <_dtoa_r+0x82a>
 801f1ae:	4649      	mov	r1, r9
 801f1b0:	4642      	mov	r2, r8
 801f1b2:	4658      	mov	r0, fp
 801f1b4:	f000 fcbe 	bl	801fb34 <__lshift>
 801f1b8:	4681      	mov	r9, r0
 801f1ba:	9b08      	ldr	r3, [sp, #32]
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	dd05      	ble.n	801f1cc <_dtoa_r+0x83c>
 801f1c0:	4621      	mov	r1, r4
 801f1c2:	461a      	mov	r2, r3
 801f1c4:	4658      	mov	r0, fp
 801f1c6:	f000 fcb5 	bl	801fb34 <__lshift>
 801f1ca:	4604      	mov	r4, r0
 801f1cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	d059      	beq.n	801f286 <_dtoa_r+0x8f6>
 801f1d2:	4621      	mov	r1, r4
 801f1d4:	4648      	mov	r0, r9
 801f1d6:	f000 fd19 	bl	801fc0c <__mcmp>
 801f1da:	2800      	cmp	r0, #0
 801f1dc:	da53      	bge.n	801f286 <_dtoa_r+0x8f6>
 801f1de:	1e7b      	subs	r3, r7, #1
 801f1e0:	9304      	str	r3, [sp, #16]
 801f1e2:	4649      	mov	r1, r9
 801f1e4:	2300      	movs	r3, #0
 801f1e6:	220a      	movs	r2, #10
 801f1e8:	4658      	mov	r0, fp
 801f1ea:	f000 faf7 	bl	801f7dc <__multadd>
 801f1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f1f0:	4681      	mov	r9, r0
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	f000 8172 	beq.w	801f4dc <_dtoa_r+0xb4c>
 801f1f8:	2300      	movs	r3, #0
 801f1fa:	4629      	mov	r1, r5
 801f1fc:	220a      	movs	r2, #10
 801f1fe:	4658      	mov	r0, fp
 801f200:	f000 faec 	bl	801f7dc <__multadd>
 801f204:	9b00      	ldr	r3, [sp, #0]
 801f206:	2b00      	cmp	r3, #0
 801f208:	4605      	mov	r5, r0
 801f20a:	dc67      	bgt.n	801f2dc <_dtoa_r+0x94c>
 801f20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f20e:	2b02      	cmp	r3, #2
 801f210:	dc41      	bgt.n	801f296 <_dtoa_r+0x906>
 801f212:	e063      	b.n	801f2dc <_dtoa_r+0x94c>
 801f214:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f216:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f21a:	e746      	b.n	801f0aa <_dtoa_r+0x71a>
 801f21c:	9b07      	ldr	r3, [sp, #28]
 801f21e:	1e5c      	subs	r4, r3, #1
 801f220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f222:	42a3      	cmp	r3, r4
 801f224:	bfbf      	itttt	lt
 801f226:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f228:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f22a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f22c:	1ae3      	sublt	r3, r4, r3
 801f22e:	bfb4      	ite	lt
 801f230:	18d2      	addlt	r2, r2, r3
 801f232:	1b1c      	subge	r4, r3, r4
 801f234:	9b07      	ldr	r3, [sp, #28]
 801f236:	bfbc      	itt	lt
 801f238:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f23a:	2400      	movlt	r4, #0
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	bfb5      	itete	lt
 801f240:	eba8 0603 	sublt.w	r6, r8, r3
 801f244:	9b07      	ldrge	r3, [sp, #28]
 801f246:	2300      	movlt	r3, #0
 801f248:	4646      	movge	r6, r8
 801f24a:	e730      	b.n	801f0ae <_dtoa_r+0x71e>
 801f24c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f24e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f250:	4646      	mov	r6, r8
 801f252:	e735      	b.n	801f0c0 <_dtoa_r+0x730>
 801f254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f256:	e75c      	b.n	801f112 <_dtoa_r+0x782>
 801f258:	2300      	movs	r3, #0
 801f25a:	e788      	b.n	801f16e <_dtoa_r+0x7de>
 801f25c:	3fe00000 	.word	0x3fe00000
 801f260:	40240000 	.word	0x40240000
 801f264:	40140000 	.word	0x40140000
 801f268:	9b02      	ldr	r3, [sp, #8]
 801f26a:	e780      	b.n	801f16e <_dtoa_r+0x7de>
 801f26c:	2300      	movs	r3, #0
 801f26e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f270:	e782      	b.n	801f178 <_dtoa_r+0x7e8>
 801f272:	d099      	beq.n	801f1a8 <_dtoa_r+0x818>
 801f274:	9a08      	ldr	r2, [sp, #32]
 801f276:	331c      	adds	r3, #28
 801f278:	441a      	add	r2, r3
 801f27a:	4498      	add	r8, r3
 801f27c:	441e      	add	r6, r3
 801f27e:	9208      	str	r2, [sp, #32]
 801f280:	e792      	b.n	801f1a8 <_dtoa_r+0x818>
 801f282:	4603      	mov	r3, r0
 801f284:	e7f6      	b.n	801f274 <_dtoa_r+0x8e4>
 801f286:	9b07      	ldr	r3, [sp, #28]
 801f288:	9704      	str	r7, [sp, #16]
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	dc20      	bgt.n	801f2d0 <_dtoa_r+0x940>
 801f28e:	9300      	str	r3, [sp, #0]
 801f290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f292:	2b02      	cmp	r3, #2
 801f294:	dd1e      	ble.n	801f2d4 <_dtoa_r+0x944>
 801f296:	9b00      	ldr	r3, [sp, #0]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	f47f aec0 	bne.w	801f01e <_dtoa_r+0x68e>
 801f29e:	4621      	mov	r1, r4
 801f2a0:	2205      	movs	r2, #5
 801f2a2:	4658      	mov	r0, fp
 801f2a4:	f000 fa9a 	bl	801f7dc <__multadd>
 801f2a8:	4601      	mov	r1, r0
 801f2aa:	4604      	mov	r4, r0
 801f2ac:	4648      	mov	r0, r9
 801f2ae:	f000 fcad 	bl	801fc0c <__mcmp>
 801f2b2:	2800      	cmp	r0, #0
 801f2b4:	f77f aeb3 	ble.w	801f01e <_dtoa_r+0x68e>
 801f2b8:	4656      	mov	r6, sl
 801f2ba:	2331      	movs	r3, #49	@ 0x31
 801f2bc:	f806 3b01 	strb.w	r3, [r6], #1
 801f2c0:	9b04      	ldr	r3, [sp, #16]
 801f2c2:	3301      	adds	r3, #1
 801f2c4:	9304      	str	r3, [sp, #16]
 801f2c6:	e6ae      	b.n	801f026 <_dtoa_r+0x696>
 801f2c8:	9c07      	ldr	r4, [sp, #28]
 801f2ca:	9704      	str	r7, [sp, #16]
 801f2cc:	4625      	mov	r5, r4
 801f2ce:	e7f3      	b.n	801f2b8 <_dtoa_r+0x928>
 801f2d0:	9b07      	ldr	r3, [sp, #28]
 801f2d2:	9300      	str	r3, [sp, #0]
 801f2d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	f000 8104 	beq.w	801f4e4 <_dtoa_r+0xb54>
 801f2dc:	2e00      	cmp	r6, #0
 801f2de:	dd05      	ble.n	801f2ec <_dtoa_r+0x95c>
 801f2e0:	4629      	mov	r1, r5
 801f2e2:	4632      	mov	r2, r6
 801f2e4:	4658      	mov	r0, fp
 801f2e6:	f000 fc25 	bl	801fb34 <__lshift>
 801f2ea:	4605      	mov	r5, r0
 801f2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d05a      	beq.n	801f3a8 <_dtoa_r+0xa18>
 801f2f2:	6869      	ldr	r1, [r5, #4]
 801f2f4:	4658      	mov	r0, fp
 801f2f6:	f000 fa0f 	bl	801f718 <_Balloc>
 801f2fa:	4606      	mov	r6, r0
 801f2fc:	b928      	cbnz	r0, 801f30a <_dtoa_r+0x97a>
 801f2fe:	4b84      	ldr	r3, [pc, #528]	@ (801f510 <_dtoa_r+0xb80>)
 801f300:	4602      	mov	r2, r0
 801f302:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f306:	f7ff bb5a 	b.w	801e9be <_dtoa_r+0x2e>
 801f30a:	692a      	ldr	r2, [r5, #16]
 801f30c:	3202      	adds	r2, #2
 801f30e:	0092      	lsls	r2, r2, #2
 801f310:	f105 010c 	add.w	r1, r5, #12
 801f314:	300c      	adds	r0, #12
 801f316:	f7ff fa86 	bl	801e826 <memcpy>
 801f31a:	2201      	movs	r2, #1
 801f31c:	4631      	mov	r1, r6
 801f31e:	4658      	mov	r0, fp
 801f320:	f000 fc08 	bl	801fb34 <__lshift>
 801f324:	f10a 0301 	add.w	r3, sl, #1
 801f328:	9307      	str	r3, [sp, #28]
 801f32a:	9b00      	ldr	r3, [sp, #0]
 801f32c:	4453      	add	r3, sl
 801f32e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f330:	9b02      	ldr	r3, [sp, #8]
 801f332:	f003 0301 	and.w	r3, r3, #1
 801f336:	462f      	mov	r7, r5
 801f338:	930a      	str	r3, [sp, #40]	@ 0x28
 801f33a:	4605      	mov	r5, r0
 801f33c:	9b07      	ldr	r3, [sp, #28]
 801f33e:	4621      	mov	r1, r4
 801f340:	3b01      	subs	r3, #1
 801f342:	4648      	mov	r0, r9
 801f344:	9300      	str	r3, [sp, #0]
 801f346:	f7ff fa9b 	bl	801e880 <quorem>
 801f34a:	4639      	mov	r1, r7
 801f34c:	9002      	str	r0, [sp, #8]
 801f34e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f352:	4648      	mov	r0, r9
 801f354:	f000 fc5a 	bl	801fc0c <__mcmp>
 801f358:	462a      	mov	r2, r5
 801f35a:	9008      	str	r0, [sp, #32]
 801f35c:	4621      	mov	r1, r4
 801f35e:	4658      	mov	r0, fp
 801f360:	f000 fc70 	bl	801fc44 <__mdiff>
 801f364:	68c2      	ldr	r2, [r0, #12]
 801f366:	4606      	mov	r6, r0
 801f368:	bb02      	cbnz	r2, 801f3ac <_dtoa_r+0xa1c>
 801f36a:	4601      	mov	r1, r0
 801f36c:	4648      	mov	r0, r9
 801f36e:	f000 fc4d 	bl	801fc0c <__mcmp>
 801f372:	4602      	mov	r2, r0
 801f374:	4631      	mov	r1, r6
 801f376:	4658      	mov	r0, fp
 801f378:	920e      	str	r2, [sp, #56]	@ 0x38
 801f37a:	f000 fa0d 	bl	801f798 <_Bfree>
 801f37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f382:	9e07      	ldr	r6, [sp, #28]
 801f384:	ea43 0102 	orr.w	r1, r3, r2
 801f388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f38a:	4319      	orrs	r1, r3
 801f38c:	d110      	bne.n	801f3b0 <_dtoa_r+0xa20>
 801f38e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f392:	d029      	beq.n	801f3e8 <_dtoa_r+0xa58>
 801f394:	9b08      	ldr	r3, [sp, #32]
 801f396:	2b00      	cmp	r3, #0
 801f398:	dd02      	ble.n	801f3a0 <_dtoa_r+0xa10>
 801f39a:	9b02      	ldr	r3, [sp, #8]
 801f39c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f3a0:	9b00      	ldr	r3, [sp, #0]
 801f3a2:	f883 8000 	strb.w	r8, [r3]
 801f3a6:	e63f      	b.n	801f028 <_dtoa_r+0x698>
 801f3a8:	4628      	mov	r0, r5
 801f3aa:	e7bb      	b.n	801f324 <_dtoa_r+0x994>
 801f3ac:	2201      	movs	r2, #1
 801f3ae:	e7e1      	b.n	801f374 <_dtoa_r+0x9e4>
 801f3b0:	9b08      	ldr	r3, [sp, #32]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	db04      	blt.n	801f3c0 <_dtoa_r+0xa30>
 801f3b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f3b8:	430b      	orrs	r3, r1
 801f3ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f3bc:	430b      	orrs	r3, r1
 801f3be:	d120      	bne.n	801f402 <_dtoa_r+0xa72>
 801f3c0:	2a00      	cmp	r2, #0
 801f3c2:	dded      	ble.n	801f3a0 <_dtoa_r+0xa10>
 801f3c4:	4649      	mov	r1, r9
 801f3c6:	2201      	movs	r2, #1
 801f3c8:	4658      	mov	r0, fp
 801f3ca:	f000 fbb3 	bl	801fb34 <__lshift>
 801f3ce:	4621      	mov	r1, r4
 801f3d0:	4681      	mov	r9, r0
 801f3d2:	f000 fc1b 	bl	801fc0c <__mcmp>
 801f3d6:	2800      	cmp	r0, #0
 801f3d8:	dc03      	bgt.n	801f3e2 <_dtoa_r+0xa52>
 801f3da:	d1e1      	bne.n	801f3a0 <_dtoa_r+0xa10>
 801f3dc:	f018 0f01 	tst.w	r8, #1
 801f3e0:	d0de      	beq.n	801f3a0 <_dtoa_r+0xa10>
 801f3e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f3e6:	d1d8      	bne.n	801f39a <_dtoa_r+0xa0a>
 801f3e8:	9a00      	ldr	r2, [sp, #0]
 801f3ea:	2339      	movs	r3, #57	@ 0x39
 801f3ec:	7013      	strb	r3, [r2, #0]
 801f3ee:	4633      	mov	r3, r6
 801f3f0:	461e      	mov	r6, r3
 801f3f2:	3b01      	subs	r3, #1
 801f3f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f3f8:	2a39      	cmp	r2, #57	@ 0x39
 801f3fa:	d052      	beq.n	801f4a2 <_dtoa_r+0xb12>
 801f3fc:	3201      	adds	r2, #1
 801f3fe:	701a      	strb	r2, [r3, #0]
 801f400:	e612      	b.n	801f028 <_dtoa_r+0x698>
 801f402:	2a00      	cmp	r2, #0
 801f404:	dd07      	ble.n	801f416 <_dtoa_r+0xa86>
 801f406:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f40a:	d0ed      	beq.n	801f3e8 <_dtoa_r+0xa58>
 801f40c:	9a00      	ldr	r2, [sp, #0]
 801f40e:	f108 0301 	add.w	r3, r8, #1
 801f412:	7013      	strb	r3, [r2, #0]
 801f414:	e608      	b.n	801f028 <_dtoa_r+0x698>
 801f416:	9b07      	ldr	r3, [sp, #28]
 801f418:	9a07      	ldr	r2, [sp, #28]
 801f41a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f420:	4293      	cmp	r3, r2
 801f422:	d028      	beq.n	801f476 <_dtoa_r+0xae6>
 801f424:	4649      	mov	r1, r9
 801f426:	2300      	movs	r3, #0
 801f428:	220a      	movs	r2, #10
 801f42a:	4658      	mov	r0, fp
 801f42c:	f000 f9d6 	bl	801f7dc <__multadd>
 801f430:	42af      	cmp	r7, r5
 801f432:	4681      	mov	r9, r0
 801f434:	f04f 0300 	mov.w	r3, #0
 801f438:	f04f 020a 	mov.w	r2, #10
 801f43c:	4639      	mov	r1, r7
 801f43e:	4658      	mov	r0, fp
 801f440:	d107      	bne.n	801f452 <_dtoa_r+0xac2>
 801f442:	f000 f9cb 	bl	801f7dc <__multadd>
 801f446:	4607      	mov	r7, r0
 801f448:	4605      	mov	r5, r0
 801f44a:	9b07      	ldr	r3, [sp, #28]
 801f44c:	3301      	adds	r3, #1
 801f44e:	9307      	str	r3, [sp, #28]
 801f450:	e774      	b.n	801f33c <_dtoa_r+0x9ac>
 801f452:	f000 f9c3 	bl	801f7dc <__multadd>
 801f456:	4629      	mov	r1, r5
 801f458:	4607      	mov	r7, r0
 801f45a:	2300      	movs	r3, #0
 801f45c:	220a      	movs	r2, #10
 801f45e:	4658      	mov	r0, fp
 801f460:	f000 f9bc 	bl	801f7dc <__multadd>
 801f464:	4605      	mov	r5, r0
 801f466:	e7f0      	b.n	801f44a <_dtoa_r+0xaba>
 801f468:	9b00      	ldr	r3, [sp, #0]
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	bfcc      	ite	gt
 801f46e:	461e      	movgt	r6, r3
 801f470:	2601      	movle	r6, #1
 801f472:	4456      	add	r6, sl
 801f474:	2700      	movs	r7, #0
 801f476:	4649      	mov	r1, r9
 801f478:	2201      	movs	r2, #1
 801f47a:	4658      	mov	r0, fp
 801f47c:	f000 fb5a 	bl	801fb34 <__lshift>
 801f480:	4621      	mov	r1, r4
 801f482:	4681      	mov	r9, r0
 801f484:	f000 fbc2 	bl	801fc0c <__mcmp>
 801f488:	2800      	cmp	r0, #0
 801f48a:	dcb0      	bgt.n	801f3ee <_dtoa_r+0xa5e>
 801f48c:	d102      	bne.n	801f494 <_dtoa_r+0xb04>
 801f48e:	f018 0f01 	tst.w	r8, #1
 801f492:	d1ac      	bne.n	801f3ee <_dtoa_r+0xa5e>
 801f494:	4633      	mov	r3, r6
 801f496:	461e      	mov	r6, r3
 801f498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f49c:	2a30      	cmp	r2, #48	@ 0x30
 801f49e:	d0fa      	beq.n	801f496 <_dtoa_r+0xb06>
 801f4a0:	e5c2      	b.n	801f028 <_dtoa_r+0x698>
 801f4a2:	459a      	cmp	sl, r3
 801f4a4:	d1a4      	bne.n	801f3f0 <_dtoa_r+0xa60>
 801f4a6:	9b04      	ldr	r3, [sp, #16]
 801f4a8:	3301      	adds	r3, #1
 801f4aa:	9304      	str	r3, [sp, #16]
 801f4ac:	2331      	movs	r3, #49	@ 0x31
 801f4ae:	f88a 3000 	strb.w	r3, [sl]
 801f4b2:	e5b9      	b.n	801f028 <_dtoa_r+0x698>
 801f4b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f4b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801f514 <_dtoa_r+0xb84>
 801f4ba:	b11b      	cbz	r3, 801f4c4 <_dtoa_r+0xb34>
 801f4bc:	f10a 0308 	add.w	r3, sl, #8
 801f4c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f4c2:	6013      	str	r3, [r2, #0]
 801f4c4:	4650      	mov	r0, sl
 801f4c6:	b019      	add	sp, #100	@ 0x64
 801f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4ce:	2b01      	cmp	r3, #1
 801f4d0:	f77f ae37 	ble.w	801f142 <_dtoa_r+0x7b2>
 801f4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f4d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f4d8:	2001      	movs	r0, #1
 801f4da:	e655      	b.n	801f188 <_dtoa_r+0x7f8>
 801f4dc:	9b00      	ldr	r3, [sp, #0]
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	f77f aed6 	ble.w	801f290 <_dtoa_r+0x900>
 801f4e4:	4656      	mov	r6, sl
 801f4e6:	4621      	mov	r1, r4
 801f4e8:	4648      	mov	r0, r9
 801f4ea:	f7ff f9c9 	bl	801e880 <quorem>
 801f4ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f4f2:	f806 8b01 	strb.w	r8, [r6], #1
 801f4f6:	9b00      	ldr	r3, [sp, #0]
 801f4f8:	eba6 020a 	sub.w	r2, r6, sl
 801f4fc:	4293      	cmp	r3, r2
 801f4fe:	ddb3      	ble.n	801f468 <_dtoa_r+0xad8>
 801f500:	4649      	mov	r1, r9
 801f502:	2300      	movs	r3, #0
 801f504:	220a      	movs	r2, #10
 801f506:	4658      	mov	r0, fp
 801f508:	f000 f968 	bl	801f7dc <__multadd>
 801f50c:	4681      	mov	r9, r0
 801f50e:	e7ea      	b.n	801f4e6 <_dtoa_r+0xb56>
 801f510:	0802491b 	.word	0x0802491b
 801f514:	080248b6 	.word	0x080248b6

0801f518 <_free_r>:
 801f518:	b538      	push	{r3, r4, r5, lr}
 801f51a:	4605      	mov	r5, r0
 801f51c:	2900      	cmp	r1, #0
 801f51e:	d041      	beq.n	801f5a4 <_free_r+0x8c>
 801f520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f524:	1f0c      	subs	r4, r1, #4
 801f526:	2b00      	cmp	r3, #0
 801f528:	bfb8      	it	lt
 801f52a:	18e4      	addlt	r4, r4, r3
 801f52c:	f000 f8e8 	bl	801f700 <__malloc_lock>
 801f530:	4a1d      	ldr	r2, [pc, #116]	@ (801f5a8 <_free_r+0x90>)
 801f532:	6813      	ldr	r3, [r2, #0]
 801f534:	b933      	cbnz	r3, 801f544 <_free_r+0x2c>
 801f536:	6063      	str	r3, [r4, #4]
 801f538:	6014      	str	r4, [r2, #0]
 801f53a:	4628      	mov	r0, r5
 801f53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f540:	f000 b8e4 	b.w	801f70c <__malloc_unlock>
 801f544:	42a3      	cmp	r3, r4
 801f546:	d908      	bls.n	801f55a <_free_r+0x42>
 801f548:	6820      	ldr	r0, [r4, #0]
 801f54a:	1821      	adds	r1, r4, r0
 801f54c:	428b      	cmp	r3, r1
 801f54e:	bf01      	itttt	eq
 801f550:	6819      	ldreq	r1, [r3, #0]
 801f552:	685b      	ldreq	r3, [r3, #4]
 801f554:	1809      	addeq	r1, r1, r0
 801f556:	6021      	streq	r1, [r4, #0]
 801f558:	e7ed      	b.n	801f536 <_free_r+0x1e>
 801f55a:	461a      	mov	r2, r3
 801f55c:	685b      	ldr	r3, [r3, #4]
 801f55e:	b10b      	cbz	r3, 801f564 <_free_r+0x4c>
 801f560:	42a3      	cmp	r3, r4
 801f562:	d9fa      	bls.n	801f55a <_free_r+0x42>
 801f564:	6811      	ldr	r1, [r2, #0]
 801f566:	1850      	adds	r0, r2, r1
 801f568:	42a0      	cmp	r0, r4
 801f56a:	d10b      	bne.n	801f584 <_free_r+0x6c>
 801f56c:	6820      	ldr	r0, [r4, #0]
 801f56e:	4401      	add	r1, r0
 801f570:	1850      	adds	r0, r2, r1
 801f572:	4283      	cmp	r3, r0
 801f574:	6011      	str	r1, [r2, #0]
 801f576:	d1e0      	bne.n	801f53a <_free_r+0x22>
 801f578:	6818      	ldr	r0, [r3, #0]
 801f57a:	685b      	ldr	r3, [r3, #4]
 801f57c:	6053      	str	r3, [r2, #4]
 801f57e:	4408      	add	r0, r1
 801f580:	6010      	str	r0, [r2, #0]
 801f582:	e7da      	b.n	801f53a <_free_r+0x22>
 801f584:	d902      	bls.n	801f58c <_free_r+0x74>
 801f586:	230c      	movs	r3, #12
 801f588:	602b      	str	r3, [r5, #0]
 801f58a:	e7d6      	b.n	801f53a <_free_r+0x22>
 801f58c:	6820      	ldr	r0, [r4, #0]
 801f58e:	1821      	adds	r1, r4, r0
 801f590:	428b      	cmp	r3, r1
 801f592:	bf04      	itt	eq
 801f594:	6819      	ldreq	r1, [r3, #0]
 801f596:	685b      	ldreq	r3, [r3, #4]
 801f598:	6063      	str	r3, [r4, #4]
 801f59a:	bf04      	itt	eq
 801f59c:	1809      	addeq	r1, r1, r0
 801f59e:	6021      	streq	r1, [r4, #0]
 801f5a0:	6054      	str	r4, [r2, #4]
 801f5a2:	e7ca      	b.n	801f53a <_free_r+0x22>
 801f5a4:	bd38      	pop	{r3, r4, r5, pc}
 801f5a6:	bf00      	nop
 801f5a8:	2000ff64 	.word	0x2000ff64

0801f5ac <malloc>:
 801f5ac:	4b02      	ldr	r3, [pc, #8]	@ (801f5b8 <malloc+0xc>)
 801f5ae:	4601      	mov	r1, r0
 801f5b0:	6818      	ldr	r0, [r3, #0]
 801f5b2:	f000 b825 	b.w	801f600 <_malloc_r>
 801f5b6:	bf00      	nop
 801f5b8:	2000003c 	.word	0x2000003c

0801f5bc <sbrk_aligned>:
 801f5bc:	b570      	push	{r4, r5, r6, lr}
 801f5be:	4e0f      	ldr	r6, [pc, #60]	@ (801f5fc <sbrk_aligned+0x40>)
 801f5c0:	460c      	mov	r4, r1
 801f5c2:	6831      	ldr	r1, [r6, #0]
 801f5c4:	4605      	mov	r5, r0
 801f5c6:	b911      	cbnz	r1, 801f5ce <sbrk_aligned+0x12>
 801f5c8:	f001 f804 	bl	80205d4 <_sbrk_r>
 801f5cc:	6030      	str	r0, [r6, #0]
 801f5ce:	4621      	mov	r1, r4
 801f5d0:	4628      	mov	r0, r5
 801f5d2:	f000 ffff 	bl	80205d4 <_sbrk_r>
 801f5d6:	1c43      	adds	r3, r0, #1
 801f5d8:	d103      	bne.n	801f5e2 <sbrk_aligned+0x26>
 801f5da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801f5de:	4620      	mov	r0, r4
 801f5e0:	bd70      	pop	{r4, r5, r6, pc}
 801f5e2:	1cc4      	adds	r4, r0, #3
 801f5e4:	f024 0403 	bic.w	r4, r4, #3
 801f5e8:	42a0      	cmp	r0, r4
 801f5ea:	d0f8      	beq.n	801f5de <sbrk_aligned+0x22>
 801f5ec:	1a21      	subs	r1, r4, r0
 801f5ee:	4628      	mov	r0, r5
 801f5f0:	f000 fff0 	bl	80205d4 <_sbrk_r>
 801f5f4:	3001      	adds	r0, #1
 801f5f6:	d1f2      	bne.n	801f5de <sbrk_aligned+0x22>
 801f5f8:	e7ef      	b.n	801f5da <sbrk_aligned+0x1e>
 801f5fa:	bf00      	nop
 801f5fc:	2000ff60 	.word	0x2000ff60

0801f600 <_malloc_r>:
 801f600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f604:	1ccd      	adds	r5, r1, #3
 801f606:	f025 0503 	bic.w	r5, r5, #3
 801f60a:	3508      	adds	r5, #8
 801f60c:	2d0c      	cmp	r5, #12
 801f60e:	bf38      	it	cc
 801f610:	250c      	movcc	r5, #12
 801f612:	2d00      	cmp	r5, #0
 801f614:	4606      	mov	r6, r0
 801f616:	db01      	blt.n	801f61c <_malloc_r+0x1c>
 801f618:	42a9      	cmp	r1, r5
 801f61a:	d904      	bls.n	801f626 <_malloc_r+0x26>
 801f61c:	230c      	movs	r3, #12
 801f61e:	6033      	str	r3, [r6, #0]
 801f620:	2000      	movs	r0, #0
 801f622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f6fc <_malloc_r+0xfc>
 801f62a:	f000 f869 	bl	801f700 <__malloc_lock>
 801f62e:	f8d8 3000 	ldr.w	r3, [r8]
 801f632:	461c      	mov	r4, r3
 801f634:	bb44      	cbnz	r4, 801f688 <_malloc_r+0x88>
 801f636:	4629      	mov	r1, r5
 801f638:	4630      	mov	r0, r6
 801f63a:	f7ff ffbf 	bl	801f5bc <sbrk_aligned>
 801f63e:	1c43      	adds	r3, r0, #1
 801f640:	4604      	mov	r4, r0
 801f642:	d158      	bne.n	801f6f6 <_malloc_r+0xf6>
 801f644:	f8d8 4000 	ldr.w	r4, [r8]
 801f648:	4627      	mov	r7, r4
 801f64a:	2f00      	cmp	r7, #0
 801f64c:	d143      	bne.n	801f6d6 <_malloc_r+0xd6>
 801f64e:	2c00      	cmp	r4, #0
 801f650:	d04b      	beq.n	801f6ea <_malloc_r+0xea>
 801f652:	6823      	ldr	r3, [r4, #0]
 801f654:	4639      	mov	r1, r7
 801f656:	4630      	mov	r0, r6
 801f658:	eb04 0903 	add.w	r9, r4, r3
 801f65c:	f000 ffba 	bl	80205d4 <_sbrk_r>
 801f660:	4581      	cmp	r9, r0
 801f662:	d142      	bne.n	801f6ea <_malloc_r+0xea>
 801f664:	6821      	ldr	r1, [r4, #0]
 801f666:	1a6d      	subs	r5, r5, r1
 801f668:	4629      	mov	r1, r5
 801f66a:	4630      	mov	r0, r6
 801f66c:	f7ff ffa6 	bl	801f5bc <sbrk_aligned>
 801f670:	3001      	adds	r0, #1
 801f672:	d03a      	beq.n	801f6ea <_malloc_r+0xea>
 801f674:	6823      	ldr	r3, [r4, #0]
 801f676:	442b      	add	r3, r5
 801f678:	6023      	str	r3, [r4, #0]
 801f67a:	f8d8 3000 	ldr.w	r3, [r8]
 801f67e:	685a      	ldr	r2, [r3, #4]
 801f680:	bb62      	cbnz	r2, 801f6dc <_malloc_r+0xdc>
 801f682:	f8c8 7000 	str.w	r7, [r8]
 801f686:	e00f      	b.n	801f6a8 <_malloc_r+0xa8>
 801f688:	6822      	ldr	r2, [r4, #0]
 801f68a:	1b52      	subs	r2, r2, r5
 801f68c:	d420      	bmi.n	801f6d0 <_malloc_r+0xd0>
 801f68e:	2a0b      	cmp	r2, #11
 801f690:	d917      	bls.n	801f6c2 <_malloc_r+0xc2>
 801f692:	1961      	adds	r1, r4, r5
 801f694:	42a3      	cmp	r3, r4
 801f696:	6025      	str	r5, [r4, #0]
 801f698:	bf18      	it	ne
 801f69a:	6059      	strne	r1, [r3, #4]
 801f69c:	6863      	ldr	r3, [r4, #4]
 801f69e:	bf08      	it	eq
 801f6a0:	f8c8 1000 	streq.w	r1, [r8]
 801f6a4:	5162      	str	r2, [r4, r5]
 801f6a6:	604b      	str	r3, [r1, #4]
 801f6a8:	4630      	mov	r0, r6
 801f6aa:	f000 f82f 	bl	801f70c <__malloc_unlock>
 801f6ae:	f104 000b 	add.w	r0, r4, #11
 801f6b2:	1d23      	adds	r3, r4, #4
 801f6b4:	f020 0007 	bic.w	r0, r0, #7
 801f6b8:	1ac2      	subs	r2, r0, r3
 801f6ba:	bf1c      	itt	ne
 801f6bc:	1a1b      	subne	r3, r3, r0
 801f6be:	50a3      	strne	r3, [r4, r2]
 801f6c0:	e7af      	b.n	801f622 <_malloc_r+0x22>
 801f6c2:	6862      	ldr	r2, [r4, #4]
 801f6c4:	42a3      	cmp	r3, r4
 801f6c6:	bf0c      	ite	eq
 801f6c8:	f8c8 2000 	streq.w	r2, [r8]
 801f6cc:	605a      	strne	r2, [r3, #4]
 801f6ce:	e7eb      	b.n	801f6a8 <_malloc_r+0xa8>
 801f6d0:	4623      	mov	r3, r4
 801f6d2:	6864      	ldr	r4, [r4, #4]
 801f6d4:	e7ae      	b.n	801f634 <_malloc_r+0x34>
 801f6d6:	463c      	mov	r4, r7
 801f6d8:	687f      	ldr	r7, [r7, #4]
 801f6da:	e7b6      	b.n	801f64a <_malloc_r+0x4a>
 801f6dc:	461a      	mov	r2, r3
 801f6de:	685b      	ldr	r3, [r3, #4]
 801f6e0:	42a3      	cmp	r3, r4
 801f6e2:	d1fb      	bne.n	801f6dc <_malloc_r+0xdc>
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	6053      	str	r3, [r2, #4]
 801f6e8:	e7de      	b.n	801f6a8 <_malloc_r+0xa8>
 801f6ea:	230c      	movs	r3, #12
 801f6ec:	6033      	str	r3, [r6, #0]
 801f6ee:	4630      	mov	r0, r6
 801f6f0:	f000 f80c 	bl	801f70c <__malloc_unlock>
 801f6f4:	e794      	b.n	801f620 <_malloc_r+0x20>
 801f6f6:	6005      	str	r5, [r0, #0]
 801f6f8:	e7d6      	b.n	801f6a8 <_malloc_r+0xa8>
 801f6fa:	bf00      	nop
 801f6fc:	2000ff64 	.word	0x2000ff64

0801f700 <__malloc_lock>:
 801f700:	4801      	ldr	r0, [pc, #4]	@ (801f708 <__malloc_lock+0x8>)
 801f702:	f7ff b88e 	b.w	801e822 <__retarget_lock_acquire_recursive>
 801f706:	bf00      	nop
 801f708:	2000ff5c 	.word	0x2000ff5c

0801f70c <__malloc_unlock>:
 801f70c:	4801      	ldr	r0, [pc, #4]	@ (801f714 <__malloc_unlock+0x8>)
 801f70e:	f7ff b889 	b.w	801e824 <__retarget_lock_release_recursive>
 801f712:	bf00      	nop
 801f714:	2000ff5c 	.word	0x2000ff5c

0801f718 <_Balloc>:
 801f718:	b570      	push	{r4, r5, r6, lr}
 801f71a:	69c6      	ldr	r6, [r0, #28]
 801f71c:	4604      	mov	r4, r0
 801f71e:	460d      	mov	r5, r1
 801f720:	b976      	cbnz	r6, 801f740 <_Balloc+0x28>
 801f722:	2010      	movs	r0, #16
 801f724:	f7ff ff42 	bl	801f5ac <malloc>
 801f728:	4602      	mov	r2, r0
 801f72a:	61e0      	str	r0, [r4, #28]
 801f72c:	b920      	cbnz	r0, 801f738 <_Balloc+0x20>
 801f72e:	4b18      	ldr	r3, [pc, #96]	@ (801f790 <_Balloc+0x78>)
 801f730:	4818      	ldr	r0, [pc, #96]	@ (801f794 <_Balloc+0x7c>)
 801f732:	216b      	movs	r1, #107	@ 0x6b
 801f734:	f7ff f886 	bl	801e844 <__assert_func>
 801f738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f73c:	6006      	str	r6, [r0, #0]
 801f73e:	60c6      	str	r6, [r0, #12]
 801f740:	69e6      	ldr	r6, [r4, #28]
 801f742:	68f3      	ldr	r3, [r6, #12]
 801f744:	b183      	cbz	r3, 801f768 <_Balloc+0x50>
 801f746:	69e3      	ldr	r3, [r4, #28]
 801f748:	68db      	ldr	r3, [r3, #12]
 801f74a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f74e:	b9b8      	cbnz	r0, 801f780 <_Balloc+0x68>
 801f750:	2101      	movs	r1, #1
 801f752:	fa01 f605 	lsl.w	r6, r1, r5
 801f756:	1d72      	adds	r2, r6, #5
 801f758:	0092      	lsls	r2, r2, #2
 801f75a:	4620      	mov	r0, r4
 801f75c:	f000 ff51 	bl	8020602 <_calloc_r>
 801f760:	b160      	cbz	r0, 801f77c <_Balloc+0x64>
 801f762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f766:	e00e      	b.n	801f786 <_Balloc+0x6e>
 801f768:	2221      	movs	r2, #33	@ 0x21
 801f76a:	2104      	movs	r1, #4
 801f76c:	4620      	mov	r0, r4
 801f76e:	f000 ff48 	bl	8020602 <_calloc_r>
 801f772:	69e3      	ldr	r3, [r4, #28]
 801f774:	60f0      	str	r0, [r6, #12]
 801f776:	68db      	ldr	r3, [r3, #12]
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d1e4      	bne.n	801f746 <_Balloc+0x2e>
 801f77c:	2000      	movs	r0, #0
 801f77e:	bd70      	pop	{r4, r5, r6, pc}
 801f780:	6802      	ldr	r2, [r0, #0]
 801f782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f786:	2300      	movs	r3, #0
 801f788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f78c:	e7f7      	b.n	801f77e <_Balloc+0x66>
 801f78e:	bf00      	nop
 801f790:	080246d6 	.word	0x080246d6
 801f794:	0802492c 	.word	0x0802492c

0801f798 <_Bfree>:
 801f798:	b570      	push	{r4, r5, r6, lr}
 801f79a:	69c6      	ldr	r6, [r0, #28]
 801f79c:	4605      	mov	r5, r0
 801f79e:	460c      	mov	r4, r1
 801f7a0:	b976      	cbnz	r6, 801f7c0 <_Bfree+0x28>
 801f7a2:	2010      	movs	r0, #16
 801f7a4:	f7ff ff02 	bl	801f5ac <malloc>
 801f7a8:	4602      	mov	r2, r0
 801f7aa:	61e8      	str	r0, [r5, #28]
 801f7ac:	b920      	cbnz	r0, 801f7b8 <_Bfree+0x20>
 801f7ae:	4b09      	ldr	r3, [pc, #36]	@ (801f7d4 <_Bfree+0x3c>)
 801f7b0:	4809      	ldr	r0, [pc, #36]	@ (801f7d8 <_Bfree+0x40>)
 801f7b2:	218f      	movs	r1, #143	@ 0x8f
 801f7b4:	f7ff f846 	bl	801e844 <__assert_func>
 801f7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f7bc:	6006      	str	r6, [r0, #0]
 801f7be:	60c6      	str	r6, [r0, #12]
 801f7c0:	b13c      	cbz	r4, 801f7d2 <_Bfree+0x3a>
 801f7c2:	69eb      	ldr	r3, [r5, #28]
 801f7c4:	6862      	ldr	r2, [r4, #4]
 801f7c6:	68db      	ldr	r3, [r3, #12]
 801f7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f7cc:	6021      	str	r1, [r4, #0]
 801f7ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f7d2:	bd70      	pop	{r4, r5, r6, pc}
 801f7d4:	080246d6 	.word	0x080246d6
 801f7d8:	0802492c 	.word	0x0802492c

0801f7dc <__multadd>:
 801f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7e0:	690d      	ldr	r5, [r1, #16]
 801f7e2:	4607      	mov	r7, r0
 801f7e4:	460c      	mov	r4, r1
 801f7e6:	461e      	mov	r6, r3
 801f7e8:	f101 0c14 	add.w	ip, r1, #20
 801f7ec:	2000      	movs	r0, #0
 801f7ee:	f8dc 3000 	ldr.w	r3, [ip]
 801f7f2:	b299      	uxth	r1, r3
 801f7f4:	fb02 6101 	mla	r1, r2, r1, r6
 801f7f8:	0c1e      	lsrs	r6, r3, #16
 801f7fa:	0c0b      	lsrs	r3, r1, #16
 801f7fc:	fb02 3306 	mla	r3, r2, r6, r3
 801f800:	b289      	uxth	r1, r1
 801f802:	3001      	adds	r0, #1
 801f804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f808:	4285      	cmp	r5, r0
 801f80a:	f84c 1b04 	str.w	r1, [ip], #4
 801f80e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f812:	dcec      	bgt.n	801f7ee <__multadd+0x12>
 801f814:	b30e      	cbz	r6, 801f85a <__multadd+0x7e>
 801f816:	68a3      	ldr	r3, [r4, #8]
 801f818:	42ab      	cmp	r3, r5
 801f81a:	dc19      	bgt.n	801f850 <__multadd+0x74>
 801f81c:	6861      	ldr	r1, [r4, #4]
 801f81e:	4638      	mov	r0, r7
 801f820:	3101      	adds	r1, #1
 801f822:	f7ff ff79 	bl	801f718 <_Balloc>
 801f826:	4680      	mov	r8, r0
 801f828:	b928      	cbnz	r0, 801f836 <__multadd+0x5a>
 801f82a:	4602      	mov	r2, r0
 801f82c:	4b0c      	ldr	r3, [pc, #48]	@ (801f860 <__multadd+0x84>)
 801f82e:	480d      	ldr	r0, [pc, #52]	@ (801f864 <__multadd+0x88>)
 801f830:	21ba      	movs	r1, #186	@ 0xba
 801f832:	f7ff f807 	bl	801e844 <__assert_func>
 801f836:	6922      	ldr	r2, [r4, #16]
 801f838:	3202      	adds	r2, #2
 801f83a:	f104 010c 	add.w	r1, r4, #12
 801f83e:	0092      	lsls	r2, r2, #2
 801f840:	300c      	adds	r0, #12
 801f842:	f7fe fff0 	bl	801e826 <memcpy>
 801f846:	4621      	mov	r1, r4
 801f848:	4638      	mov	r0, r7
 801f84a:	f7ff ffa5 	bl	801f798 <_Bfree>
 801f84e:	4644      	mov	r4, r8
 801f850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f854:	3501      	adds	r5, #1
 801f856:	615e      	str	r6, [r3, #20]
 801f858:	6125      	str	r5, [r4, #16]
 801f85a:	4620      	mov	r0, r4
 801f85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f860:	0802491b 	.word	0x0802491b
 801f864:	0802492c 	.word	0x0802492c

0801f868 <__hi0bits>:
 801f868:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f86c:	4603      	mov	r3, r0
 801f86e:	bf36      	itet	cc
 801f870:	0403      	lslcc	r3, r0, #16
 801f872:	2000      	movcs	r0, #0
 801f874:	2010      	movcc	r0, #16
 801f876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f87a:	bf3c      	itt	cc
 801f87c:	021b      	lslcc	r3, r3, #8
 801f87e:	3008      	addcc	r0, #8
 801f880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f884:	bf3c      	itt	cc
 801f886:	011b      	lslcc	r3, r3, #4
 801f888:	3004      	addcc	r0, #4
 801f88a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f88e:	bf3c      	itt	cc
 801f890:	009b      	lslcc	r3, r3, #2
 801f892:	3002      	addcc	r0, #2
 801f894:	2b00      	cmp	r3, #0
 801f896:	db05      	blt.n	801f8a4 <__hi0bits+0x3c>
 801f898:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f89c:	f100 0001 	add.w	r0, r0, #1
 801f8a0:	bf08      	it	eq
 801f8a2:	2020      	moveq	r0, #32
 801f8a4:	4770      	bx	lr

0801f8a6 <__lo0bits>:
 801f8a6:	6803      	ldr	r3, [r0, #0]
 801f8a8:	4602      	mov	r2, r0
 801f8aa:	f013 0007 	ands.w	r0, r3, #7
 801f8ae:	d00b      	beq.n	801f8c8 <__lo0bits+0x22>
 801f8b0:	07d9      	lsls	r1, r3, #31
 801f8b2:	d421      	bmi.n	801f8f8 <__lo0bits+0x52>
 801f8b4:	0798      	lsls	r0, r3, #30
 801f8b6:	bf49      	itett	mi
 801f8b8:	085b      	lsrmi	r3, r3, #1
 801f8ba:	089b      	lsrpl	r3, r3, #2
 801f8bc:	2001      	movmi	r0, #1
 801f8be:	6013      	strmi	r3, [r2, #0]
 801f8c0:	bf5c      	itt	pl
 801f8c2:	6013      	strpl	r3, [r2, #0]
 801f8c4:	2002      	movpl	r0, #2
 801f8c6:	4770      	bx	lr
 801f8c8:	b299      	uxth	r1, r3
 801f8ca:	b909      	cbnz	r1, 801f8d0 <__lo0bits+0x2a>
 801f8cc:	0c1b      	lsrs	r3, r3, #16
 801f8ce:	2010      	movs	r0, #16
 801f8d0:	b2d9      	uxtb	r1, r3
 801f8d2:	b909      	cbnz	r1, 801f8d8 <__lo0bits+0x32>
 801f8d4:	3008      	adds	r0, #8
 801f8d6:	0a1b      	lsrs	r3, r3, #8
 801f8d8:	0719      	lsls	r1, r3, #28
 801f8da:	bf04      	itt	eq
 801f8dc:	091b      	lsreq	r3, r3, #4
 801f8de:	3004      	addeq	r0, #4
 801f8e0:	0799      	lsls	r1, r3, #30
 801f8e2:	bf04      	itt	eq
 801f8e4:	089b      	lsreq	r3, r3, #2
 801f8e6:	3002      	addeq	r0, #2
 801f8e8:	07d9      	lsls	r1, r3, #31
 801f8ea:	d403      	bmi.n	801f8f4 <__lo0bits+0x4e>
 801f8ec:	085b      	lsrs	r3, r3, #1
 801f8ee:	f100 0001 	add.w	r0, r0, #1
 801f8f2:	d003      	beq.n	801f8fc <__lo0bits+0x56>
 801f8f4:	6013      	str	r3, [r2, #0]
 801f8f6:	4770      	bx	lr
 801f8f8:	2000      	movs	r0, #0
 801f8fa:	4770      	bx	lr
 801f8fc:	2020      	movs	r0, #32
 801f8fe:	4770      	bx	lr

0801f900 <__i2b>:
 801f900:	b510      	push	{r4, lr}
 801f902:	460c      	mov	r4, r1
 801f904:	2101      	movs	r1, #1
 801f906:	f7ff ff07 	bl	801f718 <_Balloc>
 801f90a:	4602      	mov	r2, r0
 801f90c:	b928      	cbnz	r0, 801f91a <__i2b+0x1a>
 801f90e:	4b05      	ldr	r3, [pc, #20]	@ (801f924 <__i2b+0x24>)
 801f910:	4805      	ldr	r0, [pc, #20]	@ (801f928 <__i2b+0x28>)
 801f912:	f240 1145 	movw	r1, #325	@ 0x145
 801f916:	f7fe ff95 	bl	801e844 <__assert_func>
 801f91a:	2301      	movs	r3, #1
 801f91c:	6144      	str	r4, [r0, #20]
 801f91e:	6103      	str	r3, [r0, #16]
 801f920:	bd10      	pop	{r4, pc}
 801f922:	bf00      	nop
 801f924:	0802491b 	.word	0x0802491b
 801f928:	0802492c 	.word	0x0802492c

0801f92c <__multiply>:
 801f92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f930:	4614      	mov	r4, r2
 801f932:	690a      	ldr	r2, [r1, #16]
 801f934:	6923      	ldr	r3, [r4, #16]
 801f936:	429a      	cmp	r2, r3
 801f938:	bfa8      	it	ge
 801f93a:	4623      	movge	r3, r4
 801f93c:	460f      	mov	r7, r1
 801f93e:	bfa4      	itt	ge
 801f940:	460c      	movge	r4, r1
 801f942:	461f      	movge	r7, r3
 801f944:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f948:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f94c:	68a3      	ldr	r3, [r4, #8]
 801f94e:	6861      	ldr	r1, [r4, #4]
 801f950:	eb0a 0609 	add.w	r6, sl, r9
 801f954:	42b3      	cmp	r3, r6
 801f956:	b085      	sub	sp, #20
 801f958:	bfb8      	it	lt
 801f95a:	3101      	addlt	r1, #1
 801f95c:	f7ff fedc 	bl	801f718 <_Balloc>
 801f960:	b930      	cbnz	r0, 801f970 <__multiply+0x44>
 801f962:	4602      	mov	r2, r0
 801f964:	4b44      	ldr	r3, [pc, #272]	@ (801fa78 <__multiply+0x14c>)
 801f966:	4845      	ldr	r0, [pc, #276]	@ (801fa7c <__multiply+0x150>)
 801f968:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f96c:	f7fe ff6a 	bl	801e844 <__assert_func>
 801f970:	f100 0514 	add.w	r5, r0, #20
 801f974:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f978:	462b      	mov	r3, r5
 801f97a:	2200      	movs	r2, #0
 801f97c:	4543      	cmp	r3, r8
 801f97e:	d321      	bcc.n	801f9c4 <__multiply+0x98>
 801f980:	f107 0114 	add.w	r1, r7, #20
 801f984:	f104 0214 	add.w	r2, r4, #20
 801f988:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f98c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f990:	9302      	str	r3, [sp, #8]
 801f992:	1b13      	subs	r3, r2, r4
 801f994:	3b15      	subs	r3, #21
 801f996:	f023 0303 	bic.w	r3, r3, #3
 801f99a:	3304      	adds	r3, #4
 801f99c:	f104 0715 	add.w	r7, r4, #21
 801f9a0:	42ba      	cmp	r2, r7
 801f9a2:	bf38      	it	cc
 801f9a4:	2304      	movcc	r3, #4
 801f9a6:	9301      	str	r3, [sp, #4]
 801f9a8:	9b02      	ldr	r3, [sp, #8]
 801f9aa:	9103      	str	r1, [sp, #12]
 801f9ac:	428b      	cmp	r3, r1
 801f9ae:	d80c      	bhi.n	801f9ca <__multiply+0x9e>
 801f9b0:	2e00      	cmp	r6, #0
 801f9b2:	dd03      	ble.n	801f9bc <__multiply+0x90>
 801f9b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	d05b      	beq.n	801fa74 <__multiply+0x148>
 801f9bc:	6106      	str	r6, [r0, #16]
 801f9be:	b005      	add	sp, #20
 801f9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9c4:	f843 2b04 	str.w	r2, [r3], #4
 801f9c8:	e7d8      	b.n	801f97c <__multiply+0x50>
 801f9ca:	f8b1 a000 	ldrh.w	sl, [r1]
 801f9ce:	f1ba 0f00 	cmp.w	sl, #0
 801f9d2:	d024      	beq.n	801fa1e <__multiply+0xf2>
 801f9d4:	f104 0e14 	add.w	lr, r4, #20
 801f9d8:	46a9      	mov	r9, r5
 801f9da:	f04f 0c00 	mov.w	ip, #0
 801f9de:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f9e2:	f8d9 3000 	ldr.w	r3, [r9]
 801f9e6:	fa1f fb87 	uxth.w	fp, r7
 801f9ea:	b29b      	uxth	r3, r3
 801f9ec:	fb0a 330b 	mla	r3, sl, fp, r3
 801f9f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f9f4:	f8d9 7000 	ldr.w	r7, [r9]
 801f9f8:	4463      	add	r3, ip
 801f9fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f9fe:	fb0a c70b 	mla	r7, sl, fp, ip
 801fa02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801fa06:	b29b      	uxth	r3, r3
 801fa08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fa0c:	4572      	cmp	r2, lr
 801fa0e:	f849 3b04 	str.w	r3, [r9], #4
 801fa12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801fa16:	d8e2      	bhi.n	801f9de <__multiply+0xb2>
 801fa18:	9b01      	ldr	r3, [sp, #4]
 801fa1a:	f845 c003 	str.w	ip, [r5, r3]
 801fa1e:	9b03      	ldr	r3, [sp, #12]
 801fa20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801fa24:	3104      	adds	r1, #4
 801fa26:	f1b9 0f00 	cmp.w	r9, #0
 801fa2a:	d021      	beq.n	801fa70 <__multiply+0x144>
 801fa2c:	682b      	ldr	r3, [r5, #0]
 801fa2e:	f104 0c14 	add.w	ip, r4, #20
 801fa32:	46ae      	mov	lr, r5
 801fa34:	f04f 0a00 	mov.w	sl, #0
 801fa38:	f8bc b000 	ldrh.w	fp, [ip]
 801fa3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801fa40:	fb09 770b 	mla	r7, r9, fp, r7
 801fa44:	4457      	add	r7, sl
 801fa46:	b29b      	uxth	r3, r3
 801fa48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fa4c:	f84e 3b04 	str.w	r3, [lr], #4
 801fa50:	f85c 3b04 	ldr.w	r3, [ip], #4
 801fa54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fa58:	f8be 3000 	ldrh.w	r3, [lr]
 801fa5c:	fb09 330a 	mla	r3, r9, sl, r3
 801fa60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801fa64:	4562      	cmp	r2, ip
 801fa66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fa6a:	d8e5      	bhi.n	801fa38 <__multiply+0x10c>
 801fa6c:	9f01      	ldr	r7, [sp, #4]
 801fa6e:	51eb      	str	r3, [r5, r7]
 801fa70:	3504      	adds	r5, #4
 801fa72:	e799      	b.n	801f9a8 <__multiply+0x7c>
 801fa74:	3e01      	subs	r6, #1
 801fa76:	e79b      	b.n	801f9b0 <__multiply+0x84>
 801fa78:	0802491b 	.word	0x0802491b
 801fa7c:	0802492c 	.word	0x0802492c

0801fa80 <__pow5mult>:
 801fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa84:	4615      	mov	r5, r2
 801fa86:	f012 0203 	ands.w	r2, r2, #3
 801fa8a:	4607      	mov	r7, r0
 801fa8c:	460e      	mov	r6, r1
 801fa8e:	d007      	beq.n	801faa0 <__pow5mult+0x20>
 801fa90:	4c25      	ldr	r4, [pc, #148]	@ (801fb28 <__pow5mult+0xa8>)
 801fa92:	3a01      	subs	r2, #1
 801fa94:	2300      	movs	r3, #0
 801fa96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fa9a:	f7ff fe9f 	bl	801f7dc <__multadd>
 801fa9e:	4606      	mov	r6, r0
 801faa0:	10ad      	asrs	r5, r5, #2
 801faa2:	d03d      	beq.n	801fb20 <__pow5mult+0xa0>
 801faa4:	69fc      	ldr	r4, [r7, #28]
 801faa6:	b97c      	cbnz	r4, 801fac8 <__pow5mult+0x48>
 801faa8:	2010      	movs	r0, #16
 801faaa:	f7ff fd7f 	bl	801f5ac <malloc>
 801faae:	4602      	mov	r2, r0
 801fab0:	61f8      	str	r0, [r7, #28]
 801fab2:	b928      	cbnz	r0, 801fac0 <__pow5mult+0x40>
 801fab4:	4b1d      	ldr	r3, [pc, #116]	@ (801fb2c <__pow5mult+0xac>)
 801fab6:	481e      	ldr	r0, [pc, #120]	@ (801fb30 <__pow5mult+0xb0>)
 801fab8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801fabc:	f7fe fec2 	bl	801e844 <__assert_func>
 801fac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fac4:	6004      	str	r4, [r0, #0]
 801fac6:	60c4      	str	r4, [r0, #12]
 801fac8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801facc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fad0:	b94c      	cbnz	r4, 801fae6 <__pow5mult+0x66>
 801fad2:	f240 2171 	movw	r1, #625	@ 0x271
 801fad6:	4638      	mov	r0, r7
 801fad8:	f7ff ff12 	bl	801f900 <__i2b>
 801fadc:	2300      	movs	r3, #0
 801fade:	f8c8 0008 	str.w	r0, [r8, #8]
 801fae2:	4604      	mov	r4, r0
 801fae4:	6003      	str	r3, [r0, #0]
 801fae6:	f04f 0900 	mov.w	r9, #0
 801faea:	07eb      	lsls	r3, r5, #31
 801faec:	d50a      	bpl.n	801fb04 <__pow5mult+0x84>
 801faee:	4631      	mov	r1, r6
 801faf0:	4622      	mov	r2, r4
 801faf2:	4638      	mov	r0, r7
 801faf4:	f7ff ff1a 	bl	801f92c <__multiply>
 801faf8:	4631      	mov	r1, r6
 801fafa:	4680      	mov	r8, r0
 801fafc:	4638      	mov	r0, r7
 801fafe:	f7ff fe4b 	bl	801f798 <_Bfree>
 801fb02:	4646      	mov	r6, r8
 801fb04:	106d      	asrs	r5, r5, #1
 801fb06:	d00b      	beq.n	801fb20 <__pow5mult+0xa0>
 801fb08:	6820      	ldr	r0, [r4, #0]
 801fb0a:	b938      	cbnz	r0, 801fb1c <__pow5mult+0x9c>
 801fb0c:	4622      	mov	r2, r4
 801fb0e:	4621      	mov	r1, r4
 801fb10:	4638      	mov	r0, r7
 801fb12:	f7ff ff0b 	bl	801f92c <__multiply>
 801fb16:	6020      	str	r0, [r4, #0]
 801fb18:	f8c0 9000 	str.w	r9, [r0]
 801fb1c:	4604      	mov	r4, r0
 801fb1e:	e7e4      	b.n	801faea <__pow5mult+0x6a>
 801fb20:	4630      	mov	r0, r6
 801fb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb26:	bf00      	nop
 801fb28:	08024988 	.word	0x08024988
 801fb2c:	080246d6 	.word	0x080246d6
 801fb30:	0802492c 	.word	0x0802492c

0801fb34 <__lshift>:
 801fb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb38:	460c      	mov	r4, r1
 801fb3a:	6849      	ldr	r1, [r1, #4]
 801fb3c:	6923      	ldr	r3, [r4, #16]
 801fb3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fb42:	68a3      	ldr	r3, [r4, #8]
 801fb44:	4607      	mov	r7, r0
 801fb46:	4691      	mov	r9, r2
 801fb48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fb4c:	f108 0601 	add.w	r6, r8, #1
 801fb50:	42b3      	cmp	r3, r6
 801fb52:	db0b      	blt.n	801fb6c <__lshift+0x38>
 801fb54:	4638      	mov	r0, r7
 801fb56:	f7ff fddf 	bl	801f718 <_Balloc>
 801fb5a:	4605      	mov	r5, r0
 801fb5c:	b948      	cbnz	r0, 801fb72 <__lshift+0x3e>
 801fb5e:	4602      	mov	r2, r0
 801fb60:	4b28      	ldr	r3, [pc, #160]	@ (801fc04 <__lshift+0xd0>)
 801fb62:	4829      	ldr	r0, [pc, #164]	@ (801fc08 <__lshift+0xd4>)
 801fb64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801fb68:	f7fe fe6c 	bl	801e844 <__assert_func>
 801fb6c:	3101      	adds	r1, #1
 801fb6e:	005b      	lsls	r3, r3, #1
 801fb70:	e7ee      	b.n	801fb50 <__lshift+0x1c>
 801fb72:	2300      	movs	r3, #0
 801fb74:	f100 0114 	add.w	r1, r0, #20
 801fb78:	f100 0210 	add.w	r2, r0, #16
 801fb7c:	4618      	mov	r0, r3
 801fb7e:	4553      	cmp	r3, sl
 801fb80:	db33      	blt.n	801fbea <__lshift+0xb6>
 801fb82:	6920      	ldr	r0, [r4, #16]
 801fb84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fb88:	f104 0314 	add.w	r3, r4, #20
 801fb8c:	f019 091f 	ands.w	r9, r9, #31
 801fb90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fb94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fb98:	d02b      	beq.n	801fbf2 <__lshift+0xbe>
 801fb9a:	f1c9 0e20 	rsb	lr, r9, #32
 801fb9e:	468a      	mov	sl, r1
 801fba0:	2200      	movs	r2, #0
 801fba2:	6818      	ldr	r0, [r3, #0]
 801fba4:	fa00 f009 	lsl.w	r0, r0, r9
 801fba8:	4310      	orrs	r0, r2
 801fbaa:	f84a 0b04 	str.w	r0, [sl], #4
 801fbae:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbb2:	459c      	cmp	ip, r3
 801fbb4:	fa22 f20e 	lsr.w	r2, r2, lr
 801fbb8:	d8f3      	bhi.n	801fba2 <__lshift+0x6e>
 801fbba:	ebac 0304 	sub.w	r3, ip, r4
 801fbbe:	3b15      	subs	r3, #21
 801fbc0:	f023 0303 	bic.w	r3, r3, #3
 801fbc4:	3304      	adds	r3, #4
 801fbc6:	f104 0015 	add.w	r0, r4, #21
 801fbca:	4584      	cmp	ip, r0
 801fbcc:	bf38      	it	cc
 801fbce:	2304      	movcc	r3, #4
 801fbd0:	50ca      	str	r2, [r1, r3]
 801fbd2:	b10a      	cbz	r2, 801fbd8 <__lshift+0xa4>
 801fbd4:	f108 0602 	add.w	r6, r8, #2
 801fbd8:	3e01      	subs	r6, #1
 801fbda:	4638      	mov	r0, r7
 801fbdc:	612e      	str	r6, [r5, #16]
 801fbde:	4621      	mov	r1, r4
 801fbe0:	f7ff fdda 	bl	801f798 <_Bfree>
 801fbe4:	4628      	mov	r0, r5
 801fbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbea:	f842 0f04 	str.w	r0, [r2, #4]!
 801fbee:	3301      	adds	r3, #1
 801fbf0:	e7c5      	b.n	801fb7e <__lshift+0x4a>
 801fbf2:	3904      	subs	r1, #4
 801fbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbf8:	f841 2f04 	str.w	r2, [r1, #4]!
 801fbfc:	459c      	cmp	ip, r3
 801fbfe:	d8f9      	bhi.n	801fbf4 <__lshift+0xc0>
 801fc00:	e7ea      	b.n	801fbd8 <__lshift+0xa4>
 801fc02:	bf00      	nop
 801fc04:	0802491b 	.word	0x0802491b
 801fc08:	0802492c 	.word	0x0802492c

0801fc0c <__mcmp>:
 801fc0c:	690a      	ldr	r2, [r1, #16]
 801fc0e:	4603      	mov	r3, r0
 801fc10:	6900      	ldr	r0, [r0, #16]
 801fc12:	1a80      	subs	r0, r0, r2
 801fc14:	b530      	push	{r4, r5, lr}
 801fc16:	d10e      	bne.n	801fc36 <__mcmp+0x2a>
 801fc18:	3314      	adds	r3, #20
 801fc1a:	3114      	adds	r1, #20
 801fc1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801fc20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801fc24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fc28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fc2c:	4295      	cmp	r5, r2
 801fc2e:	d003      	beq.n	801fc38 <__mcmp+0x2c>
 801fc30:	d205      	bcs.n	801fc3e <__mcmp+0x32>
 801fc32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fc36:	bd30      	pop	{r4, r5, pc}
 801fc38:	42a3      	cmp	r3, r4
 801fc3a:	d3f3      	bcc.n	801fc24 <__mcmp+0x18>
 801fc3c:	e7fb      	b.n	801fc36 <__mcmp+0x2a>
 801fc3e:	2001      	movs	r0, #1
 801fc40:	e7f9      	b.n	801fc36 <__mcmp+0x2a>
	...

0801fc44 <__mdiff>:
 801fc44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc48:	4689      	mov	r9, r1
 801fc4a:	4606      	mov	r6, r0
 801fc4c:	4611      	mov	r1, r2
 801fc4e:	4648      	mov	r0, r9
 801fc50:	4614      	mov	r4, r2
 801fc52:	f7ff ffdb 	bl	801fc0c <__mcmp>
 801fc56:	1e05      	subs	r5, r0, #0
 801fc58:	d112      	bne.n	801fc80 <__mdiff+0x3c>
 801fc5a:	4629      	mov	r1, r5
 801fc5c:	4630      	mov	r0, r6
 801fc5e:	f7ff fd5b 	bl	801f718 <_Balloc>
 801fc62:	4602      	mov	r2, r0
 801fc64:	b928      	cbnz	r0, 801fc72 <__mdiff+0x2e>
 801fc66:	4b3f      	ldr	r3, [pc, #252]	@ (801fd64 <__mdiff+0x120>)
 801fc68:	f240 2137 	movw	r1, #567	@ 0x237
 801fc6c:	483e      	ldr	r0, [pc, #248]	@ (801fd68 <__mdiff+0x124>)
 801fc6e:	f7fe fde9 	bl	801e844 <__assert_func>
 801fc72:	2301      	movs	r3, #1
 801fc74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fc78:	4610      	mov	r0, r2
 801fc7a:	b003      	add	sp, #12
 801fc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc80:	bfbc      	itt	lt
 801fc82:	464b      	movlt	r3, r9
 801fc84:	46a1      	movlt	r9, r4
 801fc86:	4630      	mov	r0, r6
 801fc88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801fc8c:	bfba      	itte	lt
 801fc8e:	461c      	movlt	r4, r3
 801fc90:	2501      	movlt	r5, #1
 801fc92:	2500      	movge	r5, #0
 801fc94:	f7ff fd40 	bl	801f718 <_Balloc>
 801fc98:	4602      	mov	r2, r0
 801fc9a:	b918      	cbnz	r0, 801fca4 <__mdiff+0x60>
 801fc9c:	4b31      	ldr	r3, [pc, #196]	@ (801fd64 <__mdiff+0x120>)
 801fc9e:	f240 2145 	movw	r1, #581	@ 0x245
 801fca2:	e7e3      	b.n	801fc6c <__mdiff+0x28>
 801fca4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801fca8:	6926      	ldr	r6, [r4, #16]
 801fcaa:	60c5      	str	r5, [r0, #12]
 801fcac:	f109 0310 	add.w	r3, r9, #16
 801fcb0:	f109 0514 	add.w	r5, r9, #20
 801fcb4:	f104 0e14 	add.w	lr, r4, #20
 801fcb8:	f100 0b14 	add.w	fp, r0, #20
 801fcbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801fcc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801fcc4:	9301      	str	r3, [sp, #4]
 801fcc6:	46d9      	mov	r9, fp
 801fcc8:	f04f 0c00 	mov.w	ip, #0
 801fccc:	9b01      	ldr	r3, [sp, #4]
 801fcce:	f85e 0b04 	ldr.w	r0, [lr], #4
 801fcd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801fcd6:	9301      	str	r3, [sp, #4]
 801fcd8:	fa1f f38a 	uxth.w	r3, sl
 801fcdc:	4619      	mov	r1, r3
 801fcde:	b283      	uxth	r3, r0
 801fce0:	1acb      	subs	r3, r1, r3
 801fce2:	0c00      	lsrs	r0, r0, #16
 801fce4:	4463      	add	r3, ip
 801fce6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801fcea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801fcee:	b29b      	uxth	r3, r3
 801fcf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801fcf4:	4576      	cmp	r6, lr
 801fcf6:	f849 3b04 	str.w	r3, [r9], #4
 801fcfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fcfe:	d8e5      	bhi.n	801fccc <__mdiff+0x88>
 801fd00:	1b33      	subs	r3, r6, r4
 801fd02:	3b15      	subs	r3, #21
 801fd04:	f023 0303 	bic.w	r3, r3, #3
 801fd08:	3415      	adds	r4, #21
 801fd0a:	3304      	adds	r3, #4
 801fd0c:	42a6      	cmp	r6, r4
 801fd0e:	bf38      	it	cc
 801fd10:	2304      	movcc	r3, #4
 801fd12:	441d      	add	r5, r3
 801fd14:	445b      	add	r3, fp
 801fd16:	461e      	mov	r6, r3
 801fd18:	462c      	mov	r4, r5
 801fd1a:	4544      	cmp	r4, r8
 801fd1c:	d30e      	bcc.n	801fd3c <__mdiff+0xf8>
 801fd1e:	f108 0103 	add.w	r1, r8, #3
 801fd22:	1b49      	subs	r1, r1, r5
 801fd24:	f021 0103 	bic.w	r1, r1, #3
 801fd28:	3d03      	subs	r5, #3
 801fd2a:	45a8      	cmp	r8, r5
 801fd2c:	bf38      	it	cc
 801fd2e:	2100      	movcc	r1, #0
 801fd30:	440b      	add	r3, r1
 801fd32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fd36:	b191      	cbz	r1, 801fd5e <__mdiff+0x11a>
 801fd38:	6117      	str	r7, [r2, #16]
 801fd3a:	e79d      	b.n	801fc78 <__mdiff+0x34>
 801fd3c:	f854 1b04 	ldr.w	r1, [r4], #4
 801fd40:	46e6      	mov	lr, ip
 801fd42:	0c08      	lsrs	r0, r1, #16
 801fd44:	fa1c fc81 	uxtah	ip, ip, r1
 801fd48:	4471      	add	r1, lr
 801fd4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801fd4e:	b289      	uxth	r1, r1
 801fd50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801fd54:	f846 1b04 	str.w	r1, [r6], #4
 801fd58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fd5c:	e7dd      	b.n	801fd1a <__mdiff+0xd6>
 801fd5e:	3f01      	subs	r7, #1
 801fd60:	e7e7      	b.n	801fd32 <__mdiff+0xee>
 801fd62:	bf00      	nop
 801fd64:	0802491b 	.word	0x0802491b
 801fd68:	0802492c 	.word	0x0802492c

0801fd6c <__d2b>:
 801fd6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fd70:	460f      	mov	r7, r1
 801fd72:	2101      	movs	r1, #1
 801fd74:	ec59 8b10 	vmov	r8, r9, d0
 801fd78:	4616      	mov	r6, r2
 801fd7a:	f7ff fccd 	bl	801f718 <_Balloc>
 801fd7e:	4604      	mov	r4, r0
 801fd80:	b930      	cbnz	r0, 801fd90 <__d2b+0x24>
 801fd82:	4602      	mov	r2, r0
 801fd84:	4b23      	ldr	r3, [pc, #140]	@ (801fe14 <__d2b+0xa8>)
 801fd86:	4824      	ldr	r0, [pc, #144]	@ (801fe18 <__d2b+0xac>)
 801fd88:	f240 310f 	movw	r1, #783	@ 0x30f
 801fd8c:	f7fe fd5a 	bl	801e844 <__assert_func>
 801fd90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fd94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fd98:	b10d      	cbz	r5, 801fd9e <__d2b+0x32>
 801fd9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fd9e:	9301      	str	r3, [sp, #4]
 801fda0:	f1b8 0300 	subs.w	r3, r8, #0
 801fda4:	d023      	beq.n	801fdee <__d2b+0x82>
 801fda6:	4668      	mov	r0, sp
 801fda8:	9300      	str	r3, [sp, #0]
 801fdaa:	f7ff fd7c 	bl	801f8a6 <__lo0bits>
 801fdae:	e9dd 1200 	ldrd	r1, r2, [sp]
 801fdb2:	b1d0      	cbz	r0, 801fdea <__d2b+0x7e>
 801fdb4:	f1c0 0320 	rsb	r3, r0, #32
 801fdb8:	fa02 f303 	lsl.w	r3, r2, r3
 801fdbc:	430b      	orrs	r3, r1
 801fdbe:	40c2      	lsrs	r2, r0
 801fdc0:	6163      	str	r3, [r4, #20]
 801fdc2:	9201      	str	r2, [sp, #4]
 801fdc4:	9b01      	ldr	r3, [sp, #4]
 801fdc6:	61a3      	str	r3, [r4, #24]
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	bf0c      	ite	eq
 801fdcc:	2201      	moveq	r2, #1
 801fdce:	2202      	movne	r2, #2
 801fdd0:	6122      	str	r2, [r4, #16]
 801fdd2:	b1a5      	cbz	r5, 801fdfe <__d2b+0x92>
 801fdd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801fdd8:	4405      	add	r5, r0
 801fdda:	603d      	str	r5, [r7, #0]
 801fddc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801fde0:	6030      	str	r0, [r6, #0]
 801fde2:	4620      	mov	r0, r4
 801fde4:	b003      	add	sp, #12
 801fde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fdea:	6161      	str	r1, [r4, #20]
 801fdec:	e7ea      	b.n	801fdc4 <__d2b+0x58>
 801fdee:	a801      	add	r0, sp, #4
 801fdf0:	f7ff fd59 	bl	801f8a6 <__lo0bits>
 801fdf4:	9b01      	ldr	r3, [sp, #4]
 801fdf6:	6163      	str	r3, [r4, #20]
 801fdf8:	3020      	adds	r0, #32
 801fdfa:	2201      	movs	r2, #1
 801fdfc:	e7e8      	b.n	801fdd0 <__d2b+0x64>
 801fdfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fe02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801fe06:	6038      	str	r0, [r7, #0]
 801fe08:	6918      	ldr	r0, [r3, #16]
 801fe0a:	f7ff fd2d 	bl	801f868 <__hi0bits>
 801fe0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fe12:	e7e5      	b.n	801fde0 <__d2b+0x74>
 801fe14:	0802491b 	.word	0x0802491b
 801fe18:	0802492c 	.word	0x0802492c

0801fe1c <__ssputs_r>:
 801fe1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe20:	688e      	ldr	r6, [r1, #8]
 801fe22:	461f      	mov	r7, r3
 801fe24:	42be      	cmp	r6, r7
 801fe26:	680b      	ldr	r3, [r1, #0]
 801fe28:	4682      	mov	sl, r0
 801fe2a:	460c      	mov	r4, r1
 801fe2c:	4690      	mov	r8, r2
 801fe2e:	d82d      	bhi.n	801fe8c <__ssputs_r+0x70>
 801fe30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fe34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801fe38:	d026      	beq.n	801fe88 <__ssputs_r+0x6c>
 801fe3a:	6965      	ldr	r5, [r4, #20]
 801fe3c:	6909      	ldr	r1, [r1, #16]
 801fe3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fe42:	eba3 0901 	sub.w	r9, r3, r1
 801fe46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fe4a:	1c7b      	adds	r3, r7, #1
 801fe4c:	444b      	add	r3, r9
 801fe4e:	106d      	asrs	r5, r5, #1
 801fe50:	429d      	cmp	r5, r3
 801fe52:	bf38      	it	cc
 801fe54:	461d      	movcc	r5, r3
 801fe56:	0553      	lsls	r3, r2, #21
 801fe58:	d527      	bpl.n	801feaa <__ssputs_r+0x8e>
 801fe5a:	4629      	mov	r1, r5
 801fe5c:	f7ff fbd0 	bl	801f600 <_malloc_r>
 801fe60:	4606      	mov	r6, r0
 801fe62:	b360      	cbz	r0, 801febe <__ssputs_r+0xa2>
 801fe64:	6921      	ldr	r1, [r4, #16]
 801fe66:	464a      	mov	r2, r9
 801fe68:	f7fe fcdd 	bl	801e826 <memcpy>
 801fe6c:	89a3      	ldrh	r3, [r4, #12]
 801fe6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801fe72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fe76:	81a3      	strh	r3, [r4, #12]
 801fe78:	6126      	str	r6, [r4, #16]
 801fe7a:	6165      	str	r5, [r4, #20]
 801fe7c:	444e      	add	r6, r9
 801fe7e:	eba5 0509 	sub.w	r5, r5, r9
 801fe82:	6026      	str	r6, [r4, #0]
 801fe84:	60a5      	str	r5, [r4, #8]
 801fe86:	463e      	mov	r6, r7
 801fe88:	42be      	cmp	r6, r7
 801fe8a:	d900      	bls.n	801fe8e <__ssputs_r+0x72>
 801fe8c:	463e      	mov	r6, r7
 801fe8e:	6820      	ldr	r0, [r4, #0]
 801fe90:	4632      	mov	r2, r6
 801fe92:	4641      	mov	r1, r8
 801fe94:	f7fe fbde 	bl	801e654 <memmove>
 801fe98:	68a3      	ldr	r3, [r4, #8]
 801fe9a:	1b9b      	subs	r3, r3, r6
 801fe9c:	60a3      	str	r3, [r4, #8]
 801fe9e:	6823      	ldr	r3, [r4, #0]
 801fea0:	4433      	add	r3, r6
 801fea2:	6023      	str	r3, [r4, #0]
 801fea4:	2000      	movs	r0, #0
 801fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feaa:	462a      	mov	r2, r5
 801feac:	f000 fbcf 	bl	802064e <_realloc_r>
 801feb0:	4606      	mov	r6, r0
 801feb2:	2800      	cmp	r0, #0
 801feb4:	d1e0      	bne.n	801fe78 <__ssputs_r+0x5c>
 801feb6:	6921      	ldr	r1, [r4, #16]
 801feb8:	4650      	mov	r0, sl
 801feba:	f7ff fb2d 	bl	801f518 <_free_r>
 801febe:	230c      	movs	r3, #12
 801fec0:	f8ca 3000 	str.w	r3, [sl]
 801fec4:	89a3      	ldrh	r3, [r4, #12]
 801fec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801feca:	81a3      	strh	r3, [r4, #12]
 801fecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fed0:	e7e9      	b.n	801fea6 <__ssputs_r+0x8a>
	...

0801fed4 <_svfiprintf_r>:
 801fed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed8:	4698      	mov	r8, r3
 801feda:	898b      	ldrh	r3, [r1, #12]
 801fedc:	061b      	lsls	r3, r3, #24
 801fede:	b09d      	sub	sp, #116	@ 0x74
 801fee0:	4607      	mov	r7, r0
 801fee2:	460d      	mov	r5, r1
 801fee4:	4614      	mov	r4, r2
 801fee6:	d510      	bpl.n	801ff0a <_svfiprintf_r+0x36>
 801fee8:	690b      	ldr	r3, [r1, #16]
 801feea:	b973      	cbnz	r3, 801ff0a <_svfiprintf_r+0x36>
 801feec:	2140      	movs	r1, #64	@ 0x40
 801feee:	f7ff fb87 	bl	801f600 <_malloc_r>
 801fef2:	6028      	str	r0, [r5, #0]
 801fef4:	6128      	str	r0, [r5, #16]
 801fef6:	b930      	cbnz	r0, 801ff06 <_svfiprintf_r+0x32>
 801fef8:	230c      	movs	r3, #12
 801fefa:	603b      	str	r3, [r7, #0]
 801fefc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ff00:	b01d      	add	sp, #116	@ 0x74
 801ff02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff06:	2340      	movs	r3, #64	@ 0x40
 801ff08:	616b      	str	r3, [r5, #20]
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff0e:	2320      	movs	r3, #32
 801ff10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ff14:	f8cd 800c 	str.w	r8, [sp, #12]
 801ff18:	2330      	movs	r3, #48	@ 0x30
 801ff1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80200b8 <_svfiprintf_r+0x1e4>
 801ff1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ff22:	f04f 0901 	mov.w	r9, #1
 801ff26:	4623      	mov	r3, r4
 801ff28:	469a      	mov	sl, r3
 801ff2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff2e:	b10a      	cbz	r2, 801ff34 <_svfiprintf_r+0x60>
 801ff30:	2a25      	cmp	r2, #37	@ 0x25
 801ff32:	d1f9      	bne.n	801ff28 <_svfiprintf_r+0x54>
 801ff34:	ebba 0b04 	subs.w	fp, sl, r4
 801ff38:	d00b      	beq.n	801ff52 <_svfiprintf_r+0x7e>
 801ff3a:	465b      	mov	r3, fp
 801ff3c:	4622      	mov	r2, r4
 801ff3e:	4629      	mov	r1, r5
 801ff40:	4638      	mov	r0, r7
 801ff42:	f7ff ff6b 	bl	801fe1c <__ssputs_r>
 801ff46:	3001      	adds	r0, #1
 801ff48:	f000 80a7 	beq.w	802009a <_svfiprintf_r+0x1c6>
 801ff4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff4e:	445a      	add	r2, fp
 801ff50:	9209      	str	r2, [sp, #36]	@ 0x24
 801ff52:	f89a 3000 	ldrb.w	r3, [sl]
 801ff56:	2b00      	cmp	r3, #0
 801ff58:	f000 809f 	beq.w	802009a <_svfiprintf_r+0x1c6>
 801ff5c:	2300      	movs	r3, #0
 801ff5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ff62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ff66:	f10a 0a01 	add.w	sl, sl, #1
 801ff6a:	9304      	str	r3, [sp, #16]
 801ff6c:	9307      	str	r3, [sp, #28]
 801ff6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ff72:	931a      	str	r3, [sp, #104]	@ 0x68
 801ff74:	4654      	mov	r4, sl
 801ff76:	2205      	movs	r2, #5
 801ff78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff7c:	484e      	ldr	r0, [pc, #312]	@ (80200b8 <_svfiprintf_r+0x1e4>)
 801ff7e:	f7e0 f937 	bl	80001f0 <memchr>
 801ff82:	9a04      	ldr	r2, [sp, #16]
 801ff84:	b9d8      	cbnz	r0, 801ffbe <_svfiprintf_r+0xea>
 801ff86:	06d0      	lsls	r0, r2, #27
 801ff88:	bf44      	itt	mi
 801ff8a:	2320      	movmi	r3, #32
 801ff8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ff90:	0711      	lsls	r1, r2, #28
 801ff92:	bf44      	itt	mi
 801ff94:	232b      	movmi	r3, #43	@ 0x2b
 801ff96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ff9a:	f89a 3000 	ldrb.w	r3, [sl]
 801ff9e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ffa0:	d015      	beq.n	801ffce <_svfiprintf_r+0xfa>
 801ffa2:	9a07      	ldr	r2, [sp, #28]
 801ffa4:	4654      	mov	r4, sl
 801ffa6:	2000      	movs	r0, #0
 801ffa8:	f04f 0c0a 	mov.w	ip, #10
 801ffac:	4621      	mov	r1, r4
 801ffae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ffb2:	3b30      	subs	r3, #48	@ 0x30
 801ffb4:	2b09      	cmp	r3, #9
 801ffb6:	d94b      	bls.n	8020050 <_svfiprintf_r+0x17c>
 801ffb8:	b1b0      	cbz	r0, 801ffe8 <_svfiprintf_r+0x114>
 801ffba:	9207      	str	r2, [sp, #28]
 801ffbc:	e014      	b.n	801ffe8 <_svfiprintf_r+0x114>
 801ffbe:	eba0 0308 	sub.w	r3, r0, r8
 801ffc2:	fa09 f303 	lsl.w	r3, r9, r3
 801ffc6:	4313      	orrs	r3, r2
 801ffc8:	9304      	str	r3, [sp, #16]
 801ffca:	46a2      	mov	sl, r4
 801ffcc:	e7d2      	b.n	801ff74 <_svfiprintf_r+0xa0>
 801ffce:	9b03      	ldr	r3, [sp, #12]
 801ffd0:	1d19      	adds	r1, r3, #4
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	9103      	str	r1, [sp, #12]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	bfbb      	ittet	lt
 801ffda:	425b      	neglt	r3, r3
 801ffdc:	f042 0202 	orrlt.w	r2, r2, #2
 801ffe0:	9307      	strge	r3, [sp, #28]
 801ffe2:	9307      	strlt	r3, [sp, #28]
 801ffe4:	bfb8      	it	lt
 801ffe6:	9204      	strlt	r2, [sp, #16]
 801ffe8:	7823      	ldrb	r3, [r4, #0]
 801ffea:	2b2e      	cmp	r3, #46	@ 0x2e
 801ffec:	d10a      	bne.n	8020004 <_svfiprintf_r+0x130>
 801ffee:	7863      	ldrb	r3, [r4, #1]
 801fff0:	2b2a      	cmp	r3, #42	@ 0x2a
 801fff2:	d132      	bne.n	802005a <_svfiprintf_r+0x186>
 801fff4:	9b03      	ldr	r3, [sp, #12]
 801fff6:	1d1a      	adds	r2, r3, #4
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	9203      	str	r2, [sp, #12]
 801fffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020000:	3402      	adds	r4, #2
 8020002:	9305      	str	r3, [sp, #20]
 8020004:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80200c8 <_svfiprintf_r+0x1f4>
 8020008:	7821      	ldrb	r1, [r4, #0]
 802000a:	2203      	movs	r2, #3
 802000c:	4650      	mov	r0, sl
 802000e:	f7e0 f8ef 	bl	80001f0 <memchr>
 8020012:	b138      	cbz	r0, 8020024 <_svfiprintf_r+0x150>
 8020014:	9b04      	ldr	r3, [sp, #16]
 8020016:	eba0 000a 	sub.w	r0, r0, sl
 802001a:	2240      	movs	r2, #64	@ 0x40
 802001c:	4082      	lsls	r2, r0
 802001e:	4313      	orrs	r3, r2
 8020020:	3401      	adds	r4, #1
 8020022:	9304      	str	r3, [sp, #16]
 8020024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020028:	4824      	ldr	r0, [pc, #144]	@ (80200bc <_svfiprintf_r+0x1e8>)
 802002a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802002e:	2206      	movs	r2, #6
 8020030:	f7e0 f8de 	bl	80001f0 <memchr>
 8020034:	2800      	cmp	r0, #0
 8020036:	d036      	beq.n	80200a6 <_svfiprintf_r+0x1d2>
 8020038:	4b21      	ldr	r3, [pc, #132]	@ (80200c0 <_svfiprintf_r+0x1ec>)
 802003a:	bb1b      	cbnz	r3, 8020084 <_svfiprintf_r+0x1b0>
 802003c:	9b03      	ldr	r3, [sp, #12]
 802003e:	3307      	adds	r3, #7
 8020040:	f023 0307 	bic.w	r3, r3, #7
 8020044:	3308      	adds	r3, #8
 8020046:	9303      	str	r3, [sp, #12]
 8020048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802004a:	4433      	add	r3, r6
 802004c:	9309      	str	r3, [sp, #36]	@ 0x24
 802004e:	e76a      	b.n	801ff26 <_svfiprintf_r+0x52>
 8020050:	fb0c 3202 	mla	r2, ip, r2, r3
 8020054:	460c      	mov	r4, r1
 8020056:	2001      	movs	r0, #1
 8020058:	e7a8      	b.n	801ffac <_svfiprintf_r+0xd8>
 802005a:	2300      	movs	r3, #0
 802005c:	3401      	adds	r4, #1
 802005e:	9305      	str	r3, [sp, #20]
 8020060:	4619      	mov	r1, r3
 8020062:	f04f 0c0a 	mov.w	ip, #10
 8020066:	4620      	mov	r0, r4
 8020068:	f810 2b01 	ldrb.w	r2, [r0], #1
 802006c:	3a30      	subs	r2, #48	@ 0x30
 802006e:	2a09      	cmp	r2, #9
 8020070:	d903      	bls.n	802007a <_svfiprintf_r+0x1a6>
 8020072:	2b00      	cmp	r3, #0
 8020074:	d0c6      	beq.n	8020004 <_svfiprintf_r+0x130>
 8020076:	9105      	str	r1, [sp, #20]
 8020078:	e7c4      	b.n	8020004 <_svfiprintf_r+0x130>
 802007a:	fb0c 2101 	mla	r1, ip, r1, r2
 802007e:	4604      	mov	r4, r0
 8020080:	2301      	movs	r3, #1
 8020082:	e7f0      	b.n	8020066 <_svfiprintf_r+0x192>
 8020084:	ab03      	add	r3, sp, #12
 8020086:	9300      	str	r3, [sp, #0]
 8020088:	462a      	mov	r2, r5
 802008a:	4b0e      	ldr	r3, [pc, #56]	@ (80200c4 <_svfiprintf_r+0x1f0>)
 802008c:	a904      	add	r1, sp, #16
 802008e:	4638      	mov	r0, r7
 8020090:	f7fd fcee 	bl	801da70 <_printf_float>
 8020094:	1c42      	adds	r2, r0, #1
 8020096:	4606      	mov	r6, r0
 8020098:	d1d6      	bne.n	8020048 <_svfiprintf_r+0x174>
 802009a:	89ab      	ldrh	r3, [r5, #12]
 802009c:	065b      	lsls	r3, r3, #25
 802009e:	f53f af2d 	bmi.w	801fefc <_svfiprintf_r+0x28>
 80200a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80200a4:	e72c      	b.n	801ff00 <_svfiprintf_r+0x2c>
 80200a6:	ab03      	add	r3, sp, #12
 80200a8:	9300      	str	r3, [sp, #0]
 80200aa:	462a      	mov	r2, r5
 80200ac:	4b05      	ldr	r3, [pc, #20]	@ (80200c4 <_svfiprintf_r+0x1f0>)
 80200ae:	a904      	add	r1, sp, #16
 80200b0:	4638      	mov	r0, r7
 80200b2:	f7fd ff75 	bl	801dfa0 <_printf_i>
 80200b6:	e7ed      	b.n	8020094 <_svfiprintf_r+0x1c0>
 80200b8:	08024a88 	.word	0x08024a88
 80200bc:	08024a92 	.word	0x08024a92
 80200c0:	0801da71 	.word	0x0801da71
 80200c4:	0801fe1d 	.word	0x0801fe1d
 80200c8:	08024a8e 	.word	0x08024a8e

080200cc <__sfputc_r>:
 80200cc:	6893      	ldr	r3, [r2, #8]
 80200ce:	3b01      	subs	r3, #1
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	b410      	push	{r4}
 80200d4:	6093      	str	r3, [r2, #8]
 80200d6:	da08      	bge.n	80200ea <__sfputc_r+0x1e>
 80200d8:	6994      	ldr	r4, [r2, #24]
 80200da:	42a3      	cmp	r3, r4
 80200dc:	db01      	blt.n	80200e2 <__sfputc_r+0x16>
 80200de:	290a      	cmp	r1, #10
 80200e0:	d103      	bne.n	80200ea <__sfputc_r+0x1e>
 80200e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80200e6:	f7fe ba10 	b.w	801e50a <__swbuf_r>
 80200ea:	6813      	ldr	r3, [r2, #0]
 80200ec:	1c58      	adds	r0, r3, #1
 80200ee:	6010      	str	r0, [r2, #0]
 80200f0:	7019      	strb	r1, [r3, #0]
 80200f2:	4608      	mov	r0, r1
 80200f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80200f8:	4770      	bx	lr

080200fa <__sfputs_r>:
 80200fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200fc:	4606      	mov	r6, r0
 80200fe:	460f      	mov	r7, r1
 8020100:	4614      	mov	r4, r2
 8020102:	18d5      	adds	r5, r2, r3
 8020104:	42ac      	cmp	r4, r5
 8020106:	d101      	bne.n	802010c <__sfputs_r+0x12>
 8020108:	2000      	movs	r0, #0
 802010a:	e007      	b.n	802011c <__sfputs_r+0x22>
 802010c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020110:	463a      	mov	r2, r7
 8020112:	4630      	mov	r0, r6
 8020114:	f7ff ffda 	bl	80200cc <__sfputc_r>
 8020118:	1c43      	adds	r3, r0, #1
 802011a:	d1f3      	bne.n	8020104 <__sfputs_r+0xa>
 802011c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020120 <_vfiprintf_r>:
 8020120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020124:	460d      	mov	r5, r1
 8020126:	b09d      	sub	sp, #116	@ 0x74
 8020128:	4614      	mov	r4, r2
 802012a:	4698      	mov	r8, r3
 802012c:	4606      	mov	r6, r0
 802012e:	b118      	cbz	r0, 8020138 <_vfiprintf_r+0x18>
 8020130:	6a03      	ldr	r3, [r0, #32]
 8020132:	b90b      	cbnz	r3, 8020138 <_vfiprintf_r+0x18>
 8020134:	f7fe f8e0 	bl	801e2f8 <__sinit>
 8020138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802013a:	07d9      	lsls	r1, r3, #31
 802013c:	d405      	bmi.n	802014a <_vfiprintf_r+0x2a>
 802013e:	89ab      	ldrh	r3, [r5, #12]
 8020140:	059a      	lsls	r2, r3, #22
 8020142:	d402      	bmi.n	802014a <_vfiprintf_r+0x2a>
 8020144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020146:	f7fe fb6c 	bl	801e822 <__retarget_lock_acquire_recursive>
 802014a:	89ab      	ldrh	r3, [r5, #12]
 802014c:	071b      	lsls	r3, r3, #28
 802014e:	d501      	bpl.n	8020154 <_vfiprintf_r+0x34>
 8020150:	692b      	ldr	r3, [r5, #16]
 8020152:	b99b      	cbnz	r3, 802017c <_vfiprintf_r+0x5c>
 8020154:	4629      	mov	r1, r5
 8020156:	4630      	mov	r0, r6
 8020158:	f7fe fa16 	bl	801e588 <__swsetup_r>
 802015c:	b170      	cbz	r0, 802017c <_vfiprintf_r+0x5c>
 802015e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020160:	07dc      	lsls	r4, r3, #31
 8020162:	d504      	bpl.n	802016e <_vfiprintf_r+0x4e>
 8020164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020168:	b01d      	add	sp, #116	@ 0x74
 802016a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802016e:	89ab      	ldrh	r3, [r5, #12]
 8020170:	0598      	lsls	r0, r3, #22
 8020172:	d4f7      	bmi.n	8020164 <_vfiprintf_r+0x44>
 8020174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020176:	f7fe fb55 	bl	801e824 <__retarget_lock_release_recursive>
 802017a:	e7f3      	b.n	8020164 <_vfiprintf_r+0x44>
 802017c:	2300      	movs	r3, #0
 802017e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020180:	2320      	movs	r3, #32
 8020182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020186:	f8cd 800c 	str.w	r8, [sp, #12]
 802018a:	2330      	movs	r3, #48	@ 0x30
 802018c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802033c <_vfiprintf_r+0x21c>
 8020190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020194:	f04f 0901 	mov.w	r9, #1
 8020198:	4623      	mov	r3, r4
 802019a:	469a      	mov	sl, r3
 802019c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201a0:	b10a      	cbz	r2, 80201a6 <_vfiprintf_r+0x86>
 80201a2:	2a25      	cmp	r2, #37	@ 0x25
 80201a4:	d1f9      	bne.n	802019a <_vfiprintf_r+0x7a>
 80201a6:	ebba 0b04 	subs.w	fp, sl, r4
 80201aa:	d00b      	beq.n	80201c4 <_vfiprintf_r+0xa4>
 80201ac:	465b      	mov	r3, fp
 80201ae:	4622      	mov	r2, r4
 80201b0:	4629      	mov	r1, r5
 80201b2:	4630      	mov	r0, r6
 80201b4:	f7ff ffa1 	bl	80200fa <__sfputs_r>
 80201b8:	3001      	adds	r0, #1
 80201ba:	f000 80a7 	beq.w	802030c <_vfiprintf_r+0x1ec>
 80201be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80201c0:	445a      	add	r2, fp
 80201c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80201c4:	f89a 3000 	ldrb.w	r3, [sl]
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	f000 809f 	beq.w	802030c <_vfiprintf_r+0x1ec>
 80201ce:	2300      	movs	r3, #0
 80201d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80201d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80201d8:	f10a 0a01 	add.w	sl, sl, #1
 80201dc:	9304      	str	r3, [sp, #16]
 80201de:	9307      	str	r3, [sp, #28]
 80201e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80201e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80201e6:	4654      	mov	r4, sl
 80201e8:	2205      	movs	r2, #5
 80201ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80201ee:	4853      	ldr	r0, [pc, #332]	@ (802033c <_vfiprintf_r+0x21c>)
 80201f0:	f7df fffe 	bl	80001f0 <memchr>
 80201f4:	9a04      	ldr	r2, [sp, #16]
 80201f6:	b9d8      	cbnz	r0, 8020230 <_vfiprintf_r+0x110>
 80201f8:	06d1      	lsls	r1, r2, #27
 80201fa:	bf44      	itt	mi
 80201fc:	2320      	movmi	r3, #32
 80201fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020202:	0713      	lsls	r3, r2, #28
 8020204:	bf44      	itt	mi
 8020206:	232b      	movmi	r3, #43	@ 0x2b
 8020208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802020c:	f89a 3000 	ldrb.w	r3, [sl]
 8020210:	2b2a      	cmp	r3, #42	@ 0x2a
 8020212:	d015      	beq.n	8020240 <_vfiprintf_r+0x120>
 8020214:	9a07      	ldr	r2, [sp, #28]
 8020216:	4654      	mov	r4, sl
 8020218:	2000      	movs	r0, #0
 802021a:	f04f 0c0a 	mov.w	ip, #10
 802021e:	4621      	mov	r1, r4
 8020220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020224:	3b30      	subs	r3, #48	@ 0x30
 8020226:	2b09      	cmp	r3, #9
 8020228:	d94b      	bls.n	80202c2 <_vfiprintf_r+0x1a2>
 802022a:	b1b0      	cbz	r0, 802025a <_vfiprintf_r+0x13a>
 802022c:	9207      	str	r2, [sp, #28]
 802022e:	e014      	b.n	802025a <_vfiprintf_r+0x13a>
 8020230:	eba0 0308 	sub.w	r3, r0, r8
 8020234:	fa09 f303 	lsl.w	r3, r9, r3
 8020238:	4313      	orrs	r3, r2
 802023a:	9304      	str	r3, [sp, #16]
 802023c:	46a2      	mov	sl, r4
 802023e:	e7d2      	b.n	80201e6 <_vfiprintf_r+0xc6>
 8020240:	9b03      	ldr	r3, [sp, #12]
 8020242:	1d19      	adds	r1, r3, #4
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	9103      	str	r1, [sp, #12]
 8020248:	2b00      	cmp	r3, #0
 802024a:	bfbb      	ittet	lt
 802024c:	425b      	neglt	r3, r3
 802024e:	f042 0202 	orrlt.w	r2, r2, #2
 8020252:	9307      	strge	r3, [sp, #28]
 8020254:	9307      	strlt	r3, [sp, #28]
 8020256:	bfb8      	it	lt
 8020258:	9204      	strlt	r2, [sp, #16]
 802025a:	7823      	ldrb	r3, [r4, #0]
 802025c:	2b2e      	cmp	r3, #46	@ 0x2e
 802025e:	d10a      	bne.n	8020276 <_vfiprintf_r+0x156>
 8020260:	7863      	ldrb	r3, [r4, #1]
 8020262:	2b2a      	cmp	r3, #42	@ 0x2a
 8020264:	d132      	bne.n	80202cc <_vfiprintf_r+0x1ac>
 8020266:	9b03      	ldr	r3, [sp, #12]
 8020268:	1d1a      	adds	r2, r3, #4
 802026a:	681b      	ldr	r3, [r3, #0]
 802026c:	9203      	str	r2, [sp, #12]
 802026e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020272:	3402      	adds	r4, #2
 8020274:	9305      	str	r3, [sp, #20]
 8020276:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802034c <_vfiprintf_r+0x22c>
 802027a:	7821      	ldrb	r1, [r4, #0]
 802027c:	2203      	movs	r2, #3
 802027e:	4650      	mov	r0, sl
 8020280:	f7df ffb6 	bl	80001f0 <memchr>
 8020284:	b138      	cbz	r0, 8020296 <_vfiprintf_r+0x176>
 8020286:	9b04      	ldr	r3, [sp, #16]
 8020288:	eba0 000a 	sub.w	r0, r0, sl
 802028c:	2240      	movs	r2, #64	@ 0x40
 802028e:	4082      	lsls	r2, r0
 8020290:	4313      	orrs	r3, r2
 8020292:	3401      	adds	r4, #1
 8020294:	9304      	str	r3, [sp, #16]
 8020296:	f814 1b01 	ldrb.w	r1, [r4], #1
 802029a:	4829      	ldr	r0, [pc, #164]	@ (8020340 <_vfiprintf_r+0x220>)
 802029c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80202a0:	2206      	movs	r2, #6
 80202a2:	f7df ffa5 	bl	80001f0 <memchr>
 80202a6:	2800      	cmp	r0, #0
 80202a8:	d03f      	beq.n	802032a <_vfiprintf_r+0x20a>
 80202aa:	4b26      	ldr	r3, [pc, #152]	@ (8020344 <_vfiprintf_r+0x224>)
 80202ac:	bb1b      	cbnz	r3, 80202f6 <_vfiprintf_r+0x1d6>
 80202ae:	9b03      	ldr	r3, [sp, #12]
 80202b0:	3307      	adds	r3, #7
 80202b2:	f023 0307 	bic.w	r3, r3, #7
 80202b6:	3308      	adds	r3, #8
 80202b8:	9303      	str	r3, [sp, #12]
 80202ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202bc:	443b      	add	r3, r7
 80202be:	9309      	str	r3, [sp, #36]	@ 0x24
 80202c0:	e76a      	b.n	8020198 <_vfiprintf_r+0x78>
 80202c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80202c6:	460c      	mov	r4, r1
 80202c8:	2001      	movs	r0, #1
 80202ca:	e7a8      	b.n	802021e <_vfiprintf_r+0xfe>
 80202cc:	2300      	movs	r3, #0
 80202ce:	3401      	adds	r4, #1
 80202d0:	9305      	str	r3, [sp, #20]
 80202d2:	4619      	mov	r1, r3
 80202d4:	f04f 0c0a 	mov.w	ip, #10
 80202d8:	4620      	mov	r0, r4
 80202da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80202de:	3a30      	subs	r2, #48	@ 0x30
 80202e0:	2a09      	cmp	r2, #9
 80202e2:	d903      	bls.n	80202ec <_vfiprintf_r+0x1cc>
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d0c6      	beq.n	8020276 <_vfiprintf_r+0x156>
 80202e8:	9105      	str	r1, [sp, #20]
 80202ea:	e7c4      	b.n	8020276 <_vfiprintf_r+0x156>
 80202ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80202f0:	4604      	mov	r4, r0
 80202f2:	2301      	movs	r3, #1
 80202f4:	e7f0      	b.n	80202d8 <_vfiprintf_r+0x1b8>
 80202f6:	ab03      	add	r3, sp, #12
 80202f8:	9300      	str	r3, [sp, #0]
 80202fa:	462a      	mov	r2, r5
 80202fc:	4b12      	ldr	r3, [pc, #72]	@ (8020348 <_vfiprintf_r+0x228>)
 80202fe:	a904      	add	r1, sp, #16
 8020300:	4630      	mov	r0, r6
 8020302:	f7fd fbb5 	bl	801da70 <_printf_float>
 8020306:	4607      	mov	r7, r0
 8020308:	1c78      	adds	r0, r7, #1
 802030a:	d1d6      	bne.n	80202ba <_vfiprintf_r+0x19a>
 802030c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802030e:	07d9      	lsls	r1, r3, #31
 8020310:	d405      	bmi.n	802031e <_vfiprintf_r+0x1fe>
 8020312:	89ab      	ldrh	r3, [r5, #12]
 8020314:	059a      	lsls	r2, r3, #22
 8020316:	d402      	bmi.n	802031e <_vfiprintf_r+0x1fe>
 8020318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802031a:	f7fe fa83 	bl	801e824 <__retarget_lock_release_recursive>
 802031e:	89ab      	ldrh	r3, [r5, #12]
 8020320:	065b      	lsls	r3, r3, #25
 8020322:	f53f af1f 	bmi.w	8020164 <_vfiprintf_r+0x44>
 8020326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020328:	e71e      	b.n	8020168 <_vfiprintf_r+0x48>
 802032a:	ab03      	add	r3, sp, #12
 802032c:	9300      	str	r3, [sp, #0]
 802032e:	462a      	mov	r2, r5
 8020330:	4b05      	ldr	r3, [pc, #20]	@ (8020348 <_vfiprintf_r+0x228>)
 8020332:	a904      	add	r1, sp, #16
 8020334:	4630      	mov	r0, r6
 8020336:	f7fd fe33 	bl	801dfa0 <_printf_i>
 802033a:	e7e4      	b.n	8020306 <_vfiprintf_r+0x1e6>
 802033c:	08024a88 	.word	0x08024a88
 8020340:	08024a92 	.word	0x08024a92
 8020344:	0801da71 	.word	0x0801da71
 8020348:	080200fb 	.word	0x080200fb
 802034c:	08024a8e 	.word	0x08024a8e

08020350 <__sflush_r>:
 8020350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020358:	0716      	lsls	r6, r2, #28
 802035a:	4605      	mov	r5, r0
 802035c:	460c      	mov	r4, r1
 802035e:	d454      	bmi.n	802040a <__sflush_r+0xba>
 8020360:	684b      	ldr	r3, [r1, #4]
 8020362:	2b00      	cmp	r3, #0
 8020364:	dc02      	bgt.n	802036c <__sflush_r+0x1c>
 8020366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020368:	2b00      	cmp	r3, #0
 802036a:	dd48      	ble.n	80203fe <__sflush_r+0xae>
 802036c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802036e:	2e00      	cmp	r6, #0
 8020370:	d045      	beq.n	80203fe <__sflush_r+0xae>
 8020372:	2300      	movs	r3, #0
 8020374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020378:	682f      	ldr	r7, [r5, #0]
 802037a:	6a21      	ldr	r1, [r4, #32]
 802037c:	602b      	str	r3, [r5, #0]
 802037e:	d030      	beq.n	80203e2 <__sflush_r+0x92>
 8020380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020382:	89a3      	ldrh	r3, [r4, #12]
 8020384:	0759      	lsls	r1, r3, #29
 8020386:	d505      	bpl.n	8020394 <__sflush_r+0x44>
 8020388:	6863      	ldr	r3, [r4, #4]
 802038a:	1ad2      	subs	r2, r2, r3
 802038c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802038e:	b10b      	cbz	r3, 8020394 <__sflush_r+0x44>
 8020390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020392:	1ad2      	subs	r2, r2, r3
 8020394:	2300      	movs	r3, #0
 8020396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020398:	6a21      	ldr	r1, [r4, #32]
 802039a:	4628      	mov	r0, r5
 802039c:	47b0      	blx	r6
 802039e:	1c43      	adds	r3, r0, #1
 80203a0:	89a3      	ldrh	r3, [r4, #12]
 80203a2:	d106      	bne.n	80203b2 <__sflush_r+0x62>
 80203a4:	6829      	ldr	r1, [r5, #0]
 80203a6:	291d      	cmp	r1, #29
 80203a8:	d82b      	bhi.n	8020402 <__sflush_r+0xb2>
 80203aa:	4a2a      	ldr	r2, [pc, #168]	@ (8020454 <__sflush_r+0x104>)
 80203ac:	410a      	asrs	r2, r1
 80203ae:	07d6      	lsls	r6, r2, #31
 80203b0:	d427      	bmi.n	8020402 <__sflush_r+0xb2>
 80203b2:	2200      	movs	r2, #0
 80203b4:	6062      	str	r2, [r4, #4]
 80203b6:	04d9      	lsls	r1, r3, #19
 80203b8:	6922      	ldr	r2, [r4, #16]
 80203ba:	6022      	str	r2, [r4, #0]
 80203bc:	d504      	bpl.n	80203c8 <__sflush_r+0x78>
 80203be:	1c42      	adds	r2, r0, #1
 80203c0:	d101      	bne.n	80203c6 <__sflush_r+0x76>
 80203c2:	682b      	ldr	r3, [r5, #0]
 80203c4:	b903      	cbnz	r3, 80203c8 <__sflush_r+0x78>
 80203c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80203c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80203ca:	602f      	str	r7, [r5, #0]
 80203cc:	b1b9      	cbz	r1, 80203fe <__sflush_r+0xae>
 80203ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80203d2:	4299      	cmp	r1, r3
 80203d4:	d002      	beq.n	80203dc <__sflush_r+0x8c>
 80203d6:	4628      	mov	r0, r5
 80203d8:	f7ff f89e 	bl	801f518 <_free_r>
 80203dc:	2300      	movs	r3, #0
 80203de:	6363      	str	r3, [r4, #52]	@ 0x34
 80203e0:	e00d      	b.n	80203fe <__sflush_r+0xae>
 80203e2:	2301      	movs	r3, #1
 80203e4:	4628      	mov	r0, r5
 80203e6:	47b0      	blx	r6
 80203e8:	4602      	mov	r2, r0
 80203ea:	1c50      	adds	r0, r2, #1
 80203ec:	d1c9      	bne.n	8020382 <__sflush_r+0x32>
 80203ee:	682b      	ldr	r3, [r5, #0]
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	d0c6      	beq.n	8020382 <__sflush_r+0x32>
 80203f4:	2b1d      	cmp	r3, #29
 80203f6:	d001      	beq.n	80203fc <__sflush_r+0xac>
 80203f8:	2b16      	cmp	r3, #22
 80203fa:	d11e      	bne.n	802043a <__sflush_r+0xea>
 80203fc:	602f      	str	r7, [r5, #0]
 80203fe:	2000      	movs	r0, #0
 8020400:	e022      	b.n	8020448 <__sflush_r+0xf8>
 8020402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020406:	b21b      	sxth	r3, r3
 8020408:	e01b      	b.n	8020442 <__sflush_r+0xf2>
 802040a:	690f      	ldr	r7, [r1, #16]
 802040c:	2f00      	cmp	r7, #0
 802040e:	d0f6      	beq.n	80203fe <__sflush_r+0xae>
 8020410:	0793      	lsls	r3, r2, #30
 8020412:	680e      	ldr	r6, [r1, #0]
 8020414:	bf08      	it	eq
 8020416:	694b      	ldreq	r3, [r1, #20]
 8020418:	600f      	str	r7, [r1, #0]
 802041a:	bf18      	it	ne
 802041c:	2300      	movne	r3, #0
 802041e:	eba6 0807 	sub.w	r8, r6, r7
 8020422:	608b      	str	r3, [r1, #8]
 8020424:	f1b8 0f00 	cmp.w	r8, #0
 8020428:	dde9      	ble.n	80203fe <__sflush_r+0xae>
 802042a:	6a21      	ldr	r1, [r4, #32]
 802042c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802042e:	4643      	mov	r3, r8
 8020430:	463a      	mov	r2, r7
 8020432:	4628      	mov	r0, r5
 8020434:	47b0      	blx	r6
 8020436:	2800      	cmp	r0, #0
 8020438:	dc08      	bgt.n	802044c <__sflush_r+0xfc>
 802043a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802043e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020442:	81a3      	strh	r3, [r4, #12]
 8020444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802044c:	4407      	add	r7, r0
 802044e:	eba8 0800 	sub.w	r8, r8, r0
 8020452:	e7e7      	b.n	8020424 <__sflush_r+0xd4>
 8020454:	dfbffffe 	.word	0xdfbffffe

08020458 <_fflush_r>:
 8020458:	b538      	push	{r3, r4, r5, lr}
 802045a:	690b      	ldr	r3, [r1, #16]
 802045c:	4605      	mov	r5, r0
 802045e:	460c      	mov	r4, r1
 8020460:	b913      	cbnz	r3, 8020468 <_fflush_r+0x10>
 8020462:	2500      	movs	r5, #0
 8020464:	4628      	mov	r0, r5
 8020466:	bd38      	pop	{r3, r4, r5, pc}
 8020468:	b118      	cbz	r0, 8020472 <_fflush_r+0x1a>
 802046a:	6a03      	ldr	r3, [r0, #32]
 802046c:	b90b      	cbnz	r3, 8020472 <_fflush_r+0x1a>
 802046e:	f7fd ff43 	bl	801e2f8 <__sinit>
 8020472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020476:	2b00      	cmp	r3, #0
 8020478:	d0f3      	beq.n	8020462 <_fflush_r+0xa>
 802047a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802047c:	07d0      	lsls	r0, r2, #31
 802047e:	d404      	bmi.n	802048a <_fflush_r+0x32>
 8020480:	0599      	lsls	r1, r3, #22
 8020482:	d402      	bmi.n	802048a <_fflush_r+0x32>
 8020484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020486:	f7fe f9cc 	bl	801e822 <__retarget_lock_acquire_recursive>
 802048a:	4628      	mov	r0, r5
 802048c:	4621      	mov	r1, r4
 802048e:	f7ff ff5f 	bl	8020350 <__sflush_r>
 8020492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020494:	07da      	lsls	r2, r3, #31
 8020496:	4605      	mov	r5, r0
 8020498:	d4e4      	bmi.n	8020464 <_fflush_r+0xc>
 802049a:	89a3      	ldrh	r3, [r4, #12]
 802049c:	059b      	lsls	r3, r3, #22
 802049e:	d4e1      	bmi.n	8020464 <_fflush_r+0xc>
 80204a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80204a2:	f7fe f9bf 	bl	801e824 <__retarget_lock_release_recursive>
 80204a6:	e7dd      	b.n	8020464 <_fflush_r+0xc>

080204a8 <fiprintf>:
 80204a8:	b40e      	push	{r1, r2, r3}
 80204aa:	b503      	push	{r0, r1, lr}
 80204ac:	4601      	mov	r1, r0
 80204ae:	ab03      	add	r3, sp, #12
 80204b0:	4805      	ldr	r0, [pc, #20]	@ (80204c8 <fiprintf+0x20>)
 80204b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80204b6:	6800      	ldr	r0, [r0, #0]
 80204b8:	9301      	str	r3, [sp, #4]
 80204ba:	f7ff fe31 	bl	8020120 <_vfiprintf_r>
 80204be:	b002      	add	sp, #8
 80204c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80204c4:	b003      	add	sp, #12
 80204c6:	4770      	bx	lr
 80204c8:	2000003c 	.word	0x2000003c

080204cc <__swhatbuf_r>:
 80204cc:	b570      	push	{r4, r5, r6, lr}
 80204ce:	460c      	mov	r4, r1
 80204d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204d4:	2900      	cmp	r1, #0
 80204d6:	b096      	sub	sp, #88	@ 0x58
 80204d8:	4615      	mov	r5, r2
 80204da:	461e      	mov	r6, r3
 80204dc:	da0d      	bge.n	80204fa <__swhatbuf_r+0x2e>
 80204de:	89a3      	ldrh	r3, [r4, #12]
 80204e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80204e4:	f04f 0100 	mov.w	r1, #0
 80204e8:	bf14      	ite	ne
 80204ea:	2340      	movne	r3, #64	@ 0x40
 80204ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80204f0:	2000      	movs	r0, #0
 80204f2:	6031      	str	r1, [r6, #0]
 80204f4:	602b      	str	r3, [r5, #0]
 80204f6:	b016      	add	sp, #88	@ 0x58
 80204f8:	bd70      	pop	{r4, r5, r6, pc}
 80204fa:	466a      	mov	r2, sp
 80204fc:	f000 f848 	bl	8020590 <_fstat_r>
 8020500:	2800      	cmp	r0, #0
 8020502:	dbec      	blt.n	80204de <__swhatbuf_r+0x12>
 8020504:	9901      	ldr	r1, [sp, #4]
 8020506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802050a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802050e:	4259      	negs	r1, r3
 8020510:	4159      	adcs	r1, r3
 8020512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020516:	e7eb      	b.n	80204f0 <__swhatbuf_r+0x24>

08020518 <__smakebuf_r>:
 8020518:	898b      	ldrh	r3, [r1, #12]
 802051a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802051c:	079d      	lsls	r5, r3, #30
 802051e:	4606      	mov	r6, r0
 8020520:	460c      	mov	r4, r1
 8020522:	d507      	bpl.n	8020534 <__smakebuf_r+0x1c>
 8020524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020528:	6023      	str	r3, [r4, #0]
 802052a:	6123      	str	r3, [r4, #16]
 802052c:	2301      	movs	r3, #1
 802052e:	6163      	str	r3, [r4, #20]
 8020530:	b003      	add	sp, #12
 8020532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020534:	ab01      	add	r3, sp, #4
 8020536:	466a      	mov	r2, sp
 8020538:	f7ff ffc8 	bl	80204cc <__swhatbuf_r>
 802053c:	9f00      	ldr	r7, [sp, #0]
 802053e:	4605      	mov	r5, r0
 8020540:	4639      	mov	r1, r7
 8020542:	4630      	mov	r0, r6
 8020544:	f7ff f85c 	bl	801f600 <_malloc_r>
 8020548:	b948      	cbnz	r0, 802055e <__smakebuf_r+0x46>
 802054a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802054e:	059a      	lsls	r2, r3, #22
 8020550:	d4ee      	bmi.n	8020530 <__smakebuf_r+0x18>
 8020552:	f023 0303 	bic.w	r3, r3, #3
 8020556:	f043 0302 	orr.w	r3, r3, #2
 802055a:	81a3      	strh	r3, [r4, #12]
 802055c:	e7e2      	b.n	8020524 <__smakebuf_r+0xc>
 802055e:	89a3      	ldrh	r3, [r4, #12]
 8020560:	6020      	str	r0, [r4, #0]
 8020562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020566:	81a3      	strh	r3, [r4, #12]
 8020568:	9b01      	ldr	r3, [sp, #4]
 802056a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802056e:	b15b      	cbz	r3, 8020588 <__smakebuf_r+0x70>
 8020570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020574:	4630      	mov	r0, r6
 8020576:	f000 f81d 	bl	80205b4 <_isatty_r>
 802057a:	b128      	cbz	r0, 8020588 <__smakebuf_r+0x70>
 802057c:	89a3      	ldrh	r3, [r4, #12]
 802057e:	f023 0303 	bic.w	r3, r3, #3
 8020582:	f043 0301 	orr.w	r3, r3, #1
 8020586:	81a3      	strh	r3, [r4, #12]
 8020588:	89a3      	ldrh	r3, [r4, #12]
 802058a:	431d      	orrs	r5, r3
 802058c:	81a5      	strh	r5, [r4, #12]
 802058e:	e7cf      	b.n	8020530 <__smakebuf_r+0x18>

08020590 <_fstat_r>:
 8020590:	b538      	push	{r3, r4, r5, lr}
 8020592:	4d07      	ldr	r5, [pc, #28]	@ (80205b0 <_fstat_r+0x20>)
 8020594:	2300      	movs	r3, #0
 8020596:	4604      	mov	r4, r0
 8020598:	4608      	mov	r0, r1
 802059a:	4611      	mov	r1, r2
 802059c:	602b      	str	r3, [r5, #0]
 802059e:	f7e2 f989 	bl	80028b4 <_fstat>
 80205a2:	1c43      	adds	r3, r0, #1
 80205a4:	d102      	bne.n	80205ac <_fstat_r+0x1c>
 80205a6:	682b      	ldr	r3, [r5, #0]
 80205a8:	b103      	cbz	r3, 80205ac <_fstat_r+0x1c>
 80205aa:	6023      	str	r3, [r4, #0]
 80205ac:	bd38      	pop	{r3, r4, r5, pc}
 80205ae:	bf00      	nop
 80205b0:	2000ff58 	.word	0x2000ff58

080205b4 <_isatty_r>:
 80205b4:	b538      	push	{r3, r4, r5, lr}
 80205b6:	4d06      	ldr	r5, [pc, #24]	@ (80205d0 <_isatty_r+0x1c>)
 80205b8:	2300      	movs	r3, #0
 80205ba:	4604      	mov	r4, r0
 80205bc:	4608      	mov	r0, r1
 80205be:	602b      	str	r3, [r5, #0]
 80205c0:	f7e2 f988 	bl	80028d4 <_isatty>
 80205c4:	1c43      	adds	r3, r0, #1
 80205c6:	d102      	bne.n	80205ce <_isatty_r+0x1a>
 80205c8:	682b      	ldr	r3, [r5, #0]
 80205ca:	b103      	cbz	r3, 80205ce <_isatty_r+0x1a>
 80205cc:	6023      	str	r3, [r4, #0]
 80205ce:	bd38      	pop	{r3, r4, r5, pc}
 80205d0:	2000ff58 	.word	0x2000ff58

080205d4 <_sbrk_r>:
 80205d4:	b538      	push	{r3, r4, r5, lr}
 80205d6:	4d06      	ldr	r5, [pc, #24]	@ (80205f0 <_sbrk_r+0x1c>)
 80205d8:	2300      	movs	r3, #0
 80205da:	4604      	mov	r4, r0
 80205dc:	4608      	mov	r0, r1
 80205de:	602b      	str	r3, [r5, #0]
 80205e0:	f7e2 f990 	bl	8002904 <_sbrk>
 80205e4:	1c43      	adds	r3, r0, #1
 80205e6:	d102      	bne.n	80205ee <_sbrk_r+0x1a>
 80205e8:	682b      	ldr	r3, [r5, #0]
 80205ea:	b103      	cbz	r3, 80205ee <_sbrk_r+0x1a>
 80205ec:	6023      	str	r3, [r4, #0]
 80205ee:	bd38      	pop	{r3, r4, r5, pc}
 80205f0:	2000ff58 	.word	0x2000ff58

080205f4 <abort>:
 80205f4:	b508      	push	{r3, lr}
 80205f6:	2006      	movs	r0, #6
 80205f8:	f000 f88c 	bl	8020714 <raise>
 80205fc:	2001      	movs	r0, #1
 80205fe:	f7e2 f909 	bl	8002814 <_exit>

08020602 <_calloc_r>:
 8020602:	b570      	push	{r4, r5, r6, lr}
 8020604:	fba1 5402 	umull	r5, r4, r1, r2
 8020608:	b93c      	cbnz	r4, 802061a <_calloc_r+0x18>
 802060a:	4629      	mov	r1, r5
 802060c:	f7fe fff8 	bl	801f600 <_malloc_r>
 8020610:	4606      	mov	r6, r0
 8020612:	b928      	cbnz	r0, 8020620 <_calloc_r+0x1e>
 8020614:	2600      	movs	r6, #0
 8020616:	4630      	mov	r0, r6
 8020618:	bd70      	pop	{r4, r5, r6, pc}
 802061a:	220c      	movs	r2, #12
 802061c:	6002      	str	r2, [r0, #0]
 802061e:	e7f9      	b.n	8020614 <_calloc_r+0x12>
 8020620:	462a      	mov	r2, r5
 8020622:	4621      	mov	r1, r4
 8020624:	f7fe f830 	bl	801e688 <memset>
 8020628:	e7f5      	b.n	8020616 <_calloc_r+0x14>

0802062a <__ascii_mbtowc>:
 802062a:	b082      	sub	sp, #8
 802062c:	b901      	cbnz	r1, 8020630 <__ascii_mbtowc+0x6>
 802062e:	a901      	add	r1, sp, #4
 8020630:	b142      	cbz	r2, 8020644 <__ascii_mbtowc+0x1a>
 8020632:	b14b      	cbz	r3, 8020648 <__ascii_mbtowc+0x1e>
 8020634:	7813      	ldrb	r3, [r2, #0]
 8020636:	600b      	str	r3, [r1, #0]
 8020638:	7812      	ldrb	r2, [r2, #0]
 802063a:	1e10      	subs	r0, r2, #0
 802063c:	bf18      	it	ne
 802063e:	2001      	movne	r0, #1
 8020640:	b002      	add	sp, #8
 8020642:	4770      	bx	lr
 8020644:	4610      	mov	r0, r2
 8020646:	e7fb      	b.n	8020640 <__ascii_mbtowc+0x16>
 8020648:	f06f 0001 	mvn.w	r0, #1
 802064c:	e7f8      	b.n	8020640 <__ascii_mbtowc+0x16>

0802064e <_realloc_r>:
 802064e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020652:	4680      	mov	r8, r0
 8020654:	4615      	mov	r5, r2
 8020656:	460c      	mov	r4, r1
 8020658:	b921      	cbnz	r1, 8020664 <_realloc_r+0x16>
 802065a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802065e:	4611      	mov	r1, r2
 8020660:	f7fe bfce 	b.w	801f600 <_malloc_r>
 8020664:	b92a      	cbnz	r2, 8020672 <_realloc_r+0x24>
 8020666:	f7fe ff57 	bl	801f518 <_free_r>
 802066a:	2400      	movs	r4, #0
 802066c:	4620      	mov	r0, r4
 802066e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020672:	f000 f86b 	bl	802074c <_malloc_usable_size_r>
 8020676:	4285      	cmp	r5, r0
 8020678:	4606      	mov	r6, r0
 802067a:	d802      	bhi.n	8020682 <_realloc_r+0x34>
 802067c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8020680:	d8f4      	bhi.n	802066c <_realloc_r+0x1e>
 8020682:	4629      	mov	r1, r5
 8020684:	4640      	mov	r0, r8
 8020686:	f7fe ffbb 	bl	801f600 <_malloc_r>
 802068a:	4607      	mov	r7, r0
 802068c:	2800      	cmp	r0, #0
 802068e:	d0ec      	beq.n	802066a <_realloc_r+0x1c>
 8020690:	42b5      	cmp	r5, r6
 8020692:	462a      	mov	r2, r5
 8020694:	4621      	mov	r1, r4
 8020696:	bf28      	it	cs
 8020698:	4632      	movcs	r2, r6
 802069a:	f7fe f8c4 	bl	801e826 <memcpy>
 802069e:	4621      	mov	r1, r4
 80206a0:	4640      	mov	r0, r8
 80206a2:	f7fe ff39 	bl	801f518 <_free_r>
 80206a6:	463c      	mov	r4, r7
 80206a8:	e7e0      	b.n	802066c <_realloc_r+0x1e>

080206aa <__ascii_wctomb>:
 80206aa:	4603      	mov	r3, r0
 80206ac:	4608      	mov	r0, r1
 80206ae:	b141      	cbz	r1, 80206c2 <__ascii_wctomb+0x18>
 80206b0:	2aff      	cmp	r2, #255	@ 0xff
 80206b2:	d904      	bls.n	80206be <__ascii_wctomb+0x14>
 80206b4:	228a      	movs	r2, #138	@ 0x8a
 80206b6:	601a      	str	r2, [r3, #0]
 80206b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80206bc:	4770      	bx	lr
 80206be:	700a      	strb	r2, [r1, #0]
 80206c0:	2001      	movs	r0, #1
 80206c2:	4770      	bx	lr

080206c4 <_raise_r>:
 80206c4:	291f      	cmp	r1, #31
 80206c6:	b538      	push	{r3, r4, r5, lr}
 80206c8:	4605      	mov	r5, r0
 80206ca:	460c      	mov	r4, r1
 80206cc:	d904      	bls.n	80206d8 <_raise_r+0x14>
 80206ce:	2316      	movs	r3, #22
 80206d0:	6003      	str	r3, [r0, #0]
 80206d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80206d6:	bd38      	pop	{r3, r4, r5, pc}
 80206d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80206da:	b112      	cbz	r2, 80206e2 <_raise_r+0x1e>
 80206dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80206e0:	b94b      	cbnz	r3, 80206f6 <_raise_r+0x32>
 80206e2:	4628      	mov	r0, r5
 80206e4:	f000 f830 	bl	8020748 <_getpid_r>
 80206e8:	4622      	mov	r2, r4
 80206ea:	4601      	mov	r1, r0
 80206ec:	4628      	mov	r0, r5
 80206ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80206f2:	f000 b817 	b.w	8020724 <_kill_r>
 80206f6:	2b01      	cmp	r3, #1
 80206f8:	d00a      	beq.n	8020710 <_raise_r+0x4c>
 80206fa:	1c59      	adds	r1, r3, #1
 80206fc:	d103      	bne.n	8020706 <_raise_r+0x42>
 80206fe:	2316      	movs	r3, #22
 8020700:	6003      	str	r3, [r0, #0]
 8020702:	2001      	movs	r0, #1
 8020704:	e7e7      	b.n	80206d6 <_raise_r+0x12>
 8020706:	2100      	movs	r1, #0
 8020708:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802070c:	4620      	mov	r0, r4
 802070e:	4798      	blx	r3
 8020710:	2000      	movs	r0, #0
 8020712:	e7e0      	b.n	80206d6 <_raise_r+0x12>

08020714 <raise>:
 8020714:	4b02      	ldr	r3, [pc, #8]	@ (8020720 <raise+0xc>)
 8020716:	4601      	mov	r1, r0
 8020718:	6818      	ldr	r0, [r3, #0]
 802071a:	f7ff bfd3 	b.w	80206c4 <_raise_r>
 802071e:	bf00      	nop
 8020720:	2000003c 	.word	0x2000003c

08020724 <_kill_r>:
 8020724:	b538      	push	{r3, r4, r5, lr}
 8020726:	4d07      	ldr	r5, [pc, #28]	@ (8020744 <_kill_r+0x20>)
 8020728:	2300      	movs	r3, #0
 802072a:	4604      	mov	r4, r0
 802072c:	4608      	mov	r0, r1
 802072e:	4611      	mov	r1, r2
 8020730:	602b      	str	r3, [r5, #0]
 8020732:	f7e2 f85d 	bl	80027f0 <_kill>
 8020736:	1c43      	adds	r3, r0, #1
 8020738:	d102      	bne.n	8020740 <_kill_r+0x1c>
 802073a:	682b      	ldr	r3, [r5, #0]
 802073c:	b103      	cbz	r3, 8020740 <_kill_r+0x1c>
 802073e:	6023      	str	r3, [r4, #0]
 8020740:	bd38      	pop	{r3, r4, r5, pc}
 8020742:	bf00      	nop
 8020744:	2000ff58 	.word	0x2000ff58

08020748 <_getpid_r>:
 8020748:	f7e2 b84a 	b.w	80027e0 <_getpid>

0802074c <_malloc_usable_size_r>:
 802074c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020750:	1f18      	subs	r0, r3, #4
 8020752:	2b00      	cmp	r3, #0
 8020754:	bfbc      	itt	lt
 8020756:	580b      	ldrlt	r3, [r1, r0]
 8020758:	18c0      	addlt	r0, r0, r3
 802075a:	4770      	bx	lr

0802075c <_init>:
 802075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802075e:	bf00      	nop
 8020760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020762:	bc08      	pop	{r3}
 8020764:	469e      	mov	lr, r3
 8020766:	4770      	bx	lr

08020768 <_fini>:
 8020768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802076a:	bf00      	nop
 802076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802076e:	bc08      	pop	{r3}
 8020770:	469e      	mov	lr, r3
 8020772:	4770      	bx	lr
